/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameters of a manually injected application.
 */
@ApiModel(description = "Parameters of a manually injected application.")
@JsonPropertyOrder({
  ManualApplication.JSON_PROPERTY_APPLICATION_ID,
  ManualApplication.JSON_PROPERTY_DISPLAY_NAME,
  ManualApplication.JSON_PROPERTY_MONITORING_ENABLED,
  ManualApplication.JSON_PROPERTY_REVISION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class ManualApplication {
  public static final String JSON_PROPERTY_APPLICATION_ID = "applicationId";
  private String applicationId;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_MONITORING_ENABLED = "monitoringEnabled";
  private Boolean monitoringEnabled;

  public static final String JSON_PROPERTY_REVISION = "revision";
  private String revision;

  public ManualApplication() { 
  }

  public ManualApplication applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

   /**
   * The Dynatrace entity ID of the application.
   * @return applicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Dynatrace entity ID of the application.")
  @JsonProperty(JSON_PROPERTY_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApplicationId() {
    return applicationId;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public ManualApplication displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the application.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the application.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ManualApplication monitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
    return this;
  }

   /**
   * Monitoring is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return monitoringEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Monitoring is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_MONITORING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMonitoringEnabled() {
    return monitoringEnabled;
  }


  @JsonProperty(JSON_PROPERTY_MONITORING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
  }


  public ManualApplication revision(String revision) {
    this.revision = revision;
    return this;
  }

   /**
   * The application settings revision.
   * @return revision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The application settings revision.")
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(String revision) {
    this.revision = revision;
  }


  /**
   * Return true if this ManualApplication object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualApplication manualApplication = (ManualApplication) o;
    return Objects.equals(this.applicationId, manualApplication.applicationId) &&
        Objects.equals(this.displayName, manualApplication.displayName) &&
        Objects.equals(this.monitoringEnabled, manualApplication.monitoringEnabled) &&
        Objects.equals(this.revision, manualApplication.revision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, displayName, monitoringEnabled, revision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualApplication {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    monitoringEnabled: ").append(toIndentedString(monitoringEnabled)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

