/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ErrorEnvelope;
import com.dynatrace.apis.envv1.model.ExtractFields;
import com.dynatrace.apis.envv1.model.FilterLogContent;
import com.dynatrace.apis.envv1.model.FilterTopLogRecords;
import com.dynatrace.apis.envv1.model.LogJobDeleteResult;
import com.dynatrace.apis.envv1.model.LogJobRecordsResult;
import com.dynatrace.apis.envv1.model.LogJobRecordsTopValuesRestResult;
import com.dynatrace.apis.envv1.model.LogJobStatusResult;
import com.dynatrace.apis.envv1.model.LogListForCustomDeviceResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class LogMonitoringCustomDevicesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public LogMonitoringCustomDevicesApi() {
    this(new ApiClient());
  }

  public LogMonitoringCustomDevicesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Deletes or cancels the specified log analysis job
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @return LogJobDeleteResult
   * @throws ApiException if fails to make API call
   */
  public LogJobDeleteResult customDeviceLogJobDelete(String customDeviceId, String jobId) throws ApiException {
    ApiResponse<LogJobDeleteResult> localVarResponse = customDeviceLogJobDeleteWithHttpInfo(customDeviceId, jobId);
    return localVarResponse.getData();
  }

  /**
   * Deletes or cancels the specified log analysis job
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @return ApiResponse&lt;LogJobDeleteResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobDeleteResult> customDeviceLogJobDeleteWithHttpInfo(String customDeviceId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobDeleteRequestBuilder(customDeviceId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobDelete", localVarResponse);
        }
        return new ApiResponse<LogJobDeleteResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobDeleteResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobDeleteRequestBuilder(String customDeviceId, String jobId) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobDelete");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling customDeviceLogJobDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @return LogJobRecordsResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsResult customDeviceLogJobRecords(String customDeviceId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    ApiResponse<LogJobRecordsResult> localVarResponse = customDeviceLogJobRecordsWithHttpInfo(customDeviceId, jobId, scrollToken, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @return ApiResponse&lt;LogJobRecordsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsResult> customDeviceLogJobRecordsWithHttpInfo(String customDeviceId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobRecordsRequestBuilder(customDeviceId, jobId, scrollToken, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobRecords", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobRecordsRequestBuilder(String customDeviceId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobRecords");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling customDeviceLogJobRecords");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scrollToken", scrollToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the filtered content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @param filterLogContent Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return LogJobRecordsResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsResult customDeviceLogJobRecordsFiltered(String customDeviceId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    ApiResponse<LogJobRecordsResult> localVarResponse = customDeviceLogJobRecordsFilteredWithHttpInfo(customDeviceId, jobId, scrollToken, pageSize, filterLogContent);
    return localVarResponse.getData();
  }

  /**
   * Gets the filtered content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @param filterLogContent Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return ApiResponse&lt;LogJobRecordsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsResult> customDeviceLogJobRecordsFilteredWithHttpInfo(String customDeviceId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobRecordsFilteredRequestBuilder(customDeviceId, jobId, scrollToken, pageSize, filterLogContent);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobRecordsFiltered", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobRecordsFilteredRequestBuilder(String customDeviceId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobRecordsFiltered");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling customDeviceLogJobRecordsFiltered");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scrollToken", scrollToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(filterLogContent);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the top values of fields present in the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param filterTopLogRecords Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return LogJobRecordsTopValuesRestResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsTopValuesRestResult customDeviceLogJobRecordsTop(String customDeviceId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    ApiResponse<LogJobRecordsTopValuesRestResult> localVarResponse = customDeviceLogJobRecordsTopWithHttpInfo(customDeviceId, jobId, filterTopLogRecords);
    return localVarResponse.getData();
  }

  /**
   * Gets the top values of fields present in the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @param filterTopLogRecords Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return ApiResponse&lt;LogJobRecordsTopValuesRestResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsTopValuesRestResult> customDeviceLogJobRecordsTopWithHttpInfo(String customDeviceId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobRecordsTopRequestBuilder(customDeviceId, jobId, filterTopLogRecords);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobRecordsTop", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsTopValuesRestResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsTopValuesRestResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobRecordsTopRequestBuilder(String customDeviceId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobRecordsTop");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling customDeviceLogJobRecordsTop");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}/records/top"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(filterTopLogRecords);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Starts the analysis job for the specified custom device log
   * The response returns the ID of the job.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param logPath The full pathname of the log. (required)
   * @param query Narrows down the scope of the analysis to the entries, matching the specified criteria.   The criteria must use the [text pattern query syntax](https://dt-url.net/vv83rhp). (optional)
   * @param startTimestamp The start timestamp of the analysis range, in UTC milliseconds.    If not set, then 2 hours behind from current timestamp is used. (optional)
   * @param endTimestamp The end timestamp of the analysis range, in UTC milliseconds.    If not set, then the current timestamp is used. (optional)
   * @param extractFields Extract fields from the log content to form custom columns.    See [Search patterns in log data and parse results](https://dt-url.net/vv83rhp) in Dynatrace Documentation for the syntax definition and examples.   The special characters must be escaped. (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String customDeviceLogJobStart(String customDeviceId, String logPath, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    ApiResponse<String> localVarResponse = customDeviceLogJobStartWithHttpInfo(customDeviceId, logPath, query, startTimestamp, endTimestamp, extractFields);
    return localVarResponse.getData();
  }

  /**
   * Starts the analysis job for the specified custom device log
   * The response returns the ID of the job.
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param logPath The full pathname of the log. (required)
   * @param query Narrows down the scope of the analysis to the entries, matching the specified criteria.   The criteria must use the [text pattern query syntax](https://dt-url.net/vv83rhp). (optional)
   * @param startTimestamp The start timestamp of the analysis range, in UTC milliseconds.    If not set, then 2 hours behind from current timestamp is used. (optional)
   * @param endTimestamp The end timestamp of the analysis range, in UTC milliseconds.    If not set, then the current timestamp is used. (optional)
   * @param extractFields Extract fields from the log content to form custom columns.    See [Search patterns in log data and parse results](https://dt-url.net/vv83rhp) in Dynatrace Documentation for the syntax definition and examples.   The special characters must be escaped. (optional)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> customDeviceLogJobStartWithHttpInfo(String customDeviceId, String logPath, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobStartRequestBuilder(customDeviceId, logPath, query, startTimestamp, endTimestamp, extractFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobStart", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobStartRequestBuilder(String customDeviceId, String logPath, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobStart");
    }
    // verify the required parameter 'logPath' is set
    if (logPath == null) {
      throw new ApiException(400, "Missing the required parameter 'logPath' when calling customDeviceLogJobStart");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/{logPath}"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{logPath}", ApiClient.urlEncode(logPath.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extractFields);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets status of the specified log analysis job
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @return LogJobStatusResult
   * @throws ApiException if fails to make API call
   */
  public LogJobStatusResult customDeviceLogJobStatus(String customDeviceId, String jobId) throws ApiException {
    ApiResponse<LogJobStatusResult> localVarResponse = customDeviceLogJobStatusWithHttpInfo(customDeviceId, jobId);
    return localVarResponse.getData();
  }

  /**
   * Gets status of the specified log analysis job
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/kzi3rb8) request. (required)
   * @return ApiResponse&lt;LogJobStatusResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobStatusResult> customDeviceLogJobStatusWithHttpInfo(String customDeviceId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogJobStatusRequestBuilder(customDeviceId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogJobStatus", localVarResponse);
        }
        return new ApiResponse<LogJobStatusResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobStatusResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogJobStatusRequestBuilder(String customDeviceId, String jobId) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogJobStatus");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling customDeviceLogJobStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs/jobs/{jobId}"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the available logs on the specified custom device
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @return LogListForCustomDeviceResult
   * @throws ApiException if fails to make API call
   */
  public LogListForCustomDeviceResult customDeviceLogList(String customDeviceId) throws ApiException {
    ApiResponse<LogListForCustomDeviceResult> localVarResponse = customDeviceLogListWithHttpInfo(customDeviceId);
    return localVarResponse.getData();
  }

  /**
   * Lists all the available logs on the specified custom device
   * 
   * @param customDeviceId The Dynatrace entity ID of the required custom device. (required)
   * @return ApiResponse&lt;LogListForCustomDeviceResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogListForCustomDeviceResult> customDeviceLogListWithHttpInfo(String customDeviceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = customDeviceLogListRequestBuilder(customDeviceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("customDeviceLogList", localVarResponse);
        }
        return new ApiResponse<LogListForCustomDeviceResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogListForCustomDeviceResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder customDeviceLogListRequestBuilder(String customDeviceId) throws ApiException {
    // verify the required parameter 'customDeviceId' is set
    if (customDeviceId == null) {
      throw new ApiException(400, "Missing the required parameter 'customDeviceId' when calling customDeviceLogList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/custom-devices/{customDeviceId}/logs"
        .replace("{customDeviceId}", ApiClient.urlEncode(customDeviceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
