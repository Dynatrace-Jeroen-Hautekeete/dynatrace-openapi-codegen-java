/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ErrorEnvelope;
import com.dynatrace.apis.envv1.model.Service;
import com.dynatrace.apis.envv1.model.ServiceBaselineValues;
import java.util.Set;
import com.dynatrace.apis.envv1.model.UpdateEntity;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class TopologySmartscapeServiceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TopologySmartscapeServiceApi() {
    this(new ApiClient());
  }

  public TopologySmartscapeServiceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets baseline data for the specified service | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param meIdentifier The Dynatrace entity ID of the required service. (required)
   * @return ServiceBaselineValues
   * @throws ApiException if fails to make API call
   */
  public ServiceBaselineValues getBaselineValuesForSingleService(String meIdentifier) throws ApiException {
    ApiResponse<ServiceBaselineValues> localVarResponse = getBaselineValuesForSingleServiceWithHttpInfo(meIdentifier);
    return localVarResponse.getData();
  }

  /**
   * Gets baseline data for the specified service | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param meIdentifier The Dynatrace entity ID of the required service. (required)
   * @return ApiResponse&lt;ServiceBaselineValues&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceBaselineValues> getBaselineValuesForSingleServiceWithHttpInfo(String meIdentifier) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBaselineValuesForSingleServiceRequestBuilder(meIdentifier);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBaselineValuesForSingleService", localVarResponse);
        }
        return new ApiResponse<ServiceBaselineValues>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceBaselineValues>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBaselineValuesForSingleServiceRequestBuilder(String meIdentifier) throws ApiException {
    // verify the required parameter 'meIdentifier' is set
    if (meIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'meIdentifier' when calling getBaselineValuesForSingleService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/services/{meIdentifier}/baseline"
        .replace("{meIdentifier}", ApiClient.urlEncode(meIdentifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available services in your environment
   * You can narrow down the output by specifying filtering parameters for the request.   You can additionally limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Then use the URL-encoded cursor from the **Next-Page-Key** response header in the **nextPageKey** query parameter to obtain subsequent pages.
   * @param startTimestamp The start timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then 72 hours behind from now is used. (optional)
   * @param endTimestamp The end timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then the current timestamp is used.   The timeframe must not exceed 3 days. (optional)
   * @param relativeTime The relative timeframe, back from now. (optional)
   * @param tag Filters the resulting set of services by the specified tag. You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The service has to match **all** the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags, use the following format: &#x60;tag&#x3D;[context]key:value&#x60;. For custom key-value tags, omit the context: &#x60;tag&#x3D;key:value&#x60;. (optional
   * @param entity Filters result to the specified services only.    To specify several services use the following format: &#x60;entity&#x3D;ID1&amp;entity&#x3D;ID2&#x60;. (optional
   * @param managementZone Only return services that are part of the specified management zone. (optional)
   * @param includeDetails Includes (&#x60;true&#x60;) or excludes (&#x60;false&#x60;) details which are queried from related entities.  Excluding details may make queries faster.   If not set, then &#x60;true&#x60; is used. (optional, default to true)
   * @param pageSize The number of services per result page.    If not set, pagination is not used and the result contains all services fitting the specified filtering criteria. (optional)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **Next-Page-Key** header of the previous response.   If you&#39;re using pagination, the first page is always returned without this cursor.   You must keep all other query parameters as they were in the first request to obtain subsequent pages. (optional)
   * @return List&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Service> getServices(Long startTimestamp, Long endTimestamp, String relativeTime, Set<String> tag, Set<String> entity, Long managementZone, Boolean includeDetails, Integer pageSize, String nextPageKey) throws ApiException {
    ApiResponse<List<Service>> localVarResponse = getServicesWithHttpInfo(startTimestamp, endTimestamp, relativeTime, tag, entity, managementZone, includeDetails, pageSize, nextPageKey);
    return localVarResponse.getData();
  }

  /**
   * Lists all available services in your environment
   * You can narrow down the output by specifying filtering parameters for the request.   You can additionally limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Then use the URL-encoded cursor from the **Next-Page-Key** response header in the **nextPageKey** query parameter to obtain subsequent pages.
   * @param startTimestamp The start timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then 72 hours behind from now is used. (optional)
   * @param endTimestamp The end timestamp of the requested timeframe, in milliseconds (UTC).   If not set, then the current timestamp is used.   The timeframe must not exceed 3 days. (optional)
   * @param relativeTime The relative timeframe, back from now. (optional)
   * @param tag Filters the resulting set of services by the specified tag. You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The service has to match **all** the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags, use the following format: &#x60;tag&#x3D;[context]key:value&#x60;. For custom key-value tags, omit the context: &#x60;tag&#x3D;key:value&#x60;. (optional
   * @param entity Filters result to the specified services only.    To specify several services use the following format: &#x60;entity&#x3D;ID1&amp;entity&#x3D;ID2&#x60;. (optional
   * @param managementZone Only return services that are part of the specified management zone. (optional)
   * @param includeDetails Includes (&#x60;true&#x60;) or excludes (&#x60;false&#x60;) details which are queried from related entities.  Excluding details may make queries faster.   If not set, then &#x60;true&#x60; is used. (optional, default to true)
   * @param pageSize The number of services per result page.    If not set, pagination is not used and the result contains all services fitting the specified filtering criteria. (optional)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **Next-Page-Key** header of the previous response.   If you&#39;re using pagination, the first page is always returned without this cursor.   You must keep all other query parameters as they were in the first request to obtain subsequent pages. (optional)
   * @return ApiResponse&lt;List&lt;Service&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<Service>> getServicesWithHttpInfo(Long startTimestamp, Long endTimestamp, String relativeTime, Set<String> tag, Set<String> entity, Long managementZone, Boolean includeDetails, Integer pageSize, String nextPageKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getServicesRequestBuilder(startTimestamp, endTimestamp, relativeTime, tag, entity, managementZone, includeDetails, pageSize, nextPageKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getServices", localVarResponse);
        }
        return new ApiResponse<List<Service>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<Service>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getServicesRequestBuilder(Long startTimestamp, Long endTimestamp, String relativeTime, Set<String> tag, Set<String> entity, Long managementZone, Boolean includeDetails, Integer pageSize, String nextPageKey) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/services";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("relativeTime", relativeTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "entity", entity));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("managementZone", managementZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeDetails", includeDetails));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets parameters of the specified service
   * 
   * @param meIdentifier The Dynatrace entity ID of the required service. (required)
   * @return Service
   * @throws ApiException if fails to make API call
   */
  public Service getSingleService(String meIdentifier) throws ApiException {
    ApiResponse<Service> localVarResponse = getSingleServiceWithHttpInfo(meIdentifier);
    return localVarResponse.getData();
  }

  /**
   * Gets parameters of the specified service
   * 
   * @param meIdentifier The Dynatrace entity ID of the required service. (required)
   * @return ApiResponse&lt;Service&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Service> getSingleServiceWithHttpInfo(String meIdentifier) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSingleServiceRequestBuilder(meIdentifier);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSingleService", localVarResponse);
        }
        return new ApiResponse<Service>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Service>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSingleServiceRequestBuilder(String meIdentifier) throws ApiException {
    // verify the required parameter 'meIdentifier' is set
    if (meIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'meIdentifier' when calling getSingleService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/services/{meIdentifier}"
        .replace("{meIdentifier}", ApiClient.urlEncode(meIdentifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates parameters of the specified service
   * 
   * @param meIdentifier The Dynatrace entity ID of the service you&#39;re inquiring. (required)
   * @param updateEntity  (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateService(String meIdentifier, UpdateEntity updateEntity) throws ApiException {
    updateServiceWithHttpInfo(meIdentifier, updateEntity);
  }

  /**
   * Updates parameters of the specified service
   * 
   * @param meIdentifier The Dynatrace entity ID of the service you&#39;re inquiring. (required)
   * @param updateEntity  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateServiceWithHttpInfo(String meIdentifier, UpdateEntity updateEntity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateServiceRequestBuilder(meIdentifier, updateEntity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateService", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateServiceRequestBuilder(String meIdentifier, UpdateEntity updateEntity) throws ApiException {
    // verify the required parameter 'meIdentifier' is set
    if (meIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'meIdentifier' when calling updateService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/services/{meIdentifier}"
        .replace("{meIdentifier}", ApiClient.urlEncode(meIdentifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateEntity);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
