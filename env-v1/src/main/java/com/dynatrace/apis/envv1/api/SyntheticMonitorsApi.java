/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.EntityIdDto;
import com.dynatrace.apis.envv1.model.Monitors;
import java.util.Set;
import com.dynatrace.apis.envv1.model.SyntheticMonitor;
import com.dynatrace.apis.envv1.model.SyntheticMonitorUpdate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class SyntheticMonitorsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SyntheticMonitorsApi() {
    this(new ApiClient());
  }

  public SyntheticMonitorsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new synthetic monitor
   * 
   * @param syntheticMonitorUpdate The JSON body of the request, containing parameters of the new synthetic monitor. (optional)
   * @return EntityIdDto
   * @throws ApiException if fails to make API call
   */
  public EntityIdDto addMonitor(SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {
    ApiResponse<EntityIdDto> localVarResponse = addMonitorWithHttpInfo(syntheticMonitorUpdate);
    return localVarResponse.getData();
  }

  /**
   * Creates a new synthetic monitor
   * 
   * @param syntheticMonitorUpdate The JSON body of the request, containing parameters of the new synthetic monitor. (optional)
   * @return ApiResponse&lt;EntityIdDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityIdDto> addMonitorWithHttpInfo(SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addMonitorRequestBuilder(syntheticMonitorUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addMonitor", localVarResponse);
        }
        return new ApiResponse<EntityIdDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityIdDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addMonitorRequestBuilder(SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/synthetic/monitors";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(syntheticMonitorUpdate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified synthetic monitor
   * 
   * @param monitorId The ID of the synthetic monitor to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteMonitor(String monitorId) throws ApiException {
    deleteMonitorWithHttpInfo(monitorId);
  }

  /**
   * Deletes the specified synthetic monitor
   * 
   * @param monitorId The ID of the synthetic monitor to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteMonitorWithHttpInfo(String monitorId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteMonitorRequestBuilder(monitorId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteMonitor", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteMonitorRequestBuilder(String monitorId) throws ApiException {
    // verify the required parameter 'monitorId' is set
    if (monitorId == null) {
      throw new ApiException(400, "Missing the required parameter 'monitorId' when calling deleteMonitor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/synthetic/monitors/{monitorId}"
        .replace("{monitorId}", ApiClient.urlEncode(monitorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets parameters of the specified synthetic monitor
   * 
   * @param monitorId The ID of the required synthetic monitor (required)
   * @return SyntheticMonitor
   * @throws ApiException if fails to make API call
   */
  public SyntheticMonitor getMonitor(String monitorId) throws ApiException {
    ApiResponse<SyntheticMonitor> localVarResponse = getMonitorWithHttpInfo(monitorId);
    return localVarResponse.getData();
  }

  /**
   * Gets parameters of the specified synthetic monitor
   * 
   * @param monitorId The ID of the required synthetic monitor (required)
   * @return ApiResponse&lt;SyntheticMonitor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SyntheticMonitor> getMonitorWithHttpInfo(String monitorId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMonitorRequestBuilder(monitorId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMonitor", localVarResponse);
        }
        return new ApiResponse<SyntheticMonitor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SyntheticMonitor>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMonitorRequestBuilder(String monitorId) throws ApiException {
    // verify the required parameter 'monitorId' is set
    if (monitorId == null) {
      throw new ApiException(400, "Missing the required parameter 'monitorId' when calling getMonitor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/synthetic/monitors/{monitorId}"
        .replace("{monitorId}", ApiClient.urlEncode(monitorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all synthetic monitors in your Dynatrace environment
   * The full list can be lengthy, but you can narrow it down by specifying filter query parameters.
   * @param managementZone Filters the resulting set of monitors to those which are part of the specified management zone.    Specify the ID of the management zone here. (optional)
   * @param tag Filters the resulting set of monitors by specified tags.   You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The monitor has to match **all** the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags use following format: &#x60;[context]key:value&#x60;. (optional
   * @param location Filters the resulting set of monitors to those assigned to a specified Synthetic location.     Specify the ID of the location here. (optional)
   * @param assignedApps Filters the resulting set of monitors to those assigned to the specified applications.   You can specify several applications in the following format: &#x60;assignedApps&#x3D;app1&amp;assignedApps&#x3D;app2&#x60;. The monitor has to have **all** the specified applications assigned.   Specify Dynatrace entity IDs of applications here. (optional
   * @param type Filters the resulting set of monitors to those of the specified type: &#x60;BROWSER&#x60; or &#x60;HTTP&#x60;. (optional)
   * @param enabled Filters the resulting set of monitors to those which are enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;). (optional)
   * @param credentialId Filters the resulting set of monitors to those using the specified credential set.   Specify the ID of the credentials set here. (optional)
   * @param credentialOwner Filters the resulting set of monitors to those using a credential owned by the specified user. (optional)
   * @return Monitors
   * @throws ApiException if fails to make API call
   */
  public Monitors getMonitorsCollection(Long managementZone, Set<String> tag, String location, Set<String> assignedApps, String type, Boolean enabled, String credentialId, String credentialOwner) throws ApiException {
    ApiResponse<Monitors> localVarResponse = getMonitorsCollectionWithHttpInfo(managementZone, tag, location, assignedApps, type, enabled, credentialId, credentialOwner);
    return localVarResponse.getData();
  }

  /**
   * Lists all synthetic monitors in your Dynatrace environment
   * The full list can be lengthy, but you can narrow it down by specifying filter query parameters.
   * @param managementZone Filters the resulting set of monitors to those which are part of the specified management zone.    Specify the ID of the management zone here. (optional)
   * @param tag Filters the resulting set of monitors by specified tags.   You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The monitor has to match **all** the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags use following format: &#x60;[context]key:value&#x60;. (optional
   * @param location Filters the resulting set of monitors to those assigned to a specified Synthetic location.     Specify the ID of the location here. (optional)
   * @param assignedApps Filters the resulting set of monitors to those assigned to the specified applications.   You can specify several applications in the following format: &#x60;assignedApps&#x3D;app1&amp;assignedApps&#x3D;app2&#x60;. The monitor has to have **all** the specified applications assigned.   Specify Dynatrace entity IDs of applications here. (optional
   * @param type Filters the resulting set of monitors to those of the specified type: &#x60;BROWSER&#x60; or &#x60;HTTP&#x60;. (optional)
   * @param enabled Filters the resulting set of monitors to those which are enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;). (optional)
   * @param credentialId Filters the resulting set of monitors to those using the specified credential set.   Specify the ID of the credentials set here. (optional)
   * @param credentialOwner Filters the resulting set of monitors to those using a credential owned by the specified user. (optional)
   * @return ApiResponse&lt;Monitors&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Monitors> getMonitorsCollectionWithHttpInfo(Long managementZone, Set<String> tag, String location, Set<String> assignedApps, String type, Boolean enabled, String credentialId, String credentialOwner) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMonitorsCollectionRequestBuilder(managementZone, tag, location, assignedApps, type, enabled, credentialId, credentialOwner);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMonitorsCollection", localVarResponse);
        }
        return new ApiResponse<Monitors>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Monitors>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMonitorsCollectionRequestBuilder(Long managementZone, Set<String> tag, String location, Set<String> assignedApps, String type, Boolean enabled, String credentialId, String credentialOwner) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/synthetic/monitors";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("managementZone", managementZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location", location));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "assignedApps", assignedApps));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("credentialId", credentialId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("credentialOwner", credentialOwner));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates parameters of the specified synthetic monitor
   * 
   * @param monitorId The ID of the synthetic monitor to be updated. (required)
   * @param syntheticMonitorUpdate  (optional)
   * @throws ApiException if fails to make API call
   */
  public void replaceMonitor(String monitorId, SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {
    replaceMonitorWithHttpInfo(monitorId, syntheticMonitorUpdate);
  }

  /**
   * Updates parameters of the specified synthetic monitor
   * 
   * @param monitorId The ID of the synthetic monitor to be updated. (required)
   * @param syntheticMonitorUpdate  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> replaceMonitorWithHttpInfo(String monitorId, SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = replaceMonitorRequestBuilder(monitorId, syntheticMonitorUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("replaceMonitor", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder replaceMonitorRequestBuilder(String monitorId, SyntheticMonitorUpdate syntheticMonitorUpdate) throws ApiException {
    // verify the required parameter 'monitorId' is set
    if (monitorId == null) {
      throw new ApiException(400, "Missing the required parameter 'monitorId' when calling replaceMonitor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/synthetic/monitors/{monitorId}"
        .replace("{monitorId}", ApiClient.urlEncode(monitorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(syntheticMonitorUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
