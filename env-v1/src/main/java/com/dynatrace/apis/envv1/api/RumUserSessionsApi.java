/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.DtaqlResultAsTable;
import com.dynatrace.apis.envv1.model.DtaqlResultAsTree;
import com.dynatrace.apis.envv1.model.UserSession;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class RumUserSessionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RumUserSessionsApi() {
    this(new ApiClient());
  }

  public RumUserSessionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Returns the result of the query as a table structure
   * The result is a flat list of rows containing the requested columns.
   * @param query The user session query to be executed. See [USQL documentation page](https://dt-url.net/dtusql) for syntax details.    You can find the available columns of the **usersession** table in the &#x60;UserSession&#x60; object.    Here is an example of the query: &#x60;SELECT country, city, COUNT(*) FROM usersession GROUP BY country, city&#x60;. (required)
   * @param startTimestamp The start timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, 2 hours behind the current time is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param endTimestamp The end timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, the current timestamp is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param offsetUTC Optional offset of local time to UTC time in minutes. Offset will be applied to Date fields encountered in the query.   Can be positive or negative. E.g. if the local time is UTC+02:00, the timeOffset is 120. If it is UTC-05:00, timeOffset is -300. (optional)
   * @param pageSize Optional limit on how many of the actual query results should be returned in the tabular result. (optional)
   * @param pageOffset Optional offset of the requested results from the start of tabular results. Relates to pageSize.   E.g. on a query that might return 500 results, you might want to receive results in chunks of 50 rows.   this can be achieved by using pageSize&#x3D;50, and setting pageOffset in subsequent calls.In the example adding pageOffset&#x3D;50 returns result rows 51-100. (optional)
   * @param addDeepLinkFields Add (&#x60;true&#x60;) to enable deep linking of additional fields in the query.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @param explain Add (&#x60;true&#x60;) or don&#39;t add (&#x60;false&#x60;) some additional information about the result to the response.   It helps to understand the query and how the result was calculated.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @return DtaqlResultAsTable
   * @throws ApiException if fails to make API call
   */
  public DtaqlResultAsTable getDTAQLResultAsTable(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Integer pageSize, Integer pageOffset, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    ApiResponse<DtaqlResultAsTable> localVarResponse = getDTAQLResultAsTableWithHttpInfo(query, startTimestamp, endTimestamp, offsetUTC, pageSize, pageOffset, addDeepLinkFields, explain);
    return localVarResponse.getData();
  }

  /**
   * Returns the result of the query as a table structure
   * The result is a flat list of rows containing the requested columns.
   * @param query The user session query to be executed. See [USQL documentation page](https://dt-url.net/dtusql) for syntax details.    You can find the available columns of the **usersession** table in the &#x60;UserSession&#x60; object.    Here is an example of the query: &#x60;SELECT country, city, COUNT(*) FROM usersession GROUP BY country, city&#x60;. (required)
   * @param startTimestamp The start timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, 2 hours behind the current time is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param endTimestamp The end timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, the current timestamp is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param offsetUTC Optional offset of local time to UTC time in minutes. Offset will be applied to Date fields encountered in the query.   Can be positive or negative. E.g. if the local time is UTC+02:00, the timeOffset is 120. If it is UTC-05:00, timeOffset is -300. (optional)
   * @param pageSize Optional limit on how many of the actual query results should be returned in the tabular result. (optional)
   * @param pageOffset Optional offset of the requested results from the start of tabular results. Relates to pageSize.   E.g. on a query that might return 500 results, you might want to receive results in chunks of 50 rows.   this can be achieved by using pageSize&#x3D;50, and setting pageOffset in subsequent calls.In the example adding pageOffset&#x3D;50 returns result rows 51-100. (optional)
   * @param addDeepLinkFields Add (&#x60;true&#x60;) to enable deep linking of additional fields in the query.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @param explain Add (&#x60;true&#x60;) or don&#39;t add (&#x60;false&#x60;) some additional information about the result to the response.   It helps to understand the query and how the result was calculated.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @return ApiResponse&lt;DtaqlResultAsTable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DtaqlResultAsTable> getDTAQLResultAsTableWithHttpInfo(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Integer pageSize, Integer pageOffset, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDTAQLResultAsTableRequestBuilder(query, startTimestamp, endTimestamp, offsetUTC, pageSize, pageOffset, addDeepLinkFields, explain);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDTAQLResultAsTable", localVarResponse);
        }
        return new ApiResponse<DtaqlResultAsTable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DtaqlResultAsTable>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDTAQLResultAsTableRequestBuilder(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Integer pageSize, Integer pageOffset, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    // verify the required parameter 'query' is set
    if (query == null) {
      throw new ApiException(400, "Missing the required parameter 'query' when calling getDTAQLResultAsTable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/userSessionQueryLanguage/table";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offsetUTC", offsetUTC));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageOffset", pageOffset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("addDeepLinkFields", addDeepLinkFields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("explain", explain));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns the result of the query as a tree structure
   * To get a proper tree structure, you need to specify grouping in the query.
   * @param query The user session query to be executed. See [USQL documentation page](https://dt-url.net/dtusql) for syntax details.    You can find the available columns of the **usersession** table in the &#x60;UserSession&#x60; object.    Here is an example of the query: &#x60;SELECT country, city, COUNT(*) FROM usersession GROUP BY country, city&#x60;. (required)
   * @param startTimestamp The start timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, 2 hours behind the current time is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param endTimestamp The end timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, the current timestamp is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param offsetUTC Optional offset of local time to UTC time in minutes. Offset will be applied to Date fields encountered in the query.   Can be positive or negative. E.g. if the local time is UTC+02:00, the timeOffset is 120. If it is UTC-05:00, timeOffset is -300. (optional)
   * @param addDeepLinkFields Add (&#x60;true&#x60;) to enable deep linking of additional fields in the query.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @param explain Add (&#x60;true&#x60;) or don&#39;t add (&#x60;false&#x60;) some additional information about the result to the response.   It helps to understand the query and how the result was calculated.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @return DtaqlResultAsTree
   * @throws ApiException if fails to make API call
   */
  public DtaqlResultAsTree getDTAQLResultAsTree(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    ApiResponse<DtaqlResultAsTree> localVarResponse = getDTAQLResultAsTreeWithHttpInfo(query, startTimestamp, endTimestamp, offsetUTC, addDeepLinkFields, explain);
    return localVarResponse.getData();
  }

  /**
   * Returns the result of the query as a tree structure
   * To get a proper tree structure, you need to specify grouping in the query.
   * @param query The user session query to be executed. See [USQL documentation page](https://dt-url.net/dtusql) for syntax details.    You can find the available columns of the **usersession** table in the &#x60;UserSession&#x60; object.    Here is an example of the query: &#x60;SELECT country, city, COUNT(*) FROM usersession GROUP BY country, city&#x60;. (required)
   * @param startTimestamp The start timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, 2 hours behind the current time is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param endTimestamp The end timestamp of the query, in UTC milliseconds.   If not set or set as &#x60;0&#x60;, the current timestamp is used.   If the exact times are important, set the timeframe in the query itself (**query** parameter). (optional)
   * @param offsetUTC Optional offset of local time to UTC time in minutes. Offset will be applied to Date fields encountered in the query.   Can be positive or negative. E.g. if the local time is UTC+02:00, the timeOffset is 120. If it is UTC-05:00, timeOffset is -300. (optional)
   * @param addDeepLinkFields Add (&#x60;true&#x60;) to enable deep linking of additional fields in the query.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @param explain Add (&#x60;true&#x60;) or don&#39;t add (&#x60;false&#x60;) some additional information about the result to the response.   It helps to understand the query and how the result was calculated.   If not set, then &#x60;false&#x60; is used (optional, default to false)
   * @return ApiResponse&lt;DtaqlResultAsTree&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DtaqlResultAsTree> getDTAQLResultAsTreeWithHttpInfo(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDTAQLResultAsTreeRequestBuilder(query, startTimestamp, endTimestamp, offsetUTC, addDeepLinkFields, explain);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDTAQLResultAsTree", localVarResponse);
        }
        return new ApiResponse<DtaqlResultAsTree>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DtaqlResultAsTree>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDTAQLResultAsTreeRequestBuilder(String query, Long startTimestamp, Long endTimestamp, Integer offsetUTC, Boolean addDeepLinkFields, Boolean explain) throws ApiException {
    // verify the required parameter 'query' is set
    if (query == null) {
      throw new ApiException(400, "Missing the required parameter 'query' when calling getDTAQLResultAsTree");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/userSessionQueryLanguage/tree";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offsetUTC", offsetUTC));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("addDeepLinkFields", addDeepLinkFields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("explain", explain));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
