/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Metadata of a token.
 */
@ApiModel(description = "Metadata of a token.")
@JsonPropertyOrder({
  TokenMetadata.JSON_PROPERTY_ID,
  TokenMetadata.JSON_PROPERTY_NAME,
  TokenMetadata.JSON_PROPERTY_USER_ID,
  TokenMetadata.JSON_PROPERTY_REVOKED,
  TokenMetadata.JSON_PROPERTY_CREATED,
  TokenMetadata.JSON_PROPERTY_EXPIRES,
  TokenMetadata.JSON_PROPERTY_LAST_USE,
  TokenMetadata.JSON_PROPERTY_SCOPES,
  TokenMetadata.JSON_PROPERTY_PERSONAL_ACCESS_TOKEN
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class TokenMetadata {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_REVOKED = "revoked";
  private Boolean revoked;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Long created;

  public static final String JSON_PROPERTY_EXPIRES = "expires";
  private Long expires;

  public static final String JSON_PROPERTY_LAST_USE = "lastUse";
  private Long lastUse;

  /**
   * Gets or Sets scopes
   */
  public enum ScopesEnum {
    ACTIVEGATECERTMANAGEMENT("ActiveGateCertManagement"),
    
    ADVANCEDSYNTHETICINTEGRATION("AdvancedSyntheticIntegration"),
    
    APPMONINTEGRATION("AppMonIntegration"),
    
    CAPTUREREQUESTDATA("CaptureRequestData"),
    
    DTAQLACCESS("DTAQLAccess"),
    
    DATAEXPORT("DataExport"),
    
    DATAIMPORT("DataImport"),
    
    DATAPRIVACY("DataPrivacy"),
    
    DAVIS("Davis"),
    
    DIAGNOSTICEXPORT("DiagnosticExport"),
    
    DSSFILEMANAGEMENT("DssFileManagement"),
    
    EXTERNALSYNTHETICINTEGRATION("ExternalSyntheticIntegration"),
    
    INSTALLERDOWNLOAD("InstallerDownload"),
    
    LOGEXPORT("LogExport"),
    
    MEMORYDUMP("MemoryDump"),
    
    MOBILE("Mobile"),
    
    PLUGINUPLOAD("PluginUpload"),
    
    READCONFIG("ReadConfig"),
    
    READSYNTHETICDATA("ReadSyntheticData"),
    
    RESTREQUESTFORWARDING("RestRequestForwarding"),
    
    RUMBROWSEREXTENSION("RumBrowserExtension"),
    
    RUMJAVASCRIPTTAGMANAGEMENT("RumJavaScriptTagManagement"),
    
    SUPPORTALERT("SupportAlert"),
    
    TENANTTOKENMANAGEMENT("TenantTokenManagement"),
    
    USERSESSIONANONYMIZATION("UserSessionAnonymization"),
    
    VIEWDASHBOARD("ViewDashboard"),
    
    VIEWREPORT("ViewReport"),
    
    WRITECONFIG("WriteConfig"),
    
    WRITESYNTHETICDATA("WriteSyntheticData"),
    
    ACTIVEGATETOKENMANAGEMENT_CREATE("activeGateTokenManagement.create"),
    
    ACTIVEGATETOKENMANAGEMENT_READ("activeGateTokenManagement.read"),
    
    ACTIVEGATETOKENMANAGEMENT_WRITE("activeGateTokenManagement.write"),
    
    ACTIVEGATES_READ("activeGates.read"),
    
    ACTIVEGATES_WRITE("activeGates.write"),
    
    APITOKENS_READ("apiTokens.read"),
    
    APITOKENS_WRITE("apiTokens.write"),
    
    AUDITLOGS_READ("auditLogs.read"),
    
    CREDENTIALVAULT_READ("credentialVault.read"),
    
    CREDENTIALVAULT_WRITE("credentialVault.write"),
    
    ENTITIES_READ("entities.read"),
    
    ENTITIES_WRITE("entities.write"),
    
    EVENTS_INGEST("events.ingest"),
    
    EVENTS_READ("events.read"),
    
    EXTENSIONCONFIGURATIONS_READ("extensionConfigurations.read"),
    
    EXTENSIONCONFIGURATIONS_WRITE("extensionConfigurations.write"),
    
    EXTENSIONENVIRONMENT_READ("extensionEnvironment.read"),
    
    EXTENSIONENVIRONMENT_WRITE("extensionEnvironment.write"),
    
    EXTENSIONS_READ("extensions.read"),
    
    EXTENSIONS_WRITE("extensions.write"),
    
    GEOGRAPHICREGIONS_READ("geographicRegions.read"),
    
    HUB_READ("hub.read"),
    
    HUB_WRITE("hub.write"),
    
    LOGS_INGEST("logs.ingest"),
    
    LOGS_READ("logs.read"),
    
    METRICS_INGEST("metrics.ingest"),
    
    METRICS_READ("metrics.read"),
    
    METRICS_WRITE("metrics.write"),
    
    NETWORKZONES_READ("networkZones.read"),
    
    NETWORKZONES_WRITE("networkZones.write"),
    
    ONEAGENTS_READ("oneAgents.read"),
    
    ONEAGENTS_WRITE("oneAgents.write"),
    
    OPENTELEMETRYTRACE_INGEST("openTelemetryTrace.ingest"),
    
    PROBLEMS_READ("problems.read"),
    
    PROBLEMS_WRITE("problems.write"),
    
    RELEASES_READ("releases.read"),
    
    SECURITYPROBLEMS_READ("securityProblems.read"),
    
    SECURITYPROBLEMS_WRITE("securityProblems.write"),
    
    SETTINGS_READ("settings.read"),
    
    SETTINGS_WRITE("settings.write"),
    
    SLO_READ("slo.read"),
    
    SLO_WRITE("slo.write"),
    
    SYNTHETICEXECUTIONS_READ("syntheticExecutions.read"),
    
    SYNTHETICEXECUTIONS_WRITE("syntheticExecutions.write"),
    
    SYNTHETICLOCATIONS_READ("syntheticLocations.read"),
    
    SYNTHETICLOCATIONS_WRITE("syntheticLocations.write"),
    
    TENANTTOKENROTATION_WRITE("tenantTokenRotation.write"),
    
    TRACES_LOOKUP("traces.lookup");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopesEnum fromValue(String value) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  private List<ScopesEnum> scopes = new ArrayList<>();

  public static final String JSON_PROPERTY_PERSONAL_ACCESS_TOKEN = "personalAccessToken";
  private Boolean personalAccessToken;

  public TokenMetadata() { 
  }

  @JsonCreator
  public TokenMetadata(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_USER_ID) String userId, 
    @JsonProperty(JSON_PROPERTY_CREATED) Long created, 
    @JsonProperty(JSON_PROPERTY_LAST_USE) Long lastUse, 
    @JsonProperty(JSON_PROPERTY_PERSONAL_ACCESS_TOKEN) Boolean personalAccessToken
  ) {
  this();
    this.id = id;
    this.userId = userId;
    this.created = created;
    this.lastUse = lastUse;
    this.personalAccessToken = personalAccessToken;
  }

   /**
   * The ID of the token.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the token.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public TokenMetadata name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the token.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the token.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


   /**
   * The owner of the token.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The owner of the token.")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }




  public TokenMetadata revoked(Boolean revoked) {
    this.revoked = revoked;
    return this;
  }

   /**
   * Revocation status of the token. Revoked tokens are disabled.
   * @return revoked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revocation status of the token. Revoked tokens are disabled.")
  @JsonProperty(JSON_PROPERTY_REVOKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRevoked() {
    return revoked;
  }


  @JsonProperty(JSON_PROPERTY_REVOKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevoked(Boolean revoked) {
    this.revoked = revoked;
  }


   /**
   * The creation time as a unix timestamp in milliseconds.
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The creation time as a unix timestamp in milliseconds.")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreated() {
    return created;
  }




  public TokenMetadata expires(Long expires) {
    this.expires = expires;
    return this;
  }

   /**
   * The expiration time as a unix timestamp in milliseconds.
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The expiration time as a unix timestamp in milliseconds.")
  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExpires() {
    return expires;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpires(Long expires) {
    this.expires = expires;
  }


   /**
   * The unix timestamp in milliseconds when the token was last used.
   * @return lastUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unix timestamp in milliseconds when the token was last used.")
  @JsonProperty(JSON_PROPERTY_LAST_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastUse() {
    return lastUse;
  }




  public TokenMetadata scopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public TokenMetadata addScopesItem(ScopesEnum scopesItem) {
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * A list of scopes assigned to the token.
   * @return scopes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of scopes assigned to the token.")
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ScopesEnum> getScopes() {
    return scopes;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
  }


   /**
   * The token is a [personal access token](https://dt-url.net/wm03sop) (&#x60;true&#x60;) or an API token (&#x60;false&#x60;).
   * @return personalAccessToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The token is a [personal access token](https://dt-url.net/wm03sop) (`true`) or an API token (`false`).")
  @JsonProperty(JSON_PROPERTY_PERSONAL_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPersonalAccessToken() {
    return personalAccessToken;
  }




  /**
   * Return true if this TokenMetadata object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenMetadata tokenMetadata = (TokenMetadata) o;
    return Objects.equals(this.id, tokenMetadata.id) &&
        Objects.equals(this.name, tokenMetadata.name) &&
        Objects.equals(this.userId, tokenMetadata.userId) &&
        Objects.equals(this.revoked, tokenMetadata.revoked) &&
        Objects.equals(this.created, tokenMetadata.created) &&
        Objects.equals(this.expires, tokenMetadata.expires) &&
        Objects.equals(this.lastUse, tokenMetadata.lastUse) &&
        Objects.equals(this.scopes, tokenMetadata.scopes) &&
        Objects.equals(this.personalAccessToken, tokenMetadata.personalAccessToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, userId, revoked, created, expires, lastUse, scopes, personalAccessToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenMetadata {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    lastUse: ").append(toIndentedString(lastUse)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    personalAccessToken: ").append(toIndentedString(personalAccessToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

