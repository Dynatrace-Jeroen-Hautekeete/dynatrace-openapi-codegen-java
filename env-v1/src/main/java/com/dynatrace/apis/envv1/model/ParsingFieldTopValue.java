/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.Occurrence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ParsingFieldTopValue
 */
@JsonPropertyOrder({
  ParsingFieldTopValue.JSON_PROPERTY_FIELD_NAME,
  ParsingFieldTopValue.JSON_PROPERTY_OCCURRENCES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class ParsingFieldTopValue {
  public static final String JSON_PROPERTY_FIELD_NAME = "fieldName";
  private String fieldName;

  public static final String JSON_PROPERTY_OCCURRENCES = "occurrences";
  private List<Occurrence> occurrences = null;

  public ParsingFieldTopValue() { 
  }

  public ParsingFieldTopValue fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Top value parsing field name
   * @return fieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Top value parsing field name")
  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFieldName() {
    return fieldName;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public ParsingFieldTopValue occurrences(List<Occurrence> occurrences) {
    this.occurrences = occurrences;
    return this;
  }

  public ParsingFieldTopValue addOccurrencesItem(Occurrence occurrencesItem) {
    if (this.occurrences == null) {
      this.occurrences = new ArrayList<>();
    }
    this.occurrences.add(occurrencesItem);
    return this;
  }

   /**
   * Top value parsing field occurrences
   * @return occurrences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Top value parsing field occurrences")
  @JsonProperty(JSON_PROPERTY_OCCURRENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Occurrence> getOccurrences() {
    return occurrences;
  }


  @JsonProperty(JSON_PROPERTY_OCCURRENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOccurrences(List<Occurrence> occurrences) {
    this.occurrences = occurrences;
  }


  /**
   * Return true if this ParsingFieldTopValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParsingFieldTopValue parsingFieldTopValue = (ParsingFieldTopValue) o;
    return Objects.equals(this.fieldName, parsingFieldTopValue.fieldName) &&
        Objects.equals(this.occurrences, parsingFieldTopValue.occurrences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, occurrences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParsingFieldTopValue {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    occurrences: ").append(toIndentedString(occurrences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

