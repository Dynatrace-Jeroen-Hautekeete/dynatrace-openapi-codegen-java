/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.MonitoredEntityFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An object defining the scope of your maintenance window.   You can specify particular Dynatrace entities or matching rules for dynamic formation of the scope.    If no scope is specified, the maintenance applies to the entire environment.    To specify the scope at least one entity or matching rule must be specified.
 */
@ApiModel(description = "An object defining the scope of your maintenance window.   You can specify particular Dynatrace entities or matching rules for dynamic formation of the scope.    If no scope is specified, the maintenance applies to the entire environment.    To specify the scope at least one entity or matching rule must be specified.")
@JsonPropertyOrder({
  MaintenanceWindowScope.JSON_PROPERTY_ENTITIES,
  MaintenanceWindowScope.JSON_PROPERTY_MATCHES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class MaintenanceWindowScope {
  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private Set<String> entities = null;

  public static final String JSON_PROPERTY_MATCHES = "matches";
  private Set<MonitoredEntityFilter> matches = null;

  public MaintenanceWindowScope() { 
  }

  public MaintenanceWindowScope entities(Set<String> entities) {
    this.entities = entities;
    return this;
  }

  public MaintenanceWindowScope addEntitiesItem(String entitiesItem) {
    if (this.entities == null) {
      this.entities = new LinkedHashSet<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Defines Dynatrace entities to be included in scope, for example hosts, services, process groups.   Allowed values are Dynatrace entity IDs.
   * @return entities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines Dynatrace entities to be included in scope, for example hosts, services, process groups.   Allowed values are Dynatrace entity IDs.")
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getEntities() {
    return entities;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntities(Set<String> entities) {
    this.entities = entities;
  }


  public MaintenanceWindowScope matches(Set<MonitoredEntityFilter> matches) {
    this.matches = matches;
    return this;
  }

  public MaintenanceWindowScope addMatchesItem(MonitoredEntityFilter matchesItem) {
    if (this.matches == null) {
      this.matches = new LinkedHashSet<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

   /**
   * An object defining a matching rule for dynamic scope formation. An empty rule matches for all entities.
   * @return matches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An object defining a matching rule for dynamic scope formation. An empty rule matches for all entities.")
  @JsonProperty(JSON_PROPERTY_MATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<MonitoredEntityFilter> getMatches() {
    return matches;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatches(Set<MonitoredEntityFilter> matches) {
    this.matches = matches;
  }


  /**
   * Return true if this MaintenanceWindowScope object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceWindowScope maintenanceWindowScope = (MaintenanceWindowScope) o;
    return Objects.equals(this.entities, maintenanceWindowScope.entities) &&
        Objects.equals(this.matches, maintenanceWindowScope.matches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, matches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceWindowScope {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

