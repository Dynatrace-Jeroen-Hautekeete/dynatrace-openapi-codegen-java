/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.Model3rdPartyEventOpenNotification;
import com.dynatrace.apis.envv1.model.Model3rdPartyEventResolvedNotification;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The list of third-party synthetic events.
 */
@ApiModel(description = "The list of third-party synthetic events.")
@JsonPropertyOrder({
  Model3rdPartySyntheticEvents.JSON_PROPERTY_SYNTHETIC_ENGINE_NAME,
  Model3rdPartySyntheticEvents.JSON_PROPERTY_OPEN,
  Model3rdPartySyntheticEvents.JSON_PROPERTY_RESOLVED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class Model3rdPartySyntheticEvents {
  public static final String JSON_PROPERTY_SYNTHETIC_ENGINE_NAME = "syntheticEngineName";
  private String syntheticEngineName;

  public static final String JSON_PROPERTY_OPEN = "open";
  private Set<Model3rdPartyEventOpenNotification> open = null;

  public static final String JSON_PROPERTY_RESOLVED = "resolved";
  private Set<Model3rdPartyEventResolvedNotification> resolved = null;

  public Model3rdPartySyntheticEvents() { 
  }

  public Model3rdPartySyntheticEvents syntheticEngineName(String syntheticEngineName) {
    this.syntheticEngineName = syntheticEngineName;
    return this;
  }

   /**
   * The type of the third-party synthetic monitor.
   * @return syntheticEngineName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the third-party synthetic monitor.")
  @JsonProperty(JSON_PROPERTY_SYNTHETIC_ENGINE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSyntheticEngineName() {
    return syntheticEngineName;
  }


  @JsonProperty(JSON_PROPERTY_SYNTHETIC_ENGINE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSyntheticEngineName(String syntheticEngineName) {
    this.syntheticEngineName = syntheticEngineName;
  }


  public Model3rdPartySyntheticEvents open(Set<Model3rdPartyEventOpenNotification> open) {
    this.open = open;
    return this;
  }

  public Model3rdPartySyntheticEvents addOpenItem(Model3rdPartyEventOpenNotification openItem) {
    if (this.open == null) {
      this.open = new LinkedHashSet<>();
    }
    this.open.add(openItem);
    return this;
  }

   /**
   * The list of open third-party synthetic events.
   * @return open
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of open third-party synthetic events.")
  @JsonProperty(JSON_PROPERTY_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Model3rdPartyEventOpenNotification> getOpen() {
    return open;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_OPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpen(Set<Model3rdPartyEventOpenNotification> open) {
    this.open = open;
  }


  public Model3rdPartySyntheticEvents resolved(Set<Model3rdPartyEventResolvedNotification> resolved) {
    this.resolved = resolved;
    return this;
  }

  public Model3rdPartySyntheticEvents addResolvedItem(Model3rdPartyEventResolvedNotification resolvedItem) {
    if (this.resolved == null) {
      this.resolved = new LinkedHashSet<>();
    }
    this.resolved.add(resolvedItem);
    return this;
  }

   /**
   * The list of closed third-party synthetic events.
   * @return resolved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of closed third-party synthetic events.")
  @JsonProperty(JSON_PROPERTY_RESOLVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Model3rdPartyEventResolvedNotification> getResolved() {
    return resolved;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RESOLVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResolved(Set<Model3rdPartyEventResolvedNotification> resolved) {
    this.resolved = resolved;
  }


  /**
   * Return true if this 3rdPartySyntheticEvents object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model3rdPartySyntheticEvents _3rdPartySyntheticEvents = (Model3rdPartySyntheticEvents) o;
    return Objects.equals(this.syntheticEngineName, _3rdPartySyntheticEvents.syntheticEngineName) &&
        Objects.equals(this.open, _3rdPartySyntheticEvents.open) &&
        Objects.equals(this.resolved, _3rdPartySyntheticEvents.resolved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syntheticEngineName, open, resolved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model3rdPartySyntheticEvents {\n");
    sb.append("    syntheticEngineName: ").append(toIndentedString(syntheticEngineName)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    resolved: ").append(toIndentedString(resolved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

