/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ManualApplication;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class RumJavaScriptTagManagementApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RumJavaScriptTagManagementApi() {
    this(new ApiClient());
  }

  public RumJavaScriptTagManagementApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets the version of the RUM JavaScript code injected into specified application
   * 
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getAppRevision(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getAppRevisionWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Gets the version of the RUM JavaScript code injected into specified application
   * 
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getAppRevisionWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAppRevisionRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAppRevision", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAppRevisionRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getAppRevision");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/appRevision/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the asynchronous code snippet
   * This code provides configuration and basic code to be manually inserted into your web application code.   The full functionality of the monitoring code is loaded asynchronously.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getAsyncCodeSnippet(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getAsyncCodeSnippetWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Downloads the asynchronous code snippet
   * This code provides configuration and basic code to be manually inserted into your web application code.   The full functionality of the monitoring code is loaded asynchronously.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getAsyncCodeSnippetWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAsyncCodeSnippetRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAsyncCodeSnippet", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAsyncCodeSnippetRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getAsyncCodeSnippet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/asyncCS/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads inline code
   * Returns the inline code of the most recent OneAgent JavaScript. This is a complete configuration and monitoring code to be manually inserted into your web application code.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getJsInlineScript(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getJsInlineScriptWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Downloads inline code
   * Returns the inline code of the most recent OneAgent JavaScript. This is a complete configuration and monitoring code to be manually inserted into your web application code.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getJsInlineScriptWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJsInlineScriptRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJsInlineScript", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJsInlineScriptRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getJsInlineScript");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/jsInlineScript/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the latest version of OneAgent JavaScript library
   * 
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getJsLatestVersion() throws ApiException {
    ApiResponse<String> localVarResponse = getJsLatestVersionWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the latest version of OneAgent JavaScript library
   * 
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getJsLatestVersionWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJsLatestVersionRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJsLatestVersion", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJsLatestVersionRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/jsLatestVersion";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads OneAgent JavaScript tag
   * Returns the OneAgent JavaScript tag. This is a complete configuration and monitoring code to be manually inserted into your web application code.   The monitoring code is loaded as a separate file from a CDN.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getJsScript(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getJsScriptWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Downloads OneAgent JavaScript tag
   * Returns the OneAgent JavaScript tag. This is a complete configuration and monitoring code to be manually inserted into your web application code.   The monitoring code is loaded as a separate file from a CDN.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getJsScriptWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJsScriptRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJsScript", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJsScriptRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getJsScript");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/jsTag/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads JavaScript tag
   * Returns a JavaScript tag to be manually inserted into your web application code. The tag references a JavaScript file with full configuration and monitoring code, which causes a lower possible caching duration.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getJsTagComplete(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getJsTagCompleteWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Downloads JavaScript tag
   * Returns a JavaScript tag to be manually inserted into your web application code. The tag references a JavaScript file with full configuration and monitoring code, which causes a lower possible caching duration.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getJsTagCompleteWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJsTagCompleteRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJsTagComplete", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJsTagCompleteRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getJsTagComplete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/jsTagComplete/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all manually injected applications
   * 
   * @return List&lt;ManualApplication&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ManualApplication> getManualApps() throws ApiException {
    ApiResponse<List<ManualApplication>> localVarResponse = getManualAppsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all manually injected applications
   * 
   * @return ApiResponse&lt;List&lt;ManualApplication&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ManualApplication>> getManualAppsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getManualAppsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getManualApps", localVarResponse);
        }
        return new ApiResponse<List<ManualApplication>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ManualApplication>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getManualAppsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/manualApps";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the synchronous code snippet
   * This code provides configuration and basic code to be manually inserted into your web application code.   The full functionality of the monitoring code is loaded synchronously.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getSyncCodeSnippet(String entity) throws ApiException {
    ApiResponse<String> localVarResponse = getSyncCodeSnippetWithHttpInfo(entity);
    return localVarResponse.getData();
  }

  /**
   * Downloads the synchronous code snippet
   * This code provides configuration and basic code to be manually inserted into your web application code.   The full functionality of the monitoring code is loaded synchronously.
   * @param entity The Dynatrace entity ID of the application.   You can obtain it from the response of the [GET the list of manually injected applications](https://dt-url.net/dl03sgo) call. (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getSyncCodeSnippetWithHttpInfo(String entity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSyncCodeSnippetRequestBuilder(entity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSyncCodeSnippet", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSyncCodeSnippetRequestBuilder(String entity) throws ApiException {
    // verify the required parameter 'entity' is set
    if (entity == null) {
      throw new ApiException(400, "Missing the required parameter 'entity' when calling getSyncCodeSnippet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rum/syncCS/{entity}"
        .replace("{entity}", ApiClient.urlEncode(entity.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/plain; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
