/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Defines the current monitoring state of an entity.
 */
@ApiModel(description = "Defines the current monitoring state of an entity.")
@JsonPropertyOrder({
  MonitoringState.JSON_PROPERTY_ACTUAL_MONITORING_STATE,
  MonitoringState.JSON_PROPERTY_EXPECTED_MONITORING_STATE,
  MonitoringState.JSON_PROPERTY_RESTART_REQUIRED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class MonitoringState {
  /**
   * The current actual monitoring state on the entity.
   */
  public enum ActualMonitoringStateEnum {
    OFF("OFF"),
    
    ON("ON");

    private String value;

    ActualMonitoringStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActualMonitoringStateEnum fromValue(String value) {
      for (ActualMonitoringStateEnum b : ActualMonitoringStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTUAL_MONITORING_STATE = "actualMonitoringState";
  private ActualMonitoringStateEnum actualMonitoringState;

  /**
   * The monitoring state that is expected from the configuration
   */
  public enum ExpectedMonitoringStateEnum {
    OFF("OFF"),
    
    ON("ON");

    private String value;

    ExpectedMonitoringStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExpectedMonitoringStateEnum fromValue(String value) {
      for (ExpectedMonitoringStateEnum b : ExpectedMonitoringStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXPECTED_MONITORING_STATE = "expectedMonitoringState";
  private ExpectedMonitoringStateEnum expectedMonitoringState;

  public static final String JSON_PROPERTY_RESTART_REQUIRED = "restartRequired";
  private Boolean restartRequired;

  public MonitoringState() { 
  }

  public MonitoringState actualMonitoringState(ActualMonitoringStateEnum actualMonitoringState) {
    this.actualMonitoringState = actualMonitoringState;
    return this;
  }

   /**
   * The current actual monitoring state on the entity.
   * @return actualMonitoringState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current actual monitoring state on the entity.")
  @JsonProperty(JSON_PROPERTY_ACTUAL_MONITORING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActualMonitoringStateEnum getActualMonitoringState() {
    return actualMonitoringState;
  }


  @JsonProperty(JSON_PROPERTY_ACTUAL_MONITORING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActualMonitoringState(ActualMonitoringStateEnum actualMonitoringState) {
    this.actualMonitoringState = actualMonitoringState;
  }


  public MonitoringState expectedMonitoringState(ExpectedMonitoringStateEnum expectedMonitoringState) {
    this.expectedMonitoringState = expectedMonitoringState;
    return this;
  }

   /**
   * The monitoring state that is expected from the configuration
   * @return expectedMonitoringState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The monitoring state that is expected from the configuration")
  @JsonProperty(JSON_PROPERTY_EXPECTED_MONITORING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExpectedMonitoringStateEnum getExpectedMonitoringState() {
    return expectedMonitoringState;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_MONITORING_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedMonitoringState(ExpectedMonitoringStateEnum expectedMonitoringState) {
    this.expectedMonitoringState = expectedMonitoringState;
  }


  public MonitoringState restartRequired(Boolean restartRequired) {
    this.restartRequired = restartRequired;
    return this;
  }

   /**
   * Defines whether or not the process has to restarted to enable monitoring
   * @return restartRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether or not the process has to restarted to enable monitoring")
  @JsonProperty(JSON_PROPERTY_RESTART_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRestartRequired() {
    return restartRequired;
  }


  @JsonProperty(JSON_PROPERTY_RESTART_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestartRequired(Boolean restartRequired) {
    this.restartRequired = restartRequired;
  }


  /**
   * Return true if this MonitoringState object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringState monitoringState = (MonitoringState) o;
    return Objects.equals(this.actualMonitoringState, monitoringState.actualMonitoringState) &&
        Objects.equals(this.expectedMonitoringState, monitoringState.expectedMonitoringState) &&
        Objects.equals(this.restartRequired, monitoringState.restartRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualMonitoringState, expectedMonitoringState, restartRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringState {\n");
    sb.append("    actualMonitoringState: ").append(toIndentedString(actualMonitoringState)).append("\n");
    sb.append("    expectedMonitoringState: ").append(toIndentedString(expectedMonitoringState)).append("\n");
    sb.append("    restartRequired: ").append(toIndentedString(restartRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

