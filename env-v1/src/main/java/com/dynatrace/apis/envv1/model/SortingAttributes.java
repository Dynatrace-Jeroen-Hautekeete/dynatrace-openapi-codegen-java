/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * How to sort the results.
 */
@ApiModel(description = "How to sort the results.")
@JsonPropertyOrder({
  SortingAttributes.JSON_PROPERTY_SORT_ASCENDING,
  SortingAttributes.JSON_PROPERTY_SORT_FIELD_NAME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class SortingAttributes {
  public static final String JSON_PROPERTY_SORT_ASCENDING = "sortAscending";
  private Boolean sortAscending;

  public static final String JSON_PROPERTY_SORT_FIELD_NAME = "sortFieldName";
  private String sortFieldName;

  public SortingAttributes() { 
  }

  public SortingAttributes sortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
    return this;
  }

   /**
   * Sort ascending (&#x60;true&#x60;) or descending (&#x60;false&#x60;).
   * @return sortAscending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sort ascending (`true`) or descending (`false`).")
  @JsonProperty(JSON_PROPERTY_SORT_ASCENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSortAscending() {
    return sortAscending;
  }


  @JsonProperty(JSON_PROPERTY_SORT_ASCENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
  }


  public SortingAttributes sortFieldName(String sortFieldName) {
    this.sortFieldName = sortFieldName;
    return this;
  }

   /**
   * The field to sort by.
   * @return sortFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The field to sort by.")
  @JsonProperty(JSON_PROPERTY_SORT_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSortFieldName() {
    return sortFieldName;
  }


  @JsonProperty(JSON_PROPERTY_SORT_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortFieldName(String sortFieldName) {
    this.sortFieldName = sortFieldName;
  }


  /**
   * Return true if this SortingAttributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortingAttributes sortingAttributes = (SortingAttributes) o;
    return Objects.equals(this.sortAscending, sortingAttributes.sortAscending) &&
        Objects.equals(this.sortFieldName, sortingAttributes.sortFieldName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sortAscending, sortFieldName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortingAttributes {\n");
    sb.append("    sortAscending: ").append(toIndentedString(sortAscending)).append("\n");
    sb.append("    sortFieldName: ").append(toIndentedString(sortFieldName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

