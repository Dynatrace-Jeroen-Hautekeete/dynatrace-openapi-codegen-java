/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The process group log on the host.
 */
@ApiModel(description = "The process group log on the host.")
@JsonPropertyOrder({
  Host4pg.JSON_PROPERTY_HOST_ID,
  Host4pg.JSON_PROPERTY_LOG_SIZE,
  Host4pg.JSON_PROPERTY_CONTENT_ACCESS,
  Host4pg.JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class Host4pg {
  public static final String JSON_PROPERTY_HOST_ID = "hostId";
  private String hostId;

  public static final String JSON_PROPERTY_LOG_SIZE = "logSize";
  private Long logSize;

  public static final String JSON_PROPERTY_CONTENT_ACCESS = "contentAccess";
  private Boolean contentAccess;

  public static final String JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS = "availableForAnalysis";
  private Boolean availableForAnalysis;

  public Host4pg() { 
  }

  public Host4pg hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

   /**
   * The entity ID of the host.
   * @return hostId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The entity ID of the host.")
  @JsonProperty(JSON_PROPERTY_HOST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostId() {
    return hostId;
  }


  @JsonProperty(JSON_PROPERTY_HOST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public Host4pg logSize(Long logSize) {
    this.logSize = logSize;
    return this;
  }

   /**
   * The size of the PG log for the host, bytes.
   * @return logSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the PG log for the host, bytes.")
  @JsonProperty(JSON_PROPERTY_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLogSize() {
    return logSize;
  }


  @JsonProperty(JSON_PROPERTY_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogSize(Long logSize) {
    this.logSize = logSize;
  }


  public Host4pg contentAccess(Boolean contentAccess) {
    this.contentAccess = contentAccess;
    return this;
  }

   /**
   * The access to the log content is granted (true) or denied (false).
   * @return contentAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The access to the log content is granted (true) or denied (false).")
  @JsonProperty(JSON_PROPERTY_CONTENT_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContentAccess() {
    return contentAccess;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentAccess(Boolean contentAccess) {
    this.contentAccess = contentAccess;
  }


  public Host4pg availableForAnalysis(Boolean availableForAnalysis) {
    this.availableForAnalysis = availableForAnalysis;
    return this;
  }

   /**
   * The log is available (true) or not available (false) for analysis.
   * @return availableForAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The log is available (true) or not available (false) for analysis.")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAvailableForAnalysis() {
    return availableForAnalysis;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableForAnalysis(Boolean availableForAnalysis) {
    this.availableForAnalysis = availableForAnalysis;
  }


  /**
   * Return true if this Host4pg object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Host4pg host4pg = (Host4pg) o;
    return Objects.equals(this.hostId, host4pg.hostId) &&
        Objects.equals(this.logSize, host4pg.logSize) &&
        Objects.equals(this.contentAccess, host4pg.contentAccess) &&
        Objects.equals(this.availableForAnalysis, host4pg.availableForAnalysis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostId, logSize, contentAccess, availableForAnalysis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Host4pg {\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    logSize: ").append(toIndentedString(logSize)).append("\n");
    sb.append("    contentAccess: ").append(toIndentedString(contentAccess)).append("\n");
    sb.append("    availableForAnalysis: ").append(toIndentedString(availableForAnalysis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

