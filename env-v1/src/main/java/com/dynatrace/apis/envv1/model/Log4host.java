/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The list of available OS logs.
 */
@ApiModel(description = "The list of available OS logs.")
@JsonPropertyOrder({
  Log4host.JSON_PROPERTY_PATH,
  Log4host.JSON_PROPERTY_SIZE,
  Log4host.JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class Log4host {
  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS = "availableForAnalysis";
  private Boolean availableForAnalysis;

  public Log4host() { 
  }

  public Log4host path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The full path to the log.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full path to the log.")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }


  public Log4host size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The size of the log, bytes.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the log, bytes.")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public Log4host availableForAnalysis(Boolean availableForAnalysis) {
    this.availableForAnalysis = availableForAnalysis;
    return this;
  }

   /**
   * The log is available (&#x60;true&#x60;) or not available (&#x60;false&#x60;) for analysis.
   * @return availableForAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The log is available (`true`) or not available (`false`) for analysis.")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAvailableForAnalysis() {
    return availableForAnalysis;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_FOR_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableForAnalysis(Boolean availableForAnalysis) {
    this.availableForAnalysis = availableForAnalysis;
  }


  /**
   * Return true if this Log4host object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Log4host log4host = (Log4host) o;
    return Objects.equals(this.path, log4host.path) &&
        Objects.equals(this.size, log4host.size) &&
        Objects.equals(this.availableForAnalysis, log4host.availableForAnalysis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, size, availableForAnalysis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Log4host {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    availableForAnalysis: ").append(toIndentedString(availableForAnalysis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

