/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.UniversalTag;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Filters monitored entities by their type/tags.
 */
@ApiModel(description = "Filters monitored entities by their type/tags.")
@JsonPropertyOrder({
  MonitoredEntityFilter.JSON_PROPERTY_TYPE,
  MonitoredEntityFilter.JSON_PROPERTY_TAGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class MonitoredEntityFilter {
  /**
   * The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching.
   */
  public enum TypeEnum {
    APM_SECURITY_GATEWAY("APM_SECURITY_GATEWAY"),
    
    APPLICATION("APPLICATION"),
    
    APPLICATION_METHOD("APPLICATION_METHOD"),
    
    APPLICATION_METHOD_GROUP("APPLICATION_METHOD_GROUP"),
    
    APPMON_SERVER("APPMON_SERVER"),
    
    APPMON_SYSTEM_PROFILE("APPMON_SYSTEM_PROFILE"),
    
    AUTO_SCALING_GROUP("AUTO_SCALING_GROUP"),
    
    AUXILIARY_SYNTHETIC_TEST("AUXILIARY_SYNTHETIC_TEST"),
    
    AWS_APPLICATION_LOAD_BALANCER("AWS_APPLICATION_LOAD_BALANCER"),
    
    AWS_AVAILABILITY_ZONE("AWS_AVAILABILITY_ZONE"),
    
    AWS_CREDENTIALS("AWS_CREDENTIALS"),
    
    AWS_LAMBDA_FUNCTION("AWS_LAMBDA_FUNCTION"),
    
    AWS_NETWORK_LOAD_BALANCER("AWS_NETWORK_LOAD_BALANCER"),
    
    AZURE_API_MANAGEMENT_SERVICE("AZURE_API_MANAGEMENT_SERVICE"),
    
    AZURE_APPLICATION_GATEWAY("AZURE_APPLICATION_GATEWAY"),
    
    AZURE_COSMOS_DB("AZURE_COSMOS_DB"),
    
    AZURE_CREDENTIALS("AZURE_CREDENTIALS"),
    
    AZURE_EVENT_HUB("AZURE_EVENT_HUB"),
    
    AZURE_EVENT_HUB_NAMESPACE("AZURE_EVENT_HUB_NAMESPACE"),
    
    AZURE_FUNCTION_APP("AZURE_FUNCTION_APP"),
    
    AZURE_IOT_HUB("AZURE_IOT_HUB"),
    
    AZURE_LOAD_BALANCER("AZURE_LOAD_BALANCER"),
    
    AZURE_MGMT_GROUP("AZURE_MGMT_GROUP"),
    
    AZURE_REDIS_CACHE("AZURE_REDIS_CACHE"),
    
    AZURE_REGION("AZURE_REGION"),
    
    AZURE_SERVICE_BUS_NAMESPACE("AZURE_SERVICE_BUS_NAMESPACE"),
    
    AZURE_SERVICE_BUS_QUEUE("AZURE_SERVICE_BUS_QUEUE"),
    
    AZURE_SERVICE_BUS_TOPIC("AZURE_SERVICE_BUS_TOPIC"),
    
    AZURE_SQL_DATABASE("AZURE_SQL_DATABASE"),
    
    AZURE_SQL_ELASTIC_POOL("AZURE_SQL_ELASTIC_POOL"),
    
    AZURE_SQL_SERVER("AZURE_SQL_SERVER"),
    
    AZURE_STORAGE_ACCOUNT("AZURE_STORAGE_ACCOUNT"),
    
    AZURE_SUBSCRIPTION("AZURE_SUBSCRIPTION"),
    
    AZURE_TENANT("AZURE_TENANT"),
    
    AZURE_VM("AZURE_VM"),
    
    AZURE_VM_SCALE_SET("AZURE_VM_SCALE_SET"),
    
    AZURE_WEB_APP("AZURE_WEB_APP"),
    
    CF_APPLICATION("CF_APPLICATION"),
    
    CF_FOUNDATION("CF_FOUNDATION"),
    
    CINDER_VOLUME("CINDER_VOLUME"),
    
    CLOUD_APPLICATION("CLOUD_APPLICATION"),
    
    CLOUD_APPLICATION_INSTANCE("CLOUD_APPLICATION_INSTANCE"),
    
    CLOUD_APPLICATION_NAMESPACE("CLOUD_APPLICATION_NAMESPACE"),
    
    CLOUD_NETWORK_INGRESS("CLOUD_NETWORK_INGRESS"),
    
    CLOUD_NETWORK_POLICY("CLOUD_NETWORK_POLICY"),
    
    CONTAINER_GROUP("CONTAINER_GROUP"),
    
    CONTAINER_GROUP_INSTANCE("CONTAINER_GROUP_INSTANCE"),
    
    CUSTOM_APPLICATION("CUSTOM_APPLICATION"),
    
    CUSTOM_DEVICE("CUSTOM_DEVICE"),
    
    CUSTOM_DEVICE_GROUP("CUSTOM_DEVICE_GROUP"),
    
    DCRUM_APPLICATION("DCRUM_APPLICATION"),
    
    DCRUM_SERVICE("DCRUM_SERVICE"),
    
    DCRUM_SERVICE_INSTANCE("DCRUM_SERVICE_INSTANCE"),
    
    DEVICE_APPLICATION_METHOD("DEVICE_APPLICATION_METHOD"),
    
    DISK("DISK"),
    
    DOCKER_CONTAINER_GROUP("DOCKER_CONTAINER_GROUP"),
    
    DOCKER_CONTAINER_GROUP_INSTANCE("DOCKER_CONTAINER_GROUP_INSTANCE"),
    
    DYNAMO_DB_TABLE("DYNAMO_DB_TABLE"),
    
    EBS_VOLUME("EBS_VOLUME"),
    
    EC2_INSTANCE("EC2_INSTANCE"),
    
    ELASTIC_LOAD_BALANCER("ELASTIC_LOAD_BALANCER"),
    
    ENVIRONMENT("ENVIRONMENT"),
    
    EXTERNAL_SYNTHETIC_TEST_STEP("EXTERNAL_SYNTHETIC_TEST_STEP"),
    
    GCP_ZONE("GCP_ZONE"),
    
    GEOLOCATION("GEOLOCATION"),
    
    GEOLOC_SITE("GEOLOC_SITE"),
    
    GOOGLE_COMPUTE_ENGINE("GOOGLE_COMPUTE_ENGINE"),
    
    HOST("HOST"),
    
    HOST_GROUP("HOST_GROUP"),
    
    HTTP_CHECK("HTTP_CHECK"),
    
    HTTP_CHECK_STEP("HTTP_CHECK_STEP"),
    
    HYPERVISOR("HYPERVISOR"),
    
    KUBERNETES_CLUSTER("KUBERNETES_CLUSTER"),
    
    KUBERNETES_NODE("KUBERNETES_NODE"),
    
    KUBERNETES_SERVICE("KUBERNETES_SERVICE"),
    
    MOBILE_APPLICATION("MOBILE_APPLICATION"),
    
    NETWORK_INTERFACE("NETWORK_INTERFACE"),
    
    NEUTRON_SUBNET("NEUTRON_SUBNET"),
    
    OPENSTACK_PROJECT("OPENSTACK_PROJECT"),
    
    OPENSTACK_REGION("OPENSTACK_REGION"),
    
    OPENSTACK_VM("OPENSTACK_VM"),
    
    OS("OS"),
    
    PROCESS_GROUP("PROCESS_GROUP"),
    
    PROCESS_GROUP_INSTANCE("PROCESS_GROUP_INSTANCE"),
    
    QUEUE("QUEUE"),
    
    RELATIONAL_DATABASE_SERVICE("RELATIONAL_DATABASE_SERVICE"),
    
    SERVICE("SERVICE"),
    
    SERVICE_INSTANCE("SERVICE_INSTANCE"),
    
    SERVICE_METHOD("SERVICE_METHOD"),
    
    SERVICE_METHOD_GROUP("SERVICE_METHOD_GROUP"),
    
    SWIFT_CONTAINER("SWIFT_CONTAINER"),
    
    SYNTHETIC_LOCATION("SYNTHETIC_LOCATION"),
    
    SYNTHETIC_TEST("SYNTHETIC_TEST"),
    
    SYNTHETIC_TEST_STEP("SYNTHETIC_TEST_STEP"),
    
    VIRTUALMACHINE("VIRTUALMACHINE"),
    
    VMWARE_DATACENTER("VMWARE_DATACENTER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Set<UniversalTag> tags = null;

  public MonitoredEntityFilter() { 
  }

  public MonitoredEntityFilter type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MonitoredEntityFilter tags(Set<UniversalTag> tags) {
    this.tags = tags;
    return this;
  }

  public MonitoredEntityFilter addTagsItem(UniversalTag tagsItem) {
    if (this.tags == null) {
      this.tags = new LinkedHashSet<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tag you want to use for matching.   You can use custom tags from the UI, AWS tags, Cloud Foundry tags, OpenShift/Kubernetes, and tags based on environment variables.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tag you want to use for matching.   You can use custom tags from the UI, AWS tags, Cloud Foundry tags, OpenShift/Kubernetes, and tags based on environment variables.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<UniversalTag> getTags() {
    return tags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(Set<UniversalTag> tags) {
    this.tags = tags;
  }


  /**
   * Return true if this MonitoredEntityFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoredEntityFilter monitoredEntityFilter = (MonitoredEntityFilter) o;
    return Objects.equals(this.type, monitoredEntityFilter.type) &&
        Objects.equals(this.tags, monitoredEntityFilter.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoredEntityFilter {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

