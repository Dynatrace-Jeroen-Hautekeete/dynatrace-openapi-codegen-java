/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Additional data on the event severity.
 */
@ApiModel(description = "Additional data on the event severity.")
@JsonPropertyOrder({
  EventSeverity.JSON_PROPERTY_CONTEXT,
  EventSeverity.JSON_PROPERTY_VALUE,
  EventSeverity.JSON_PROPERTY_UNIT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class EventSeverity {
  /**
   * The metric used in the event severity calculation.
   */
  public enum ContextEnum {
    COMMAND_ABORT("COMMAND_ABORT"),
    
    CPU_READY_TIME("CPU_READY_TIME"),
    
    CPU_USAGE("CPU_USAGE"),
    
    CRASH_RATE("CRASH_RATE"),
    
    FAILURE_RATE("FAILURE_RATE"),
    
    HYPERVISOR_PACKETS_RECEIVED_DROPPED("HYPERVISOR_PACKETS_RECEIVED_DROPPED"),
    
    HYPERVISOR_PACKETS_TRANSMITTED_DROPPED("HYPERVISOR_PACKETS_TRANSMITTED_DROPPED"),
    
    MEMORY_COMPRESSION_RATE("MEMORY_COMPRESSION_RATE"),
    
    MEMORY_DECOMPRESSION_RATE("MEMORY_DECOMPRESSION_RATE"),
    
    MEMORY_SWAP_IN_RATE("MEMORY_SWAP_IN_RATE"),
    
    MEMORY_SWAP_OUT_RATE("MEMORY_SWAP_OUT_RATE"),
    
    MEMORY_USAGE("MEMORY_USAGE"),
    
    NETWORK_HIGH_RECEIVED_UTILIZATION_RATE("NETWORK_HIGH_RECEIVED_UTILIZATION_RATE"),
    
    NETWORK_HIGH_TRANSMITTED_UTILIZATION_RATE("NETWORK_HIGH_TRANSMITTED_UTILIZATION_RATE"),
    
    NETWORK_PACKETS_RECEIVED_DROPPED("NETWORK_PACKETS_RECEIVED_DROPPED"),
    
    NETWORK_PACKETS_TRANSMITTED_DROPPED("NETWORK_PACKETS_TRANSMITTED_DROPPED"),
    
    NETWORK_RECEIVED_ERROR_RATE("NETWORK_RECEIVED_ERROR_RATE"),
    
    NETWORK_TRANSMITTED_ERROR_RATE("NETWORK_TRANSMITTED_ERROR_RATE"),
    
    PAGE_FAULTS("PAGE_FAULTS"),
    
    PG_AVAILABLE("PG_AVAILABLE"),
    
    RESPONSE_TIME_50TH_PERCENTILE("RESPONSE_TIME_50TH_PERCENTILE"),
    
    RESPONSE_TIME_90TH_PERCENTILE("RESPONSE_TIME_90TH_PERCENTILE");

    private String value;

    ContextEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContextEnum fromValue(String value) {
      for (ContextEnum b : ContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTEXT = "context";
  private ContextEnum context;

  public static final String JSON_PROPERTY_VALUE = "value";
  private Float value;

  /**
   * The unit of the severity value.
   */
  public enum UnitEnum {
    BILLION_BILCOUNT_("Billion (bilcount)"),
    
    BIT_BIT_("Bit (bit)"),
    
    BITPERHOUR_BIT_H_("BitPerHour (bit/h)"),
    
    BITPERMINUTE_BIT_MIN_("BitPerMinute (bit/min)"),
    
    BITPERSECOND_BIT_S_("BitPerSecond (bit/s)"),
    
    BYTE_B_("Byte (B)"),
    
    BYTEPERHOUR_B_H_("BytePerHour (B/h)"),
    
    BYTEPERMINUTE_B_MIN_("BytePerMinute (B/min)"),
    
    BYTEPERSECOND_B_S_("BytePerSecond (B/s)"),
    
    CORES("Cores"),
    
    COUNT_COUNT_("Count (count)"),
    
    DAY_DS_("Day (ds)"),
    
    DECIBELMILLIWATT_DBM_("DecibelMilliWatt (dBm)"),
    
    G("G"),
    
    GIBIBYTE_GIB_("GibiByte (GiB)"),
    
    GIGABYTE_GB_("GigaByte (GB)"),
    
    HOUR_HS_("Hour (hs)"),
    
    KIBIBYTE_KIB_("KibiByte (KiB)"),
    
    KIBIBYTEPERHOUR_KIB_H_("KibiBytePerHour (KiB/h)"),
    
    KIBIBYTEPERMINUTE_KIB_MIN_("KibiBytePerMinute (KiB/min)"),
    
    KIBIBYTEPERSECOND_KIB_S_("KibiBytePerSecond (KiB/s)"),
    
    KILOBYTE_KB_("KiloByte (kB)"),
    
    KILOBYTEPERHOUR_KB_H_("KiloBytePerHour (kB/h)"),
    
    KILOBYTEPERMINUTE_KB_MIN_("KiloBytePerMinute (kB/min)"),
    
    KILOBYTEPERSECOND_KB_S_("KiloBytePerSecond (kB/s)"),
    
    M("M"),
    
    MSU("MSU"),
    
    MEBIBYTE_MIB_("MebiByte (MiB)"),
    
    MEBIBYTEPERHOUR_MIB_H_("MebiBytePerHour (MiB/h)"),
    
    MEBIBYTEPERMINUTE_MIB_MIN_("MebiBytePerMinute (MiB/min)"),
    
    MEBIBYTEPERSECOND_MIB_S_("MebiBytePerSecond (MiB/s)"),
    
    MEGABYTE_MB_("MegaByte (MB)"),
    
    MEGABYTEPERHOUR_MB_H_("MegaBytePerHour (MB/h)"),
    
    MEGABYTEPERMINUTE_MB_MIN_("MegaBytePerMinute (MB/min)"),
    
    MEGABYTEPERSECOND_MB_S_("MegaBytePerSecond (MB/s)"),
    
    MICROSECOND_S_("MicroSecond (µs)"),
    
    MILLISECOND_MS_("MilliSecond (ms)"),
    
    MILLISECONDPERMINUTE_MS_MIN_("MilliSecondPerMinute (ms/min)"),
    
    MILLION_MILCOUNT_("Million (milcount)"),
    
    MINUTE_MINS_("Minute (mins)"),
    
    MONTH_MOS_("Month (mos)"),
    
    N_A("N/A"),
    
    NANOSECOND_NS_("NanoSecond (ns)"),
    
    NANOSECONDPERMINUTE_NS_MIN_("NanoSecondPerMinute (ns/min)"),
    
    PERHOUR_COUNT_H_("PerHour (count/h)"),
    
    PERMINUTE_COUNT_MIN_("PerMinute (count/min)"),
    
    PERSECOND_COUNT_S_("PerSecond (count/s)"),
    
    PERCENT_("Percent (%)"),
    
    PIXEL_PX_("Pixel (px)"),
    
    PROMILLE_("Promille (‰)"),
    
    RATIO("Ratio"),
    
    SECOND_S_("Second (s)"),
    
    STATE("State"),
    
    UNSPECIFIED("Unspecified"),
    
    WEEK_WS_("Week (ws)"),
    
    YEAR_YS_("Year (ys)"),
    
    K("k"),
    
    KM_H("km/h"),
    
    M_H("m/h"),
    
    M_S("m/s"),
    
    MCORES("mCores");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT = "unit";
  private UnitEnum unit;

  public EventSeverity() { 
  }

  public EventSeverity context(ContextEnum context) {
    this.context = context;
    return this;
  }

   /**
   * The metric used in the event severity calculation.
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric used in the event severity calculation.")
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContextEnum getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(ContextEnum context) {
    this.context = context;
  }


  public EventSeverity value(Float value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the severity.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value of the severity.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(Float value) {
    this.value = value;
  }


  public EventSeverity unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The unit of the severity value.
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of the severity value.")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitEnum getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  /**
   * Return true if this EventSeverity object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSeverity eventSeverity = (EventSeverity) o;
    return Objects.equals(this.context, eventSeverity.context) &&
        Objects.equals(this.value, eventSeverity.value) &&
        Objects.equals(this.unit, eventSeverity.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, value, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSeverity {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

