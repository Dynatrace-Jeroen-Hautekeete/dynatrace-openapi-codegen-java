/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.Duration;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CreateToken
 */
@JsonPropertyOrder({
  CreateToken.JSON_PROPERTY_NAME,
  CreateToken.JSON_PROPERTY_EXPIRES_IN,
  CreateToken.JSON_PROPERTY_SCOPES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class CreateToken {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_EXPIRES_IN = "expiresIn";
  private Duration expiresIn;

  /**
   * Gets or Sets scopes
   */
  public enum ScopesEnum {
    INSTALLERDOWNLOAD("InstallerDownload"),
    
    DATAEXPORT("DataExport"),
    
    PLUGINUPLOAD("PluginUpload"),
    
    SUPPORTALERT("SupportAlert"),
    
    ADVANCEDSYNTHETICINTEGRATION("AdvancedSyntheticIntegration"),
    
    EXTERNALSYNTHETICINTEGRATION("ExternalSyntheticIntegration"),
    
    APPMONINTEGRATION("AppMonIntegration"),
    
    RUMBROWSEREXTENSION("RumBrowserExtension"),
    
    LOGEXPORT("LogExport"),
    
    READCONFIG("ReadConfig"),
    
    WRITECONFIG("WriteConfig"),
    
    DTAQLACCESS("DTAQLAccess"),
    
    USERSESSIONANONYMIZATION("UserSessionAnonymization"),
    
    DATAPRIVACY("DataPrivacy"),
    
    CAPTUREREQUESTDATA("CaptureRequestData"),
    
    DAVIS("Davis"),
    
    DSSFILEMANAGEMENT("DssFileManagement"),
    
    RUMJAVASCRIPTTAGMANAGEMENT("RumJavaScriptTagManagement"),
    
    TENANTTOKENMANAGEMENT("TenantTokenManagement"),
    
    ACTIVEGATECERTMANAGEMENT("ActiveGateCertManagement"),
    
    RESTREQUESTFORWARDING("RestRequestForwarding"),
    
    READSYNTHETICDATA("ReadSyntheticData"),
    
    DATAIMPORT("DataImport"),
    
    SYNTHETICEXECUTIONS_WRITE("syntheticExecutions.write"),
    
    SYNTHETICEXECUTIONS_READ("syntheticExecutions.read"),
    
    AUDITLOGS_READ("auditLogs.read"),
    
    METRICS_READ("metrics.read"),
    
    METRICS_WRITE("metrics.write"),
    
    ENTITIES_READ("entities.read"),
    
    ENTITIES_WRITE("entities.write"),
    
    PROBLEMS_READ("problems.read"),
    
    PROBLEMS_WRITE("problems.write"),
    
    EVENTS_READ("events.read"),
    
    EVENTS_INGEST("events.ingest"),
    
    NETWORKZONES_READ("networkZones.read"),
    
    NETWORKZONES_WRITE("networkZones.write"),
    
    ACTIVEGATES_READ("activeGates.read"),
    
    ACTIVEGATES_WRITE("activeGates.write"),
    
    ACTIVEGATETOKENMANAGEMENT_READ("activeGateTokenManagement.read"),
    
    ACTIVEGATETOKENMANAGEMENT_CREATE("activeGateTokenManagement.create"),
    
    ACTIVEGATETOKENMANAGEMENT_WRITE("activeGateTokenManagement.write"),
    
    CREDENTIALVAULT_READ("credentialVault.read"),
    
    CREDENTIALVAULT_WRITE("credentialVault.write"),
    
    EXTENSIONS_READ("extensions.read"),
    
    EXTENSIONS_WRITE("extensions.write"),
    
    EXTENSIONCONFIGURATIONS_READ("extensionConfigurations.read"),
    
    EXTENSIONCONFIGURATIONS_WRITE("extensionConfigurations.write"),
    
    EXTENSIONENVIRONMENT_READ("extensionEnvironment.read"),
    
    EXTENSIONENVIRONMENT_WRITE("extensionEnvironment.write"),
    
    METRICS_INGEST("metrics.ingest"),
    
    SECURITYPROBLEMS_READ("securityProblems.read"),
    
    SECURITYPROBLEMS_WRITE("securityProblems.write"),
    
    SYNTHETICLOCATIONS_READ("syntheticLocations.read"),
    
    SYNTHETICLOCATIONS_WRITE("syntheticLocations.write"),
    
    SETTINGS_READ("settings.read"),
    
    SETTINGS_WRITE("settings.write"),
    
    TENANTTOKENROTATION_WRITE("tenantTokenRotation.write"),
    
    SLO_READ("slo.read"),
    
    SLO_WRITE("slo.write"),
    
    RELEASES_READ("releases.read"),
    
    APITOKENS_READ("apiTokens.read"),
    
    APITOKENS_WRITE("apiTokens.write"),
    
    OPENTELEMETRYTRACE_INGEST("openTelemetryTrace.ingest"),
    
    LOGS_READ("logs.read"),
    
    LOGS_INGEST("logs.ingest"),
    
    GEOGRAPHICREGIONS_READ("geographicRegions.read"),
    
    HUB_READ("hub.read"),
    
    ONEAGENTS_READ("oneAgents.read"),
    
    ONEAGENTS_WRITE("oneAgents.write"),
    
    TRACES_LOOKUP("traces.lookup"),
    
    HUB_WRITE("hub.write");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopesEnum fromValue(String value) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  private Set<ScopesEnum> scopes = new LinkedHashSet<>();

  public CreateToken() { 
  }

  public CreateToken name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the token.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the token.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CreateToken expiresIn(Duration expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * Get expiresIn
   * @return expiresIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Duration getExpiresIn() {
    return expiresIn;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresIn(Duration expiresIn) {
    this.expiresIn = expiresIn;
  }


  public CreateToken scopes(Set<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public CreateToken addScopesItem(ScopesEnum scopesItem) {
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * The list of scopes to be assigned to the token.  * &#x60;InstallerDownload&#x60;: PaaS integration - Installer download.  * &#x60;DataExport&#x60;: Access problem and event feed, metrics, and topology.  * &#x60;PluginUpload&#x60;: Upload Extension.  * &#x60;SupportAlert&#x60;: PaaS integration - Support alert.  * &#x60;AdvancedSyntheticIntegration&#x60;: Dynatrace module integration - Synthetic Classic.  * &#x60;ExternalSyntheticIntegration&#x60;: Create and read synthetic monitors, locations, and nodes.  * &#x60;AppMonIntegration&#x60;: Dynatrace module integration - AppMon.  * &#x60;RumBrowserExtension&#x60;: RUM Browser Extension.  * &#x60;LogExport&#x60;: Read logs.  * &#x60;ReadConfig&#x60;: Read configuration.  * &#x60;WriteConfig&#x60;: Write configuration.  * &#x60;DTAQLAccess&#x60;: User sessions.  * &#x60;UserSessionAnonymization&#x60;: Anonymize user session data for data privacy reasons.  * &#x60;DataPrivacy&#x60;: Change data privacy settings.  * &#x60;CaptureRequestData&#x60;: Capture request data.  * &#x60;Davis&#x60;: Dynatrace module integration - Davis.  * &#x60;DssFileManagement&#x60;: Mobile symbolication file management.  * &#x60;RumJavaScriptTagManagement&#x60;: Real user monitoring JavaScript tag management.  * &#x60;TenantTokenManagement&#x60;: Token management.  * &#x60;ActiveGateCertManagement&#x60;: ActiveGate certificate management.  * &#x60;RestRequestForwarding&#x60;: Fetch data from a remote environment.  * &#x60;ReadSyntheticData&#x60;: Read synthetic monitors, locations, and nodes.  * &#x60;DataImport&#x60;: Data ingest, e.g.: metrics and events.  * &#x60;syntheticExecutions.write&#x60;: Write synthetic monitor executions.  * &#x60;syntheticExecutions.read&#x60;: Read synthetic monitor execution results.  * &#x60;auditLogs.read&#x60;: Read audit logs.  * &#x60;metrics.read&#x60;: Read metrics.  * &#x60;metrics.write&#x60;: Write metrics.  * &#x60;entities.read&#x60;: Read entities.  * &#x60;entities.write&#x60;: Write entities.  * &#x60;problems.read&#x60;: Read problems.  * &#x60;problems.write&#x60;: Write problems.  * &#x60;events.read&#x60;: Read events.  * &#x60;events.ingest&#x60;: Ingest events.  * &#x60;networkZones.read&#x60;: Read network zones.  * &#x60;networkZones.write&#x60;: Write network zones.  * &#x60;activeGates.read&#x60;: Read ActiveGates.  * &#x60;activeGates.write&#x60;: Write ActiveGates.  * &#x60;activeGateTokenManagement.read&#x60;: Read ActiveGate tokens.  * &#x60;activeGateTokenManagement.create&#x60;: Create ActiveGate tokens.  * &#x60;activeGateTokenManagement.write&#x60;: Write ActiveGate tokens.  * &#x60;credentialVault.read&#x60;: Read credential vault entries.  * &#x60;credentialVault.write&#x60;: Write credential vault entries.  * &#x60;extensions.read&#x60;: Read extensions.  * &#x60;extensions.write&#x60;: Write extensions.  * &#x60;extensionConfigurations.read&#x60;: Read extension monitoring configurations.  * &#x60;extensionConfigurations.write&#x60;: Write extension monitoring configurations.  * &#x60;extensionEnvironment.read&#x60;: Read extension environment configurations.  * &#x60;extensionEnvironment.write&#x60;: Write extension environment configurations.  * &#x60;metrics.ingest&#x60;: Ingest metrics.  * &#x60;securityProblems.read&#x60;: Read security problems.  * &#x60;securityProblems.write&#x60;: Write security problems.  * &#x60;syntheticLocations.read&#x60;: Read synthetic locations.  * &#x60;syntheticLocations.write&#x60;: Write synthetic locations.  * &#x60;settings.read&#x60;: Read settings.  * &#x60;settings.write&#x60;: Write settings.  * &#x60;tenantTokenRotation.write&#x60;: Tenant token rotation.  * &#x60;slo.read&#x60;: Read SLO.  * &#x60;slo.write&#x60;: Write SLO.  * &#x60;releases.read&#x60;: Read releases.  * &#x60;apiTokens.read&#x60;: Read API tokens.  * &#x60;apiTokens.write&#x60;: Write API tokens.  * &#x60;openTelemetryTrace.ingest&#x60;: Ingest OpenTelemetry traces.  * &#x60;logs.read&#x60;: Read logs.  * &#x60;logs.ingest&#x60;: Ingest logs.  * &#x60;geographicRegions.read&#x60;: Read Geographic regions.  * &#x60;hub.read&#x60;: Read Hub related data.  * &#x60;oneAgents.read&#x60;: Read OneAgents.  * &#x60;oneAgents.write&#x60;: Write OneAgents.  * &#x60;traces.lookup&#x60;: Look up a single trace.  * &#x60;hub.write&#x60;: Write Hub related data.  
   * @return scopes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of scopes to be assigned to the token.  * `InstallerDownload`: PaaS integration - Installer download.  * `DataExport`: Access problem and event feed, metrics, and topology.  * `PluginUpload`: Upload Extension.  * `SupportAlert`: PaaS integration - Support alert.  * `AdvancedSyntheticIntegration`: Dynatrace module integration - Synthetic Classic.  * `ExternalSyntheticIntegration`: Create and read synthetic monitors, locations, and nodes.  * `AppMonIntegration`: Dynatrace module integration - AppMon.  * `RumBrowserExtension`: RUM Browser Extension.  * `LogExport`: Read logs.  * `ReadConfig`: Read configuration.  * `WriteConfig`: Write configuration.  * `DTAQLAccess`: User sessions.  * `UserSessionAnonymization`: Anonymize user session data for data privacy reasons.  * `DataPrivacy`: Change data privacy settings.  * `CaptureRequestData`: Capture request data.  * `Davis`: Dynatrace module integration - Davis.  * `DssFileManagement`: Mobile symbolication file management.  * `RumJavaScriptTagManagement`: Real user monitoring JavaScript tag management.  * `TenantTokenManagement`: Token management.  * `ActiveGateCertManagement`: ActiveGate certificate management.  * `RestRequestForwarding`: Fetch data from a remote environment.  * `ReadSyntheticData`: Read synthetic monitors, locations, and nodes.  * `DataImport`: Data ingest, e.g.: metrics and events.  * `syntheticExecutions.write`: Write synthetic monitor executions.  * `syntheticExecutions.read`: Read synthetic monitor execution results.  * `auditLogs.read`: Read audit logs.  * `metrics.read`: Read metrics.  * `metrics.write`: Write metrics.  * `entities.read`: Read entities.  * `entities.write`: Write entities.  * `problems.read`: Read problems.  * `problems.write`: Write problems.  * `events.read`: Read events.  * `events.ingest`: Ingest events.  * `networkZones.read`: Read network zones.  * `networkZones.write`: Write network zones.  * `activeGates.read`: Read ActiveGates.  * `activeGates.write`: Write ActiveGates.  * `activeGateTokenManagement.read`: Read ActiveGate tokens.  * `activeGateTokenManagement.create`: Create ActiveGate tokens.  * `activeGateTokenManagement.write`: Write ActiveGate tokens.  * `credentialVault.read`: Read credential vault entries.  * `credentialVault.write`: Write credential vault entries.  * `extensions.read`: Read extensions.  * `extensions.write`: Write extensions.  * `extensionConfigurations.read`: Read extension monitoring configurations.  * `extensionConfigurations.write`: Write extension monitoring configurations.  * `extensionEnvironment.read`: Read extension environment configurations.  * `extensionEnvironment.write`: Write extension environment configurations.  * `metrics.ingest`: Ingest metrics.  * `securityProblems.read`: Read security problems.  * `securityProblems.write`: Write security problems.  * `syntheticLocations.read`: Read synthetic locations.  * `syntheticLocations.write`: Write synthetic locations.  * `settings.read`: Read settings.  * `settings.write`: Write settings.  * `tenantTokenRotation.write`: Tenant token rotation.  * `slo.read`: Read SLO.  * `slo.write`: Write SLO.  * `releases.read`: Read releases.  * `apiTokens.read`: Read API tokens.  * `apiTokens.write`: Write API tokens.  * `openTelemetryTrace.ingest`: Ingest OpenTelemetry traces.  * `logs.read`: Read logs.  * `logs.ingest`: Ingest logs.  * `geographicRegions.read`: Read Geographic regions.  * `hub.read`: Read Hub related data.  * `oneAgents.read`: Read OneAgents.  * `oneAgents.write`: Write OneAgents.  * `traces.lookup`: Look up a single trace.  * `hub.write`: Write Hub related data.  ")
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<ScopesEnum> getScopes() {
    return scopes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScopes(Set<ScopesEnum> scopes) {
    this.scopes = scopes;
  }


  /**
   * Return true if this CreateToken object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateToken createToken = (CreateToken) o;
    return Objects.equals(this.name, createToken.name) &&
        Objects.equals(this.expiresIn, createToken.expiresIn) &&
        Objects.equals(this.scopes, createToken.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, expiresIn, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateToken {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

