/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ActiveGateConnectionInfo;
import com.dynatrace.apis.envv1.model.ActiveGateInstallerVersions;
import com.dynatrace.apis.envv1.model.AgentInstallerVersions;
import com.dynatrace.apis.envv1.model.AgentProcessModuleConfigResponse;
import com.dynatrace.apis.envv1.model.BoshReleaseAvailableVersions;
import com.dynatrace.apis.envv1.model.BoshReleaseChecksum;
import com.dynatrace.apis.envv1.model.ConnectionInfo;
import com.dynatrace.apis.envv1.model.InstallerMetaInfoDto;
import com.dynatrace.apis.envv1.model.LatestLambdaLayerNames;
import com.dynatrace.apis.envv1.model.OneAgentInstallerChecksum;
import java.util.Set;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class DeploymentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DeploymentApi() {
    this(new ApiClient());
  }

  public DeploymentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Downloads OneAgent installer of the specified version
   * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param version The required version of the OneAgent in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of OneAgent**](https://dt-url.net/fo23rb5) call. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @throws ApiException if fails to make API call
   */
  public void downloadAgentInstallerWithVersion(String osType, String installerType, String version, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    downloadAgentInstallerWithVersionWithHttpInfo(osType, installerType, version, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
  }

  /**
   * Downloads OneAgent installer of the specified version
   * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param version The required version of the OneAgent in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of OneAgent**](https://dt-url.net/fo23rb5) call. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadAgentInstallerWithVersionWithHttpInfo(String osType, String installerType, String version, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadAgentInstallerWithVersionRequestBuilder(osType, installerType, version, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadAgentInstallerWithVersion", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadAgentInstallerWithVersionRequestBuilder(String osType, String installerType, String version, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling downloadAgentInstallerWithVersion");
    }
    // verify the required parameter 'installerType' is set
    if (installerType == null) {
      throw new ApiException(400, "Missing the required parameter 'installerType' when calling downloadAgentInstallerWithVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling downloadAgentInstallerWithVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/{osType}/{installerType}/version/{version}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{installerType}", ApiClient.urlEncode(installerType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flavor", flavor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bitness", bitness));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipMetadata", skipMetadata));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifNoneMatch != null) {
      localVarRequestBuilder.header("If-None-Match", ifNoneMatch.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the requested version matching OneAgent deployment orchestration tarball&#39;s signature
   * Downloading the requested version matching deployment orchestration tarball&#39;s signature matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @param version The requested version of the OneAgent deployment orchestration tarball in &#x60;0.1.0.20200925-120822&#x60; format. (required)
   * @throws ApiException if fails to make API call
   */
  public void downloadAgentOrchestrationSignatureWithVersion(String orchestrationType, String version) throws ApiException {
    downloadAgentOrchestrationSignatureWithVersionWithHttpInfo(orchestrationType, version);
  }

  /**
   * Downloads the requested version matching OneAgent deployment orchestration tarball&#39;s signature
   * Downloading the requested version matching deployment orchestration tarball&#39;s signature matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @param version The requested version of the OneAgent deployment orchestration tarball in &#x60;0.1.0.20200925-120822&#x60; format. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadAgentOrchestrationSignatureWithVersionWithHttpInfo(String orchestrationType, String version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadAgentOrchestrationSignatureWithVersionRequestBuilder(orchestrationType, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadAgentOrchestrationSignatureWithVersion", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadAgentOrchestrationSignatureWithVersionRequestBuilder(String orchestrationType, String version) throws ApiException {
    // verify the required parameter 'orchestrationType' is set
    if (orchestrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'orchestrationType' when calling downloadAgentOrchestrationSignatureWithVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling downloadAgentOrchestrationSignatureWithVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/orchestration/agent/{orchestrationType}/version/{version}/signature"
        .replace("{orchestrationType}", ApiClient.urlEncode(orchestrationType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the requested version matching OneAgent deployment orchestration tarball
   * Downloading the requested version matching deployment orchestration tarball matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @param version The requested version of the OneAgent orchestration deployment tarball in &#x60;0.1.0.20200925-120822&#x60; format. (required)
   * @throws ApiException if fails to make API call
   */
  public void downloadAgentOrchestrationWithVersion(String orchestrationType, String version) throws ApiException {
    downloadAgentOrchestrationWithVersionWithHttpInfo(orchestrationType, version);
  }

  /**
   * Downloads the requested version matching OneAgent deployment orchestration tarball
   * Downloading the requested version matching deployment orchestration tarball matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @param version The requested version of the OneAgent orchestration deployment tarball in &#x60;0.1.0.20200925-120822&#x60; format. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadAgentOrchestrationWithVersionWithHttpInfo(String orchestrationType, String version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadAgentOrchestrationWithVersionRequestBuilder(orchestrationType, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadAgentOrchestrationWithVersion", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadAgentOrchestrationWithVersionRequestBuilder(String orchestrationType, String version) throws ApiException {
    // verify the required parameter 'orchestrationType' is set
    if (orchestrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'orchestrationType' when calling downloadAgentOrchestrationWithVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling downloadAgentOrchestrationWithVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/orchestration/agent/{orchestrationType}/version/{version}"
        .replace("{orchestrationType}", ApiClient.urlEncode(orchestrationType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads BOSH release tarballs of the specified version, OneAgent included
   * For SaaS, the call is executed on an Environment ActiveGate. Be sure to use the base of an ActiveGate, **not** the environment.
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the OneAgent in the &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    If not set, &#x60;false&#x60; is used. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @throws ApiException if fails to make API call
   */
  public void downloadBoshReleaseWithVersion(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    downloadBoshReleaseWithVersionWithHttpInfo(osType, version, skipMetadata, networkZone);
  }

  /**
   * Downloads BOSH release tarballs of the specified version, OneAgent included
   * For SaaS, the call is executed on an Environment ActiveGate. Be sure to use the base of an ActiveGate, **not** the environment.
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the OneAgent in the &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    If not set, &#x60;false&#x60; is used. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadBoshReleaseWithVersionWithHttpInfo(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadBoshReleaseWithVersionRequestBuilder(osType, version, skipMetadata, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadBoshReleaseWithVersion", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadBoshReleaseWithVersionRequestBuilder(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling downloadBoshReleaseWithVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling downloadBoshReleaseWithVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/boshrelease/agent/{osType}/version/{version}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipMetadata", skipMetadata));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the ActiveGate installer of the specified version
   * 
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the ActiveGate installer, in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of ActiveGate**](https://dt-url.net/kh43rha) call. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param networkZone The network zone you want the result to be configured with. Requires at least ActiveGate version 1.247. (optional)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @throws ApiException if fails to make API call
   */
  public void downloadGatewayInstallerWithVersion(String osType, String version, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    downloadGatewayInstallerWithVersionWithHttpInfo(osType, version, ifNoneMatch, networkZone, arch);
  }

  /**
   * Downloads the ActiveGate installer of the specified version
   * 
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the ActiveGate installer, in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of ActiveGate**](https://dt-url.net/kh43rha) call. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param networkZone The network zone you want the result to be configured with. Requires at least ActiveGate version 1.247. (optional)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadGatewayInstallerWithVersionWithHttpInfo(String osType, String version, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadGatewayInstallerWithVersionRequestBuilder(osType, version, ifNoneMatch, networkZone, arch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadGatewayInstallerWithVersion", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadGatewayInstallerWithVersionRequestBuilder(String osType, String version, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling downloadGatewayInstallerWithVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling downloadGatewayInstallerWithVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/gateway/{osType}/version/{version}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifNoneMatch != null) {
      localVarRequestBuilder.header("If-None-Match", ifNoneMatch.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the latest OneAgent installer
   * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @throws ApiException if fails to make API call
   */
  public void downloadLatestAgentInstaller(String osType, String installerType, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    downloadLatestAgentInstallerWithHttpInfo(osType, installerType, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
  }

  /**
   * Downloads the latest OneAgent installer
   * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadLatestAgentInstallerWithHttpInfo(String osType, String installerType, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadLatestAgentInstallerRequestBuilder(osType, installerType, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadLatestAgentInstaller", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadLatestAgentInstallerRequestBuilder(String osType, String installerType, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, Boolean skipMetadata, String networkZone) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling downloadLatestAgentInstaller");
    }
    // verify the required parameter 'installerType' is set
    if (installerType == null) {
      throw new ApiException(400, "Missing the required parameter 'installerType' when calling downloadLatestAgentInstaller");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/{osType}/{installerType}/latest"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{installerType}", ApiClient.urlEncode(installerType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flavor", flavor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bitness", bitness));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipMetadata", skipMetadata));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifNoneMatch != null) {
      localVarRequestBuilder.header("If-None-Match", ifNoneMatch.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the latest OneAgent deployment orchestration tarball
   * Downloading the latest available deployment orchestration script tarball matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @throws ApiException if fails to make API call
   */
  public void downloadLatestAgentOrchestration(String orchestrationType) throws ApiException {
    downloadLatestAgentOrchestrationWithHttpInfo(orchestrationType);
  }

  /**
   * Downloads the latest OneAgent deployment orchestration tarball
   * Downloading the latest available deployment orchestration script tarball matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadLatestAgentOrchestrationWithHttpInfo(String orchestrationType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadLatestAgentOrchestrationRequestBuilder(orchestrationType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadLatestAgentOrchestration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadLatestAgentOrchestrationRequestBuilder(String orchestrationType) throws ApiException {
    // verify the required parameter 'orchestrationType' is set
    if (orchestrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'orchestrationType' when calling downloadLatestAgentOrchestration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/orchestration/agent/{orchestrationType}/latest"
        .replace("{orchestrationType}", ApiClient.urlEncode(orchestrationType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the latest OneAgent deployment orchestration tarball&#39;s signature
   * Downloading the latest available deployment orchestration tarball&#39;s sigature matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @throws ApiException if fails to make API call
   */
  public void downloadLatestAgentOrchestrationSignature(String orchestrationType) throws ApiException {
    downloadLatestAgentOrchestrationSignatureWithHttpInfo(orchestrationType);
  }

  /**
   * Downloads the latest OneAgent deployment orchestration tarball&#39;s signature
   * Downloading the latest available deployment orchestration tarball&#39;s sigature matching the requested Orchestration Type (ansible, puppet).
   * @param orchestrationType The Orchestration Type of the orchestration deployment script. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadLatestAgentOrchestrationSignatureWithHttpInfo(String orchestrationType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadLatestAgentOrchestrationSignatureRequestBuilder(orchestrationType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadLatestAgentOrchestrationSignature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadLatestAgentOrchestrationSignatureRequestBuilder(String orchestrationType) throws ApiException {
    // verify the required parameter 'orchestrationType' is set
    if (orchestrationType == null) {
      throw new ApiException(400, "Missing the required parameter 'orchestrationType' when calling downloadLatestAgentOrchestrationSignature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/orchestration/agent/{orchestrationType}/latest/signature"
        .replace("{orchestrationType}", ApiClient.urlEncode(orchestrationType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the configured standard ActiveGate installer of the latest version for the specified OS
   * 
   * @param osType The operating system of the installer. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param networkZone The network zone you want the result to be configured with. Requires at least ActiveGate version 1.247. (optional)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @throws ApiException if fails to make API call
   */
  public void downloadLatestGatewayInstaller(String osType, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    downloadLatestGatewayInstallerWithHttpInfo(osType, ifNoneMatch, networkZone, arch);
  }

  /**
   * Downloads the configured standard ActiveGate installer of the latest version for the specified OS
   * 
   * @param osType The operating system of the installer. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param networkZone The network zone you want the result to be configured with. Requires at least ActiveGate version 1.247. (optional)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadLatestGatewayInstallerWithHttpInfo(String osType, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadLatestGatewayInstallerRequestBuilder(osType, ifNoneMatch, networkZone, arch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadLatestGatewayInstaller", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadLatestGatewayInstallerRequestBuilder(String osType, String ifNoneMatch, String networkZone, String arch) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling downloadLatestGatewayInstaller");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/gateway/{osType}/latest"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifNoneMatch != null) {
      localVarRequestBuilder.header("If-None-Match", ifNoneMatch.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available versions of ActiveGate installer
   * 
   * @param osType The operating system of the installer. (required)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @return ActiveGateInstallerVersions
   * @throws ApiException if fails to make API call
   */
  public ActiveGateInstallerVersions getActiveGateInstallerAvailableVersions(String osType, String arch) throws ApiException {
    ApiResponse<ActiveGateInstallerVersions> localVarResponse = getActiveGateInstallerAvailableVersionsWithHttpInfo(osType, arch);
    return localVarResponse.getData();
  }

  /**
   * Lists all available versions of ActiveGate installer
   * 
   * @param osType The operating system of the installer. (required)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Defaults to &#x60;amd64&#x60;.  * &#x60;amd64&#x60;: amd64 architecture. * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.    (optional, default to all)
   * @return ApiResponse&lt;ActiveGateInstallerVersions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateInstallerVersions> getActiveGateInstallerAvailableVersionsWithHttpInfo(String osType, String arch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getActiveGateInstallerAvailableVersionsRequestBuilder(osType, arch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getActiveGateInstallerAvailableVersions", localVarResponse);
        }
        return new ApiResponse<ActiveGateInstallerVersions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateInstallerVersions>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getActiveGateInstallerAvailableVersionsRequestBuilder(String osType, String arch) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getActiveGateInstallerAvailableVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/gateway/versions/{osType}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the connectivity information for Environment ActiveGate
   * 
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ActiveGateConnectionInfo
   * @throws ApiException if fails to make API call
   */
  public ActiveGateConnectionInfo getActiveGateInstallerConnectionInfo(String networkZone) throws ApiException {
    ApiResponse<ActiveGateConnectionInfo> localVarResponse = getActiveGateInstallerConnectionInfoWithHttpInfo(networkZone);
    return localVarResponse.getData();
  }

  /**
   * Gets the connectivity information for Environment ActiveGate
   * 
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;ActiveGateConnectionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateConnectionInfo> getActiveGateInstallerConnectionInfoWithHttpInfo(String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getActiveGateInstallerConnectionInfoRequestBuilder(networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getActiveGateInstallerConnectionInfo", localVarResponse);
        }
        return new ApiResponse<ActiveGateConnectionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateConnectionInfo>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getActiveGateInstallerConnectionInfoRequestBuilder(String networkZone) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/gateway/connectioninfo";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available versions of OneAgent installer
   * 
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @return AgentInstallerVersions
   * @throws ApiException if fails to make API call
   */
  public AgentInstallerVersions getAgentInstallerAvailableVersions(String osType, String installerType, String flavor, String arch) throws ApiException {
    ApiResponse<AgentInstallerVersions> localVarResponse = getAgentInstallerAvailableVersionsWithHttpInfo(osType, installerType, flavor, arch);
    return localVarResponse.getData();
  }

  /**
   * Lists all available versions of OneAgent installer
   * 
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @return ApiResponse&lt;AgentInstallerVersions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AgentInstallerVersions> getAgentInstallerAvailableVersionsWithHttpInfo(String osType, String installerType, String flavor, String arch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInstallerAvailableVersionsRequestBuilder(osType, installerType, flavor, arch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInstallerAvailableVersions", localVarResponse);
        }
        return new ApiResponse<AgentInstallerVersions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AgentInstallerVersions>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInstallerAvailableVersionsRequestBuilder(String osType, String installerType, String flavor, String arch) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getAgentInstallerAvailableVersions");
    }
    // verify the required parameter 'installerType' is set
    if (installerType == null) {
      throw new ApiException(400, "Missing the required parameter 'installerType' when calling getAgentInstallerAvailableVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/versions/{osType}/{installerType}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{installerType}", ApiClient.urlEncode(installerType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flavor", flavor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the connectivity information for OneAgent
   * 
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @param version The version of the OneAgent for which you&#39;re requesting connectivity information, in the &#x60;1.221&#x60; format.   Set this parameter to get the best format of endpoint list for optimal performance. (optional)
   * @return ConnectionInfo
   * @throws ApiException if fails to make API call
   */
  public ConnectionInfo getAgentInstallerConnectionInfo(String networkZone, String version) throws ApiException {
    ApiResponse<ConnectionInfo> localVarResponse = getAgentInstallerConnectionInfoWithHttpInfo(networkZone, version);
    return localVarResponse.getData();
  }

  /**
   * Gets the connectivity information for OneAgent
   * 
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @param version The version of the OneAgent for which you&#39;re requesting connectivity information, in the &#x60;1.221&#x60; format.   Set this parameter to get the best format of endpoint list for optimal performance. (optional)
   * @return ApiResponse&lt;ConnectionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionInfo> getAgentInstallerConnectionInfoWithHttpInfo(String networkZone, String version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInstallerConnectionInfoRequestBuilder(networkZone, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInstallerConnectionInfo", localVarResponse);
        }
        return new ApiResponse<ConnectionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionInfo>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInstallerConnectionInfoRequestBuilder(String networkZone, String version) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/connectioninfo";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("version", version));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of the ActiveGate-Endpoints to be used for Agents ordered by networkzone-priorities.
   * Highest priority first, separated by a semicolon.If no network zone provided the default zone is used. Responds with 404 if network zone is not known.
   * @param networkZone  (optional)
   * @throws ApiException if fails to make API call
   */
  public void getAgentInstallerConnectionInfoEndpoints(String networkZone) throws ApiException {
    getAgentInstallerConnectionInfoEndpointsWithHttpInfo(networkZone);
  }

  /**
   * Gets the list of the ActiveGate-Endpoints to be used for Agents ordered by networkzone-priorities.
   * Highest priority first, separated by a semicolon.If no network zone provided the default zone is used. Responds with 404 if network zone is not known.
   * @param networkZone  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getAgentInstallerConnectionInfoEndpointsWithHttpInfo(String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInstallerConnectionInfoEndpointsRequestBuilder(networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInstallerConnectionInfoEndpoints", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInstallerConnectionInfoEndpointsRequestBuilder(String networkZone) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/connectioninfo/endpoints";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the latest available version of a OneAgent installer
   * If a [standard version](https://dt-url.net/ml03yye) is configured, then this is the downloaded version.   Non-required parameters are only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @return InstallerMetaInfoDto
   * @throws ApiException if fails to make API call
   */
  public InstallerMetaInfoDto getAgentInstallerMetaInfo(String osType, String installerType, String flavor, String arch, String bitness) throws ApiException {
    ApiResponse<InstallerMetaInfoDto> localVarResponse = getAgentInstallerMetaInfoWithHttpInfo(osType, installerType, flavor, arch, bitness);
    return localVarResponse.getData();
  }

  /**
   * Gets the latest available version of a OneAgent installer
   * If a [standard version](https://dt-url.net/ml03yye) is configured, then this is the downloaded version.   Non-required parameters are only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer:   * &#x60;default&#x60;: Self-extracting installer for manual installation. Downloads an &#x60;.exe&#x60; file for Windows or an &#x60;.sh&#x60; file for Unix.  * &#x60;default-unattended&#x60;: Self-extracting installer for unattended installation. Windows only. Downloads a &#x60;.zip&#x60; archive, containing the &#x60;.msi&#x60; installer and the batch file. This option is deprecated with OneAgent version 1.173  * &#x60;paas&#x60;: Code modules installer. Downloads a &#x60;*.zip&#x60; archive, containing the &#x60;manifest.json&#x60; file with meta information or a &#x60;.jar&#x60; file for z/OS.  * &#x60;paas-sh&#x60;: Code modules installer. Downloads a self-extracting shell script with the embedded &#x60;tar.gz&#x60; archive. (required)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @return ApiResponse&lt;InstallerMetaInfoDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<InstallerMetaInfoDto> getAgentInstallerMetaInfoWithHttpInfo(String osType, String installerType, String flavor, String arch, String bitness) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInstallerMetaInfoRequestBuilder(osType, installerType, flavor, arch, bitness);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInstallerMetaInfo", localVarResponse);
        }
        return new ApiResponse<InstallerMetaInfoDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<InstallerMetaInfoDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInstallerMetaInfoRequestBuilder(String osType, String installerType, String flavor, String arch, String bitness) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getAgentInstallerMetaInfo");
    }
    // verify the required parameter 'installerType' is set
    if (installerType == null) {
      throw new ApiException(400, "Missing the required parameter 'installerType' when calling getAgentInstallerMetaInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/{osType}/{installerType}/latest/metainfo"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{installerType}", ApiClient.urlEncode(installerType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flavor", flavor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bitness", bitness));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the checksum of the specified OneAgent installer
   * The checksum is the sha256 hash of the installer file.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer. (required)
   * @param version The required version of the OneAgent in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of OneAgent**](https://dt-url.net/fo23rb5) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return OneAgentInstallerChecksum
   * @throws ApiException if fails to make API call
   */
  public OneAgentInstallerChecksum getAgentInstallerWithVersionChecksum(String osType, String installerType, String version, Boolean skipMetadata, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, String networkZone) throws ApiException {
    ApiResponse<OneAgentInstallerChecksum> localVarResponse = getAgentInstallerWithVersionChecksumWithHttpInfo(osType, installerType, version, skipMetadata, ifNoneMatch, flavor, arch, bitness, include, networkZone);
    return localVarResponse.getData();
  }

  /**
   * Gets the checksum of the specified OneAgent installer
   * The checksum is the sha256 hash of the installer file.
   * @param osType The operating system of the installer. (required)
   * @param installerType The type of the installer. (required)
   * @param version The required version of the OneAgent in &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of OneAgent**](https://dt-url.net/fo23rb5) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (required)
   * @param ifNoneMatch The ETag of the previous request. Do not download if it matches the ETag of the installer. (optional)
   * @param flavor The flavor of your Linux distribution:   * &#x60;musl&#x60; for Linux distributions, which are using the musl C standard library, for example Alpine Linux.  * &#39;multidistro&#x60; for all Linux distributions which are using musl C and glibc standard library.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to default)
   * @param arch The architecture of your OS:   * &#x60;all&#x60;: Use this value for AIX and z/OS. Defaults to &#x60;x86&#x60; for other OS types.  * &#x60;x86&#x60;: x86 architecture. * &#x60;ppc&#x60;: PowerPC architecture, only supported for AIX and Linux. * &#x60;ppcle&#x60;: PowerPC Little Endian architecture, only supported for Linux. * &#x60;sparc&#x60;: Sparc architecture, only supported for Solaris.   * &#x60;arm&#x60;: ARM architecture, only supported for Linux.   * &#x60;s390&#x60;: S/390 architecture, only supported for Linux.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param bitness The bitness of your OS. Must be supported by the OS.    Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional, default to all)
   * @param include The code modules to be included to the installer. You can specify several modules in the following format: &#x60;include&#x3D;java&amp;include&#x3D;dotnet&#x60;.   Only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types. (optional
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;OneAgentInstallerChecksum&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OneAgentInstallerChecksum> getAgentInstallerWithVersionChecksumWithHttpInfo(String osType, String installerType, String version, Boolean skipMetadata, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInstallerWithVersionChecksumRequestBuilder(osType, installerType, version, skipMetadata, ifNoneMatch, flavor, arch, bitness, include, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInstallerWithVersionChecksum", localVarResponse);
        }
        return new ApiResponse<OneAgentInstallerChecksum>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OneAgentInstallerChecksum>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInstallerWithVersionChecksumRequestBuilder(String osType, String installerType, String version, Boolean skipMetadata, String ifNoneMatch, String flavor, String arch, String bitness, Set<String> include, String networkZone) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getAgentInstallerWithVersionChecksum");
    }
    // verify the required parameter 'installerType' is set
    if (installerType == null) {
      throw new ApiException(400, "Missing the required parameter 'installerType' when calling getAgentInstallerWithVersionChecksum");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getAgentInstallerWithVersionChecksum");
    }
    // verify the required parameter 'skipMetadata' is set
    if (skipMetadata == null) {
      throw new ApiException(400, "Missing the required parameter 'skipMetadata' when calling getAgentInstallerWithVersionChecksum");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/{osType}/{installerType}/version/{version}/checksum"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{installerType}", ApiClient.urlEncode(installerType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flavor", flavor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("arch", arch));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bitness", bitness));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipMetadata", skipMetadata));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifNoneMatch != null) {
      localVarRequestBuilder.header("If-None-Match", ifNoneMatch.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the latest process module config | maturity&#x3D;EARLY_ADOPTER
   * Returns the latest process module config. Passing a previously gotten revision will first do a revision check, and return a 304 response if no changes were detected.
   * @param revision The previously received revision to compare against. (optional)
   * @return AgentProcessModuleConfigResponse
   * @throws ApiException if fails to make API call
   */
  public AgentProcessModuleConfigResponse getAgentProcessModuleConfig(Long revision) throws ApiException {
    ApiResponse<AgentProcessModuleConfigResponse> localVarResponse = getAgentProcessModuleConfigWithHttpInfo(revision);
    return localVarResponse.getData();
  }

  /**
   * Gets the latest process module config | maturity&#x3D;EARLY_ADOPTER
   * Returns the latest process module config. Passing a previously gotten revision will first do a revision check, and return a 304 response if no changes were detected.
   * @param revision The previously received revision to compare against. (optional)
   * @return ApiResponse&lt;AgentProcessModuleConfigResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AgentProcessModuleConfigResponse> getAgentProcessModuleConfigWithHttpInfo(Long revision) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentProcessModuleConfigRequestBuilder(revision);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentProcessModuleConfig", localVarResponse);
        }
        return new ApiResponse<AgentProcessModuleConfigResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AgentProcessModuleConfigResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentProcessModuleConfigRequestBuilder(Long revision) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/installer/agent/processmoduleconfig";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("revision", revision));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of available OneAgent versions for BOSH release tarballs
   * 
   * @param osType The operating system of the installer. (required)
   * @return BoshReleaseAvailableVersions
   * @throws ApiException if fails to make API call
   */
  public BoshReleaseAvailableVersions getBoshReleaseAvailableVersions(String osType) throws ApiException {
    ApiResponse<BoshReleaseAvailableVersions> localVarResponse = getBoshReleaseAvailableVersionsWithHttpInfo(osType);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of available OneAgent versions for BOSH release tarballs
   * 
   * @param osType The operating system of the installer. (required)
   * @return ApiResponse&lt;BoshReleaseAvailableVersions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BoshReleaseAvailableVersions> getBoshReleaseAvailableVersionsWithHttpInfo(String osType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBoshReleaseAvailableVersionsRequestBuilder(osType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBoshReleaseAvailableVersions", localVarResponse);
        }
        return new ApiResponse<BoshReleaseAvailableVersions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BoshReleaseAvailableVersions>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBoshReleaseAvailableVersionsRequestBuilder(String osType) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getBoshReleaseAvailableVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/boshrelease/versions/{osType}"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the checksum of the specified BOSH release tarball
   * The checksum is the sha256 hash of the installer file.   Result is not stable if **skipMetadata** is set to &#x60;false&#x60;.  For SaaS only works on environment ActiveGates version 1.176 or higher
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the OneAgent in the &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    If not set, &#x60;false&#x60; is used. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return BoshReleaseChecksum
   * @throws ApiException if fails to make API call
   */
  public BoshReleaseChecksum getBoshReleaseChecksum(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    ApiResponse<BoshReleaseChecksum> localVarResponse = getBoshReleaseChecksumWithHttpInfo(osType, version, skipMetadata, networkZone);
    return localVarResponse.getData();
  }

  /**
   * Gets the checksum of the specified BOSH release tarball
   * The checksum is the sha256 hash of the installer file.   Result is not stable if **skipMetadata** is set to &#x60;false&#x60;.  For SaaS only works on environment ActiveGates version 1.176 or higher
   * @param osType The operating system of the installer. (required)
   * @param version The required version of the OneAgent in the &#x60;1.155.275.20181112-084458&#x60; format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call. (required)
   * @param skipMetadata Set &#x60;true&#x60; to omit the OneAgent connectivity information from the installer.    If not set, &#x60;false&#x60; is used. (optional, default to false)
   * @param networkZone The network zone you want the result to be configured with. (optional)
   * @return ApiResponse&lt;BoshReleaseChecksum&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BoshReleaseChecksum> getBoshReleaseChecksumWithHttpInfo(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBoshReleaseChecksumRequestBuilder(osType, version, skipMetadata, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBoshReleaseChecksum", localVarResponse);
        }
        return new ApiResponse<BoshReleaseChecksum>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BoshReleaseChecksum>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBoshReleaseChecksumRequestBuilder(String osType, String version, Boolean skipMetadata, String networkZone) throws ApiException {
    // verify the required parameter 'osType' is set
    if (osType == null) {
      throw new ApiException(400, "Missing the required parameter 'osType' when calling getBoshReleaseChecksum");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getBoshReleaseChecksum");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/boshrelease/agent/{osType}/version/{version}/checksum"
        .replace("{osType}", ApiClient.urlEncode(osType.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipMetadata", skipMetadata));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("networkZone", networkZone));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the latest version names of the OneAgent for AWS Lambda
   * Get the latest version names of the OneAgent for the Java, Node.js, and Python AWS Lambda runtime.
   * @return LatestLambdaLayerNames
   * @throws ApiException if fails to make API call
   */
  public LatestLambdaLayerNames getLatestLambdaBuildUnits() throws ApiException {
    ApiResponse<LatestLambdaLayerNames> localVarResponse = getLatestLambdaBuildUnitsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get the latest version names of the OneAgent for AWS Lambda
   * Get the latest version names of the OneAgent for the Java, Node.js, and Python AWS Lambda runtime.
   * @return ApiResponse&lt;LatestLambdaLayerNames&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LatestLambdaLayerNames> getLatestLambdaBuildUnitsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLatestLambdaBuildUnitsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLatestLambdaBuildUnits", localVarResponse);
        }
        return new ApiResponse<LatestLambdaLayerNames>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LatestLambdaLayerNames>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLatestLambdaBuildUnitsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/deployment/lambda/agent/latest";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
