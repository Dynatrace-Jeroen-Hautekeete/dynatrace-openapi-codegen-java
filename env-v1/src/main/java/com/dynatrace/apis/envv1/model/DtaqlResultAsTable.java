/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The user session query result as a table.
 */
@ApiModel(description = "The user session query result as a table.")
@JsonPropertyOrder({
  DtaqlResultAsTable.JSON_PROPERTY_EXTRAPOLATION_LEVEL,
  DtaqlResultAsTable.JSON_PROPERTY_ADDITIONAL_COLUMN_NAMES,
  DtaqlResultAsTable.JSON_PROPERTY_ADDITIONAL_VALUES,
  DtaqlResultAsTable.JSON_PROPERTY_EXPLANATIONS,
  DtaqlResultAsTable.JSON_PROPERTY_COLUMN_NAMES,
  DtaqlResultAsTable.JSON_PROPERTY_VALUES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class DtaqlResultAsTable {
  public static final String JSON_PROPERTY_EXTRAPOLATION_LEVEL = "extrapolationLevel";
  private Integer extrapolationLevel;

  public static final String JSON_PROPERTY_ADDITIONAL_COLUMN_NAMES = "additionalColumnNames";
  private List<String> additionalColumnNames = null;

  public static final String JSON_PROPERTY_ADDITIONAL_VALUES = "additionalValues";
  private List<List<Object>> additionalValues = null;

  public static final String JSON_PROPERTY_EXPLANATIONS = "explanations";
  private List<String> explanations = null;

  public static final String JSON_PROPERTY_COLUMN_NAMES = "columnNames";
  private List<String> columnNames = null;

  public static final String JSON_PROPERTY_VALUES = "values";
  private List<List<Object>> values = null;

  public DtaqlResultAsTable() { 
  }

  public DtaqlResultAsTable extrapolationLevel(Integer extrapolationLevel) {
    this.extrapolationLevel = extrapolationLevel;
    return this;
  }

   /**
   * The extrapolation level of the result.   To improve performance, some results may be calculated from a subset of actual data. The extrapolation level indicates the share of actual data in the result.   The number is the denominator of a fraction and indicates the amount of actual data. The value &#x60;1&#x60; means that the result contains only the actual data. The value &#x60;4&#x60; means that result is calculated using 1/4 of the actual data.   If you need the analysis to be based on the actual data, reduce the timeframe of your query. For example, in case of extrapolation level of &#x60;4&#x60;, try to use 1/4 of the original timeframe.
   * @return extrapolationLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The extrapolation level of the result.   To improve performance, some results may be calculated from a subset of actual data. The extrapolation level indicates the share of actual data in the result.   The number is the denominator of a fraction and indicates the amount of actual data. The value `1` means that the result contains only the actual data. The value `4` means that result is calculated using 1/4 of the actual data.   If you need the analysis to be based on the actual data, reduce the timeframe of your query. For example, in case of extrapolation level of `4`, try to use 1/4 of the original timeframe.")
  @JsonProperty(JSON_PROPERTY_EXTRAPOLATION_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExtrapolationLevel() {
    return extrapolationLevel;
  }


  @JsonProperty(JSON_PROPERTY_EXTRAPOLATION_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtrapolationLevel(Integer extrapolationLevel) {
    this.extrapolationLevel = extrapolationLevel;
  }


  public DtaqlResultAsTable additionalColumnNames(List<String> additionalColumnNames) {
    this.additionalColumnNames = additionalColumnNames;
    return this;
  }

  public DtaqlResultAsTable addAdditionalColumnNamesItem(String additionalColumnNamesItem) {
    if (this.additionalColumnNames == null) {
      this.additionalColumnNames = new ArrayList<>();
    }
    this.additionalColumnNames.add(additionalColumnNamesItem);
    return this;
  }

   /**
   * A list of columns in the additionalValues table.    Only present if the endpoint was called with &#x60;deepLinkFields&#x3D;true&#x60; parameter.
   * @return additionalColumnNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of columns in the additionalValues table.    Only present if the endpoint was called with `deepLinkFields=true` parameter.")
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAdditionalColumnNames() {
    return additionalColumnNames;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalColumnNames(List<String> additionalColumnNames) {
    this.additionalColumnNames = additionalColumnNames;
  }


  public DtaqlResultAsTable additionalValues(List<List<Object>> additionalValues) {
    this.additionalValues = additionalValues;
    return this;
  }

  public DtaqlResultAsTable addAdditionalValuesItem(List<Object> additionalValuesItem) {
    if (this.additionalValues == null) {
      this.additionalValues = new ArrayList<>();
    }
    this.additionalValues.add(additionalValuesItem);
    return this;
  }

   /**
   * A list of data rows.    Each array element represents a row in the table of additionally linked fields.   The size of each data row and the order of the elements correspond to the **additionalColumnNames** content.   Only present if the endpoint was called with &#x60;deepLinkFields&#x3D;true&#x60; parameter.
   * @return additionalValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of data rows.    Each array element represents a row in the table of additionally linked fields.   The size of each data row and the order of the elements correspond to the **additionalColumnNames** content.   Only present if the endpoint was called with `deepLinkFields=true` parameter.")
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Object>> getAdditionalValues() {
    return additionalValues;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalValues(List<List<Object>> additionalValues) {
    this.additionalValues = additionalValues;
  }


  public DtaqlResultAsTable explanations(List<String> explanations) {
    this.explanations = explanations;
    return this;
  }

  public DtaqlResultAsTable addExplanationsItem(String explanationsItem) {
    if (this.explanations == null) {
      this.explanations = new ArrayList<>();
    }
    this.explanations.add(explanationsItem);
    return this;
  }

   /**
   * Additional information about the query and the result, that helps to understand the query and how the result was calculated.   Only appears when the **explain** parameter is set to &#x60;true&#x60;.   Example: The number of results was limited to the default of 50. Use the &#x60;LIMIT&#x60; clause to increase or decrease this limit.
   * @return explanations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information about the query and the result, that helps to understand the query and how the result was calculated.   Only appears when the **explain** parameter is set to `true`.   Example: The number of results was limited to the default of 50. Use the `LIMIT` clause to increase or decrease this limit.")
  @JsonProperty(JSON_PROPERTY_EXPLANATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExplanations() {
    return explanations;
  }


  @JsonProperty(JSON_PROPERTY_EXPLANATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExplanations(List<String> explanations) {
    this.explanations = explanations;
  }


  public DtaqlResultAsTable columnNames(List<String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public DtaqlResultAsTable addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

   /**
   * A list of columns in the result table.
   * @return columnNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of columns in the result table.")
  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getColumnNames() {
    return columnNames;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }


  public DtaqlResultAsTable values(List<List<Object>> values) {
    this.values = values;
    return this;
  }

  public DtaqlResultAsTable addValuesItem(List<Object> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * A list of data rows.    Each array element represents a row in the result table.   The size of each data row and the order of the elements correspond to the **columnNames** content.
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of data rows.    Each array element represents a row in the result table.   The size of each data row and the order of the elements correspond to the **columnNames** content.")
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Object>> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(List<List<Object>> values) {
    this.values = values;
  }


  /**
   * Return true if this DtaqlResultAsTable object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtaqlResultAsTable dtaqlResultAsTable = (DtaqlResultAsTable) o;
    return Objects.equals(this.extrapolationLevel, dtaqlResultAsTable.extrapolationLevel) &&
        Objects.equals(this.additionalColumnNames, dtaqlResultAsTable.additionalColumnNames) &&
        Objects.equals(this.additionalValues, dtaqlResultAsTable.additionalValues) &&
        Objects.equals(this.explanations, dtaqlResultAsTable.explanations) &&
        Objects.equals(this.columnNames, dtaqlResultAsTable.columnNames) &&
        Objects.equals(this.values, dtaqlResultAsTable.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extrapolationLevel, additionalColumnNames, additionalValues, explanations, columnNames, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtaqlResultAsTable {\n");
    sb.append("    extrapolationLevel: ").append(toIndentedString(extrapolationLevel)).append("\n");
    sb.append("    additionalColumnNames: ").append(toIndentedString(additionalColumnNames)).append("\n");
    sb.append("    additionalValues: ").append(toIndentedString(additionalValues)).append("\n");
    sb.append("    explanations: ").append(toIndentedString(explanations)).append("\n");
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

