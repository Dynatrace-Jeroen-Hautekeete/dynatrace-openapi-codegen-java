/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv1.model.MaintenanceWindowSchedule;
import com.dynatrace.apis.envv1.model.MaintenanceWindowScope;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameters of the maintenance window.
 */
@ApiModel(description = "Parameters of the maintenance window.")
@JsonPropertyOrder({
  MaintenanceWindow.JSON_PROPERTY_ID,
  MaintenanceWindow.JSON_PROPERTY_TYPE,
  MaintenanceWindow.JSON_PROPERTY_DESCRIPTION,
  MaintenanceWindow.JSON_PROPERTY_SUPPRESS_ALERTS,
  MaintenanceWindow.JSON_PROPERTY_SUPPRESS_PROBLEMS,
  MaintenanceWindow.JSON_PROPERTY_SCOPE,
  MaintenanceWindow.JSON_PROPERTY_SCHEDULE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class MaintenanceWindow {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  /**
   * The type of the maintenance: planned or unplanned.
   */
  public enum TypeEnum {
    PLANNED("Planned"),
    
    UNPLANNED("Unplanned");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_SUPPRESS_ALERTS = "suppressAlerts";
  private Boolean suppressAlerts;

  public static final String JSON_PROPERTY_SUPPRESS_PROBLEMS = "suppressProblems";
  private Boolean suppressProblems;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private MaintenanceWindowScope scope;

  public static final String JSON_PROPERTY_SCHEDULE = "schedule";
  private MaintenanceWindowSchedule schedule;

  public MaintenanceWindow() { 
  }

  public MaintenanceWindow id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the maintenance window.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the maintenance window.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public MaintenanceWindow type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the maintenance: planned or unplanned.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the maintenance: planned or unplanned.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MaintenanceWindow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the maintenance purpose.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A short description of the maintenance purpose.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public MaintenanceWindow suppressAlerts(Boolean suppressAlerts) {
    this.suppressAlerts = suppressAlerts;
    return this;
  }

   /**
   * Alerting during maintenance is enabled (&#x60;false&#x60;) or disabled (&#x60;true&#x60;).
   * @return suppressAlerts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alerting during maintenance is enabled (`false`) or disabled (`true`).")
  @JsonProperty(JSON_PROPERTY_SUPPRESS_ALERTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuppressAlerts() {
    return suppressAlerts;
  }


  @JsonProperty(JSON_PROPERTY_SUPPRESS_ALERTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuppressAlerts(Boolean suppressAlerts) {
    this.suppressAlerts = suppressAlerts;
  }


  public MaintenanceWindow suppressProblems(Boolean suppressProblems) {
    this.suppressProblems = suppressProblems;
    return this;
  }

   /**
   * Problem detection during maintenance is enabled (&#x60;false&#x60;) or disabled (&#x60;true&#x60;).
   * @return suppressProblems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Problem detection during maintenance is enabled (`false`) or disabled (`true`).")
  @JsonProperty(JSON_PROPERTY_SUPPRESS_PROBLEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuppressProblems() {
    return suppressProblems;
  }


  @JsonProperty(JSON_PROPERTY_SUPPRESS_PROBLEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuppressProblems(Boolean suppressProblems) {
    this.suppressProblems = suppressProblems;
  }


  public MaintenanceWindow scope(MaintenanceWindowScope scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenanceWindowScope getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(MaintenanceWindowScope scope) {
    this.scope = scope;
  }


  public MaintenanceWindow schedule(MaintenanceWindowSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MaintenanceWindowSchedule getSchedule() {
    return schedule;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchedule(MaintenanceWindowSchedule schedule) {
    this.schedule = schedule;
  }


  /**
   * Return true if this MaintenanceWindow object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceWindow maintenanceWindow = (MaintenanceWindow) o;
    return Objects.equals(this.id, maintenanceWindow.id) &&
        Objects.equals(this.type, maintenanceWindow.type) &&
        Objects.equals(this.description, maintenanceWindow.description) &&
        Objects.equals(this.suppressAlerts, maintenanceWindow.suppressAlerts) &&
        Objects.equals(this.suppressProblems, maintenanceWindow.suppressProblems) &&
        Objects.equals(this.scope, maintenanceWindow.scope) &&
        Objects.equals(this.schedule, maintenanceWindow.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, description, suppressAlerts, suppressProblems, scope, schedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceWindow {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    suppressAlerts: ").append(toIndentedString(suppressAlerts)).append("\n");
    sb.append("    suppressProblems: ").append(toIndentedString(suppressProblems)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

