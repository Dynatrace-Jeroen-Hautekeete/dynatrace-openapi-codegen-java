/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ProblemCloseResult;
import com.dynatrace.apis.envv1.model.ProblemComment;
import com.dynatrace.apis.envv1.model.ProblemCommentList;
import com.dynatrace.apis.envv1.model.ProblemDetailsResultWrapper;
import com.dynatrace.apis.envv1.model.ProblemFeedResultWrapper;
import com.dynatrace.apis.envv1.model.ProblemStatusResultWrapper;
import com.dynatrace.apis.envv1.model.PushProblemComment;
import java.util.Set;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class ProblemApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ProblemApi() {
    this(new ApiClient());
  }

  public ProblemApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Closes the specified problem and adds a closing comment to it
   * 
   * @param problemId The ID of the problem to be closed. (required)
   * @param content The closing comment. (required)
   * @return ProblemCloseResult
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemCloseResult closeProblem(String problemId, String content) throws ApiException {
    ApiResponse<ProblemCloseResult> localVarResponse = closeProblemWithHttpInfo(problemId, content);
    return localVarResponse.getData();
  }

  /**
   * Closes the specified problem and adds a closing comment to it
   * 
   * @param problemId The ID of the problem to be closed. (required)
   * @param content The closing comment. (required)
   * @return ApiResponse&lt;ProblemCloseResult&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemCloseResult> closeProblemWithHttpInfo(String problemId, String content) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeProblemRequestBuilder(problemId, content);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("closeProblem", localVarResponse);
        }
        return new ApiResponse<ProblemCloseResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemCloseResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeProblemRequestBuilder(String problemId, String content) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling closeProblem");
    }
    // verify the required parameter 'content' is set
    if (content == null) {
      throw new ApiException(400, "Missing the required parameter 'content' when calling closeProblem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}/close"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes an existing comment to the specified problem.
   * 
   * @param problemId The ID of the problem where you want to delete the comment. (required)
   * @param commentId The ID of the comment to delete. (required)
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public void deleteComment(String problemId, String commentId) throws ApiException {
    deleteCommentWithHttpInfo(problemId, commentId);
  }

  /**
   * Deletes an existing comment to the specified problem.
   * 
   * @param problemId The ID of the problem where you want to delete the comment. (required)
   * @param commentId The ID of the comment to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<Void> deleteCommentWithHttpInfo(String problemId, String commentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCommentRequestBuilder(problemId, commentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteComment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCommentRequestBuilder(String problemId, String commentId) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling deleteComment");
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      throw new ApiException(400, "Missing the required parameter 'commentId' when calling deleteComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}/comments/{commentId}"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()))
        .replace("{commentId}", ApiClient.urlEncode(commentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets all the comments to the specified problem
   * 
   * @param problemId The ID of the problem where you want to read the comments. (required)
   * @return ProblemCommentList
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemCommentList getComment(String problemId) throws ApiException {
    ApiResponse<ProblemCommentList> localVarResponse = getCommentWithHttpInfo(problemId);
    return localVarResponse.getData();
  }

  /**
   * Gets all the comments to the specified problem
   * 
   * @param problemId The ID of the problem where you want to read the comments. (required)
   * @return ApiResponse&lt;ProblemCommentList&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemCommentList> getCommentWithHttpInfo(String problemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommentRequestBuilder(problemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getComment", localVarResponse);
        }
        return new ApiResponse<ProblemCommentList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemCommentList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommentRequestBuilder(String problemId) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling getComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}/comments"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the properties of the specified problem
   * 
   * @param problemId The ID of the problem you&#39;re inquiring. (required)
   * @return ProblemDetailsResultWrapper
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemDetailsResultWrapper getDetails(String problemId) throws ApiException {
    ApiResponse<ProblemDetailsResultWrapper> localVarResponse = getDetailsWithHttpInfo(problemId);
    return localVarResponse.getData();
  }

  /**
   * Gets the properties of the specified problem
   * 
   * @param problemId The ID of the problem you&#39;re inquiring. (required)
   * @return ApiResponse&lt;ProblemDetailsResultWrapper&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemDetailsResultWrapper> getDetailsWithHttpInfo(String problemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDetailsRequestBuilder(problemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDetails", localVarResponse);
        }
        return new ApiResponse<ProblemDetailsResultWrapper>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemDetailsResultWrapper>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDetailsRequestBuilder(String problemId) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling getDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the information about problems within the specified timeframe
   * A problem is included in the response, if either start or end timestamp of the problem is within the defined timeframe.   The output is limited to **5,000** problems. You can narrow it down by specifying query parameters.
   * @param relativeTime The relative timeframe of the inquiry, back from the current time. (optional)
   * @param startTimestamp The start timestamp of the requested timeframe, in UTC milliseconds. (optional)
   * @param endTimestamp The end timestamp of the requested timeframe, in UTC milliseconds.   If &#x60;endTimestamp&#x60; is later than the current time, the current time is used.   The timeframe must not exceed 31 days. (optional)
   * @param status Filters the result problems by the status. (optional)
   * @param impactLevel Filters the result problems by the impact level. (optional)
   * @param severityLevel Filters the result problems by the severity level. (optional)
   * @param tag Filters the result problems by the tags of affected entities.You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The problem has to match *all* the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags use following format: &#x60;[context]key:value&#x60;. (optional
   * @param expandDetails Includes(&#x60;true&#x60;) or excludes(&#x60;false&#x60;) related events to the response.    Defaults to &#x60;false&#x60;, excluding the related events. (optional)
   * @return ProblemFeedResultWrapper
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemFeedResultWrapper getFeed(String relativeTime, Long startTimestamp, Long endTimestamp, String status, String impactLevel, String severityLevel, Set<String> tag, Boolean expandDetails) throws ApiException {
    ApiResponse<ProblemFeedResultWrapper> localVarResponse = getFeedWithHttpInfo(relativeTime, startTimestamp, endTimestamp, status, impactLevel, severityLevel, tag, expandDetails);
    return localVarResponse.getData();
  }

  /**
   * Gets the information about problems within the specified timeframe
   * A problem is included in the response, if either start or end timestamp of the problem is within the defined timeframe.   The output is limited to **5,000** problems. You can narrow it down by specifying query parameters.
   * @param relativeTime The relative timeframe of the inquiry, back from the current time. (optional)
   * @param startTimestamp The start timestamp of the requested timeframe, in UTC milliseconds. (optional)
   * @param endTimestamp The end timestamp of the requested timeframe, in UTC milliseconds.   If &#x60;endTimestamp&#x60; is later than the current time, the current time is used.   The timeframe must not exceed 31 days. (optional)
   * @param status Filters the result problems by the status. (optional)
   * @param impactLevel Filters the result problems by the impact level. (optional)
   * @param severityLevel Filters the result problems by the severity level. (optional)
   * @param tag Filters the result problems by the tags of affected entities.You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The problem has to match *all* the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags use following format: &#x60;[context]key:value&#x60;. (optional
   * @param expandDetails Includes(&#x60;true&#x60;) or excludes(&#x60;false&#x60;) related events to the response.    Defaults to &#x60;false&#x60;, excluding the related events. (optional)
   * @return ApiResponse&lt;ProblemFeedResultWrapper&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemFeedResultWrapper> getFeedWithHttpInfo(String relativeTime, Long startTimestamp, Long endTimestamp, String status, String impactLevel, String severityLevel, Set<String> tag, Boolean expandDetails) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFeedRequestBuilder(relativeTime, startTimestamp, endTimestamp, status, impactLevel, severityLevel, tag, expandDetails);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFeed", localVarResponse);
        }
        return new ApiResponse<ProblemFeedResultWrapper>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemFeedResultWrapper>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFeedRequestBuilder(String relativeTime, Long startTimestamp, Long endTimestamp, String status, String impactLevel, String severityLevel, Set<String> tag, Boolean expandDetails) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/feed";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("relativeTime", relativeTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("impactLevel", impactLevel));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("severityLevel", severityLevel));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expandDetails", expandDetails));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the number of open problems, split by impact level
   * 
   * @return ProblemStatusResultWrapper
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemStatusResultWrapper getProblemStatus() throws ApiException {
    ApiResponse<ProblemStatusResultWrapper> localVarResponse = getProblemStatusWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists the number of open problems, split by impact level
   * 
   * @return ApiResponse&lt;ProblemStatusResultWrapper&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemStatusResultWrapper> getProblemStatusWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProblemStatusRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProblemStatus", localVarResponse);
        }
        return new ApiResponse<ProblemStatusResultWrapper>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemStatusResultWrapper>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProblemStatusRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Adds a new comment to the specified problem
   * 
   * @param problemId The ID of the problem where you want to add the comment. (required)
   * @param pushProblemComment JSON body of the request, containing the comment. (optional)
   * @return ProblemComment
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemComment pushComment(String problemId, PushProblemComment pushProblemComment) throws ApiException {
    ApiResponse<ProblemComment> localVarResponse = pushCommentWithHttpInfo(problemId, pushProblemComment);
    return localVarResponse.getData();
  }

  /**
   * Adds a new comment to the specified problem
   * 
   * @param problemId The ID of the problem where you want to add the comment. (required)
   * @param pushProblemComment JSON body of the request, containing the comment. (optional)
   * @return ApiResponse&lt;ProblemComment&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemComment> pushCommentWithHttpInfo(String problemId, PushProblemComment pushProblemComment) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = pushCommentRequestBuilder(problemId, pushProblemComment);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("pushComment", localVarResponse);
        }
        return new ApiResponse<ProblemComment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemComment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder pushCommentRequestBuilder(String problemId, PushProblemComment pushProblemComment) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling pushComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}/comments"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(pushProblemComment);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates an existing comment to the specified problem
   * 
   * @param problemId The ID of the problem where you want to edit the comment. (required)
   * @param commentId The ID of the comment you want to edit. (required)
   * @param pushProblemComment JSON body of the request, containing the updated comment. (optional)
   * @return ProblemComment
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ProblemComment updateComment(String problemId, String commentId, PushProblemComment pushProblemComment) throws ApiException {
    ApiResponse<ProblemComment> localVarResponse = updateCommentWithHttpInfo(problemId, commentId, pushProblemComment);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing comment to the specified problem
   * 
   * @param problemId The ID of the problem where you want to edit the comment. (required)
   * @param commentId The ID of the comment you want to edit. (required)
   * @param pushProblemComment JSON body of the request, containing the updated comment. (optional)
   * @return ApiResponse&lt;ProblemComment&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ProblemComment> updateCommentWithHttpInfo(String problemId, String commentId, PushProblemComment pushProblemComment) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCommentRequestBuilder(problemId, commentId, pushProblemComment);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateComment", localVarResponse);
        }
        return new ApiResponse<ProblemComment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProblemComment>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCommentRequestBuilder(String problemId, String commentId, PushProblemComment pushProblemComment) throws ApiException {
    // verify the required parameter 'problemId' is set
    if (problemId == null) {
      throw new ApiException(400, "Missing the required parameter 'problemId' when calling updateComment");
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      throw new ApiException(400, "Missing the required parameter 'commentId' when calling updateComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/problem/details/{problemId}/comments/{commentId}"
        .replace("{problemId}", ApiClient.urlEncode(problemId.toString()))
        .replace("{commentId}", ApiClient.urlEncode(commentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(pushProblemComment);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
