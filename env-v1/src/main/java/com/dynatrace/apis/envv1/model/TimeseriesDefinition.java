/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The configuration of a metric with all its parameters.
 */
@ApiModel(description = "The configuration of a metric with all its parameters.")
@JsonPropertyOrder({
  TimeseriesDefinition.JSON_PROPERTY_TIMESERIES_ID,
  TimeseriesDefinition.JSON_PROPERTY_DISPLAY_NAME,
  TimeseriesDefinition.JSON_PROPERTY_DIMENSIONS,
  TimeseriesDefinition.JSON_PROPERTY_AGGREGATION_TYPES,
  TimeseriesDefinition.JSON_PROPERTY_UNIT,
  TimeseriesDefinition.JSON_PROPERTY_FILTER,
  TimeseriesDefinition.JSON_PROPERTY_DETAILED_SOURCE,
  TimeseriesDefinition.JSON_PROPERTY_PLUGIN_ID,
  TimeseriesDefinition.JSON_PROPERTY_TYPES,
  TimeseriesDefinition.JSON_PROPERTY_WARNINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class TimeseriesDefinition {
  public static final String JSON_PROPERTY_TIMESERIES_ID = "timeseriesId";
  private String timeseriesId;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_DIMENSIONS = "dimensions";
  private List<String> dimensions = null;

  /**
   * Gets or Sets aggregationTypes
   */
  public enum AggregationTypesEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    PERCENTILE("PERCENTILE"),
    
    SUM("SUM");

    private String value;

    AggregationTypesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationTypesEnum fromValue(String value) {
      for (AggregationTypesEnum b : AggregationTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION_TYPES = "aggregationTypes";
  private List<AggregationTypesEnum> aggregationTypes = null;

  /**
   * The unit of the metric.
   */
  public enum UnitEnum {
    BILLION_BILCOUNT_("Billion (bilcount)"),
    
    BIT_BIT_("Bit (bit)"),
    
    BITPERHOUR_BIT_H_("BitPerHour (bit/h)"),
    
    BITPERMINUTE_BIT_MIN_("BitPerMinute (bit/min)"),
    
    BITPERSECOND_BIT_S_("BitPerSecond (bit/s)"),
    
    BYTE_B_("Byte (B)"),
    
    BYTEPERHOUR_B_H_("BytePerHour (B/h)"),
    
    BYTEPERMINUTE_B_MIN_("BytePerMinute (B/min)"),
    
    BYTEPERSECOND_B_S_("BytePerSecond (B/s)"),
    
    CORES("Cores"),
    
    COUNT_COUNT_("Count (count)"),
    
    DAY_DS_("Day (ds)"),
    
    DECIBELMILLIWATT_DBM_("DecibelMilliWatt (dBm)"),
    
    G("G"),
    
    GIBIBYTE_GIB_("GibiByte (GiB)"),
    
    GIGABYTE_GB_("GigaByte (GB)"),
    
    HOUR_HS_("Hour (hs)"),
    
    KIBIBYTE_KIB_("KibiByte (KiB)"),
    
    KIBIBYTEPERHOUR_KIB_H_("KibiBytePerHour (KiB/h)"),
    
    KIBIBYTEPERMINUTE_KIB_MIN_("KibiBytePerMinute (KiB/min)"),
    
    KIBIBYTEPERSECOND_KIB_S_("KibiBytePerSecond (KiB/s)"),
    
    KILOBYTE_KB_("KiloByte (kB)"),
    
    KILOBYTEPERHOUR_KB_H_("KiloBytePerHour (kB/h)"),
    
    KILOBYTEPERMINUTE_KB_MIN_("KiloBytePerMinute (kB/min)"),
    
    KILOBYTEPERSECOND_KB_S_("KiloBytePerSecond (kB/s)"),
    
    M("M"),
    
    MSU("MSU"),
    
    MEBIBYTE_MIB_("MebiByte (MiB)"),
    
    MEBIBYTEPERHOUR_MIB_H_("MebiBytePerHour (MiB/h)"),
    
    MEBIBYTEPERMINUTE_MIB_MIN_("MebiBytePerMinute (MiB/min)"),
    
    MEBIBYTEPERSECOND_MIB_S_("MebiBytePerSecond (MiB/s)"),
    
    MEGABYTE_MB_("MegaByte (MB)"),
    
    MEGABYTEPERHOUR_MB_H_("MegaBytePerHour (MB/h)"),
    
    MEGABYTEPERMINUTE_MB_MIN_("MegaBytePerMinute (MB/min)"),
    
    MEGABYTEPERSECOND_MB_S_("MegaBytePerSecond (MB/s)"),
    
    MICROSECOND_S_("MicroSecond (µs)"),
    
    MILLISECOND_MS_("MilliSecond (ms)"),
    
    MILLISECONDPERMINUTE_MS_MIN_("MilliSecondPerMinute (ms/min)"),
    
    MILLION_MILCOUNT_("Million (milcount)"),
    
    MINUTE_MINS_("Minute (mins)"),
    
    MONTH_MOS_("Month (mos)"),
    
    N_A("N/A"),
    
    NANOSECOND_NS_("NanoSecond (ns)"),
    
    NANOSECONDPERMINUTE_NS_MIN_("NanoSecondPerMinute (ns/min)"),
    
    PERHOUR_COUNT_H_("PerHour (count/h)"),
    
    PERMINUTE_COUNT_MIN_("PerMinute (count/min)"),
    
    PERSECOND_COUNT_S_("PerSecond (count/s)"),
    
    PERCENT_("Percent (%)"),
    
    PIXEL_PX_("Pixel (px)"),
    
    PROMILLE_("Promille (‰)"),
    
    RATIO("Ratio"),
    
    SECOND_S_("Second (s)"),
    
    STATE("State"),
    
    UNSPECIFIED("Unspecified"),
    
    WEEK_WS_("Week (ws)"),
    
    YEAR_YS_("Year (ys)"),
    
    K("k"),
    
    KM_H("km/h"),
    
    M_H("m/h"),
    
    M_S("m/s"),
    
    MCORES("mCores");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT = "unit";
  private UnitEnum unit;

  /**
   * The feature, where the metric originates.
   */
  public enum FilterEnum {
    ALL("ALL"),
    
    BUILTIN("BUILTIN"),
    
    CUSTOM("CUSTOM"),
    
    PLUGIN("PLUGIN"),
    
    REMOTE_PLUGIN("REMOTE_PLUGIN");

    private String value;

    FilterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterEnum fromValue(String value) {
      for (FilterEnum b : FilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER = "filter";
  private FilterEnum filter;

  public static final String JSON_PROPERTY_DETAILED_SOURCE = "detailedSource";
  private String detailedSource;

  public static final String JSON_PROPERTY_PLUGIN_ID = "pluginId";
  private String pluginId;

  public static final String JSON_PROPERTY_TYPES = "types";
  private Set<String> types = null;

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<String> warnings = null;

  public TimeseriesDefinition() { 
  }

  public TimeseriesDefinition timeseriesId(String timeseriesId) {
    this.timeseriesId = timeseriesId;
    return this;
  }

   /**
   * The ID of the metric.
   * @return timeseriesId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the metric.")
  @JsonProperty(JSON_PROPERTY_TIMESERIES_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeseriesId() {
    return timeseriesId;
  }


  @JsonProperty(JSON_PROPERTY_TIMESERIES_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeseriesId(String timeseriesId) {
    this.timeseriesId = timeseriesId;
  }


  public TimeseriesDefinition displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the metric in the user interface.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the metric in the user interface.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TimeseriesDefinition dimensions(List<String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public TimeseriesDefinition addDimensionsItem(String dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * The fine metric division, for example process group and process ID for some process-related metric.
   * @return dimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fine metric division, for example process group and process ID for some process-related metric.")
  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDimensions() {
    return dimensions;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimensions(List<String> dimensions) {
    this.dimensions = dimensions;
  }


  public TimeseriesDefinition aggregationTypes(List<AggregationTypesEnum> aggregationTypes) {
    this.aggregationTypes = aggregationTypes;
    return this;
  }

  public TimeseriesDefinition addAggregationTypesItem(AggregationTypesEnum aggregationTypesItem) {
    if (this.aggregationTypes == null) {
      this.aggregationTypes = new ArrayList<>();
    }
    this.aggregationTypes.add(aggregationTypesItem);
    return this;
  }

   /**
   * The list of allowed aggregations for this metric.
   * @return aggregationTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of allowed aggregations for this metric.")
  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AggregationTypesEnum> getAggregationTypes() {
    return aggregationTypes;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregationTypes(List<AggregationTypesEnum> aggregationTypes) {
    this.aggregationTypes = aggregationTypes;
  }


  public TimeseriesDefinition unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The unit of the metric.
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of the metric.")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitEnum getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public TimeseriesDefinition filter(FilterEnum filter) {
    this.filter = filter;
    return this;
  }

   /**
   * The feature, where the metric originates.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The feature, where the metric originates.")
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterEnum getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(FilterEnum filter) {
    this.filter = filter;
  }


  public TimeseriesDefinition detailedSource(String detailedSource) {
    this.detailedSource = detailedSource;
    return this;
  }

   /**
   * The feature, where the metric originates.
   * @return detailedSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The feature, where the metric originates.")
  @JsonProperty(JSON_PROPERTY_DETAILED_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDetailedSource() {
    return detailedSource;
  }


  @JsonProperty(JSON_PROPERTY_DETAILED_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetailedSource(String detailedSource) {
    this.detailedSource = detailedSource;
  }


  public TimeseriesDefinition pluginId(String pluginId) {
    this.pluginId = pluginId;
    return this;
  }

   /**
   * The ID of the plugin, where the metric originates.
   * @return pluginId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the plugin, where the metric originates.")
  @JsonProperty(JSON_PROPERTY_PLUGIN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginId() {
    return pluginId;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginId(String pluginId) {
    this.pluginId = pluginId;
  }


  public TimeseriesDefinition types(Set<String> types) {
    this.types = types;
    return this;
  }

  public TimeseriesDefinition addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new LinkedHashSet<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Technology type definition. Used to group metrics under a logical technology name.
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Technology type definition. Used to group metrics under a logical technology name.")
  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getTypes() {
    return types;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypes(Set<String> types) {
    this.types = types;
  }


  public TimeseriesDefinition warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public TimeseriesDefinition addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * The warnings that occurred while creating the metric.
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The warnings that occurred while creating the metric.")
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this TimeseriesDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeseriesDefinition timeseriesDefinition = (TimeseriesDefinition) o;
    return Objects.equals(this.timeseriesId, timeseriesDefinition.timeseriesId) &&
        Objects.equals(this.displayName, timeseriesDefinition.displayName) &&
        Objects.equals(this.dimensions, timeseriesDefinition.dimensions) &&
        Objects.equals(this.aggregationTypes, timeseriesDefinition.aggregationTypes) &&
        Objects.equals(this.unit, timeseriesDefinition.unit) &&
        Objects.equals(this.filter, timeseriesDefinition.filter) &&
        Objects.equals(this.detailedSource, timeseriesDefinition.detailedSource) &&
        Objects.equals(this.pluginId, timeseriesDefinition.pluginId) &&
        Objects.equals(this.types, timeseriesDefinition.types) &&
        Objects.equals(this.warnings, timeseriesDefinition.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeseriesId, displayName, dimensions, aggregationTypes, unit, filter, detailedSource, pluginId, types, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeseriesDefinition {\n");
    sb.append("    timeseriesId: ").append(toIndentedString(timeseriesId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    aggregationTypes: ").append(toIndentedString(aggregationTypes)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    detailedSource: ").append(toIndentedString(detailedSource)).append("\n");
    sb.append("    pluginId: ").append(toIndentedString(pluginId)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

