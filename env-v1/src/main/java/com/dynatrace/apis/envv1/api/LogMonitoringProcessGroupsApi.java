/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ErrorEnvelope;
import com.dynatrace.apis.envv1.model.ExtractFields;
import com.dynatrace.apis.envv1.model.FilterLogContent;
import com.dynatrace.apis.envv1.model.FilterTopLogRecords;
import com.dynatrace.apis.envv1.model.LogJobDeleteResult;
import com.dynatrace.apis.envv1.model.LogJobRecordsResult;
import com.dynatrace.apis.envv1.model.LogJobRecordsTopValuesRestResult;
import com.dynatrace.apis.envv1.model.LogJobStatusResult;
import com.dynatrace.apis.envv1.model.LogList4pgResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class LogMonitoringProcessGroupsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public LogMonitoringProcessGroupsApi() {
    this(new ApiClient());
  }

  public LogMonitoringProcessGroupsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Deletes or cancels the specified log analysis job
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @return LogJobDeleteResult
   * @throws ApiException if fails to make API call
   */
  public LogJobDeleteResult processGroupLogJobDelete(String pgId, String jobId) throws ApiException {
    ApiResponse<LogJobDeleteResult> localVarResponse = processGroupLogJobDeleteWithHttpInfo(pgId, jobId);
    return localVarResponse.getData();
  }

  /**
   * Deletes or cancels the specified log analysis job
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @return ApiResponse&lt;LogJobDeleteResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobDeleteResult> processGroupLogJobDeleteWithHttpInfo(String pgId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobDeleteRequestBuilder(pgId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobDelete", localVarResponse);
        }
        return new ApiResponse<LogJobDeleteResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobDeleteResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobDeleteRequestBuilder(String pgId, String jobId) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobDelete");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling processGroupLogJobDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @return LogJobRecordsResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsResult processGroupLogJobRecords(String pgId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    ApiResponse<LogJobRecordsResult> localVarResponse = processGroupLogJobRecordsWithHttpInfo(pgId, jobId, scrollToken, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @return ApiResponse&lt;LogJobRecordsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsResult> processGroupLogJobRecordsWithHttpInfo(String pgId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobRecordsRequestBuilder(pgId, jobId, scrollToken, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobRecords", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobRecordsRequestBuilder(String pgId, String jobId, String scrollToken, Integer pageSize) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobRecords");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling processGroupLogJobRecords");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scrollToken", scrollToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @param filterLogContent Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return LogJobRecordsResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsResult processGroupLogJobRecordsFiltered(String pgId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    ApiResponse<LogJobRecordsResult> localVarResponse = processGroupLogJobRecordsFilteredWithHttpInfo(pgId, jobId, scrollToken, pageSize, filterLogContent);
    return localVarResponse.getData();
  }

  /**
   * Gets the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request.   Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param scrollToken The **scrollToken** value from the previous response.    You can use it to get the next page of results. Without it, the first page is always returned. (optional)
   * @param pageSize The number of records per result page.    If not set, each page contains 100 results.    Maximum allowed value is &#x60;10000&#x60;. (optional)
   * @param filterLogContent Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return ApiResponse&lt;LogJobRecordsResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsResult> processGroupLogJobRecordsFilteredWithHttpInfo(String pgId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobRecordsFilteredRequestBuilder(pgId, jobId, scrollToken, pageSize, filterLogContent);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobRecordsFiltered", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobRecordsFilteredRequestBuilder(String pgId, String jobId, String scrollToken, Integer pageSize, FilterLogContent filterLogContent) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobRecordsFiltered");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling processGroupLogJobRecordsFiltered");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scrollToken", scrollToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(filterLogContent);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the top values of fields present in the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param filterTopLogRecords Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return LogJobRecordsTopValuesRestResult
   * @throws ApiException if fails to make API call
   */
  public LogJobRecordsTopValuesRestResult processGroupLogJobRecordsTop(String pgId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    ApiResponse<LogJobRecordsTopValuesRestResult> localVarResponse = processGroupLogJobRecordsTopWithHttpInfo(pgId, jobId, filterTopLogRecords);
    return localVarResponse.getData();
  }

  /**
   * Gets the top values of fields present in the content of the analyzed log
   * Results are available only when the status of the analysis job for this log is &#x60;READY&#x60;. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @param filterTopLogRecords Filter the log content by the specified criteria.   See [Search patterns in log data and parse results](https://dt-url.net/57a3rgv) in Dynatrace Documentation for the syntax definition and examples. (optional)
   * @return ApiResponse&lt;LogJobRecordsTopValuesRestResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobRecordsTopValuesRestResult> processGroupLogJobRecordsTopWithHttpInfo(String pgId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobRecordsTopRequestBuilder(pgId, jobId, filterTopLogRecords);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobRecordsTop", localVarResponse);
        }
        return new ApiResponse<LogJobRecordsTopValuesRestResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobRecordsTopValuesRestResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobRecordsTopRequestBuilder(String pgId, String jobId, FilterTopLogRecords filterTopLogRecords) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobRecordsTop");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling processGroupLogJobRecordsTop");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records/top"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(filterTopLogRecords);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Starts analysis job for the specified process group log
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param logPath The full pathname of the log. (required)
   * @param hostFilter Narrows down the scope of the analysis to process groups, running at the specified hosts.   Specify the entity ID of the required host here. To specify several IDs, separate them with a comma. (optional)
   * @param query Narrows down the scope of the analysis to the entries, matching the specified criteria.   The criteria must use the [text pattern query syntax](https://dt-url.net/vv83rhp). (optional)
   * @param startTimestamp The start timestamp of the analysis range, in UTC milliseconds.    If not set, then 2 hours behind from current timestamp is used. (optional)
   * @param endTimestamp The end timestamp of the analysis range, in UTC milliseconds.    If not set, then the current timestamp is used. (optional)
   * @param extractFields Extract fields from the log content to form custom columns.    See [Search patterns in log data and parse results](https://dt-url.net/vv83rhp) in Dynatrace Documentation for the syntax definition and examples.   The special characters must be escaped. (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String processGroupLogJobStart(String pgId, String logPath, String hostFilter, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    ApiResponse<String> localVarResponse = processGroupLogJobStartWithHttpInfo(pgId, logPath, hostFilter, query, startTimestamp, endTimestamp, extractFields);
    return localVarResponse.getData();
  }

  /**
   * Starts analysis job for the specified process group log
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param logPath The full pathname of the log. (required)
   * @param hostFilter Narrows down the scope of the analysis to process groups, running at the specified hosts.   Specify the entity ID of the required host here. To specify several IDs, separate them with a comma. (optional)
   * @param query Narrows down the scope of the analysis to the entries, matching the specified criteria.   The criteria must use the [text pattern query syntax](https://dt-url.net/vv83rhp). (optional)
   * @param startTimestamp The start timestamp of the analysis range, in UTC milliseconds.    If not set, then 2 hours behind from current timestamp is used. (optional)
   * @param endTimestamp The end timestamp of the analysis range, in UTC milliseconds.    If not set, then the current timestamp is used. (optional)
   * @param extractFields Extract fields from the log content to form custom columns.    See [Search patterns in log data and parse results](https://dt-url.net/vv83rhp) in Dynatrace Documentation for the syntax definition and examples.   The special characters must be escaped. (optional)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> processGroupLogJobStartWithHttpInfo(String pgId, String logPath, String hostFilter, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobStartRequestBuilder(pgId, logPath, hostFilter, query, startTimestamp, endTimestamp, extractFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobStart", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobStartRequestBuilder(String pgId, String logPath, String hostFilter, String query, Long startTimestamp, Long endTimestamp, ExtractFields extractFields) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobStart");
    }
    // verify the required parameter 'logPath' is set
    if (logPath == null) {
      throw new ApiException(400, "Missing the required parameter 'logPath' when calling processGroupLogJobStart");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/{logPath}"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{logPath}", ApiClient.urlEncode(logPath.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("hostFilter", hostFilter));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimestamp", startTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTimestamp", endTimestamp));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extractFields);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets status of the specified log analysis job
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @return LogJobStatusResult
   * @throws ApiException if fails to make API call
   */
  public LogJobStatusResult processGroupLogJobStatus(String pgId, String jobId) throws ApiException {
    ApiResponse<LogJobStatusResult> localVarResponse = processGroupLogJobStatusWithHttpInfo(pgId, jobId);
    return localVarResponse.getData();
  }

  /**
   * Gets status of the specified log analysis job
   * 
   * @param pgId The Dynatrace entity ID of the required process group. (required)
   * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request. (required)
   * @return ApiResponse&lt;LogJobStatusResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogJobStatusResult> processGroupLogJobStatusWithHttpInfo(String pgId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogJobStatusRequestBuilder(pgId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogJobStatus", localVarResponse);
        }
        return new ApiResponse<LogJobStatusResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogJobStatusResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogJobStatusRequestBuilder(String pgId, String jobId) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogJobStatus");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling processGroupLogJobStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the available logs of the specified process group
   * 
   * @param pgId The entity ID of the process group. (required)
   * @return LogList4pgResult
   * @throws ApiException if fails to make API call
   */
  public LogList4pgResult processGroupLogList(String pgId) throws ApiException {
    ApiResponse<LogList4pgResult> localVarResponse = processGroupLogListWithHttpInfo(pgId);
    return localVarResponse.getData();
  }

  /**
   * Lists all the available logs of the specified process group
   * 
   * @param pgId The entity ID of the process group. (required)
   * @return ApiResponse&lt;LogList4pgResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LogList4pgResult> processGroupLogListWithHttpInfo(String pgId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processGroupLogListRequestBuilder(pgId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processGroupLogList", localVarResponse);
        }
        return new ApiResponse<LogList4pgResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LogList4pgResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processGroupLogListRequestBuilder(String pgId) throws ApiException {
    // verify the required parameter 'pgId' is set
    if (pgId == null) {
      throw new ApiException(400, "Missing the required parameter 'pgId' when calling processGroupLogList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/infrastructure/process-groups/{pgId}/logs"
        .replace("{pgId}", ApiClient.urlEncode(pgId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
