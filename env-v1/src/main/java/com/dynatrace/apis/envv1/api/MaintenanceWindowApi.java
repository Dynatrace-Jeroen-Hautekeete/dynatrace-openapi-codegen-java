/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiClient;
import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.ApiResponse;
import com.dynatrace.apis.envv1.Pair;

import com.dynatrace.apis.envv1.model.ErrorEnvelope;
import com.dynatrace.apis.envv1.model.MaintenanceWindow;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class MaintenanceWindowApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MaintenanceWindowApi() {
    this(new ApiClient());
  }

  public MaintenanceWindowApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Lists all parameters of all maintenance windows available in your Dynatrace environment.
   * 
   * @param from The start timestamp of the inquiry timeframe, in UTC milliseconds.    If not set, the current time is used. (optional, default to 0)
   * @param to The end timestamp of the inquiry timeframe, in UTC milliseconds.    If not set, all maintenance windows beginning after the &#x60;from&#x60; timestamp will be returned. (optional, default to 0)
   * @param type The type of the maintenance window to return.    If &#x60;Unknown&#x60; or not set, all maintenance windows are returned. (optional, default to Unknown)
   * @return List&lt;MaintenanceWindow&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public List<MaintenanceWindow> getAllMaintenanceWindowConfigs(Long from, Long to, String type) throws ApiException {
    ApiResponse<List<MaintenanceWindow>> localVarResponse = getAllMaintenanceWindowConfigsWithHttpInfo(from, to, type);
    return localVarResponse.getData();
  }

  /**
   * Lists all parameters of all maintenance windows available in your Dynatrace environment.
   * 
   * @param from The start timestamp of the inquiry timeframe, in UTC milliseconds.    If not set, the current time is used. (optional, default to 0)
   * @param to The end timestamp of the inquiry timeframe, in UTC milliseconds.    If not set, all maintenance windows beginning after the &#x60;from&#x60; timestamp will be returned. (optional, default to 0)
   * @param type The type of the maintenance window to return.    If &#x60;Unknown&#x60; or not set, all maintenance windows are returned. (optional, default to Unknown)
   * @return ApiResponse&lt;List&lt;MaintenanceWindow&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<List<MaintenanceWindow>> getAllMaintenanceWindowConfigsWithHttpInfo(Long from, Long to, String type) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllMaintenanceWindowConfigsRequestBuilder(from, to, type);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllMaintenanceWindowConfigs", localVarResponse);
        }
        return new ApiResponse<List<MaintenanceWindow>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<MaintenanceWindow>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllMaintenanceWindowConfigsRequestBuilder(Long from, Long to, String type) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/maintenance";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all parameters of the specified maintenance window.
   * 
   * @param uid The ID of the required maintenance window. (required)
   * @return MaintenanceWindow
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public MaintenanceWindow getMaintenanceWindowConfig(String uid) throws ApiException {
    ApiResponse<MaintenanceWindow> localVarResponse = getMaintenanceWindowConfigWithHttpInfo(uid);
    return localVarResponse.getData();
  }

  /**
   * Lists all parameters of the specified maintenance window.
   * 
   * @param uid The ID of the required maintenance window. (required)
   * @return ApiResponse&lt;MaintenanceWindow&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<MaintenanceWindow> getMaintenanceWindowConfigWithHttpInfo(String uid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMaintenanceWindowConfigRequestBuilder(uid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMaintenanceWindowConfig", localVarResponse);
        }
        return new ApiResponse<MaintenanceWindow>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MaintenanceWindow>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMaintenanceWindowConfigRequestBuilder(String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling getMaintenanceWindowConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/maintenance/{uid}"
        .replace("{uid}", ApiClient.urlEncode(uid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified maintenance window
   * Deletion cannot be undone.
   * @param uid The ID of the maintenance window to delete. (required)
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public void removeMaintenanceWindowConfig(String uid) throws ApiException {
    removeMaintenanceWindowConfigWithHttpInfo(uid);
  }

  /**
   * Deletes the specified maintenance window
   * Deletion cannot be undone.
   * @param uid The ID of the maintenance window to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<Void> removeMaintenanceWindowConfigWithHttpInfo(String uid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeMaintenanceWindowConfigRequestBuilder(uid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeMaintenanceWindowConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeMaintenanceWindowConfigRequestBuilder(String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
      throw new ApiException(400, "Missing the required parameter 'uid' when calling removeMaintenanceWindowConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/maintenance/{uid}"
        .replace("{uid}", ApiClient.urlEncode(uid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates a new or updates an existing maintenance window
   * 
   * @param maintenanceWindow  (optional)
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public void storeMaintenanceWindowConfig(MaintenanceWindow maintenanceWindow) throws ApiException {
    storeMaintenanceWindowConfigWithHttpInfo(maintenanceWindow);
  }

  /**
   * Creates a new or updates an existing maintenance window
   * 
   * @param maintenanceWindow  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<Void> storeMaintenanceWindowConfigWithHttpInfo(MaintenanceWindow maintenanceWindow) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storeMaintenanceWindowConfigRequestBuilder(maintenanceWindow);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storeMaintenanceWindowConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storeMaintenanceWindowConfigRequestBuilder(MaintenanceWindow maintenanceWindow) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/maintenance";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "*/*");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(maintenanceWindow);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
