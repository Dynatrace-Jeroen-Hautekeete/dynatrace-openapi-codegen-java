/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The open third-party synthetic event.
 */
@ApiModel(description = "The open third-party synthetic event.")
@JsonPropertyOrder({
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_TEST_ID,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_EVENT_ID,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_NAME,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_EVENT_TYPE,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_REASON,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_START_TIMESTAMP,
  Model3rdPartyEventOpenNotification.JSON_PROPERTY_LOCATION_IDS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class Model3rdPartyEventOpenNotification {
  public static final String JSON_PROPERTY_TEST_ID = "testId";
  private String testId;

  public static final String JSON_PROPERTY_EVENT_ID = "eventId";
  private String eventId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The type of the event.
   */
  public enum EventTypeEnum {
    TESTOUTAGE("testOutage"),
    
    TESTSLOWDOWN("testSlowdown");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private EventTypeEnum eventType;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_START_TIMESTAMP = "startTimestamp";
  private Long startTimestamp;

  public static final String JSON_PROPERTY_LOCATION_IDS = "locationIds";
  private Set<String> locationIds = new LinkedHashSet<>();

  public Model3rdPartyEventOpenNotification() { 
  }

  public Model3rdPartyEventOpenNotification testId(String testId) {
    this.testId = testId;
    return this;
  }

   /**
   * The ID of the third-party synthetic monitor.
   * @return testId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the third-party synthetic monitor.")
  @JsonProperty(JSON_PROPERTY_TEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTestId() {
    return testId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestId(String testId) {
    this.testId = testId;
  }


  public Model3rdPartyEventOpenNotification eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * The unique ID of the event.
   * @return eventId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unique ID of the event.")
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventId() {
    return eventId;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Model3rdPartyEventOpenNotification name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the event.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the event.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Model3rdPartyEventOpenNotification eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the event.
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the event.")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public Model3rdPartyEventOpenNotification reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * The cause of the event.
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The cause of the event.")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReason(String reason) {
    this.reason = reason;
  }


  public Model3rdPartyEventOpenNotification startTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * The start timestamp of the event, in UTC milliseconds.
   * @return startTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start timestamp of the event, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_START_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStartTimestamp() {
    return startTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_START_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public Model3rdPartyEventOpenNotification locationIds(Set<String> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public Model3rdPartyEventOpenNotification addLocationIdsItem(String locationIdsItem) {
    this.locationIds.add(locationIdsItem);
    return this;
  }

   /**
   * The list of IDs of third-party synthetic locations where the event happens.
   * @return locationIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of IDs of third-party synthetic locations where the event happens.")
  @JsonProperty(JSON_PROPERTY_LOCATION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getLocationIds() {
    return locationIds;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOCATION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocationIds(Set<String> locationIds) {
    this.locationIds = locationIds;
  }


  /**
   * Return true if this 3rdPartyEventOpenNotification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model3rdPartyEventOpenNotification _3rdPartyEventOpenNotification = (Model3rdPartyEventOpenNotification) o;
    return Objects.equals(this.testId, _3rdPartyEventOpenNotification.testId) &&
        Objects.equals(this.eventId, _3rdPartyEventOpenNotification.eventId) &&
        Objects.equals(this.name, _3rdPartyEventOpenNotification.name) &&
        Objects.equals(this.eventType, _3rdPartyEventOpenNotification.eventType) &&
        Objects.equals(this.reason, _3rdPartyEventOpenNotification.reason) &&
        Objects.equals(this.startTimestamp, _3rdPartyEventOpenNotification.startTimestamp) &&
        Objects.equals(this.locationIds, _3rdPartyEventOpenNotification.locationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testId, eventId, name, eventType, reason, startTimestamp, locationIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model3rdPartyEventOpenNotification {\n");
    sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    locationIds: ").append(toIndentedString(locationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

