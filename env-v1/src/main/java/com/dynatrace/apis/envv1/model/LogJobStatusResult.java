/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The status the log analysis job.
 */
@ApiModel(description = "The status the log analysis job.")
@JsonPropertyOrder({
  LogJobStatusResult.JSON_PROPERTY_LOG_ANALYSIS_STATUS,
  LogJobStatusResult.JSON_PROPERTY_STATUS_CHANGE_TIMESTAMP,
  LogJobStatusResult.JSON_PROPERTY_LOG_HANDLING_ERROR,
  LogJobStatusResult.JSON_PROPERTY_RECORDS_TOTAL,
  LogJobStatusResult.JSON_PROPERTY_SORTABLE_FIELDS,
  LogJobStatusResult.JSON_PROPERTY_FILTERABLE_FIELDS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class LogJobStatusResult {
  /**
   * The status of the log analysis job.
   */
  public enum LogAnalysisStatusEnum {
    AGENT_PROCESSING("AGENT_PROCESSING"),
    
    CANCELLED("CANCELLED"),
    
    CANCEL_PENDING("CANCEL_PENDING"),
    
    DOWNLOAD("DOWNLOAD"),
    
    FAILED("FAILED"),
    
    PROCESSING("PROCESSING"),
    
    READY("READY"),
    
    TRANSFERRING("TRANSFERRING"),
    
    WAITING("WAITING");

    private String value;

    LogAnalysisStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LogAnalysisStatusEnum fromValue(String value) {
      for (LogAnalysisStatusEnum b : LogAnalysisStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOG_ANALYSIS_STATUS = "logAnalysisStatus";
  private LogAnalysisStatusEnum logAnalysisStatus;

  public static final String JSON_PROPERTY_STATUS_CHANGE_TIMESTAMP = "statusChangeTimestamp";
  private Long statusChangeTimestamp;

  /**
   * The cause of the job failure.    A successful job has the &#x60;NONE&#x60; value.
   */
  public enum LogHandlingErrorEnum {
    AGENT_VERSION_NOT_SUPPORTING_DOCKER("AGENT_VERSION_NOT_SUPPORTING_DOCKER"),
    
    CANCELLED("CANCELLED"),
    
    FILE_ACCESS_DISABLED("FILE_ACCESS_DISABLED"),
    
    FILE_NOT_FOUND("FILE_NOT_FOUND"),
    
    INCORRECT_DATE_FORMAT("INCORRECT_DATE_FORMAT"),
    
    INCORRECT_LOG_FILE("INCORRECT_LOG_FILE"),
    
    INTERNAL_PROCESSING_ERROR("INTERNAL_PROCESSING_ERROR"),
    
    INVALID_FILTER_QUERY("INVALID_FILTER_QUERY"),
    
    INVALID_SEARCH_QUERY("INVALID_SEARCH_QUERY"),
    
    NONE("NONE"),
    
    NO_LOG_AGENT("NO_LOG_AGENT"),
    
    PROCESSOR_FILE_PROCESSING_ERROR("PROCESSOR_FILE_PROCESSING_ERROR"),
    
    PROCESSOR_INTERNAL_ERROR("PROCESSOR_INTERNAL_ERROR"),
    
    PROCESSOR_INVALID_PARAMETER_ERROR("PROCESSOR_INVALID_PARAMETER_ERROR"),
    
    PROCESSOR_NO_LOGS_FILE_FOUND_ERROR("PROCESSOR_NO_LOGS_FILE_FOUND_ERROR"),
    
    PROCESSOR_STOPPING_INTERRUPTED("PROCESSOR_STOPPING_INTERRUPTED"),
    
    PROCESSOR_TIMED_OUT("PROCESSOR_TIMED_OUT"),
    
    PROCESSOR_UNHANDLED_EXCEPTION("PROCESSOR_UNHANDLED_EXCEPTION"),
    
    PROCESSOR_UNZIPPING_ERROR("PROCESSOR_UNZIPPING_ERROR"),
    
    REPACK_FAILED_TO_SAVE_LOG_ANALYSIS_IN_STORAGE("REPACK_FAILED_TO_SAVE_LOG_ANALYSIS_IN_STORAGE"),
    
    REPACK_FAILED_TO_STORE_ALL_LOG_ANALYSIS("REPACK_FAILED_TO_STORE_ALL_LOG_ANALYSIS"),
    
    REPACK_FAILED_TO_STORE_LOG_ANALYSIS("REPACK_FAILED_TO_STORE_LOG_ANALYSIS"),
    
    SOME_LOG_INCORRECT_DATE_FORMAT("SOME_LOG_INCORRECT_DATE_FORMAT"),
    
    TIMEOUT("TIMEOUT");

    private String value;

    LogHandlingErrorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LogHandlingErrorEnum fromValue(String value) {
      for (LogHandlingErrorEnum b : LogHandlingErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOG_HANDLING_ERROR = "logHandlingError";
  private LogHandlingErrorEnum logHandlingError;

  public static final String JSON_PROPERTY_RECORDS_TOTAL = "recordsTotal";
  private Integer recordsTotal;

  public static final String JSON_PROPERTY_SORTABLE_FIELDS = "sortableFields";
  private List<String> sortableFields = null;

  public static final String JSON_PROPERTY_FILTERABLE_FIELDS = "filterableFields";
  private List<String> filterableFields = null;

  public LogJobStatusResult() { 
  }

  public LogJobStatusResult logAnalysisStatus(LogAnalysisStatusEnum logAnalysisStatus) {
    this.logAnalysisStatus = logAnalysisStatus;
    return this;
  }

   /**
   * The status of the log analysis job.
   * @return logAnalysisStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the log analysis job.")
  @JsonProperty(JSON_PROPERTY_LOG_ANALYSIS_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogAnalysisStatusEnum getLogAnalysisStatus() {
    return logAnalysisStatus;
  }


  @JsonProperty(JSON_PROPERTY_LOG_ANALYSIS_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogAnalysisStatus(LogAnalysisStatusEnum logAnalysisStatus) {
    this.logAnalysisStatus = logAnalysisStatus;
  }


  public LogJobStatusResult statusChangeTimestamp(Long statusChangeTimestamp) {
    this.statusChangeTimestamp = statusChangeTimestamp;
    return this;
  }

   /**
   * The timestamp of the last status change, in UTC milliseconds.
   * @return statusChangeTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of the last status change, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_STATUS_CHANGE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStatusChangeTimestamp() {
    return statusChangeTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_CHANGE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatusChangeTimestamp(Long statusChangeTimestamp) {
    this.statusChangeTimestamp = statusChangeTimestamp;
  }


  public LogJobStatusResult logHandlingError(LogHandlingErrorEnum logHandlingError) {
    this.logHandlingError = logHandlingError;
    return this;
  }

   /**
   * The cause of the job failure.    A successful job has the &#x60;NONE&#x60; value.
   * @return logHandlingError
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cause of the job failure.    A successful job has the `NONE` value.")
  @JsonProperty(JSON_PROPERTY_LOG_HANDLING_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogHandlingErrorEnum getLogHandlingError() {
    return logHandlingError;
  }


  @JsonProperty(JSON_PROPERTY_LOG_HANDLING_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogHandlingError(LogHandlingErrorEnum logHandlingError) {
    this.logHandlingError = logHandlingError;
  }


  public LogJobStatusResult recordsTotal(Integer recordsTotal) {
    this.recordsTotal = recordsTotal;
    return this;
  }

   /**
   * The number of analyzed log entries.
   * @return recordsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of analyzed log entries.")
  @JsonProperty(JSON_PROPERTY_RECORDS_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRecordsTotal() {
    return recordsTotal;
  }


  @JsonProperty(JSON_PROPERTY_RECORDS_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecordsTotal(Integer recordsTotal) {
    this.recordsTotal = recordsTotal;
  }


  public LogJobStatusResult sortableFields(List<String> sortableFields) {
    this.sortableFields = sortableFields;
    return this;
  }

  public LogJobStatusResult addSortableFieldsItem(String sortableFieldsItem) {
    if (this.sortableFields == null) {
      this.sortableFields = new ArrayList<>();
    }
    this.sortableFields.add(sortableFieldsItem);
    return this;
  }

   /**
   * The map of the log entry sortable fields.
   * @return sortableFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The map of the log entry sortable fields.")
  @JsonProperty(JSON_PROPERTY_SORTABLE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSortableFields() {
    return sortableFields;
  }


  @JsonProperty(JSON_PROPERTY_SORTABLE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortableFields(List<String> sortableFields) {
    this.sortableFields = sortableFields;
  }


  public LogJobStatusResult filterableFields(List<String> filterableFields) {
    this.filterableFields = filterableFields;
    return this;
  }

  public LogJobStatusResult addFilterableFieldsItem(String filterableFieldsItem) {
    if (this.filterableFields == null) {
      this.filterableFields = new ArrayList<>();
    }
    this.filterableFields.add(filterableFieldsItem);
    return this;
  }

   /**
   * The map of the log entry filterable fields.
   * @return filterableFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The map of the log entry filterable fields.")
  @JsonProperty(JSON_PROPERTY_FILTERABLE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFilterableFields() {
    return filterableFields;
  }


  @JsonProperty(JSON_PROPERTY_FILTERABLE_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterableFields(List<String> filterableFields) {
    this.filterableFields = filterableFields;
  }


  /**
   * Return true if this LogJobStatusResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogJobStatusResult logJobStatusResult = (LogJobStatusResult) o;
    return Objects.equals(this.logAnalysisStatus, logJobStatusResult.logAnalysisStatus) &&
        Objects.equals(this.statusChangeTimestamp, logJobStatusResult.statusChangeTimestamp) &&
        Objects.equals(this.logHandlingError, logJobStatusResult.logHandlingError) &&
        Objects.equals(this.recordsTotal, logJobStatusResult.recordsTotal) &&
        Objects.equals(this.sortableFields, logJobStatusResult.sortableFields) &&
        Objects.equals(this.filterableFields, logJobStatusResult.filterableFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logAnalysisStatus, statusChangeTimestamp, logHandlingError, recordsTotal, sortableFields, filterableFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogJobStatusResult {\n");
    sb.append("    logAnalysisStatus: ").append(toIndentedString(logAnalysisStatus)).append("\n");
    sb.append("    statusChangeTimestamp: ").append(toIndentedString(statusChangeTimestamp)).append("\n");
    sb.append("    logHandlingError: ").append(toIndentedString(logHandlingError)).append("\n");
    sb.append("    recordsTotal: ").append(toIndentedString(recordsTotal)).append("\n");
    sb.append("    sortableFields: ").append(toIndentedString(sortableFields)).append("\n");
    sb.append("    filterableFields: ").append(toIndentedString(filterableFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

