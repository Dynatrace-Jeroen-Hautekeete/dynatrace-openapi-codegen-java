/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The information about the event&#39;s impact.
 */
@ApiModel(description = "The information about the event's impact.")
@JsonPropertyOrder({
  EventRestImpact.JSON_PROPERTY_ENTITY_ID,
  EventRestImpact.JSON_PROPERTY_ENTITY_NAME,
  EventRestImpact.JSON_PROPERTY_SEVERITY_LEVEL,
  EventRestImpact.JSON_PROPERTY_IMPACT_LEVEL,
  EventRestImpact.JSON_PROPERTY_EVENT_TYPE,
  EventRestImpact.JSON_PROPERTY_RESOURCE_ID,
  EventRestImpact.JSON_PROPERTY_RESOURCE_NAME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:03.911513100+01:00[Europe/Brussels]")
public class EventRestImpact {
  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  public static final String JSON_PROPERTY_ENTITY_NAME = "entityName";
  private String entityName;

  /**
   * The severity of the event.
   */
  public enum SeverityLevelEnum {
    AVAILABILITY("AVAILABILITY"),
    
    CUSTOM_ALERT("CUSTOM_ALERT"),
    
    ERROR("ERROR"),
    
    MONITORING_UNAVAILABLE("MONITORING_UNAVAILABLE"),
    
    PERFORMANCE("PERFORMANCE"),
    
    RESOURCE_CONTENTION("RESOURCE_CONTENTION");

    private String value;

    SeverityLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeverityLevelEnum fromValue(String value) {
      for (SeverityLevelEnum b : SeverityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEVERITY_LEVEL = "severityLevel";
  private SeverityLevelEnum severityLevel;

  /**
   * The impact level of the event. It shows what is affected by the problem: infrastructure, service, or application.
   */
  public enum ImpactLevelEnum {
    APPLICATION("APPLICATION"),
    
    ENVIRONMENT("ENVIRONMENT"),
    
    INFRASTRUCTURE("INFRASTRUCTURE"),
    
    SERVICE("SERVICE");

    private String value;

    ImpactLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImpactLevelEnum fromValue(String value) {
      for (ImpactLevelEnum b : ImpactLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IMPACT_LEVEL = "impactLevel";
  private ImpactLevelEnum impactLevel;

  /**
   * The type of the event.
   */
  public enum EventTypeEnum {
    APPLICATION_JS_FRAMEWORK_DETECTED("APPLICATION_JS_FRAMEWORK_DETECTED"),
    
    APPLICATION_OVERLOAD_PREVENTION("APPLICATION_OVERLOAD_PREVENTION"),
    
    AVAILABILITY_EVENT("AVAILABILITY_EVENT"),
    
    CONNECTION_LOST("CONNECTION_LOST"),
    
    CPU_SATURATED("CPU_SATURATED"),
    
    CUSTOM_ALERT("CUSTOM_ALERT"),
    
    CUSTOM_ANNOTATION("CUSTOM_ANNOTATION"),
    
    CUSTOM_APPLICATION_OVERLOAD_PREVENTION("CUSTOM_APPLICATION_OVERLOAD_PREVENTION"),
    
    CUSTOM_APP_CRASH_RATE_INCREASED("CUSTOM_APP_CRASH_RATE_INCREASED"),
    
    CUSTOM_CONFIGURATION("CUSTOM_CONFIGURATION"),
    
    CUSTOM_DEPLOYMENT("CUSTOM_DEPLOYMENT"),
    
    CUSTOM_INFO("CUSTOM_INFO"),
    
    DATABASE_CONNECTION_FAILURE("DATABASE_CONNECTION_FAILURE"),
    
    DEPLOYMENT_CHANGED_CHANGE("DEPLOYMENT_CHANGED_CHANGE"),
    
    DEPLOYMENT_CHANGED_NEW("DEPLOYMENT_CHANGED_NEW"),
    
    DEPLOYMENT_CHANGED_REMOVED("DEPLOYMENT_CHANGED_REMOVED"),
    
    DYNATRACE_INTERNAL("DYNATRACE_INTERNAL"),
    
    EBS_VOLUME_HIGH_LATENCY("EBS_VOLUME_HIGH_LATENCY"),
    
    ELASTIC_LOAD_BALANCER_HIGH_BACKEND_FAILURE_RATE("ELASTIC_LOAD_BALANCER_HIGH_BACKEND_FAILURE_RATE"),
    
    ELASTIC_LOAD_BALANCER_HIGH_FAILURE_RATE("ELASTIC_LOAD_BALANCER_HIGH_FAILURE_RATE"),
    
    ELASTIC_LOAD_BALANCER_HIGH_UNHEALTHY_HOST_RATE("ELASTIC_LOAD_BALANCER_HIGH_UNHEALTHY_HOST_RATE"),
    
    ERROR_EVENT("ERROR_EVENT"),
    
    ESXI_HOST_VM_MOTION_ARRIVED("ESXI_HOST_VM_MOTION_ARRIVED"),
    
    ESXI_HOST_VM_MOTION_LEFT("ESXI_HOST_VM_MOTION_LEFT"),
    
    ESXI_HOST_VM_STARTED("ESXI_HOST_VM_STARTED"),
    
    ESXI_START("ESXI_START"),
    
    ESXI_VM_DISCONNECTED("ESXI_VM_DISCONNECTED"),
    
    ESXI_VM_MOTION("ESXI_VM_MOTION"),
    
    ESXI_VM_POWER_OFF("ESXI_VM_POWER_OFF"),
    
    ESXI_VM_START("ESXI_VM_START"),
    
    FAILURE_RATE_INCREASED("FAILURE_RATE_INCREASED"),
    
    HIGH_CONNECTIVITY_FAILURES("HIGH_CONNECTIVITY_FAILURES"),
    
    HIGH_DROPPED_PACKETS_RATE("HIGH_DROPPED_PACKETS_RATE"),
    
    HIGH_GC_ACTIVITY("HIGH_GC_ACTIVITY"),
    
    HIGH_LATENCY("HIGH_LATENCY"),
    
    HIGH_NETWORK_ERROR_RATE("HIGH_NETWORK_ERROR_RATE"),
    
    HIGH_NETWORK_LOSS_RATE("HIGH_NETWORK_LOSS_RATE"),
    
    HIGH_NETWORK_UTILIZATION("HIGH_NETWORK_UTILIZATION"),
    
    HOST_CONNECTION_FAILED("HOST_CONNECTION_FAILED"),
    
    HOST_CONNECTION_LOST("HOST_CONNECTION_LOST"),
    
    HOST_DATASTORE_LOW_DISK_SPACE("HOST_DATASTORE_LOW_DISK_SPACE"),
    
    HOST_DISK_LOW_INODES("HOST_DISK_LOW_INODES"),
    
    HOST_GRACEFULLY_SHUTDOWN("HOST_GRACEFULLY_SHUTDOWN"),
    
    HOST_LOG_AVAILABILITY("HOST_LOG_AVAILABILITY"),
    
    HOST_LOG_ERROR("HOST_LOG_ERROR"),
    
    HOST_LOG_MATCHED("HOST_LOG_MATCHED"),
    
    HOST_LOG_PERFORMANCE("HOST_LOG_PERFORMANCE"),
    
    HOST_MAINTENANCE("HOST_MAINTENANCE"),
    
    HOST_NO_CONNECTION("HOST_NO_CONNECTION"),
    
    HOST_OF_SERVICE_UNAVAILABLE("HOST_OF_SERVICE_UNAVAILABLE"),
    
    HOST_SHUTDOWN("HOST_SHUTDOWN"),
    
    HOST_TIMEOUT("HOST_TIMEOUT"),
    
    HTTP_CHECK_GLOBAL_OUTAGE("HTTP_CHECK_GLOBAL_OUTAGE"),
    
    HTTP_CHECK_LOCAL_OUTAGE("HTTP_CHECK_LOCAL_OUTAGE"),
    
    HTTP_CHECK_TEST_LOCATION_SLOWDOWN("HTTP_CHECK_TEST_LOCATION_SLOWDOWN"),
    
    INSUFFICIENT_DISK_QUEUE_DEPTH("INSUFFICIENT_DISK_QUEUE_DEPTH"),
    
    JAVASCRIPT_ERROR_RATE_INCREASED("JAVASCRIPT_ERROR_RATE_INCREASED"),
    
    LAMBDA_FUNCTION_HIGH_ERROR_RATE("LAMBDA_FUNCTION_HIGH_ERROR_RATE"),
    
    LOG_AVAILABILITY("LOG_AVAILABILITY"),
    
    LOG_ERROR("LOG_ERROR"),
    
    LOG_MATCHED("LOG_MATCHED"),
    
    LOG_PERFORMANCE("LOG_PERFORMANCE"),
    
    LOW_DISK_SPACE("LOW_DISK_SPACE"),
    
    LOW_STORAGE_SPACE("LOW_STORAGE_SPACE"),
    
    MARKED_FOR_TERMINATION("MARKED_FOR_TERMINATION"),
    
    MEMORY_RESOURCES_EXHAUSTED("MEMORY_RESOURCES_EXHAUSTED"),
    
    MEMORY_SATURATED("MEMORY_SATURATED"),
    
    MOBILE_APPLICATION_OVERLOAD_PREVENTION("MOBILE_APPLICATION_OVERLOAD_PREVENTION"),
    
    MOBILE_APP_CRASH_RATE_INCREASED("MOBILE_APP_CRASH_RATE_INCREASED"),
    
    MONITORING_UNAVAILABLE("MONITORING_UNAVAILABLE"),
    
    OPENSTACK_HOST_VM_SHUTDOWN("OPENSTACK_HOST_VM_SHUTDOWN"),
    
    OPENSTACK_HOST_VM_STARTED("OPENSTACK_HOST_VM_STARTED"),
    
    OPENSTACK_KEYSTONE_SLOW("OPENSTACK_KEYSTONE_SLOW"),
    
    OPENSTACK_KEYSTONE_UNHEALTHY("OPENSTACK_KEYSTONE_UNHEALTHY"),
    
    OPENSTACK_VM_LAUNCH_FAILED("OPENSTACK_VM_LAUNCH_FAILED"),
    
    OPENSTACK_VM_MOTION("OPENSTACK_VM_MOTION"),
    
    OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE("OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE"),
    
    OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE("OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE"),
    
    OVERLOADED_STORAGE("OVERLOADED_STORAGE"),
    
    PERFORMANCE_EVENT("PERFORMANCE_EVENT"),
    
    PGI_CRASHED_INFO("PGI_CRASHED_INFO"),
    
    PGI_HAPROXY_QUEUED_REQUESTS_HIGH("PGI_HAPROXY_QUEUED_REQUESTS_HIGH"),
    
    PGI_HAPROXY_SESSION_USAGE_HIGH("PGI_HAPROXY_SESSION_USAGE_HIGH"),
    
    PGI_LOG_MATCHED("PGI_LOG_MATCHED"),
    
    PGI_MEMDUMP("PGI_MEMDUMP"),
    
    PGI_MYSQL_SLOW_QUERIES_RATE_HIGH("PGI_MYSQL_SLOW_QUERIES_RATE_HIGH"),
    
    PGI_OF_SERVICE_UNAVAILABLE("PGI_OF_SERVICE_UNAVAILABLE"),
    
    PGI_RMQ_HIGH_FILE_DESC_USAGE("PGI_RMQ_HIGH_FILE_DESC_USAGE"),
    
    PGI_RMQ_HIGH_MEM_USAGE("PGI_RMQ_HIGH_MEM_USAGE"),
    
    PGI_RMQ_HIGH_PROCESS_USAGE("PGI_RMQ_HIGH_PROCESS_USAGE"),
    
    PGI_RMQ_HIGH_SOCKETS_USAGE("PGI_RMQ_HIGH_SOCKETS_USAGE"),
    
    PGI_RMQ_LOW_DISK_SPACE("PGI_RMQ_LOW_DISK_SPACE"),
    
    PROCESS_CRASHED("PROCESS_CRASHED"),
    
    PROCESS_CUSTOM_AVAILABILITY("PROCESS_CUSTOM_AVAILABILITY"),
    
    PROCESS_CUSTOM_ERROR("PROCESS_CUSTOM_ERROR"),
    
    PROCESS_CUSTOM_PERFORMANCE("PROCESS_CUSTOM_PERFORMANCE"),
    
    PROCESS_GROUP_LOW_INSTANCE_COUNT("PROCESS_GROUP_LOW_INSTANCE_COUNT"),
    
    PROCESS_LOG_AVAILABILITY("PROCESS_LOG_AVAILABILITY"),
    
    PROCESS_LOG_ERROR("PROCESS_LOG_ERROR"),
    
    PROCESS_LOG_PERFORMANCE("PROCESS_LOG_PERFORMANCE"),
    
    PROCESS_RESTART("PROCESS_RESTART"),
    
    PROCESS_UNAVAILABLE("PROCESS_UNAVAILABLE"),
    
    RDS_AZ_FAILOVER_COMPLETED("RDS_AZ_FAILOVER_COMPLETED"),
    
    RDS_AZ_FAILOVER_STARTED("RDS_AZ_FAILOVER_STARTED"),
    
    RDS_BACKUP_COMPLETED("RDS_BACKUP_COMPLETED"),
    
    RDS_BACKUP_STARTED("RDS_BACKUP_STARTED"),
    
    RDS_OF_SERVICE_UNAVAILABLE("RDS_OF_SERVICE_UNAVAILABLE"),
    
    RDS_RESTART("RDS_RESTART"),
    
    RDS_RESTART_SEQUENCE("RDS_RESTART_SEQUENCE"),
    
    RESOURCE_CONTENTION("RESOURCE_CONTENTION"),
    
    SERVICE_RESPONSE_TIME_DEGRADED("SERVICE_RESPONSE_TIME_DEGRADED"),
    
    SLOW_DISK("SLOW_DISK"),
    
    SYNTHETIC_AVAILABILITY("SYNTHETIC_AVAILABILITY"),
    
    SYNTHETIC_NODE_OUTAGE("SYNTHETIC_NODE_OUTAGE"),
    
    SYNTHETIC_PRIVATE_LOCATION_OUTAGE("SYNTHETIC_PRIVATE_LOCATION_OUTAGE"),
    
    SYNTHETIC_SLOWDOWN("SYNTHETIC_SLOWDOWN"),
    
    THREADS_RESOURCES_EXHAUSTED("THREADS_RESOURCES_EXHAUSTED"),
    
    UNEXPECTED_HIGH_LOAD("UNEXPECTED_HIGH_LOAD"),
    
    UNEXPECTED_LOW_LOAD("UNEXPECTED_LOW_LOAD"),
    
    USER_ACTION_DURATION_DEGRADATION("USER_ACTION_DURATION_DEGRADATION"),
    
    VIRTUAL_MACHINE_SHUTDOWN("VIRTUAL_MACHINE_SHUTDOWN"),
    
    WEB_CHECK_GLOBAL_OUTAGE("WEB_CHECK_GLOBAL_OUTAGE"),
    
    WEB_CHECK_LOCAL_OUTAGE("WEB_CHECK_LOCAL_OUTAGE");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private EventTypeEnum eventType;

  public static final String JSON_PROPERTY_RESOURCE_ID = "resourceId";
  private String resourceId;

  public static final String JSON_PROPERTY_RESOURCE_NAME = "resourceName";
  private String resourceName;

  public EventRestImpact() { 
  }

  public EventRestImpact entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * The ID of the affected Dynatrace entity.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the affected Dynatrace entity.")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityId() {
    return entityId;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public EventRestImpact entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

   /**
   * The name of the affected Dynatrace entity.
   * @return entityName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the affected Dynatrace entity.")
  @JsonProperty(JSON_PROPERTY_ENTITY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityName() {
    return entityName;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public EventRestImpact severityLevel(SeverityLevelEnum severityLevel) {
    this.severityLevel = severityLevel;
    return this;
  }

   /**
   * The severity of the event.
   * @return severityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The severity of the event.")
  @JsonProperty(JSON_PROPERTY_SEVERITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SeverityLevelEnum getSeverityLevel() {
    return severityLevel;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverityLevel(SeverityLevelEnum severityLevel) {
    this.severityLevel = severityLevel;
  }


  public EventRestImpact impactLevel(ImpactLevelEnum impactLevel) {
    this.impactLevel = impactLevel;
    return this;
  }

   /**
   * The impact level of the event. It shows what is affected by the problem: infrastructure, service, or application.
   * @return impactLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The impact level of the event. It shows what is affected by the problem: infrastructure, service, or application.")
  @JsonProperty(JSON_PROPERTY_IMPACT_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImpactLevelEnum getImpactLevel() {
    return impactLevel;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImpactLevel(ImpactLevelEnum impactLevel) {
    this.impactLevel = impactLevel;
  }


  public EventRestImpact eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the event.
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the event.")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public EventRestImpact resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * The id of the resource the event occurred on.
   * @return resourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the resource the event occurred on.")
  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResourceId() {
    return resourceId;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public EventRestImpact resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

   /**
   * The name of the resource the event occurred on.
   * @return resourceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the resource the event occurred on.")
  @JsonProperty(JSON_PROPERTY_RESOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResourceName() {
    return resourceName;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  /**
   * Return true if this EventRestImpact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRestImpact eventRestImpact = (EventRestImpact) o;
    return Objects.equals(this.entityId, eventRestImpact.entityId) &&
        Objects.equals(this.entityName, eventRestImpact.entityName) &&
        Objects.equals(this.severityLevel, eventRestImpact.severityLevel) &&
        Objects.equals(this.impactLevel, eventRestImpact.impactLevel) &&
        Objects.equals(this.eventType, eventRestImpact.eventType) &&
        Objects.equals(this.resourceId, eventRestImpact.resourceId) &&
        Objects.equals(this.resourceName, eventRestImpact.resourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityName, severityLevel, impactLevel, eventType, resourceId, resourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRestImpact {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    severityLevel: ").append(toIndentedString(severityLevel)).append("\n");
    sb.append("    impactLevel: ").append(toIndentedString(impactLevel)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

