/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.model.ActiveGateConnectionInfo;
import com.dynatrace.apis.envv1.model.ActiveGateInstallerVersions;
import com.dynatrace.apis.envv1.model.AgentInstallerVersions;
import com.dynatrace.apis.envv1.model.AgentProcessModuleConfigResponse;
import com.dynatrace.apis.envv1.model.BoshReleaseAvailableVersions;
import com.dynatrace.apis.envv1.model.BoshReleaseChecksum;
import com.dynatrace.apis.envv1.model.ConnectionInfo;
import com.dynatrace.apis.envv1.model.InstallerMetaInfoDto;
import com.dynatrace.apis.envv1.model.LatestLambdaLayerNames;
import com.dynatrace.apis.envv1.model.OneAgentInstallerChecksum;
import java.util.Set;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for DeploymentApi
 */
@Ignore
public class DeploymentApiTest {

    private final DeploymentApi api = new DeploymentApi();

    
    /**
     * Downloads OneAgent installer of the specified version
     *
     * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAgentInstallerWithVersionTest() throws ApiException {
        String osType = null;
        String installerType = null;
        String version = null;
        String ifNoneMatch = null;
        String flavor = null;
        String arch = null;
        String bitness = null;
        Set<String> include = null;
        Boolean skipMetadata = null;
        String networkZone = null;
        
        api.downloadAgentInstallerWithVersion(osType, installerType, version, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the requested version matching OneAgent deployment orchestration tarball&#39;s signature
     *
     * Downloading the requested version matching deployment orchestration tarball&#39;s signature matching the requested Orchestration Type (ansible, puppet).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAgentOrchestrationSignatureWithVersionTest() throws ApiException {
        String orchestrationType = null;
        String version = null;
        
        api.downloadAgentOrchestrationSignatureWithVersion(orchestrationType, version);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the requested version matching OneAgent deployment orchestration tarball
     *
     * Downloading the requested version matching deployment orchestration tarball matching the requested Orchestration Type (ansible, puppet).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAgentOrchestrationWithVersionTest() throws ApiException {
        String orchestrationType = null;
        String version = null;
        
        api.downloadAgentOrchestrationWithVersion(orchestrationType, version);
        
        // TODO: test validations
    }
    
    /**
     * Downloads BOSH release tarballs of the specified version, OneAgent included
     *
     * For SaaS, the call is executed on an Environment ActiveGate. Be sure to use the base of an ActiveGate, **not** the environment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadBoshReleaseWithVersionTest() throws ApiException {
        String osType = null;
        String version = null;
        Boolean skipMetadata = null;
        String networkZone = null;
        
        api.downloadBoshReleaseWithVersion(osType, version, skipMetadata, networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the ActiveGate installer of the specified version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadGatewayInstallerWithVersionTest() throws ApiException {
        String osType = null;
        String version = null;
        String ifNoneMatch = null;
        String networkZone = null;
        String arch = null;
        
        api.downloadGatewayInstallerWithVersion(osType, version, ifNoneMatch, networkZone, arch);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the latest OneAgent installer
     *
     * For the &#x60;paas&#x60; or &#x60;paas-sh&#x60; installer types you can get a configuring installer, by passing additional parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLatestAgentInstallerTest() throws ApiException {
        String osType = null;
        String installerType = null;
        String ifNoneMatch = null;
        String flavor = null;
        String arch = null;
        String bitness = null;
        Set<String> include = null;
        Boolean skipMetadata = null;
        String networkZone = null;
        
        api.downloadLatestAgentInstaller(osType, installerType, ifNoneMatch, flavor, arch, bitness, include, skipMetadata, networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the latest OneAgent deployment orchestration tarball
     *
     * Downloading the latest available deployment orchestration script tarball matching the requested Orchestration Type (ansible, puppet).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLatestAgentOrchestrationTest() throws ApiException {
        String orchestrationType = null;
        
        api.downloadLatestAgentOrchestration(orchestrationType);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the latest OneAgent deployment orchestration tarball&#39;s signature
     *
     * Downloading the latest available deployment orchestration tarball&#39;s sigature matching the requested Orchestration Type (ansible, puppet).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLatestAgentOrchestrationSignatureTest() throws ApiException {
        String orchestrationType = null;
        
        api.downloadLatestAgentOrchestrationSignature(orchestrationType);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the configured standard ActiveGate installer of the latest version for the specified OS
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadLatestGatewayInstallerTest() throws ApiException {
        String osType = null;
        String ifNoneMatch = null;
        String networkZone = null;
        String arch = null;
        
        api.downloadLatestGatewayInstaller(osType, ifNoneMatch, networkZone, arch);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available versions of ActiveGate installer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActiveGateInstallerAvailableVersionsTest() throws ApiException {
        String osType = null;
        String arch = null;
        ActiveGateInstallerVersions response = 
        api.getActiveGateInstallerAvailableVersions(osType, arch);
        
        // TODO: test validations
    }
    
    /**
     * Gets the connectivity information for Environment ActiveGate
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActiveGateInstallerConnectionInfoTest() throws ApiException {
        String networkZone = null;
        ActiveGateConnectionInfo response = 
        api.getActiveGateInstallerConnectionInfo(networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available versions of OneAgent installer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentInstallerAvailableVersionsTest() throws ApiException {
        String osType = null;
        String installerType = null;
        String flavor = null;
        String arch = null;
        AgentInstallerVersions response = 
        api.getAgentInstallerAvailableVersions(osType, installerType, flavor, arch);
        
        // TODO: test validations
    }
    
    /**
     * Gets the connectivity information for OneAgent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentInstallerConnectionInfoTest() throws ApiException {
        String networkZone = null;
        String version = null;
        ConnectionInfo response = 
        api.getAgentInstallerConnectionInfo(networkZone, version);
        
        // TODO: test validations
    }
    
    /**
     * Gets the list of the ActiveGate-Endpoints to be used for Agents ordered by networkzone-priorities.
     *
     * Highest priority first, separated by a semicolon.If no network zone provided the default zone is used. Responds with 404 if network zone is not known.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentInstallerConnectionInfoEndpointsTest() throws ApiException {
        String networkZone = null;
        
        api.getAgentInstallerConnectionInfoEndpoints(networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Gets the latest available version of a OneAgent installer
     *
     * If a [standard version](https://dt-url.net/ml03yye) is configured, then this is the downloaded version.   Non-required parameters are only applicable to the &#x60;paas&#x60; and &#x60;paas-sh&#x60; installer types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentInstallerMetaInfoTest() throws ApiException {
        String osType = null;
        String installerType = null;
        String flavor = null;
        String arch = null;
        String bitness = null;
        InstallerMetaInfoDto response = 
        api.getAgentInstallerMetaInfo(osType, installerType, flavor, arch, bitness);
        
        // TODO: test validations
    }
    
    /**
     * Gets the checksum of the specified OneAgent installer
     *
     * The checksum is the sha256 hash of the installer file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentInstallerWithVersionChecksumTest() throws ApiException {
        String osType = null;
        String installerType = null;
        String version = null;
        Boolean skipMetadata = null;
        String ifNoneMatch = null;
        String flavor = null;
        String arch = null;
        String bitness = null;
        Set<String> include = null;
        String networkZone = null;
        OneAgentInstallerChecksum response = 
        api.getAgentInstallerWithVersionChecksum(osType, installerType, version, skipMetadata, ifNoneMatch, flavor, arch, bitness, include, networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Gets the latest process module config | maturity&#x3D;EARLY_ADOPTER
     *
     * Returns the latest process module config. Passing a previously gotten revision will first do a revision check, and return a 304 response if no changes were detected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentProcessModuleConfigTest() throws ApiException {
        Long revision = null;
        AgentProcessModuleConfigResponse response = 
        api.getAgentProcessModuleConfig(revision);
        
        // TODO: test validations
    }
    
    /**
     * Gets the list of available OneAgent versions for BOSH release tarballs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBoshReleaseAvailableVersionsTest() throws ApiException {
        String osType = null;
        BoshReleaseAvailableVersions response = 
        api.getBoshReleaseAvailableVersions(osType);
        
        // TODO: test validations
    }
    
    /**
     * Gets the checksum of the specified BOSH release tarball
     *
     * The checksum is the sha256 hash of the installer file.   Result is not stable if **skipMetadata** is set to &#x60;false&#x60;.  For SaaS only works on environment ActiveGates version 1.176 or higher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBoshReleaseChecksumTest() throws ApiException {
        String osType = null;
        String version = null;
        Boolean skipMetadata = null;
        String networkZone = null;
        BoshReleaseChecksum response = 
        api.getBoshReleaseChecksum(osType, version, skipMetadata, networkZone);
        
        // TODO: test validations
    }
    
    /**
     * Get the latest version names of the OneAgent for AWS Lambda
     *
     * Get the latest version names of the OneAgent for the Java, Node.js, and Python AWS Lambda runtime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLatestLambdaBuildUnitsTest() throws ApiException {
        LatestLambdaLayerNames response = 
        api.getLatestLambdaBuildUnits();
        
        // TODO: test validations
    }
    
}
