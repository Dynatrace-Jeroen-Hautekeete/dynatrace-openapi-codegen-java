/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.model.EntityIdDto;
import com.dynatrace.apis.envv1.model.Node;
import com.dynatrace.apis.envv1.model.Nodes;
import com.dynatrace.apis.envv1.model.PrivateSyntheticLocation;
import com.dynatrace.apis.envv1.model.SyntheticLocation;
import com.dynatrace.apis.envv1.model.SyntheticLocationUpdate;
import com.dynatrace.apis.envv1.model.SyntheticLocations;
import com.dynatrace.apis.envv1.model.SyntheticPublicLocationsStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for SyntheticLocationsNodesAndConfigurationApi
 */
@Ignore
public class SyntheticLocationsNodesAndConfigurationApiTest {

    private final SyntheticLocationsNodesAndConfigurationApi api = new SyntheticLocationsNodesAndConfigurationApi();

    
    /**
     * Creates a new private synthetic location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationTest() throws ApiException {
        PrivateSyntheticLocation privateSyntheticLocation = null;
        EntityIdDto response = 
        api.addLocation(privateSyntheticLocation);
        
        // TODO: test validations
    }
    
    /**
     * Gets properties of the specified location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        String locationId = null;
        SyntheticLocation response = 
        api.getLocation(locationId);
        
        // TODO: test validations
    }
    
    /**
     * Lists all synthetic locations (both public and private) available for your environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationsTest() throws ApiException {
        String cloudPlatform = null;
        String type = null;
        SyntheticLocations response = 
        api.getLocations(cloudPlatform, type);
        
        // TODO: test validations
    }
    
    /**
     * Returns whether public locations are enabled or not | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationsStatusTest() throws ApiException {
        SyntheticPublicLocationsStatus response = 
        api.getLocationsStatus();
        
        // TODO: test validations
    }
    
    /**
     * Lists properties of the specified synthetic node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws ApiException {
        String nodeId = null;
        Node response = 
        api.getNode(nodeId);
        
        // TODO: test validations
    }
    
    /**
     * Lists all synthetic nodes available in your environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesTest() throws ApiException {
        Nodes response = 
        api.getNodes();
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified private synthetic location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLocationTest() throws ApiException {
        String locationId = null;
        
        api.removeLocation(locationId);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified synthetic location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocationTest() throws ApiException {
        String locationId = null;
        SyntheticLocationUpdate syntheticLocationUpdate = null;
        
        api.updateLocation(locationId, syntheticLocationUpdate);
        
        // TODO: test validations
    }
    
    /**
     * Enable/disable public synthetic locations | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocationsStatusTest() throws ApiException {
        SyntheticPublicLocationsStatus syntheticPublicLocationsStatus = null;
        
        api.updateLocationsStatus(syntheticPublicLocationsStatus);
        
        // TODO: test validations
    }
    
}
