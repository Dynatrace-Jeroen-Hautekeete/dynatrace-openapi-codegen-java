/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv1.api;

import com.dynatrace.apis.envv1.ApiException;
import com.dynatrace.apis.envv1.model.EventCreation;
import com.dynatrace.apis.envv1.model.EventQueryResult;
import com.dynatrace.apis.envv1.model.EventRestEntry;
import com.dynatrace.apis.envv1.model.EventStoreResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    
    /**
     * Gets the parameters of the specified event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        String eventId = null;
        EventRestEntry response = 
        api.getEventById(eventId);
        
        // TODO: test validations
    }
    
    /**
     * Pushes custom events to one or more monitored entities
     *
     * You can use this endpoint to:   * Push information-only events from third-party systems such as CI platforms (Jenkins, Bamboo, Electric Cloud, etc.) to provide additional information for Dynatrace automated root cause analysis. The time of event closure is already known and the event IDs are returned instantly. You can report these events for up to **30 days** into the past. The information-only event types are:  &#x60;CUSTOM_ANNOTATION&#x60;   &#x60;CUSTOM_CONFIGURATION&#x60;   &#x60;CUSTOM_DEPLOYMENT&#x60;   &#x60;CUSTOM_INFO&#x60;   &#x60;MARKED_FOR_TERMINATION&#x60;   * Push problem-opening events (for example, an error rate increase) to trigger the Dynatrace automated root cause analysis engine.  Correlation IDs are returned instead of event IDs. These events stay open until the specified timeout expires. To prevent expiration, you can refresh these events by sending the same payload again. You can report these events for up to **60 minutes** into the past. The problem-opening event types are (sorted by severity level, descending):  &#x60;AVAILABILITY_EVENT&#x60;   &#x60;ERROR_EVENT&#x60;   &#x60;PERFORMANCE_EVENT&#x60;   &#x60;RESOURCE_CONTENTION&#x60;   The actual set of event parameters depends on the type of your event. To find the parameters mapping, see [POST an event](https://dt-url.net/1v63r77) in Dynatrace Documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEventTest() throws ApiException {
        EventCreation eventCreation = null;
        EventStoreResult response = 
        api.postEvent(eventCreation);
        
        // TODO: test validations
    }
    
    /**
     * Lists all the events of your environment, along with their parameters
     *
     * Because the possible number of events can be huge, the response is limited to 150 events. You can focus the output by specifying filtering parameters for the request.  An event is included in the response, if either start or end timestamp of the event is within the defined timeframe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryEventsTest() throws ApiException {
        Long from = null;
        Long to = null;
        String relativeTime = null;
        String eventType = null;
        String entityId = null;
        String cursor = null;
        EventQueryResult response = 
        api.queryEvents(from, to, relativeTime, eventType, entityId, cursor);
        
        // TODO: test validations
    }
    
}
