/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.OpaqueAndExternalWebServiceRule;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceDetectionOpaqueAndExternalWebServiceApi
 */
@Ignore
public class ServiceDetectionOpaqueAndExternalWebServiceApiTest {

    private final ServiceDetectionOpaqueAndExternalWebServiceApi api = new ServiceDetectionOpaqueAndExternalWebServiceApi();

    
    /**
     * Creates a new service detection rule
     *
     * The body must not provide an ID as it will be automatically assigned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        String position = null;
        OpaqueAndExternalWebServiceRule opaqueAndExternalWebServiceRule = null;
        EntityShortRepresentation response = 
        api.createOpaqueAndExternalWebServiceRule(position, opaqueAndExternalWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified service detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        UUID id = null;
        
        api.deleteOpaqueAndExternalWebServiceRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Shows the properties of the specified service detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        UUID id = null;
        OpaqueAndExternalWebServiceRule response = 
        api.getOpaqueAndExternalWebServiceRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all opaque and external web service detection rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOpaqueAndExternalWebServiceRulesTest() throws ApiException {
        StubList response = 
        api.listOpaqueAndExternalWebServiceRules();
        
        // TODO: test validations
    }
    
    /**
     * Reorders the service detection rules of the specified type
     *
     * The request reorders the rules of the specified type according to the order of the IDs in the body of the request.    Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderOpaqueAndExternalWebServiceRulesTest() throws ApiException {
        StubList stubList = null;
        
        api.orderOpaqueAndExternalWebServiceRules(stubList);
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing service detection rule
     *
     * If the rule with the specified ID doesn&#39;t exist, a new rule will be created and appended to the end of the rule list.    The request keeps an existing order of rules, unless the **order** parameter is set.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        UUID id = null;
        OpaqueAndExternalWebServiceRule opaqueAndExternalWebServiceRule = null;
        EntityShortRepresentation response = 
        api.updateOpaqueAndExternalWebServiceRule(id, opaqueAndExternalWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_SERVICE&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        OpaqueAndExternalWebServiceRule opaqueAndExternalWebServiceRule = null;
        
        api.validateCreateOpaqueAndExternalWebServiceRule(opaqueAndExternalWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Validate the payload for the &#x60;PUT /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_SERVICE/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateOpaqueAndExternalWebServiceRuleTest() throws ApiException {
        UUID id = null;
        OpaqueAndExternalWebServiceRule opaqueAndExternalWebServiceRule = null;
        
        api.validateUpdateOpaqueAndExternalWebServiceRule(id, opaqueAndExternalWebServiceRule);
        
        // TODO: test validations
    }
    
}
