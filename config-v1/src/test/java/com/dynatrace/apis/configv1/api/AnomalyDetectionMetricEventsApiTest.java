/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.MetricEvent;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AnomalyDetectionMetricEventsApi
 */
@Ignore
public class AnomalyDetectionMetricEventsApiTest {

    private final AnomalyDetectionMetricEventsApi api = new AnomalyDetectionMetricEventsApi();

    
    /**
     * Creates a new metric event
     *
     * The response contains the ID of the newly created metric event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMetricEventTest() throws ApiException {
        MetricEvent metricEvent = null;
        EntityShortRepresentation response = 
        api.createMetricEvent(metricEvent);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified metric event
     *
     * You can&#39;t delete events created by plugins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMetricEventTest() throws ApiException {
        String id = null;
        
        api.deleteMetricEvent(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of the specified metric event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetricEventConfigTest() throws ApiException {
        String id = null;
        MetricEvent response = 
        api.getMetricEventConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all configured metric events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMetricEventConfigsTest() throws ApiException {
        Boolean includeEntityFilterMetricEvents = null;
        StubList response = 
        api.listMetricEventConfigs(includeEntityFilterMetricEvents);
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing metric event or creates a new one
     *
     * If the metric event with the specified ID does not exist, a new metric event will be created.    You can&#39;t update the **type** of the metric event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMetricEventTest() throws ApiException {
        String id = null;
        MetricEvent metricEvent = null;
        EntityShortRepresentation response = 
        api.updateMetricEvent(id, metricEvent);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /anomalyDetection/metricEvents&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateMetricEventTest() throws ApiException {
        MetricEvent metricEvent = null;
        
        api.validateCreateMetricEvent(metricEvent);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /anomalyDetection/metricEvents/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateMetricEventTest() throws ApiException {
        String id = null;
        MetricEvent metricEvent = null;
        
        api.validateUpdateMetricEvent(id, metricEvent);
        
        // TODO: test validations
    }
    
}
