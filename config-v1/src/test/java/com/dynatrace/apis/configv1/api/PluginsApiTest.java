/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import java.io.File;
import com.dynatrace.apis.configv1.model.Plugin;
import com.dynatrace.apis.configv1.model.PluginStateList;
import com.dynatrace.apis.configv1.model.RemotePluginEndpoint;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for PluginsApi
 */
@Ignore
public class PluginsApiTest {

    private final PluginsApi api = new PluginsApi();

    
    /**
     * Creates a new endpoint for the specified ActiveGate plugin
     *
     * The body must not provide an ID of the endpoint, as IDs are automatically assigned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRemotePluginEndpointTest() throws ApiException {
        String id = null;
        RemotePluginEndpoint remotePluginEndpoint = null;
        EntityShortRepresentation response = 
        api.createRemotePluginEndpoint(id, remotePluginEndpoint);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the ZIP file of the specified plugin
     *
     * Deletion of the plugin file uninstalls the plugin, making it unavailable for use.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePluginTest() throws ApiException {
        String id = null;
        
        api.deletePlugin(id);
        
        // TODO: test validations
    }
    
    /**
     * Deletes an existing endpoint of the ActiveGate plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRemotePluginEndpointTest() throws ApiException {
        String id = null;
        String endpointId = null;
        
        api.deleteRemotePluginEndpoint(id, endpointId);
        
        // TODO: test validations
    }
    
    /**
     * Lists the properties of the specified plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginTest() throws ApiException {
        String id = null;
        Plugin response = 
        api.getPlugin(id);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the ZIP file of the specified plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginBinaryTest() throws ApiException {
        String id = null;
        Object response = 
        api.getPluginBinary(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists the states of the specified plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginStatesTest() throws ApiException {
        String id = null;
        PluginStateList response = 
        api.getPluginStates(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all uploaded plugins
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPluginsTest() throws ApiException {
        StubList response = 
        api.getPlugins();
        
        // TODO: test validations
    }
    
    /**
     * Gets parameters of the specified endpoint of the ActiveGate plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemotePluginEndpointTest() throws ApiException {
        String id = null;
        String endpointId = null;
        RemotePluginEndpoint response = 
        api.getRemotePluginEndpoint(id, endpointId);
        
        // TODO: test validations
    }
    
    /**
     * Lists endpoints of the specified ActiveGate plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemotePluginEndpointsTest() throws ApiException {
        String id = null;
        StubList response = 
        api.getRemotePluginEndpoints(id);
        
        // TODO: test validations
    }
    
    /**
     * List available ActiveGate plugin modules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemotePluginModulesTest() throws ApiException {
        StubList response = 
        api.getRemotePluginModules();
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing endpoint of the ActiveGate plugin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemotePluginEndpointTest() throws ApiException {
        String id = null;
        String endpointId = null;
        RemotePluginEndpoint remotePluginEndpoint = null;
        
        api.updateRemotePluginEndpoint(id, endpointId, remotePluginEndpoint);
        
        // TODO: test validations
    }
    
    /**
     * Uploads a ZIP plugin file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadPluginTest() throws ApiException {
        File _file = null;
        Boolean overrideAlerts = null;
        EntityShortRepresentation response = 
        api.uploadPlugin(_file, overrideAlerts);
        
        // TODO: test validations
    }
    
    /**
     * Validates a ZIP plugin file for &#x60;POST/plugins&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validatePluginTest() throws ApiException {
        File _file = null;
        Boolean jsonOnly = null;
        
        api.validatePlugin(_file, jsonOnly);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /plugins/{id}/endpoints&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateRemotePluginEndpointTest() throws ApiException {
        String id = null;
        RemotePluginEndpoint remotePluginEndpoint = null;
        
        api.validateRemotePluginEndpoint(id, remotePluginEndpoint);
        
        // TODO: test validations
    }
    
}
