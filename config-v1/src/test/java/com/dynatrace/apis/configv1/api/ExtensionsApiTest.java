/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.Extension;
import com.dynatrace.apis.configv1.model.ExtensionConfigurationDto;
import com.dynatrace.apis.configv1.model.ExtensionConfigurationList;
import com.dynatrace.apis.configv1.model.ExtensionListDto;
import com.dynatrace.apis.configv1.model.ExtensionStateList;
import java.io.File;
import com.dynatrace.apis.configv1.model.GlobalExtensionConfiguration;
import com.dynatrace.apis.configv1.model.HostList;
import java.util.Set;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ExtensionsApi
 */
@Ignore
public class ExtensionsApiTest {

    private final ExtensionsApi api = new ExtensionsApi();

    
    /**
     * Creates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLocalExtensionConfigurationTest() throws ApiException {
        String id = null;
        ExtensionConfigurationDto extensionConfigurationDto = null;
        EntityShortRepresentation response = 
        api.createLocalExtensionConfiguration(id, extensionConfigurationDto);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
     *
     * Deletion of the extension file uninstalls the extension, making it unavailable for use.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionTest() throws ApiException {
        String id = null;
        
        api.deleteExtension(id);
        
        // TODO: test validations
    }
    
    /**
     * Deletes an existing configuration of the extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocalExtensionConfigurationTest() throws ApiException {
        String id = null;
        String configurationId = null;
        
        api.deleteLocalExtensionConfiguration(id, configurationId);
        
        // TODO: test validations
    }
    
    /**
     * Lists the properties of the specified extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionTest() throws ApiException {
        String id = null;
        Extension response = 
        api.getExtension(id);
        
        // TODO: test validations
    }
    
    /**
     * Downloads the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionBinaryTest() throws ApiException {
        String id = null;
        
        api.getExtensionBinary(id);
        
        // TODO: test validations
    }
    
    /**
     * Returns list of all local configuration instances for given extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionConfigurationsTest() throws ApiException {
        String id = null;
        Integer pageSize = null;
        String nextPageKey = null;
        ExtensionConfigurationList response = 
        api.getExtensionConfigurations(id, pageSize, nextPageKey);
        
        // TODO: test validations
    }
    
    /**
     * Get the global configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionGlobalConfigurationTest() throws ApiException {
        String id = null;
        GlobalExtensionConfiguration response = 
        api.getExtensionGlobalConfiguration(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists the states of the specified extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionStatesTest() throws ApiException {
        String id = null;
        Integer pageSize = null;
        String nextPageKey = null;
        String state = null;
        ExtensionStateList response = 
        api.getExtensionStates(id, pageSize, nextPageKey, state);
        
        // TODO: test validations
    }
    
    /**
     * Lists all uploaded extensions | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionsTest() throws ApiException {
        Integer pageSize = null;
        String nextPageKey = null;
        ExtensionListDto response = 
        api.getExtensions(pageSize, nextPageKey);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available hosts that have specified technology running | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHostsForTechnologyTest() throws ApiException {
        String technology = null;
        Set<String> tag = null;
        Long managementZone = null;
        String hostGroupId = null;
        String hostGroupName = null;
        Integer pageSize = null;
        String nextPageKey = null;
        HostList response = 
        api.getHostsForTechnology(technology, tag, managementZone, hostGroupId, hostGroupName, pageSize, nextPageKey);
        
        // TODO: test validations
    }
    
    /**
     * Returns instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalExtensionConfigurationTest() throws ApiException {
        String id = null;
        String configurationId = null;
        ExtensionConfigurationDto response = 
        api.getLocalExtensionConfiguration(id, configurationId);
        
        // TODO: test validations
    }
    
    /**
     * List available ActiveGate extension modules | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteExtensionModulesTest() throws ApiException {
        StubList response = 
        api.getRemoteExtensionModules();
        
        // TODO: test validations
    }
    
    /**
     * Updates the configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGlobalExtensionConfigurationTest() throws ApiException {
        String id = null;
        GlobalExtensionConfiguration globalExtensionConfiguration = null;
        
        api.updateGlobalExtensionConfiguration(id, globalExtensionConfiguration);
        
        // TODO: test validations
    }
    
    /**
     * Updates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocalExtensionConfigurationTest() throws ApiException {
        String id = null;
        String configurationId = null;
        ExtensionConfigurationDto extensionConfigurationDto = null;
        
        api.updateLocalExtensionConfiguration(id, configurationId, extensionConfigurationDto);
        
        // TODO: test validations
    }
    
    /**
     * Uploads a ZIP extension file | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadExtensionTest() throws ApiException {
        File _file = null;
        Boolean overrideAlerts = null;
        EntityShortRepresentation response = 
        api.uploadExtension(_file, overrideAlerts);
        
        // TODO: test validations
    }
    
    /**
     * Validates a ZIP extension file for &#x60;POST/extensions&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateExtensionTest() throws ApiException {
        File _file = null;
        Boolean jsonOnly = null;
        
        api.validateExtension(_file, jsonOnly);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /extensions/{id}/instances&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateLocalExtensionConfigurationTest() throws ApiException {
        String id = null;
        ExtensionConfigurationDto extensionConfigurationDto = null;
        
        api.validateLocalExtensionConfiguration(id, extensionConfigurationDto);
        
        // TODO: test validations
    }
    
}
