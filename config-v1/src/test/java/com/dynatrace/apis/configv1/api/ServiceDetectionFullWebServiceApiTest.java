/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.FullWebServiceRule;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceDetectionFullWebServiceApi
 */
@Ignore
public class ServiceDetectionFullWebServiceApiTest {

    private final ServiceDetectionFullWebServiceApi api = new ServiceDetectionFullWebServiceApi();

    
    /**
     * Creates a new service detection rule
     *
     * The body must not provide an ID as it will be automatically assigned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceDetectionRuleTest() throws ApiException {
        String position = null;
        FullWebServiceRule fullWebServiceRule = null;
        EntityShortRepresentation response = 
        api.createServiceDetectionRule(position, fullWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified service detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceDetectionRuleTest() throws ApiException {
        UUID id = null;
        
        api.deleteServiceDetectionRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Shows the properties of the specified service detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceDetectionRuleTest() throws ApiException {
        UUID id = null;
        FullWebServiceRule response = 
        api.getServiceDetectionRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all full web service detection rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceDetectionRulesTest() throws ApiException {
        StubList response = 
        api.listServiceDetectionRules();
        
        // TODO: test validations
    }
    
    /**
     * Reorders the service detection rules of the specified type
     *
     * The request reorders the rules of the specified type according to the order of the IDs in the body of the request.    Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderServiceDetectionRulesTest() throws ApiException {
        StubList stubList = null;
        
        api.orderServiceDetectionRules(stubList);
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing service detection rule
     *
     * If the rule with the specified ID doesn&#39;t exist, a new rule will be created and appended to the end of the rule list.    The request keeps an existing order of rules, unless the **order** parameter is set.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceDetectionRuleTest() throws ApiException {
        UUID id = null;
        FullWebServiceRule fullWebServiceRule = null;
        EntityShortRepresentation response = 
        api.updateServiceDetectionRule(id, fullWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /ruleBasedServiceDetection/FULL_WEB_SERVICE&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateServiceDetectionRuleTest() throws ApiException {
        FullWebServiceRule fullWebServiceRule = null;
        
        api.validateCreateServiceDetectionRule(fullWebServiceRule);
        
        // TODO: test validations
    }
    
    /**
     * Validate the payload for the &#x60;PUT /ruleBasedServiceDetection/FULL_WEB_SERVICE/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateServiceDetectionRuleTest() throws ApiException {
        UUID id = null;
        FullWebServiceRule fullWebServiceRule = null;
        
        api.validateUpdateServiceDetectionRule(id, fullWebServiceRule);
        
        // TODO: test validations
    }
    
}
