/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.CalculatedServiceMetric;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for CalculatedMetricsServicesApi
 */
@Ignore
public class CalculatedMetricsServicesApiTest {

    private final CalculatedMetricsServicesApi api = new CalculatedMetricsServicesApi();

    
    /**
     * Creates a new calculated service metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createServiceMetricTest() throws ApiException {
        CalculatedServiceMetric calculatedServiceMetric = null;
        EntityShortRepresentation response = 
        api.createServiceMetric(calculatedServiceMetric);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified calculated service metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceMetricTest() throws ApiException {
        String metricKey = null;
        
        api.deleteServiceMetric(metricKey);
        
        // TODO: test validations
    }
    
    /**
     * Gets the descriptor of the specified calculated service metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceMetricTest() throws ApiException {
        String metricKey = null;
        CalculatedServiceMetric response = 
        api.getServiceMetric(metricKey);
        
        // TODO: test validations
    }
    
    /**
     * Lists all calculated service metrics configured in your environment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listServiceMetricsTest() throws ApiException {
        StubList response = 
        api.listServiceMetrics();
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified calculated service metric
     *
     * If the calculated service metric with the specified key doesn&#39;t exist, a new metric is created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceMetricTest() throws ApiException {
        String metricKey = null;
        CalculatedServiceMetric calculatedServiceMetric = null;
        EntityShortRepresentation response = 
        api.updateServiceMetric(metricKey, calculatedServiceMetric);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /calculatedMetric/service&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateServiceMetricTest() throws ApiException {
        CalculatedServiceMetric calculatedServiceMetric = null;
        
        api.validateCreateServiceMetric(calculatedServiceMetric);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /calculatedMetric/service/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateServiceMetricTest() throws ApiException {
        String metricKey = null;
        CalculatedServiceMetric calculatedServiceMetric = null;
        
        api.validateUpdateServiceMetric(metricKey, calculatedServiceMetric);
        
        // TODO: test validations
    }
    
}
