/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.ApplicationDataPrivacy;
import com.dynatrace.apis.configv1.model.ApplicationDataPrivacyList;
import com.dynatrace.apis.configv1.model.ApplicationErrorRules;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.KeyUserAction;
import com.dynatrace.apis.configv1.model.KeyUserActionList;
import com.dynatrace.apis.configv1.model.StubList;
import com.dynatrace.apis.configv1.model.WebApplicationConfig;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RumWebApplicationConfigurationApi
 */
@Ignore
public class RumWebApplicationConfigurationApiTest {

    private final RumWebApplicationConfigurationApi api = new RumWebApplicationConfigurationApi();

    
    /**
     * Marks the user action as a key user action in the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKeyUserActionTest() throws ApiException {
        String id = null;
        KeyUserAction keyUserAction = null;
        EntityShortRepresentation response = 
        api.createKeyUserAction(id, keyUserAction);
        
        // TODO: test validations
    }
    
    /**
     * Updates the configuration of the default web application
     *
     * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateDefaultConfigurationTest() throws ApiException {
        WebApplicationConfig webApplicationConfig = null;
        
        api.createOrUpdateDefaultConfiguration(webApplicationConfig);
        
        // TODO: test validations
    }
    
    /**
     * Creates a new web application
     *
     * The body must not provide an ID as that will be automatically assigned by Dynatrace server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebApplicationConfigTest() throws ApiException {
        WebApplicationConfig webApplicationConfig = null;
        EntityShortRepresentation response = 
        api.createWebApplicationConfig(webApplicationConfig);
        
        // TODO: test validations
    }
    
    /**
     * Removes the specified user action from the list of key user actions in the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKeyUserActionTest() throws ApiException {
        String id = null;
        String keyUserActionId = null;
        
        api.deleteKeyUserAction(id, keyUserActionId);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebApplicationConfigTest() throws ApiException {
        String id = null;
        
        api.deleteWebApplicationConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the configuration of error rules in the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationErrorConfigTest() throws ApiException {
        String id = null;
        ApplicationErrorRules response = 
        api.getApplicationErrorConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the data privacy settings of the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataPrivacySettingsTest() throws ApiException {
        String id = null;
        ApplicationDataPrivacy response = 
        api.getDataPrivacySettings(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the configuration of the default web application
     *
     * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultApplicationTest() throws ApiException {
        WebApplicationConfig response = 
        api.getDefaultApplication();
        
        // TODO: test validations
    }
    
    /**
     * Gets the data privacy settings of the default web application
     *
     * Default application is pre-configured in your Dynatrace environment. By default all the traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultApplicationDataPrivacySettingsTest() throws ApiException {
        ApplicationDataPrivacy response = 
        api.getDefaultApplicationDataPrivacySettings();
        
        // TODO: test validations
    }
    
    /**
     * Gets the configuration of the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebApplicationConfigTest() throws ApiException {
        String id = null;
        WebApplicationConfig response = 
        api.getWebApplicationConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists data privacy settings of all web applications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDataPrivacySettingsTest() throws ApiException {
        ApplicationDataPrivacyList response = 
        api.listDataPrivacySettings();
        
        // TODO: test validations
    }
    
    /**
     * Gets the list of key user actions in the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listKeyUserActionsTest() throws ApiException {
        String id = null;
        KeyUserActionList response = 
        api.listKeyUserActions(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all existing web applications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWebApplicationConfigsTest() throws ApiException {
        StubList response = 
        api.listWebApplicationConfigs();
        
        // TODO: test validations
    }
    
    /**
     * Updates the configuration of error rules in the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApplicationErrorConfigTest() throws ApiException {
        String id = null;
        ApplicationErrorRules applicationErrorRules = null;
        
        api.updateApplicationErrorConfig(id, applicationErrorRules);
        
        // TODO: test validations
    }
    
    /**
     * Updates the data privacy settings of the specified web application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDataPrivacySettingsTest() throws ApiException {
        String id = null;
        ApplicationDataPrivacy applicationDataPrivacy = null;
        
        api.updateDataPrivacySettings(id, applicationDataPrivacy);
        
        // TODO: test validations
    }
    
    /**
     * Updates the data privacy settings of the default web application
     *
     * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDefaultApplicationDataPrivacySettingsTest() throws ApiException {
        ApplicationDataPrivacy applicationDataPrivacy = null;
        
        api.updateDefaultApplicationDataPrivacySettings(applicationDataPrivacy);
        
        // TODO: test validations
    }
    
    /**
     * Updates the configuration of the specified web application or creates a new one
     *
     * If the application with the specified ID does not exist, a new application will be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebApplicationConfigTest() throws ApiException {
        String id = null;
        WebApplicationConfig webApplicationConfig = null;
        EntityShortRepresentation response = 
        api.updateWebApplicationConfig(id, webApplicationConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the configuration of the web application for the &#x60;POST /applications/web&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateWebApplicationConfigTest() throws ApiException {
        WebApplicationConfig webApplicationConfig = null;
        
        api.validateCreateWebApplicationConfig(webApplicationConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates data privacy settings for the &#x60;PUT /applications/web/{id}/dataPrivacy&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateDataPrivacySettingsTest() throws ApiException {
        String id = null;
        ApplicationDataPrivacy applicationDataPrivacy = null;
        
        api.validateDataPrivacySettings(id, applicationDataPrivacy);
        
        // TODO: test validations
    }
    
    /**
     * Validates data privacy settings of the default web application for the &#x60;PUT /applications/web/default/dataPrivacy&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateDefaultApplicationDataPrivacySettingsTest() throws ApiException {
        ApplicationDataPrivacy applicationDataPrivacy = null;
        
        api.validateDefaultApplicationDataPrivacySettings(applicationDataPrivacy);
        
        // TODO: test validations
    }
    
    /**
     * Validates the configuration of the default web application for the &#x60;PUT /applications/web/default&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateDefaultConfigurationTest() throws ApiException {
        WebApplicationConfig webApplicationConfig = null;
        
        api.validateDefaultConfiguration(webApplicationConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the configuration of the web application for the &#x60;PUT /applications/web/{id}&#x60; request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateWebApplicationConfigTest() throws ApiException {
        String id = null;
        WebApplicationConfig webApplicationConfig = null;
        
        api.validateUpdateWebApplicationConfig(id, webApplicationConfig);
        
        // TODO: test validations
    }
    
}
