/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.KeyUserActionMobile;
import com.dynatrace.apis.configv1.model.KeyUserActionMobileList;
import com.dynatrace.apis.configv1.model.MobileCustomAppConfig;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionProperty;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyList;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyShort;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyUpd;
import com.dynatrace.apis.configv1.model.NewMobileCustomAppConfig;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RumMobileAndCustomApplicationConfigurationApi
 */
@Ignore
public class RumMobileAndCustomApplicationConfigurationApiTest {

    private final RumMobileAndCustomApplicationConfigurationApi api = new RumMobileAndCustomApplicationConfigurationApi();

    
    /**
     * Creates a new mobile or custom application
     *
     * The body must not provide an identifier. An identifier is assigned automatically by Dynatrace.   You can, however, provide your own applicationId. If you don&#39;t specify an applicationId, it is assigned automatically by Dynatrace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMobileApplicationConfigTest() throws ApiException {
        NewMobileCustomAppConfig newMobileCustomAppConfig = null;
        EntityShortRepresentation response = 
        api.createMobileApplicationConfig(newMobileCustomAppConfig);
        
        // TODO: test validations
    }
    
    /**
     * Marks the user action as a key user action in the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMobileKeyUserActionTest() throws ApiException {
        String applicationId = null;
        String actionName = null;
        KeyUserActionMobile response = 
        api.createMobileKeyUserAction(applicationId, actionName);
        
        // TODO: test validations
    }
    
    /**
     * Creates a new mobile session or user action property for the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionPropertyTest() throws ApiException {
        String applicationId = null;
        MobileSessionUserActionProperty mobileSessionUserActionProperty = null;
        MobileSessionUserActionPropertyShort response = 
        api.createSessionProperty(applicationId, mobileSessionUserActionProperty);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified mobile or custom application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMobileApplicationConfigTest() throws ApiException {
        String id = null;
        
        api.deleteMobileApplicationConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Removes the specified user action from the list of key user actions in the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMobileKeyUserActionTest() throws ApiException {
        String applicationId = null;
        String actionName = null;
        
        api.deleteMobileKeyUserAction(applicationId, actionName);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified mobile session or user action property for an application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSessionPropertyTest() throws ApiException {
        String applicationId = null;
        String key = null;
        
        api.deleteSessionProperty(applicationId, key);
        
        // TODO: test validations
    }
    
    /**
     * Gets the configuration of the specified mobile or custom application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMobileApplicationConfigTest() throws ApiException {
        String id = null;
        MobileCustomAppConfig response = 
        api.getMobileApplicationConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the specified mobile session or user action property of an application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSessionPropertyTest() throws ApiException {
        String applicationId = null;
        String key = null;
        MobileSessionUserActionProperty response = 
        api.getSessionProperty(applicationId, key);
        
        // TODO: test validations
    }
    
    /**
     * Lists all existing mobile and custom applications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMobileApplicationConfigsTest() throws ApiException {
        StubList response = 
        api.listMobileApplicationConfigs();
        
        // TODO: test validations
    }
    
    /**
     * Gets the list of key user actions in the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMobileKeyUserActionsTest() throws ApiException {
        String applicationId = null;
        KeyUserActionMobileList response = 
        api.listMobileKeyUserActions(applicationId);
        
        // TODO: test validations
    }
    
    /**
     * Lists all mobile session and user action properties for the specified application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSessionPropertiesTest() throws ApiException {
        String applicationId = null;
        MobileSessionUserActionPropertyList response = 
        api.listSessionProperties(applicationId);
        
        // TODO: test validations
    }
    
    /**
     * Updates the configuration of the specified mobile or custom application
     *
     * You can&#39;t change applicationId and applicationType with this request.  All other values must be included in the body, depending on the applicationType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMobileApplicationConfigTest() throws ApiException {
        String id = null;
        MobileCustomAppConfig mobileCustomAppConfig = null;
        
        api.updateMobileApplicationConfig(id, mobileCustomAppConfig);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified mobile session or user action property for an application
     *
     * If the property with the specified ID does not exist, a new property is created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSessionPropertyTest() throws ApiException {
        String applicationId = null;
        String key = null;
        MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd = null;
        MobileSessionUserActionPropertyShort response = 
        api.updateSessionProperty(applicationId, key, mobileSessionUserActionPropertyUpd);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /applications/mobile&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateMobileApplicationConfigTest() throws ApiException {
        NewMobileCustomAppConfig newMobileCustomAppConfig = null;
        
        api.validateCreateMobileApplicationConfig(newMobileCustomAppConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /applications/mobile/{applicationId}/userActionAndSessionProperties&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateSessionPropertyTest() throws ApiException {
        String applicationId = null;
        MobileSessionUserActionProperty mobileSessionUserActionProperty = null;
        
        api.validateCreateSessionProperty(applicationId, mobileSessionUserActionProperty);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /applications/mobile/{id}&#x60; request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateMobileApplicationConfigTest() throws ApiException {
        String id = null;
        MobileCustomAppConfig mobileCustomAppConfig = null;
        
        api.validateUpdateMobileApplicationConfig(id, mobileCustomAppConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /applications/mobile/{applicationId}/userActionAndSessionProperties/{key}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateSessionPropertyTest() throws ApiException {
        String applicationId = null;
        String key = null;
        MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd = null;
        
        api.validateUpdateSessionProperty(applicationId, key, mobileSessionUserActionPropertyUpd);
        
        // TODO: test validations
    }
    
}
