/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.ServiceAnomalyDetectionConfig;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AnomalyDetectionServicesApi
 */
@Ignore
public class AnomalyDetectionServicesApiTest {

    private final AnomalyDetectionServicesApi api = new AnomalyDetectionServicesApi();

    
    /**
     * Gets the service anomaly detection configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAnomalyDetectionConfigTest() throws ApiException {
        ServiceAnomalyDetectionConfig response = 
        api.getServiceAnomalyDetectionConfig();
        
        // TODO: test validations
    }
    
    /**
     * Updates the service anomaly detection configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceAnomalyDetectionConfigTest() throws ApiException {
        ServiceAnomalyDetectionConfig serviceAnomalyDetectionConfig = null;
        
        api.updateServiceAnomalyDetectionConfig(serviceAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /anomalyDetection/services&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateServiceAnomalyDetectionConfigTest() throws ApiException {
        ServiceAnomalyDetectionConfig serviceAnomalyDetectionConfig = null;
        
        api.validateServiceAnomalyDetectionConfig(serviceAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
}
