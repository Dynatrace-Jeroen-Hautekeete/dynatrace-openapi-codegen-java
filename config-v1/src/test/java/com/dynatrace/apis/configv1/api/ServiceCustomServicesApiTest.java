/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.CustomService;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceCustomServicesApi
 */
@Ignore
public class ServiceCustomServicesApiTest {

    private final ServiceCustomServicesApi api = new ServiceCustomServicesApi();

    
    /**
     * Creates a custom service
     *
     * In the body of the request, neither custom service nor its rules can have the ID. All IDs will be generated automatically by Dynatrace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomServiceTest() throws ApiException {
        String technology = null;
        String position = null;
        CustomService customService = null;
        EntityShortRepresentation response = 
        api.createCustomService(technology, position, customService);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified custom service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomServiceTest() throws ApiException {
        String technology = null;
        UUID id = null;
        
        api.deleteCustomService(technology, id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the definition of the specified custom service
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomServiceTest() throws ApiException {
        String technology = null;
        UUID id = null;
        Boolean includeProcessGroupReferences = null;
        CustomService response = 
        api.getCustomService(technology, id, includeProcessGroupReferences);
        
        // TODO: test validations
    }
    
    /**
     * Lists all custom services of the specified technology
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCustomServicesTest() throws ApiException {
        String technology = null;
        StubList response = 
        api.listCustomServices(technology);
        
        // TODO: test validations
    }
    
    /**
     * Reorders the custom services of the specified technology
     *
     * This request reorders the custom services of the specified technology according to the given list of IDs. Custom services not present in the body of the request will retain their relative ordering but will be ordered *after* all those present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderCustomServicesTest() throws ApiException {
        String technology = null;
        StubList stubList = null;
        
        api.orderCustomServices(technology, stubList);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified custom service or create a new one.
     *
     * Will use the config&#39;s ´order´ attribute if supplied, otherwise keeps the order of the existing config or appends if no existing config with the supplied ID was found.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomServiceTest() throws ApiException {
        String technology = null;
        UUID id = null;
        CustomService customService = null;
        EntityShortRepresentation response = 
        api.updateCustomService(technology, id, customService);
        
        // TODO: test validations
    }
    
    /**
     * Validate the new custom service for the &#x60;POST /customServices/{technology}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateCustomServiceTest() throws ApiException {
        String technology = null;
        CustomService customService = null;
        
        api.validateCreateCustomService(technology, customService);
        
        // TODO: test validations
    }
    
    /**
     * Validate the new custom service for the &#x60;PUT /customServices/{technology}/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateCustomServiceTest() throws ApiException {
        String technology = null;
        UUID id = null;
        CustomService customService = null;
        
        api.validateUpdateCustomService(technology, id, customService);
        
        // TODO: test validations
    }
    
}
