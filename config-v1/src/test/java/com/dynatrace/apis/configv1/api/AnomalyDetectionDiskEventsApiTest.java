/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.DiskEventAnomalyDetectionConfig;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AnomalyDetectionDiskEventsApi
 */
@Ignore
public class AnomalyDetectionDiskEventsApiTest {

    private final AnomalyDetectionDiskEventsApi api = new AnomalyDetectionDiskEventsApi();

    
    /**
     * Creates a new disk event rule | maturity&#x3D;EARLY_ADOPTER
     *
     * The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiskEventConfigTest() throws ApiException {
        DiskEventAnomalyDetectionConfig diskEventAnomalyDetectionConfig = null;
        EntityShortRepresentation response = 
        api.createDiskEventConfig(diskEventAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified disk event rule | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiskEventConfigTest() throws ApiException {
        String id = null;
        
        api.deleteDiskEventConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of the specified disk event rule | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiskEventConfigTest() throws ApiException {
        String id = null;
        DiskEventAnomalyDetectionConfig response = 
        api.getDiskEventConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all existing disk event rules | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDiskEventConfigsTest() throws ApiException {
        StubList response = 
        api.listDiskEventConfigs();
        
        // TODO: test validations
    }
    
    /**
     * Updates or creates a disk event rule | maturity&#x3D;EARLY_ADOPTER
     *
     * If a disk event rule with the specified ID does not exist, a new rule is created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiskEventConfigTest() throws ApiException {
        String id = null;
        DiskEventAnomalyDetectionConfig diskEventAnomalyDetectionConfig = null;
        EntityShortRepresentation response = 
        api.updateDiskEventConfig(id, diskEventAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /anomalyDetection/diskEvents&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateDiskEventConfigTest() throws ApiException {
        DiskEventAnomalyDetectionConfig diskEventAnomalyDetectionConfig = null;
        
        api.validateCreateDiskEventConfig(diskEventAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /anomalyDetection/diskEvents/{id}&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateDiskEventConfigTest() throws ApiException {
        String id = null;
        DiskEventAnomalyDetectionConfig diskEventAnomalyDetectionConfig = null;
        
        api.validateUpdateDiskEventConfig(id, diskEventAnomalyDetectionConfig);
        
        // TODO: test validations
    }
    
}
