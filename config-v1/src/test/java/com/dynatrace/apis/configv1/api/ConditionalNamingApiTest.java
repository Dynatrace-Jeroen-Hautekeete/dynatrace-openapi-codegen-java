/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.ConditionalNamingRule;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ConditionalNamingApi
 */
@Ignore
public class ConditionalNamingApiTest {

    private final ConditionalNamingApi api = new ConditionalNamingApi();

    
    /**
     * Creates a new naming rule
     *
     * The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamingRuleTest() throws ApiException {
        String type = null;
        ConditionalNamingRule conditionalNamingRule = null;
        EntityShortRepresentation response = 
        api.createNamingRule(type, conditionalNamingRule);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified naming rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamingRuleTest() throws ApiException {
        String type = null;
        UUID id = null;
        
        api.deleteNamingRule(type, id);
        
        // TODO: test validations
    }
    
    /**
     * Lists the parameters of the specified naming rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNamingRuleTest() throws ApiException {
        String type = null;
        UUID id = null;
        ConditionalNamingRule response = 
        api.getNamingRule(type, id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all configured naming rules of the specified type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamingRulesTest() throws ApiException {
        String type = null;
        StubList response = 
        api.listNamingRules(type);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified naming rule
     *
     * If the rule with the specified ID doesn&#39;t exist, a new rule will be created at the end of the rules list and will be the last to evaluate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNamingRuleTest() throws ApiException {
        String type = null;
        UUID id = null;
        ConditionalNamingRule conditionalNamingRule = null;
        EntityShortRepresentation response = 
        api.updateNamingRule(type, id, conditionalNamingRule);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /conditionalNaming/{type}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateNamingRuleTest() throws ApiException {
        String type = null;
        ConditionalNamingRule conditionalNamingRule = null;
        
        api.validateCreateNamingRule(type, conditionalNamingRule);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /conditionalNaming/{type}/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateNamingRuleTest() throws ApiException {
        String type = null;
        UUID id = null;
        ConditionalNamingRule conditionalNamingRule = null;
        
        api.validateUpdateNamingRule(type, id, conditionalNamingRule);
        
        // TODO: test validations
    }
    
}
