/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.FailureDetectionRule;
import com.dynatrace.apis.configv1.model.FdpSelectionRuleOrder;
import com.dynatrace.apis.configv1.model.StubList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceFailureDetectionRulesApi
 */
@Ignore
public class ServiceFailureDetectionRulesApiTest {

    private final ServiceFailureDetectionRulesApi api = new ServiceFailureDetectionRulesApi();

    
    /**
     * Changes the ID of the specified rule | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeRuleIdTest() throws ApiException {
        String id = null;
        EntityShortRepresentation entityShortRepresentation = null;
        
        api.changeRuleId(id, entityShortRepresentation);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified failure detection rule rule | maturity&#x3D;EARLY_ADOPTER
     *
     * If a rule with the specified ID doesn&#39;t exist, a new one is created and appended to the end of the rule list.   Rules are evaluated from top to bottom, the first matching rule applies.To enforce a particular order use the reorder request.   The failure detection parameter set used by the rule must exist at the time of rule creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateRuleTest() throws ApiException {
        String id = null;
        FailureDetectionRule failureDetectionRule = null;
        EntityShortRepresentation response = 
        api.createOrUpdateRule(id, failureDetectionRule);
        
        // TODO: test validations
    }
    
    /**
     * Creates a new failure detection rule | maturity&#x3D;EARLY_ADOPTER
     *
     * The new rule is appended to the end of the rule list.   Rules are evaluated from top to bottom, the first matching rule applies.To enforce a particular order use the reorder request.   The failure detection parameter set used by the rule must exist at the time of rule creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        FailureDetectionRule failureDetectionRule = null;
        EntityShortRepresentation response = 
        api.createRule(failureDetectionRule);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified failure detection rule | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String id = null;
        
        api.deleteRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available failure detection rules | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRulesTest() throws ApiException {
        StubList response = 
        api.getAllRules();
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of the specified rule | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        String id = null;
        FailureDetectionRule response = 
        api.getRule(id);
        
        // TODO: test validations
    }
    
    /**
     * Reorders failure detection rules | maturity&#x3D;EARLY_ADOPTER
     *
     * Rules are evaluated from top to bottom, the first matching rule applies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderRulesTest() throws ApiException {
        FdpSelectionRuleOrder fdpSelectionRuleOrder = null;
        
        api.reorderRules(fdpSelectionRuleOrder);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /service/failureDetection/parameterSelection/rules&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateRuleTest() throws ApiException {
        FailureDetectionRule failureDetectionRule = null;
        
        api.validateCreateRule(failureDetectionRule);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;PUT /service/failureDetection/parameterSelection/rules/{id}&#x60; request | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateRuleTest() throws ApiException {
        String id = null;
        FailureDetectionRule failureDetectionRule = null;
        
        api.validateUpdateRule(id, failureDetectionRule);
        
        // TODO: test validations
    }
    
}
