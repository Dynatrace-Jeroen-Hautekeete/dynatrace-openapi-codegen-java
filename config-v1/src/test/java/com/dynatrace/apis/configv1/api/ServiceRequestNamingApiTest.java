/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.RequestNaming;
import com.dynatrace.apis.configv1.model.ResourceNaming;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceRequestNamingApi
 */
@Ignore
public class ServiceRequestNamingApiTest {

    private final ServiceRequestNamingApi api = new ServiceRequestNamingApi();

    
    /**
     * Creates a new request naming rule
     *
     * The new rule goes to the end of the rules list and will be the last to evaluate. Existing rules remain unaffected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRequestNamingTest() throws ApiException {
        String position = null;
        RequestNaming requestNaming = null;
        EntityShortRepresentation response = 
        api.createRequestNaming(position, requestNaming);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified request naming rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRequestNamingTest() throws ApiException {
        UUID id = null;
        
        api.deleteRequestNaming(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists the global service resource requests.
     *
     * Lists all extensions which currently are renamed to e.g., &#x60;Image&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        ResourceNaming response = 
        api.get();
        
        // TODO: test validations
    }
    
    /**
     * Gets the parameters of the specified request naming rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRequestNamingTest() throws ApiException {
        UUID id = null;
        RequestNaming response = 
        api.getRequestNaming(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all request naming rules along with their parameters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRequestNamingTest() throws ApiException {
        StubList response = 
        api.listRequestNaming();
        
        // TODO: test validations
    }
    
    /**
     * Reorders the request namings
     *
     * This request reorders the request namings according to the given list of IDs. Request namings not present in the body of the request will retain their relative ordering but will be ordered *after* all those present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderRequestNamingTest() throws ApiException {
        StubList stubList = null;
        
        api.orderRequestNaming(stubList);
        
        // TODO: test validations
    }
    
    /**
     * Updates the global service resource requests.
     *
     * Update all extensions which are renamed to &#x60;Image&#x60; or &#x60;Binary&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putTest() throws ApiException {
        ResourceNaming resourceNaming = null;
        
        api.put(resourceNaming);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified request naming rule
     *
     * If the rule with the specified ID doesn&#39;t exist, a new rule will be created at the end of the rules list and will be the last to evaluate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRequestNamingTest() throws ApiException {
        UUID id = null;
        RequestNaming requestNaming = null;
        EntityShortRepresentation response = 
        api.updateRequestNaming(id, requestNaming);
        
        // TODO: test validations
    }
    
    /**
     * Validates new resource requests settings for the &#x60;PUT /service/resourceRequest&#x60; request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateTest() throws ApiException {
        ResourceNaming resourceNaming = null;
        
        api.validate(resourceNaming);
        
        // TODO: test validations
    }
    
    /**
     * Validates the new request naming rule for the &#x60;POST /requestNaming&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateRequestNamingTest() throws ApiException {
        RequestNaming requestNaming = null;
        
        api.validateCreateRequestNaming(requestNaming);
        
        // TODO: test validations
    }
    
    /**
     * Validates the new request naming for the &#x60;PUT /requestNaming/{id}&#x60; request
     *
     * If the rule with the specified ID doesn&#39;t exist, a new rule will be created at the end of the rules list and will be the last to evaluate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateRequestNamingTest() throws ApiException {
        UUID id = null;
        RequestNaming requestNaming = null;
        
        api.validateUpdateRequestNaming(id, requestNaming);
        
        // TODO: test validations
    }
    
}
