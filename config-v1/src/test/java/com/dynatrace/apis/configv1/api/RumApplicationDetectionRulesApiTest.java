/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.ApplicationDetectionRuleConfig;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RumApplicationDetectionRulesApi
 */
@Ignore
public class RumApplicationDetectionRulesApiTest {

    private final RumApplicationDetectionRulesApi api = new RumApplicationDetectionRulesApi();

    
    /**
     * Creates a new application detection rule
     *
     * The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.   You can only create detection rules for an existing application. If you need to create a rule for an application that doesn&#39;t exist yet, [create an application first](https://dt-url.net/vt03khh) and then configure detection rules for it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApplicationDetectionConfigTest() throws ApiException {
        String position = null;
        ApplicationDetectionRuleConfig applicationDetectionRuleConfig = null;
        EntityShortRepresentation response = 
        api.createApplicationDetectionConfig(position, applicationDetectionRuleConfig);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified application detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApplicationDetectionConfigTest() throws ApiException {
        UUID id = null;
        
        api.deleteApplicationDetectionConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets the parameters of the specified application detection rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationDetectionConfigTest() throws ApiException {
        UUID id = null;
        ApplicationDetectionRuleConfig response = 
        api.getApplicationDetectionConfig(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available application detection rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApplicationDetectionConfigsTest() throws ApiException {
        StubList response = 
        api.listApplicationDetectionConfigs();
        
        // TODO: test validations
    }
    
    /**
     * Reorders the application detection rules
     *
     * This request reorders the application detection rules according to the submitted list of IDs. Application detection rules not present in the body of the request will retain their relative ordering but are placed *after* all those present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderApplicationDetectionConfigsTest() throws ApiException {
        StubList stubList = null;
        
        api.orderApplicationDetectionConfigs(stubList);
        
        // TODO: test validations
    }
    
    /**
     * Updates the specified application detection rule
     *
     * If the application detection rule with the specified ID doesn&#39;t exist, a new application is created and appended to the end of the rule list.   If the **order** parameter is set for an existing rule, the request uses this value. Otherwise it keeps the existing order of rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApplicationDetectionConfigTest() throws ApiException {
        UUID id = null;
        ApplicationDetectionRuleConfig applicationDetectionRuleConfig = null;
        EntityShortRepresentation response = 
        api.updateApplicationDetectionConfig(id, applicationDetectionRuleConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validates the payload for the &#x60;POST /applicationDetection&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateCreateApplicationDetectionConfigTest() throws ApiException {
        ApplicationDetectionRuleConfig applicationDetectionRuleConfig = null;
        
        api.validateCreateApplicationDetectionConfig(applicationDetectionRuleConfig);
        
        // TODO: test validations
    }
    
    /**
     * Validate the payload for the &#x60;PUT /applicationDetection/{id}&#x60; request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateUpdateApplicationDetectionConfigTest() throws ApiException {
        UUID id = null;
        ApplicationDetectionRuleConfig applicationDetectionRuleConfig = null;
        
        api.validateUpdateApplicationDetectionConfig(id, applicationDetectionRuleConfig);
        
        // TODO: test validations
    }
    
}
