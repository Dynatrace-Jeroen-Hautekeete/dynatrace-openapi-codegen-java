/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import java.io.File;
import com.dynatrace.apis.configv1.model.SupportedVersion;
import com.dynatrace.apis.configv1.model.SymbolFile;
import com.dynatrace.apis.configv1.model.SymbolFileClientLinkDto;
import com.dynatrace.apis.configv1.model.SymbolFileList;
import com.dynatrace.apis.configv1.model.SymbolFilePinning;
import com.dynatrace.apis.configv1.model.SymbolFileStorageInfo;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RumMobileDeobfuscationAndSymbolicationApi
 */
@Ignore
public class RumMobileDeobfuscationAndSymbolicationApiTest {

    private final RumMobileDeobfuscationAndSymbolicationApi api = new RumMobileDeobfuscationAndSymbolicationApi();

    
    /**
     * Upload a symbolication file. Either a ProGuard file for Android or a zip file containing all the iOS dSYM files. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        UUID applicationId = null;
        String packageName = null;
        String os = null;
        String versionCode = null;
        String versionName = null;
        File body = null;
        String contentType = null;
        
        api.createOrUpdate(applicationId, packageName, os, versionCode, versionName, body, contentType);
        
        // TODO: test validations
    }
    
    /**
     * Pin or unpin all symbolication files of a app version. A pinned file will not be deleted automtically, when running out of space.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdatePinningTest() throws ApiException {
        UUID applicationId = null;
        String packageName = null;
        String os = null;
        String versionCode = null;
        String versionName = null;
        SymbolFilePinning symbolFilePinning = null;
        
        api.createOrUpdatePinning(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
        
        // TODO: test validations
    }
    
    /**
     * Deletes all symbolication file belonging to the Dynatrace App specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        UUID applicationId = null;
        
        api.deleteApp(applicationId);
        
        // TODO: test validations
    }
    
    /**
     * Delete the symbolication file belonging to the given application, os and version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSingleFileTest() throws ApiException {
        UUID applicationId = null;
        String packageName = null;
        String os = null;
        String versionCode = null;
        String versionName = null;
        
        api.deleteSingleFile(applicationId, packageName, os, versionCode, versionName);
        
        // TODO: test validations
    }
    
    /**
     * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) from the Symbol File Store.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        SymbolFileList response = 
        api.getAll();
        
        // TODO: test validations
    }
    
    /**
     * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) for one single mobile application from the Symbol File Store of this tenant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllPerApplicationTest() throws ApiException {
        UUID applicationId = null;
        SymbolFileList response = 
        api.getAllPerApplication(applicationId);
        
        // TODO: test validations
    }
    
    /**
     * Gets a download link for the latest version of the DTXDssClient.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDssClientUrlTest() throws ApiException {
        SymbolFileClientLinkDto response = 
        api.getDssClientUrl();
        
        // TODO: test validations
    }
    
    /**
     * Retrieves information about used/empty diskspace, number of stored files,....
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        SymbolFileStorageInfo response = 
        api.getInfo();
        
        // TODO: test validations
    }
    
    /**
     * Gets the metadata of the symbolication file belonging to the specified app version. There always can exist only one file per os and version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        UUID applicationId = null;
        String packageName = null;
        String os = null;
        String versionCode = null;
        String versionName = null;
        SymbolFile response = 
        api.getSingle(applicationId, packageName, os, versionCode, versionName);
        
        // TODO: test validations
    }
    
    /**
     * Returns the supported file format version for iOS symbol files.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportedVersionTest() throws ApiException {
        SupportedVersion response = 
        api.getSupportedVersion();
        
        // TODO: test validations
    }
    
    /**
     * Validate updates of existing request attribute for the &#x60;PUT /{applicationId}/{packageName}/{os}/{versionName}/pinning&#x60; request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validatePinningTest() throws ApiException {
        UUID applicationId = null;
        String packageName = null;
        String os = null;
        String versionCode = null;
        String versionName = null;
        SymbolFilePinning symbolFilePinning = null;
        
        api.validatePinning(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
        
        // TODO: test validations
    }
    
}
