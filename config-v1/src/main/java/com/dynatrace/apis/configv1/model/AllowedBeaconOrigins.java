/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.BeaconDomainPattern;
import com.dynatrace.apis.configv1.model.ConfigurationMetadata;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of the allowed beacon origins for CORS requests.
 */
@ApiModel(description = "Configuration of the allowed beacon origins for CORS requests.")
@JsonPropertyOrder({
  AllowedBeaconOrigins.JSON_PROPERTY_METADATA,
  AllowedBeaconOrigins.JSON_PROPERTY_ALLOWED_BEACON_ORIGINS,
  AllowedBeaconOrigins.JSON_PROPERTY_REJECT_BEACONS_WITHOUT_ORIGIN_HEADER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class AllowedBeaconOrigins {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConfigurationMetadata metadata;

  public static final String JSON_PROPERTY_ALLOWED_BEACON_ORIGINS = "allowedBeaconOrigins";
  private List<BeaconDomainPattern> allowedBeaconOrigins = null;

  public static final String JSON_PROPERTY_REJECT_BEACONS_WITHOUT_ORIGIN_HEADER = "rejectBeaconsWithoutOriginHeader";
  private Boolean rejectBeaconsWithoutOriginHeader;

  public AllowedBeaconOrigins() { 
  }

  public AllowedBeaconOrigins metadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
  }


  public AllowedBeaconOrigins allowedBeaconOrigins(List<BeaconDomainPattern> allowedBeaconOrigins) {
    this.allowedBeaconOrigins = allowedBeaconOrigins;
    return this;
  }

  public AllowedBeaconOrigins addAllowedBeaconOriginsItem(BeaconDomainPattern allowedBeaconOriginsItem) {
    if (this.allowedBeaconOrigins == null) {
      this.allowedBeaconOrigins = new ArrayList<>();
    }
    this.allowedBeaconOrigins.add(allowedBeaconOriginsItem);
    return this;
  }

   /**
   * A list of allowed beacon origins for CORS requests.
   * @return allowedBeaconOrigins
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of allowed beacon origins for CORS requests.")
  @JsonProperty(JSON_PROPERTY_ALLOWED_BEACON_ORIGINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BeaconDomainPattern> getAllowedBeaconOrigins() {
    return allowedBeaconOrigins;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_BEACON_ORIGINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedBeaconOrigins(List<BeaconDomainPattern> allowedBeaconOrigins) {
    this.allowedBeaconOrigins = allowedBeaconOrigins;
  }


  public AllowedBeaconOrigins rejectBeaconsWithoutOriginHeader(Boolean rejectBeaconsWithoutOriginHeader) {
    this.rejectBeaconsWithoutOriginHeader = rejectBeaconsWithoutOriginHeader;
    return this;
  }

   /**
   * Discard (&#x60;true&#x60;) or keep (&#x60;false&#x60;) beacons without the **Origin** HTTP header on the BeaconForwarder.   If not set, &#x60;false&#x60; is used.
   * @return rejectBeaconsWithoutOriginHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Discard (`true`) or keep (`false`) beacons without the **Origin** HTTP header on the BeaconForwarder.   If not set, `false` is used.")
  @JsonProperty(JSON_PROPERTY_REJECT_BEACONS_WITHOUT_ORIGIN_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRejectBeaconsWithoutOriginHeader() {
    return rejectBeaconsWithoutOriginHeader;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_BEACONS_WITHOUT_ORIGIN_HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRejectBeaconsWithoutOriginHeader(Boolean rejectBeaconsWithoutOriginHeader) {
    this.rejectBeaconsWithoutOriginHeader = rejectBeaconsWithoutOriginHeader;
  }


  /**
   * Return true if this AllowedBeaconOrigins object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllowedBeaconOrigins allowedBeaconOrigins = (AllowedBeaconOrigins) o;
    return Objects.equals(this.metadata, allowedBeaconOrigins.metadata) &&
        Objects.equals(this.allowedBeaconOrigins, allowedBeaconOrigins.allowedBeaconOrigins) &&
        Objects.equals(this.rejectBeaconsWithoutOriginHeader, allowedBeaconOrigins.rejectBeaconsWithoutOriginHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, allowedBeaconOrigins, rejectBeaconsWithoutOriginHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllowedBeaconOrigins {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    allowedBeaconOrigins: ").append(toIndentedString(allowedBeaconOrigins)).append("\n");
    sb.append("    rejectBeaconsWithoutOriginHeader: ").append(toIndentedString(rejectBeaconsWithoutOriginHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

