/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ComparisonInfo;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A condition of a rule usage.
 */
@ApiModel(description = "A condition of a rule usage.")
@JsonPropertyOrder({
  Condition.JSON_PROPERTY_ATTRIBUTE,
  Condition.JSON_PROPERTY_COMPARISON_INFO
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class Condition {
  /**
   * The attribute to be matched.   Note that for a service property attribute you must use the comparison of the &#x60;FAST_STRING&#x60; type.
   */
  public enum AttributeEnum {
    ACTOR_SYSTEM("ACTOR_SYSTEM"),
    
    AKKA_ACTOR_CLASS_NAME("AKKA_ACTOR_CLASS_NAME"),
    
    AKKA_ACTOR_MESSAGE_TYPE("AKKA_ACTOR_MESSAGE_TYPE"),
    
    AKKA_ACTOR_PATH("AKKA_ACTOR_PATH"),
    
    APPLICATION_BUILD_VERSION("APPLICATION_BUILD_VERSION"),
    
    APPLICATION_ENVIRONMENT("APPLICATION_ENVIRONMENT"),
    
    APPLICATION_NAME("APPLICATION_NAME"),
    
    APPLICATION_RELEASE_VERSION("APPLICATION_RELEASE_VERSION"),
    
    AZURE_FUNCTIONS_FUNCTION_NAME("AZURE_FUNCTIONS_FUNCTION_NAME"),
    
    AZURE_FUNCTIONS_SITE_NAME("AZURE_FUNCTIONS_SITE_NAME"),
    
    CICS_PROGRAM_NAME("CICS_PROGRAM_NAME"),
    
    CICS_SYSTEM_ID("CICS_SYSTEM_ID"),
    
    CICS_TASK_ID("CICS_TASK_ID"),
    
    CICS_TRANSACTION_ID("CICS_TRANSACTION_ID"),
    
    CICS_USER_ID("CICS_USER_ID"),
    
    CPU_TIME("CPU_TIME"),
    
    CTG_GATEWAY_URL("CTG_GATEWAY_URL"),
    
    CTG_PROGRAM("CTG_PROGRAM"),
    
    CTG_SERVER_NAME("CTG_SERVER_NAME"),
    
    CTG_TRANSACTION_ID("CTG_TRANSACTION_ID"),
    
    CUSTOMSERVICE_CLASS("CUSTOMSERVICE_CLASS"),
    
    CUSTOMSERVICE_METHOD("CUSTOMSERVICE_METHOD"),
    
    DATABASE_CHILD_CALL_COUNT("DATABASE_CHILD_CALL_COUNT"),
    
    DATABASE_CHILD_CALL_TIME("DATABASE_CHILD_CALL_TIME"),
    
    DATABASE_HOST("DATABASE_HOST"),
    
    DATABASE_NAME("DATABASE_NAME"),
    
    DATABASE_STATEMENT("DATABASE_STATEMENT"),
    
    DATABASE_TYPE("DATABASE_TYPE"),
    
    DATABASE_URL("DATABASE_URL"),
    
    DISK_IO_TIME("DISK_IO_TIME"),
    
    ERROR_COUNT("ERROR_COUNT"),
    
    ESB_APPLICATION_NAME("ESB_APPLICATION_NAME"),
    
    ESB_INPUT_TYPE("ESB_INPUT_TYPE"),
    
    ESB_LIBRARY_NAME("ESB_LIBRARY_NAME"),
    
    ESB_MESSAGE_FLOW_NAME("ESB_MESSAGE_FLOW_NAME"),
    
    EXCEPTION_CLASS("EXCEPTION_CLASS"),
    
    EXCEPTION_MESSAGE("EXCEPTION_MESSAGE"),
    
    FAILED_STATE("FAILED_STATE"),
    
    FAILURE_REASON("FAILURE_REASON"),
    
    FLAW_STATE("FLAW_STATE"),
    
    HTTP_REQUEST_METHOD("HTTP_REQUEST_METHOD"),
    
    HTTP_STATUS("HTTP_STATUS"),
    
    HTTP_STATUS_CLASS("HTTP_STATUS_CLASS"),
    
    IMS_PROGRAM_NAME("IMS_PROGRAM_NAME"),
    
    IMS_TRANSACTION_ID("IMS_TRANSACTION_ID"),
    
    IMS_USER_ID("IMS_USER_ID"),
    
    IO_TIME("IO_TIME"),
    
    IS_KEY_REQUEST("IS_KEY_REQUEST"),
    
    LAMBDA_COLDSTART("LAMBDA_COLDSTART"),
    
    LOCK_TIME("LOCK_TIME"),
    
    MESSAGING_DESTINATION_TYPE("MESSAGING_DESTINATION_TYPE"),
    
    MESSAGING_IS_TEMPORARY_QUEUE("MESSAGING_IS_TEMPORARY_QUEUE"),
    
    MESSAGING_QUEUE_NAME("MESSAGING_QUEUE_NAME"),
    
    MESSAGING_QUEUE_VENDOR("MESSAGING_QUEUE_VENDOR"),
    
    NETWORK_IO_TIME("NETWORK_IO_TIME"),
    
    NON_DATABASE_CHILD_CALL_COUNT("NON_DATABASE_CHILD_CALL_COUNT"),
    
    NON_DATABASE_CHILD_CALL_TIME("NON_DATABASE_CHILD_CALL_TIME"),
    
    PROCESS_GROUP_NAME("PROCESS_GROUP_NAME"),
    
    PROCESS_GROUP_TAG("PROCESS_GROUP_TAG"),
    
    REMOTE_ENDPOINT("REMOTE_ENDPOINT"),
    
    REMOTE_METHOD("REMOTE_METHOD"),
    
    REMOTE_SERVICE_NAME("REMOTE_SERVICE_NAME"),
    
    REQUEST_NAME("REQUEST_NAME"),
    
    REQUEST_TYPE("REQUEST_TYPE"),
    
    RESPONSE_TIME("RESPONSE_TIME"),
    
    RESPONSE_TIME_CLIENT("RESPONSE_TIME_CLIENT"),
    
    RMI_CLASS("RMI_CLASS"),
    
    RMI_METHOD("RMI_METHOD"),
    
    SERVICE_DISPLAY_NAME("SERVICE_DISPLAY_NAME"),
    
    SERVICE_NAME("SERVICE_NAME"),
    
    SERVICE_PORT("SERVICE_PORT"),
    
    SERVICE_PUBLIC_DOMAIN_NAME("SERVICE_PUBLIC_DOMAIN_NAME"),
    
    SERVICE_REQUEST_ATTRIBUTE("SERVICE_REQUEST_ATTRIBUTE"),
    
    SERVICE_TAG("SERVICE_TAG"),
    
    SERVICE_TYPE("SERVICE_TYPE"),
    
    SERVICE_WEB_APPLICATION_ID("SERVICE_WEB_APPLICATION_ID"),
    
    SERVICE_WEB_CONTEXT_ROOT("SERVICE_WEB_CONTEXT_ROOT"),
    
    SERVICE_WEB_SERVER_NAME("SERVICE_WEB_SERVER_NAME"),
    
    SERVICE_WEB_SERVICE_NAME("SERVICE_WEB_SERVICE_NAME"),
    
    SERVICE_WEB_SERVICE_NAMESPACE("SERVICE_WEB_SERVICE_NAMESPACE"),
    
    SUSPENSION_TIME("SUSPENSION_TIME"),
    
    TOTAL_PROCESSING_TIME("TOTAL_PROCESSING_TIME"),
    
    WAIT_TIME("WAIT_TIME"),
    
    WEBREQUEST_QUERY("WEBREQUEST_QUERY"),
    
    WEBREQUEST_RELATIVE_URL("WEBREQUEST_RELATIVE_URL"),
    
    WEBREQUEST_URL("WEBREQUEST_URL"),
    
    WEBREQUEST_URL_HOST("WEBREQUEST_URL_HOST"),
    
    WEBREQUEST_URL_PATH("WEBREQUEST_URL_PATH"),
    
    WEBREQUEST_URL_PORT("WEBREQUEST_URL_PORT"),
    
    WEBSERVICE_ENDPOINT("WEBSERVICE_ENDPOINT"),
    
    WEBSERVICE_METHOD("WEBSERVICE_METHOD"),
    
    ZOS_CALL_TYPE("ZOS_CALL_TYPE");

    private String value;

    AttributeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributeEnum fromValue(String value) {
      for (AttributeEnum b : AttributeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTE = "attribute";
  private AttributeEnum attribute;

  public static final String JSON_PROPERTY_COMPARISON_INFO = "comparisonInfo";
  private ComparisonInfo comparisonInfo;

  public Condition() { 
  }

  public Condition attribute(AttributeEnum attribute) {
    this.attribute = attribute;
    return this;
  }

   /**
   * The attribute to be matched.   Note that for a service property attribute you must use the comparison of the &#x60;FAST_STRING&#x60; type.
   * @return attribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The attribute to be matched.   Note that for a service property attribute you must use the comparison of the `FAST_STRING` type.")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AttributeEnum getAttribute() {
    return attribute;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttribute(AttributeEnum attribute) {
    this.attribute = attribute;
  }


  public Condition comparisonInfo(ComparisonInfo comparisonInfo) {
    this.comparisonInfo = comparisonInfo;
    return this;
  }

   /**
   * Get comparisonInfo
   * @return comparisonInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_COMPARISON_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ComparisonInfo getComparisonInfo() {
    return comparisonInfo;
  }


  @JsonProperty(JSON_PROPERTY_COMPARISON_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComparisonInfo(ComparisonInfo comparisonInfo) {
    this.comparisonInfo = comparisonInfo;
  }


  /**
   * Return true if this Condition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Condition condition = (Condition) o;
    return Objects.equals(this.attribute, condition.attribute) &&
        Objects.equals(this.comparisonInfo, condition.comparisonInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, comparisonInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Condition {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    comparisonInfo: ").append(toIndentedString(comparisonInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

