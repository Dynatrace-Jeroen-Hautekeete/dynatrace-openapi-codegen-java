/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CustomChartingItemMetadataConfig;
import com.dynatrace.apis.configv1.model.CustomFilterChartSeriesConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a custom chart.
 */
@ApiModel(description = "Configuration of a custom chart.")
@JsonPropertyOrder({
  CustomFilterChartConfig.JSON_PROPERTY_LEGEND_SHOWN,
  CustomFilterChartConfig.JSON_PROPERTY_TYPE,
  CustomFilterChartConfig.JSON_PROPERTY_SERIES,
  CustomFilterChartConfig.JSON_PROPERTY_RESULT_METADATA,
  CustomFilterChartConfig.JSON_PROPERTY_AXIS_LIMITS,
  CustomFilterChartConfig.JSON_PROPERTY_LEFT_AXIS_CUSTOM_UNIT,
  CustomFilterChartConfig.JSON_PROPERTY_RIGHT_AXIS_CUSTOM_UNIT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class CustomFilterChartConfig {
  public static final String JSON_PROPERTY_LEGEND_SHOWN = "legendShown";
  private Boolean legendShown;

  /**
   * The type of the chart.
   */
  public enum TypeEnum {
    PIE("PIE"),
    
    SINGLE_VALUE("SINGLE_VALUE"),
    
    TIMESERIES("TIMESERIES"),
    
    TOP_LIST("TOP_LIST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_SERIES = "series";
  private List<CustomFilterChartSeriesConfig> series = new ArrayList<>();

  public static final String JSON_PROPERTY_RESULT_METADATA = "resultMetadata";
  private Map<String, CustomChartingItemMetadataConfig> resultMetadata = new HashMap<>();

  public static final String JSON_PROPERTY_AXIS_LIMITS = "axisLimits";
  private Map<String, Double> axisLimits = null;

  /**
   * The custom unit for the left Y-axis.
   */
  public enum LeftAxisCustomUnitEnum {
    BILLION("Billion"),
    
    BIT("Bit"),
    
    BITPERHOUR("BitPerHour"),
    
    BITPERMINUTE("BitPerMinute"),
    
    BITPERSECOND("BitPerSecond"),
    
    BYTE("Byte"),
    
    BYTEPERHOUR("BytePerHour"),
    
    BYTEPERMINUTE("BytePerMinute"),
    
    BYTEPERSECOND("BytePerSecond"),
    
    CORES("Cores"),
    
    COUNT("Count"),
    
    DAY("Day"),
    
    DECIBELMILLIWATT("DecibelMilliWatt"),
    
    GIBIBYTE("GibiByte"),
    
    GIGA("Giga"),
    
    GIGABYTE("GigaByte"),
    
    HOUR("Hour"),
    
    KIBIBYTE("KibiByte"),
    
    KIBIBYTEPERHOUR("KibiBytePerHour"),
    
    KIBIBYTEPERMINUTE("KibiBytePerMinute"),
    
    KIBIBYTEPERSECOND("KibiBytePerSecond"),
    
    KILO("Kilo"),
    
    KILOBYTE("KiloByte"),
    
    KILOBYTEPERHOUR("KiloBytePerHour"),
    
    KILOBYTEPERMINUTE("KiloBytePerMinute"),
    
    KILOBYTEPERSECOND("KiloBytePerSecond"),
    
    KILOMETREPERHOUR("KiloMetrePerHour"),
    
    MSU("MSU"),
    
    MEBIBYTE("MebiByte"),
    
    MEBIBYTEPERHOUR("MebiBytePerHour"),
    
    MEBIBYTEPERMINUTE("MebiBytePerMinute"),
    
    MEBIBYTEPERSECOND("MebiBytePerSecond"),
    
    MEGA("Mega"),
    
    MEGABYTE("MegaByte"),
    
    MEGABYTEPERHOUR("MegaBytePerHour"),
    
    MEGABYTEPERMINUTE("MegaBytePerMinute"),
    
    MEGABYTEPERSECOND("MegaBytePerSecond"),
    
    METREPERHOUR("MetrePerHour"),
    
    METREPERSECOND("MetrePerSecond"),
    
    MICROSECOND("MicroSecond"),
    
    MILLICORES("MilliCores"),
    
    MILLISECOND("MilliSecond"),
    
    MILLISECONDPERMINUTE("MilliSecondPerMinute"),
    
    MILLION("Million"),
    
    MINUTE("Minute"),
    
    MONTH("Month"),
    
    NANOSECOND("NanoSecond"),
    
    NANOSECONDPERMINUTE("NanoSecondPerMinute"),
    
    NOTAPPLICABLE("NotApplicable"),
    
    PERHOUR("PerHour"),
    
    PERMINUTE("PerMinute"),
    
    PERSECOND("PerSecond"),
    
    PERCENT("Percent"),
    
    PIXEL("Pixel"),
    
    PROMILLE("Promille"),
    
    RATIO("Ratio"),
    
    SECOND("Second"),
    
    STATE("State"),
    
    UNSPECIFIED("Unspecified"),
    
    WEEK("Week"),
    
    YEAR("Year");

    private String value;

    LeftAxisCustomUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LeftAxisCustomUnitEnum fromValue(String value) {
      for (LeftAxisCustomUnitEnum b : LeftAxisCustomUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LEFT_AXIS_CUSTOM_UNIT = "leftAxisCustomUnit";
  private LeftAxisCustomUnitEnum leftAxisCustomUnit;

  /**
   * The custom unit for the right Y-axis.
   */
  public enum RightAxisCustomUnitEnum {
    BILLION("Billion"),
    
    BIT("Bit"),
    
    BITPERHOUR("BitPerHour"),
    
    BITPERMINUTE("BitPerMinute"),
    
    BITPERSECOND("BitPerSecond"),
    
    BYTE("Byte"),
    
    BYTEPERHOUR("BytePerHour"),
    
    BYTEPERMINUTE("BytePerMinute"),
    
    BYTEPERSECOND("BytePerSecond"),
    
    CORES("Cores"),
    
    COUNT("Count"),
    
    DAY("Day"),
    
    DECIBELMILLIWATT("DecibelMilliWatt"),
    
    GIBIBYTE("GibiByte"),
    
    GIGA("Giga"),
    
    GIGABYTE("GigaByte"),
    
    HOUR("Hour"),
    
    KIBIBYTE("KibiByte"),
    
    KIBIBYTEPERHOUR("KibiBytePerHour"),
    
    KIBIBYTEPERMINUTE("KibiBytePerMinute"),
    
    KIBIBYTEPERSECOND("KibiBytePerSecond"),
    
    KILO("Kilo"),
    
    KILOBYTE("KiloByte"),
    
    KILOBYTEPERHOUR("KiloBytePerHour"),
    
    KILOBYTEPERMINUTE("KiloBytePerMinute"),
    
    KILOBYTEPERSECOND("KiloBytePerSecond"),
    
    KILOMETREPERHOUR("KiloMetrePerHour"),
    
    MSU("MSU"),
    
    MEBIBYTE("MebiByte"),
    
    MEBIBYTEPERHOUR("MebiBytePerHour"),
    
    MEBIBYTEPERMINUTE("MebiBytePerMinute"),
    
    MEBIBYTEPERSECOND("MebiBytePerSecond"),
    
    MEGA("Mega"),
    
    MEGABYTE("MegaByte"),
    
    MEGABYTEPERHOUR("MegaBytePerHour"),
    
    MEGABYTEPERMINUTE("MegaBytePerMinute"),
    
    MEGABYTEPERSECOND("MegaBytePerSecond"),
    
    METREPERHOUR("MetrePerHour"),
    
    METREPERSECOND("MetrePerSecond"),
    
    MICROSECOND("MicroSecond"),
    
    MILLICORES("MilliCores"),
    
    MILLISECOND("MilliSecond"),
    
    MILLISECONDPERMINUTE("MilliSecondPerMinute"),
    
    MILLION("Million"),
    
    MINUTE("Minute"),
    
    MONTH("Month"),
    
    NANOSECOND("NanoSecond"),
    
    NANOSECONDPERMINUTE("NanoSecondPerMinute"),
    
    NOTAPPLICABLE("NotApplicable"),
    
    PERHOUR("PerHour"),
    
    PERMINUTE("PerMinute"),
    
    PERSECOND("PerSecond"),
    
    PERCENT("Percent"),
    
    PIXEL("Pixel"),
    
    PROMILLE("Promille"),
    
    RATIO("Ratio"),
    
    SECOND("Second"),
    
    STATE("State"),
    
    UNSPECIFIED("Unspecified"),
    
    WEEK("Week"),
    
    YEAR("Year");

    private String value;

    RightAxisCustomUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RightAxisCustomUnitEnum fromValue(String value) {
      for (RightAxisCustomUnitEnum b : RightAxisCustomUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RIGHT_AXIS_CUSTOM_UNIT = "rightAxisCustomUnit";
  private RightAxisCustomUnitEnum rightAxisCustomUnit;

  public CustomFilterChartConfig() { 
  }

  public CustomFilterChartConfig legendShown(Boolean legendShown) {
    this.legendShown = legendShown;
    return this;
  }

   /**
   * Defines if a legend should be shown.
   * @return legendShown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if a legend should be shown.")
  @JsonProperty(JSON_PROPERTY_LEGEND_SHOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLegendShown() {
    return legendShown;
  }


  @JsonProperty(JSON_PROPERTY_LEGEND_SHOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLegendShown(Boolean legendShown) {
    this.legendShown = legendShown;
  }


  public CustomFilterChartConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the chart.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the chart.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CustomFilterChartConfig series(List<CustomFilterChartSeriesConfig> series) {
    this.series = series;
    return this;
  }

  public CustomFilterChartConfig addSeriesItem(CustomFilterChartSeriesConfig seriesItem) {
    this.series.add(seriesItem);
    return this;
  }

   /**
   * A list of charted metrics.
   * @return series
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of charted metrics.")
  @JsonProperty(JSON_PROPERTY_SERIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CustomFilterChartSeriesConfig> getSeries() {
    return series;
  }


  @JsonProperty(JSON_PROPERTY_SERIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeries(List<CustomFilterChartSeriesConfig> series) {
    this.series = series;
  }


  public CustomFilterChartConfig resultMetadata(Map<String, CustomChartingItemMetadataConfig> resultMetadata) {
    this.resultMetadata = resultMetadata;
    return this;
  }

  public CustomFilterChartConfig putResultMetadataItem(String key, CustomChartingItemMetadataConfig resultMetadataItem) {
    this.resultMetadata.put(key, resultMetadataItem);
    return this;
  }

   /**
   * Additional information about charted metric.
   * @return resultMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Additional information about charted metric.")
  @JsonProperty(JSON_PROPERTY_RESULT_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, CustomChartingItemMetadataConfig> getResultMetadata() {
    return resultMetadata;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultMetadata(Map<String, CustomChartingItemMetadataConfig> resultMetadata) {
    this.resultMetadata = resultMetadata;
  }


  public CustomFilterChartConfig axisLimits(Map<String, Double> axisLimits) {
    this.axisLimits = axisLimits;
    return this;
  }

  public CustomFilterChartConfig putAxisLimitsItem(String key, Double axisLimitsItem) {
    if (this.axisLimits == null) {
      this.axisLimits = new HashMap<>();
    }
    this.axisLimits.put(key, axisLimitsItem);
    return this;
  }

   /**
   * The optional custom y-axis limits.
   * @return axisLimits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The optional custom y-axis limits.")
  @JsonProperty(JSON_PROPERTY_AXIS_LIMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Double> getAxisLimits() {
    return axisLimits;
  }


  @JsonProperty(JSON_PROPERTY_AXIS_LIMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxisLimits(Map<String, Double> axisLimits) {
    this.axisLimits = axisLimits;
  }


  public CustomFilterChartConfig leftAxisCustomUnit(LeftAxisCustomUnitEnum leftAxisCustomUnit) {
    this.leftAxisCustomUnit = leftAxisCustomUnit;
    return this;
  }

   /**
   * The custom unit for the left Y-axis.
   * @return leftAxisCustomUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The custom unit for the left Y-axis.")
  @JsonProperty(JSON_PROPERTY_LEFT_AXIS_CUSTOM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LeftAxisCustomUnitEnum getLeftAxisCustomUnit() {
    return leftAxisCustomUnit;
  }


  @JsonProperty(JSON_PROPERTY_LEFT_AXIS_CUSTOM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeftAxisCustomUnit(LeftAxisCustomUnitEnum leftAxisCustomUnit) {
    this.leftAxisCustomUnit = leftAxisCustomUnit;
  }


  public CustomFilterChartConfig rightAxisCustomUnit(RightAxisCustomUnitEnum rightAxisCustomUnit) {
    this.rightAxisCustomUnit = rightAxisCustomUnit;
    return this;
  }

   /**
   * The custom unit for the right Y-axis.
   * @return rightAxisCustomUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The custom unit for the right Y-axis.")
  @JsonProperty(JSON_PROPERTY_RIGHT_AXIS_CUSTOM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RightAxisCustomUnitEnum getRightAxisCustomUnit() {
    return rightAxisCustomUnit;
  }


  @JsonProperty(JSON_PROPERTY_RIGHT_AXIS_CUSTOM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRightAxisCustomUnit(RightAxisCustomUnitEnum rightAxisCustomUnit) {
    this.rightAxisCustomUnit = rightAxisCustomUnit;
  }


  /**
   * Return true if this CustomFilterChartConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFilterChartConfig customFilterChartConfig = (CustomFilterChartConfig) o;
    return Objects.equals(this.legendShown, customFilterChartConfig.legendShown) &&
        Objects.equals(this.type, customFilterChartConfig.type) &&
        Objects.equals(this.series, customFilterChartConfig.series) &&
        Objects.equals(this.resultMetadata, customFilterChartConfig.resultMetadata) &&
        Objects.equals(this.axisLimits, customFilterChartConfig.axisLimits) &&
        Objects.equals(this.leftAxisCustomUnit, customFilterChartConfig.leftAxisCustomUnit) &&
        Objects.equals(this.rightAxisCustomUnit, customFilterChartConfig.rightAxisCustomUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legendShown, type, series, resultMetadata, axisLimits, leftAxisCustomUnit, rightAxisCustomUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFilterChartConfig {\n");
    sb.append("    legendShown: ").append(toIndentedString(legendShown)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    resultMetadata: ").append(toIndentedString(resultMetadata)).append("\n");
    sb.append("    axisLimits: ").append(toIndentedString(axisLimits)).append("\n");
    sb.append("    leftAxisCustomUnit: ").append(toIndentedString(leftAxisCustomUnit)).append("\n");
    sb.append("    rightAxisCustomUnit: ").append(toIndentedString(rightAxisCustomUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

