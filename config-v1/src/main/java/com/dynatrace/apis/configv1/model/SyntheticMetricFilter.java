/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Filter of the calculated synthetic metric.
 */
@ApiModel(description = "Filter of the calculated synthetic metric.")
@JsonPropertyOrder({
  SyntheticMetricFilter.JSON_PROPERTY_ACTION_TYPE,
  SyntheticMetricFilter.JSON_PROPERTY_HAS_ERROR,
  SyntheticMetricFilter.JSON_PROPERTY_ERROR_CODE,
  SyntheticMetricFilter.JSON_PROPERTY_EVENT,
  SyntheticMetricFilter.JSON_PROPERTY_LOCATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class SyntheticMetricFilter {
  /**
   * Only user actions of the specified type are included in the metric calculation.
   */
  public enum ActionTypeEnum {
    CUSTOM("Custom"),
    
    LOAD("Load"),
    
    XHR("Xhr");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION_TYPE = "actionType";
  private ActionTypeEnum actionType;

  public static final String JSON_PROPERTY_HAS_ERROR = "hasError";
  private Boolean hasError;

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  private Integer errorCode;

  public static final String JSON_PROPERTY_EVENT = "event";
  private String event;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public SyntheticMetricFilter() { 
  }

  public SyntheticMetricFilter actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

   /**
   * Only user actions of the specified type are included in the metric calculation.
   * @return actionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only user actions of the specified type are included in the metric calculation.")
  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActionTypeEnum getActionType() {
    return actionType;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public SyntheticMetricFilter hasError(Boolean hasError) {
    this.hasError = hasError;
    return this;
  }

   /**
   * The execution status of the monitors to be included in the metric calculation:   * &#x60;true&#x60;: Only failed executions are included.    * &#x60;false&#x60;: All executions are included.
   * @return hasError
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The execution status of the monitors to be included in the metric calculation:   * `true`: Only failed executions are included.    * `false`: All executions are included.")
  @JsonProperty(JSON_PROPERTY_HAS_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasError() {
    return hasError;
  }


  @JsonProperty(JSON_PROPERTY_HAS_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasError(Boolean hasError) {
    this.hasError = hasError;
  }


  public SyntheticMetricFilter errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Only executions finished with the specified error code are included in the metric calculation.
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only executions finished with the specified error code are included in the metric calculation.")
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getErrorCode() {
    return errorCode;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public SyntheticMetricFilter event(String event) {
    this.event = event;
    return this;
  }

   /**
   * Only the specified browser clickpath event is included in the metric calculation.    Specify the Dynatrace entity ID of the event here. You can fetch the list of clickpath events of the monitor with the [GET a synthetic monitor](https://dt-url.net/4oe3kka) request from the Environment API
   * @return event
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only the specified browser clickpath event is included in the metric calculation.    Specify the Dynatrace entity ID of the event here. You can fetch the list of clickpath events of the monitor with the [GET a synthetic monitor](https://dt-url.net/4oe3kka) request from the Environment API")
  @JsonProperty(JSON_PROPERTY_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEvent() {
    return event;
  }


  @JsonProperty(JSON_PROPERTY_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEvent(String event) {
    this.event = event;
  }


  public SyntheticMetricFilter location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Only executions from the specified location are included in the metric calculation.    Specify the Dynatrace entity ID of the location here. You can fetch the list of locations the monitor is running from with the [GET a synthetic monitor](https://dt-url.net/4oe3kka) request from the Environment API.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only executions from the specified location are included in the metric calculation.    Specify the Dynatrace entity ID of the location here. You can fetch the list of locations the monitor is running from with the [GET a synthetic monitor](https://dt-url.net/4oe3kka) request from the Environment API.")
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Return true if this SyntheticMetricFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyntheticMetricFilter syntheticMetricFilter = (SyntheticMetricFilter) o;
    return Objects.equals(this.actionType, syntheticMetricFilter.actionType) &&
        Objects.equals(this.hasError, syntheticMetricFilter.hasError) &&
        Objects.equals(this.errorCode, syntheticMetricFilter.errorCode) &&
        Objects.equals(this.event, syntheticMetricFilter.event) &&
        Objects.equals(this.location, syntheticMetricFilter.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, hasError, errorCode, event, location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyntheticMetricFilter {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

