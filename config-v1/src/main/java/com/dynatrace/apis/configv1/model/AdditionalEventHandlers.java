/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Additional event handlers and wrappers.
 */
@ApiModel(description = "Additional event handlers and wrappers.")
@JsonPropertyOrder({
  AdditionalEventHandlers.JSON_PROPERTY_USER_MOUSEUP_EVENT_FOR_CLICKS,
  AdditionalEventHandlers.JSON_PROPERTY_CLICK_EVENT_HANDLER,
  AdditionalEventHandlers.JSON_PROPERTY_MOUSEUP_EVENT_HANDLER,
  AdditionalEventHandlers.JSON_PROPERTY_BLUR_EVENT_HANDLER,
  AdditionalEventHandlers.JSON_PROPERTY_CHANGE_EVENT_HANDLER,
  AdditionalEventHandlers.JSON_PROPERTY_TO_STRING_METHOD,
  AdditionalEventHandlers.JSON_PROPERTY_MAX_DOM_NODES_TO_INSTRUMENT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class AdditionalEventHandlers {
  public static final String JSON_PROPERTY_USER_MOUSEUP_EVENT_FOR_CLICKS = "userMouseupEventForClicks";
  private Boolean userMouseupEventForClicks;

  public static final String JSON_PROPERTY_CLICK_EVENT_HANDLER = "clickEventHandler";
  private Boolean clickEventHandler;

  public static final String JSON_PROPERTY_MOUSEUP_EVENT_HANDLER = "mouseupEventHandler";
  private Boolean mouseupEventHandler;

  public static final String JSON_PROPERTY_BLUR_EVENT_HANDLER = "blurEventHandler";
  private Boolean blurEventHandler;

  public static final String JSON_PROPERTY_CHANGE_EVENT_HANDLER = "changeEventHandler";
  private Boolean changeEventHandler;

  public static final String JSON_PROPERTY_TO_STRING_METHOD = "toStringMethod";
  private Boolean toStringMethod;

  public static final String JSON_PROPERTY_MAX_DOM_NODES_TO_INSTRUMENT = "maxDomNodesToInstrument";
  private Integer maxDomNodesToInstrument;

  public AdditionalEventHandlers() { 
  }

  public AdditionalEventHandlers userMouseupEventForClicks(Boolean userMouseupEventForClicks) {
    this.userMouseupEventForClicks = userMouseupEventForClicks;
    return this;
  }

   /**
   * Use mouseup event for clicks enabled/disabled.
   * @return userMouseupEventForClicks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Use mouseup event for clicks enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_USER_MOUSEUP_EVENT_FOR_CLICKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUserMouseupEventForClicks() {
    return userMouseupEventForClicks;
  }


  @JsonProperty(JSON_PROPERTY_USER_MOUSEUP_EVENT_FOR_CLICKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserMouseupEventForClicks(Boolean userMouseupEventForClicks) {
    this.userMouseupEventForClicks = userMouseupEventForClicks;
  }


  public AdditionalEventHandlers clickEventHandler(Boolean clickEventHandler) {
    this.clickEventHandler = clickEventHandler;
    return this;
  }

   /**
   * Click event handler enabled/disabled.
   * @return clickEventHandler
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Click event handler enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_CLICK_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getClickEventHandler() {
    return clickEventHandler;
  }


  @JsonProperty(JSON_PROPERTY_CLICK_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClickEventHandler(Boolean clickEventHandler) {
    this.clickEventHandler = clickEventHandler;
  }


  public AdditionalEventHandlers mouseupEventHandler(Boolean mouseupEventHandler) {
    this.mouseupEventHandler = mouseupEventHandler;
    return this;
  }

   /**
   * Mouseup event handler enabled/disabled.
   * @return mouseupEventHandler
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Mouseup event handler enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_MOUSEUP_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMouseupEventHandler() {
    return mouseupEventHandler;
  }


  @JsonProperty(JSON_PROPERTY_MOUSEUP_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMouseupEventHandler(Boolean mouseupEventHandler) {
    this.mouseupEventHandler = mouseupEventHandler;
  }


  public AdditionalEventHandlers blurEventHandler(Boolean blurEventHandler) {
    this.blurEventHandler = blurEventHandler;
    return this;
  }

   /**
   * Blur event handler enabled/disabled.
   * @return blurEventHandler
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Blur event handler enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_BLUR_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getBlurEventHandler() {
    return blurEventHandler;
  }


  @JsonProperty(JSON_PROPERTY_BLUR_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlurEventHandler(Boolean blurEventHandler) {
    this.blurEventHandler = blurEventHandler;
  }


  public AdditionalEventHandlers changeEventHandler(Boolean changeEventHandler) {
    this.changeEventHandler = changeEventHandler;
    return this;
  }

   /**
   * Change event handler enabled/disabled.
   * @return changeEventHandler
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Change event handler enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_CHANGE_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getChangeEventHandler() {
    return changeEventHandler;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_EVENT_HANDLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChangeEventHandler(Boolean changeEventHandler) {
    this.changeEventHandler = changeEventHandler;
  }


  public AdditionalEventHandlers toStringMethod(Boolean toStringMethod) {
    this.toStringMethod = toStringMethod;
    return this;
  }

   /**
   * toString method enabled/disabled.
   * @return toStringMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "toString method enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_TO_STRING_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getToStringMethod() {
    return toStringMethod;
  }


  @JsonProperty(JSON_PROPERTY_TO_STRING_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToStringMethod(Boolean toStringMethod) {
    this.toStringMethod = toStringMethod;
  }


  public AdditionalEventHandlers maxDomNodesToInstrument(Integer maxDomNodesToInstrument) {
    this.maxDomNodesToInstrument = maxDomNodesToInstrument;
    return this;
  }

   /**
   * Max. number of DOM nodes to instrument. Valid values range from 0 to 100000.
   * minimum: 0
   * maximum: 100000
   * @return maxDomNodesToInstrument
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Max. number of DOM nodes to instrument. Valid values range from 0 to 100000.")
  @JsonProperty(JSON_PROPERTY_MAX_DOM_NODES_TO_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxDomNodesToInstrument() {
    return maxDomNodesToInstrument;
  }


  @JsonProperty(JSON_PROPERTY_MAX_DOM_NODES_TO_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxDomNodesToInstrument(Integer maxDomNodesToInstrument) {
    this.maxDomNodesToInstrument = maxDomNodesToInstrument;
  }


  /**
   * Return true if this AdditionalEventHandlers object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalEventHandlers additionalEventHandlers = (AdditionalEventHandlers) o;
    return Objects.equals(this.userMouseupEventForClicks, additionalEventHandlers.userMouseupEventForClicks) &&
        Objects.equals(this.clickEventHandler, additionalEventHandlers.clickEventHandler) &&
        Objects.equals(this.mouseupEventHandler, additionalEventHandlers.mouseupEventHandler) &&
        Objects.equals(this.blurEventHandler, additionalEventHandlers.blurEventHandler) &&
        Objects.equals(this.changeEventHandler, additionalEventHandlers.changeEventHandler) &&
        Objects.equals(this.toStringMethod, additionalEventHandlers.toStringMethod) &&
        Objects.equals(this.maxDomNodesToInstrument, additionalEventHandlers.maxDomNodesToInstrument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userMouseupEventForClicks, clickEventHandler, mouseupEventHandler, blurEventHandler, changeEventHandler, toStringMethod, maxDomNodesToInstrument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalEventHandlers {\n");
    sb.append("    userMouseupEventForClicks: ").append(toIndentedString(userMouseupEventForClicks)).append("\n");
    sb.append("    clickEventHandler: ").append(toIndentedString(clickEventHandler)).append("\n");
    sb.append("    mouseupEventHandler: ").append(toIndentedString(mouseupEventHandler)).append("\n");
    sb.append("    blurEventHandler: ").append(toIndentedString(blurEventHandler)).append("\n");
    sb.append("    changeEventHandler: ").append(toIndentedString(changeEventHandler)).append("\n");
    sb.append("    toStringMethod: ").append(toIndentedString(toStringMethod)).append("\n");
    sb.append("    maxDomNodesToInstrument: ").append(toIndentedString(maxDomNodesToInstrument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

