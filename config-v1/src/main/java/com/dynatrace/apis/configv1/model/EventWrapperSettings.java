/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * In addition to the event handlers, events called using &#x60;addEventListener&#x60; or &#x60;attachEvent&#x60; can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page.
 */
@ApiModel(description = "In addition to the event handlers, events called using `addEventListener` or `attachEvent` can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page.")
@JsonPropertyOrder({
  EventWrapperSettings.JSON_PROPERTY_CLICK,
  EventWrapperSettings.JSON_PROPERTY_MOUSE_UP,
  EventWrapperSettings.JSON_PROPERTY_CHANGE,
  EventWrapperSettings.JSON_PROPERTY_BLUR,
  EventWrapperSettings.JSON_PROPERTY_TOUCH_START,
  EventWrapperSettings.JSON_PROPERTY_TOUCH_END
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class EventWrapperSettings {
  public static final String JSON_PROPERTY_CLICK = "click";
  private Boolean click;

  public static final String JSON_PROPERTY_MOUSE_UP = "mouseUp";
  private Boolean mouseUp;

  public static final String JSON_PROPERTY_CHANGE = "change";
  private Boolean change;

  public static final String JSON_PROPERTY_BLUR = "blur";
  private Boolean blur;

  public static final String JSON_PROPERTY_TOUCH_START = "touchStart";
  private Boolean touchStart;

  public static final String JSON_PROPERTY_TOUCH_END = "touchEnd";
  private Boolean touchEnd;

  public EventWrapperSettings() { 
  }

  public EventWrapperSettings click(Boolean click) {
    this.click = click;
    return this;
  }

   /**
   * Click enabled/disabled.
   * @return click
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Click enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_CLICK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getClick() {
    return click;
  }


  @JsonProperty(JSON_PROPERTY_CLICK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClick(Boolean click) {
    this.click = click;
  }


  public EventWrapperSettings mouseUp(Boolean mouseUp) {
    this.mouseUp = mouseUp;
    return this;
  }

   /**
   * MouseUp enabled/disabled.
   * @return mouseUp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "MouseUp enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_MOUSE_UP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMouseUp() {
    return mouseUp;
  }


  @JsonProperty(JSON_PROPERTY_MOUSE_UP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMouseUp(Boolean mouseUp) {
    this.mouseUp = mouseUp;
  }


  public EventWrapperSettings change(Boolean change) {
    this.change = change;
    return this;
  }

   /**
   * Change enabled/disabled.
   * @return change
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Change enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getChange() {
    return change;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChange(Boolean change) {
    this.change = change;
  }


  public EventWrapperSettings blur(Boolean blur) {
    this.blur = blur;
    return this;
  }

   /**
   * Blur enabled/disabled.
   * @return blur
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Blur enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_BLUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getBlur() {
    return blur;
  }


  @JsonProperty(JSON_PROPERTY_BLUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlur(Boolean blur) {
    this.blur = blur;
  }


  public EventWrapperSettings touchStart(Boolean touchStart) {
    this.touchStart = touchStart;
    return this;
  }

   /**
   * TouchStart enabled/disabled.
   * @return touchStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "TouchStart enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_TOUCH_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTouchStart() {
    return touchStart;
  }


  @JsonProperty(JSON_PROPERTY_TOUCH_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTouchStart(Boolean touchStart) {
    this.touchStart = touchStart;
  }


  public EventWrapperSettings touchEnd(Boolean touchEnd) {
    this.touchEnd = touchEnd;
    return this;
  }

   /**
   * TouchEnd enabled/disabled.
   * @return touchEnd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "TouchEnd enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_TOUCH_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTouchEnd() {
    return touchEnd;
  }


  @JsonProperty(JSON_PROPERTY_TOUCH_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTouchEnd(Boolean touchEnd) {
    this.touchEnd = touchEnd;
  }


  /**
   * Return true if this EventWrapperSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventWrapperSettings eventWrapperSettings = (EventWrapperSettings) o;
    return Objects.equals(this.click, eventWrapperSettings.click) &&
        Objects.equals(this.mouseUp, eventWrapperSettings.mouseUp) &&
        Objects.equals(this.change, eventWrapperSettings.change) &&
        Objects.equals(this.blur, eventWrapperSettings.blur) &&
        Objects.equals(this.touchStart, eventWrapperSettings.touchStart) &&
        Objects.equals(this.touchEnd, eventWrapperSettings.touchEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(click, mouseUp, change, blur, touchStart, touchEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventWrapperSettings {\n");
    sb.append("    click: ").append(toIndentedString(click)).append("\n");
    sb.append("    mouseUp: ").append(toIndentedString(mouseUp)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    blur: ").append(toIndentedString(blur)).append("\n");
    sb.append("    touchStart: ").append(toIndentedString(touchStart)).append("\n");
    sb.append("    touchEnd: ").append(toIndentedString(touchEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

