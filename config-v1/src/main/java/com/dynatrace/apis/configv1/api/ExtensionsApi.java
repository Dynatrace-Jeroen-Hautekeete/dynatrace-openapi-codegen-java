/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.Extension;
import com.dynatrace.apis.configv1.model.ExtensionConfigurationDto;
import com.dynatrace.apis.configv1.model.ExtensionConfigurationList;
import com.dynatrace.apis.configv1.model.ExtensionListDto;
import com.dynatrace.apis.configv1.model.ExtensionStateList;
import java.io.File;
import com.dynatrace.apis.configv1.model.GlobalExtensionConfiguration;
import com.dynatrace.apis.configv1.model.HostList;
import java.util.Set;
import com.dynatrace.apis.configv1.model.StubList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ExtensionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ExtensionsApi() {
    this(new ApiClient());
  }

  public ExtensionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains new configuration of the extension. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createLocalExtensionConfiguration(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createLocalExtensionConfigurationWithHttpInfo(id, extensionConfigurationDto);
    return localVarResponse.getData();
  }

  /**
   * Creates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains new configuration of the extension. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createLocalExtensionConfigurationWithHttpInfo(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createLocalExtensionConfigurationRequestBuilder(id, extensionConfigurationDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createLocalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createLocalExtensionConfigurationRequestBuilder(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createLocalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extensionConfigurationDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * Deletion of the extension file uninstalls the extension, making it unavailable for use.
   * @param id The ID of the extension to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteExtension(String id) throws ApiException {
    deleteExtensionWithHttpInfo(id);
  }

  /**
   * Deletes the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * Deletion of the extension file uninstalls the extension, making it unavailable for use.
   * @param id The ID of the extension to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteExtensionWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteExtensionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteExtension", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteExtensionRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes an existing configuration of the extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension where you want to delete the configuration. (required)
   * @param configurationId The ID of the configuration to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteLocalExtensionConfiguration(String id, String configurationId) throws ApiException {
    deleteLocalExtensionConfigurationWithHttpInfo(id, configurationId);
  }

  /**
   * Deletes an existing configuration of the extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension where you want to delete the configuration. (required)
   * @param configurationId The ID of the configuration to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteLocalExtensionConfigurationWithHttpInfo(String id, String configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteLocalExtensionConfigurationRequestBuilder(id, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteLocalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteLocalExtensionConfigurationRequestBuilder(String id, String configurationId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteLocalExtensionConfiguration");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling deleteLocalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances/{configurationId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the properties of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @return Extension
   * @throws ApiException if fails to make API call
   */
  public Extension getExtension(String id) throws ApiException {
    ApiResponse<Extension> localVarResponse = getExtensionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Lists the properties of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @return ApiResponse&lt;Extension&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Extension> getExtensionWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtension", localVarResponse);
        }
        return new ApiResponse<Extension>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Extension>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension you want to download. (required)
   * @throws ApiException if fails to make API call
   */
  public void getExtensionBinary(String id) throws ApiException {
    getExtensionBinaryWithHttpInfo(id);
  }

  /**
   * Downloads the ZIP file of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension you want to download. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getExtensionBinaryWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionBinaryRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionBinary", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionBinaryRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getExtensionBinary");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/binary"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns list of all local configuration instances for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return ExtensionConfigurationList
   * @throws ApiException if fails to make API call
   */
  public ExtensionConfigurationList getExtensionConfigurations(String id, Integer pageSize, String nextPageKey) throws ApiException {
    ApiResponse<ExtensionConfigurationList> localVarResponse = getExtensionConfigurationsWithHttpInfo(id, pageSize, nextPageKey);
    return localVarResponse.getData();
  }

  /**
   * Returns list of all local configuration instances for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return ApiResponse&lt;ExtensionConfigurationList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionConfigurationList> getExtensionConfigurationsWithHttpInfo(String id, Integer pageSize, String nextPageKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionConfigurationsRequestBuilder(id, pageSize, nextPageKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionConfigurations", localVarResponse);
        }
        return new ApiResponse<ExtensionConfigurationList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionConfigurationList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionConfigurationsRequestBuilder(String id, Integer pageSize, String nextPageKey) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getExtensionConfigurations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the global configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension to be updated. (required)
   * @return GlobalExtensionConfiguration
   * @throws ApiException if fails to make API call
   */
  public GlobalExtensionConfiguration getExtensionGlobalConfiguration(String id) throws ApiException {
    ApiResponse<GlobalExtensionConfiguration> localVarResponse = getExtensionGlobalConfigurationWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get the global configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension to be updated. (required)
   * @return ApiResponse&lt;GlobalExtensionConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GlobalExtensionConfiguration> getExtensionGlobalConfigurationWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionGlobalConfigurationRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionGlobalConfiguration", localVarResponse);
        }
        return new ApiResponse<GlobalExtensionConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GlobalExtensionConfiguration>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionGlobalConfigurationRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getExtensionGlobalConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/global"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the states of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @param state Extension state to filter. (optional)
   * @return ExtensionStateList
   * @throws ApiException if fails to make API call
   */
  public ExtensionStateList getExtensionStates(String id, Integer pageSize, String nextPageKey, String state) throws ApiException {
    ApiResponse<ExtensionStateList> localVarResponse = getExtensionStatesWithHttpInfo(id, pageSize, nextPageKey, state);
    return localVarResponse.getData();
  }

  /**
   * Lists the states of the specified extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the required extension. (required)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @param state Extension state to filter. (optional)
   * @return ApiResponse&lt;ExtensionStateList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionStateList> getExtensionStatesWithHttpInfo(String id, Integer pageSize, String nextPageKey, String state) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionStatesRequestBuilder(id, pageSize, nextPageKey, state);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionStates", localVarResponse);
        }
        return new ApiResponse<ExtensionStateList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionStateList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionStatesRequestBuilder(String id, Integer pageSize, String nextPageKey, String state) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getExtensionStates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/states"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all uploaded extensions | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return ExtensionListDto
   * @throws ApiException if fails to make API call
   */
  public ExtensionListDto getExtensions(Integer pageSize, String nextPageKey) throws ApiException {
    ApiResponse<ExtensionListDto> localVarResponse = getExtensionsWithHttpInfo(pageSize, nextPageKey);
    return localVarResponse.getData();
  }

  /**
   * Lists all uploaded extensions | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return ApiResponse&lt;ExtensionListDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionListDto> getExtensionsWithHttpInfo(Integer pageSize, String nextPageKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionsRequestBuilder(pageSize, nextPageKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensions", localVarResponse);
        }
        return new ApiResponse<ExtensionListDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionListDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionsRequestBuilder(Integer pageSize, String nextPageKey) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available hosts that have specified technology running | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param technology Name of requested technology (required)
   * @param tag Filters the resulting set of hosts by the specified tag.    You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The host has to match **all** the specified tags. (optional
   * @param managementZone Only return hosts that are part of the specified management zone. (optional)
   * @param hostGroupId Filters the resulting set of hosts by the specified host group.    Specify the Dynatrace IDs of the host group you&#39;re interested in. (optional)
   * @param hostGroupName Filters the resulting set of hosts by the specified host group.    Specify the name of the host group you&#39;re interested in. (optional)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return HostList
   * @throws ApiException if fails to make API call
   */
  public HostList getHostsForTechnology(String technology, Set<String> tag, Long managementZone, String hostGroupId, String hostGroupName, Integer pageSize, String nextPageKey) throws ApiException {
    ApiResponse<HostList> localVarResponse = getHostsForTechnologyWithHttpInfo(technology, tag, managementZone, hostGroupId, hostGroupName, pageSize, nextPageKey);
    return localVarResponse.getData();
  }

  /**
   * Lists all available hosts that have specified technology running | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param technology Name of requested technology (required)
   * @param tag Filters the resulting set of hosts by the specified tag.    You can specify several tags in the following format: &#x60;tag&#x3D;tag1&amp;tag&#x3D;tag2&#x60;. The host has to match **all** the specified tags. (optional
   * @param managementZone Only return hosts that are part of the specified management zone. (optional)
   * @param hostGroupId Filters the resulting set of hosts by the specified host group.    Specify the Dynatrace IDs of the host group you&#39;re interested in. (optional)
   * @param hostGroupName Filters the resulting set of hosts by the specified host group.    Specify the name of the host group you&#39;re interested in. (optional)
   * @param pageSize The number of results per result page. Must be between 1 and 500 (optional, default to 200)
   * @param nextPageKey The cursor for the next page of results. (optional)
   * @return ApiResponse&lt;HostList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HostList> getHostsForTechnologyWithHttpInfo(String technology, Set<String> tag, Long managementZone, String hostGroupId, String hostGroupName, Integer pageSize, String nextPageKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getHostsForTechnologyRequestBuilder(technology, tag, managementZone, hostGroupId, hostGroupName, pageSize, nextPageKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getHostsForTechnology", localVarResponse);
        }
        return new ApiResponse<HostList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HostList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getHostsForTechnologyRequestBuilder(String technology, Set<String> tag, Long managementZone, String hostGroupId, String hostGroupName, Integer pageSize, String nextPageKey) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling getHostsForTechnology");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{technology}/availableHosts"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "tag", tag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("managementZone", managementZone));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("hostGroupId", hostGroupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("hostGroupName", hostGroupName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension. (required)
   * @param configurationId The ID of the configuration. (required)
   * @return ExtensionConfigurationDto
   * @throws ApiException if fails to make API call
   */
  public ExtensionConfigurationDto getLocalExtensionConfiguration(String id, String configurationId) throws ApiException {
    ApiResponse<ExtensionConfigurationDto> localVarResponse = getLocalExtensionConfigurationWithHttpInfo(id, configurationId);
    return localVarResponse.getData();
  }

  /**
   * Returns instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension. (required)
   * @param configurationId The ID of the configuration. (required)
   * @return ApiResponse&lt;ExtensionConfigurationDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionConfigurationDto> getLocalExtensionConfigurationWithHttpInfo(String id, String configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLocalExtensionConfigurationRequestBuilder(id, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLocalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<ExtensionConfigurationDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionConfigurationDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLocalExtensionConfigurationRequestBuilder(String id, String configurationId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getLocalExtensionConfiguration");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getLocalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances/{configurationId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List available ActiveGate extension modules | maturity&#x3D;EARLY_ADOPTER
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList getRemoteExtensionModules() throws ApiException {
    ApiResponse<StubList> localVarResponse = getRemoteExtensionModulesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List available ActiveGate extension modules | maturity&#x3D;EARLY_ADOPTER
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> getRemoteExtensionModulesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemoteExtensionModulesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemoteExtensionModules", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemoteExtensionModulesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/activeGateExtensionModules";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension to be updated. (required)
   * @param globalExtensionConfiguration The JSON body of the request. Contains updated configuration of the extension. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateGlobalExtensionConfiguration(String id, GlobalExtensionConfiguration globalExtensionConfiguration) throws ApiException {
    updateGlobalExtensionConfigurationWithHttpInfo(id, globalExtensionConfiguration);
  }

  /**
   * Updates the configuration of the specified OneAgent or JMX extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension to be updated. (required)
   * @param globalExtensionConfiguration The JSON body of the request. Contains updated configuration of the extension. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateGlobalExtensionConfigurationWithHttpInfo(String id, GlobalExtensionConfiguration globalExtensionConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateGlobalExtensionConfigurationRequestBuilder(id, globalExtensionConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateGlobalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateGlobalExtensionConfigurationRequestBuilder(String id, GlobalExtensionConfiguration globalExtensionConfiguration) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateGlobalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/global"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(globalExtensionConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension where you want to update the configuration.   If you set the extension ID in the body as well, it must match this ID. (required)
   * @param configurationId The ID of the configuration to be updated. (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains updated parameters of the extension configuration. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateLocalExtensionConfiguration(String id, String configurationId, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    updateLocalExtensionConfigurationWithHttpInfo(id, configurationId, extensionConfigurationDto);
  }

  /**
   * Updates instance of local configuration for given extension | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension where you want to update the configuration.   If you set the extension ID in the body as well, it must match this ID. (required)
   * @param configurationId The ID of the configuration to be updated. (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains updated parameters of the extension configuration. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateLocalExtensionConfigurationWithHttpInfo(String id, String configurationId, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateLocalExtensionConfigurationRequestBuilder(id, configurationId, extensionConfigurationDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateLocalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateLocalExtensionConfigurationRequestBuilder(String id, String configurationId, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateLocalExtensionConfiguration");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateLocalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances/{configurationId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extensionConfigurationDto);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Uploads a ZIP extension file | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param _file Extension ZIP file to be uploaded.    File name must match the **name** field in the &#x60;plugin.json&#x60; file.   For example, for the extension whose **name** is &#x60;custom.remote.python.demo&#x60;, the name of the extension file must be &#x60;custom.remote.python.demo.zip&#x60;. (required)
   * @param overrideAlerts Use extension-defined thresholds for alerts (&#x60;true&#x60;) or user-defined thresholds (&#x60;false&#x60;).    Extension-defined thresholds are stored in the &#x60;plugin.json&#x60; file.   If not set, user-defined thresholds are used. (optional, default to false)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation uploadExtension(File _file, Boolean overrideAlerts) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = uploadExtensionWithHttpInfo(_file, overrideAlerts);
    return localVarResponse.getData();
  }

  /**
   * Uploads a ZIP extension file | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param _file Extension ZIP file to be uploaded.    File name must match the **name** field in the &#x60;plugin.json&#x60; file.   For example, for the extension whose **name** is &#x60;custom.remote.python.demo&#x60;, the name of the extension file must be &#x60;custom.remote.python.demo.zip&#x60;. (required)
   * @param overrideAlerts Use extension-defined thresholds for alerts (&#x60;true&#x60;) or user-defined thresholds (&#x60;false&#x60;).    Extension-defined thresholds are stored in the &#x60;plugin.json&#x60; file.   If not set, user-defined thresholds are used. (optional, default to false)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> uploadExtensionWithHttpInfo(File _file, Boolean overrideAlerts) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadExtensionRequestBuilder(_file, overrideAlerts);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("uploadExtension", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadExtensionRequestBuilder(File _file, Boolean overrideAlerts) throws ApiException {
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling uploadExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("overrideAlerts", overrideAlerts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates a ZIP extension file for &#x60;POST/extensions&#x60; request | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param _file The ZIP extension file to be uploaded.    The file name must match the ID of the extension. Example: &#x60;custom.remote.python.demo.zip&#x60; (required)
   * @param jsonOnly Validate only the &#x60;plugin.json&#x60; file (&#x60;true&#x60;) or the entire extension structure (&#x60;false&#x60;).    If not set, the entire extension is validated.  (optional, default to false)
   * @throws ApiException if fails to make API call
   */
  public void validateExtension(File _file, Boolean jsonOnly) throws ApiException {
    validateExtensionWithHttpInfo(_file, jsonOnly);
  }

  /**
   * Validates a ZIP extension file for &#x60;POST/extensions&#x60; request | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param _file The ZIP extension file to be uploaded.    The file name must match the ID of the extension. Example: &#x60;custom.remote.python.demo.zip&#x60; (required)
   * @param jsonOnly Validate only the &#x60;plugin.json&#x60; file (&#x60;true&#x60;) or the entire extension structure (&#x60;false&#x60;).    If not set, the entire extension is validated.  (optional, default to false)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateExtensionWithHttpInfo(File _file, Boolean jsonOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateExtensionRequestBuilder(_file, jsonOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateExtension", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateExtensionRequestBuilder(File _file, Boolean jsonOnly) throws ApiException {
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling validateExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/validator";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("jsonOnly", jsonOnly));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /extensions/{id}/instances&#x60; request | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension. (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains new configuration of the extension to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateLocalExtensionConfiguration(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    validateLocalExtensionConfigurationWithHttpInfo(id, extensionConfigurationDto);
  }

  /**
   * Validates the payload for the &#x60;POST /extensions/{id}/instances&#x60; request | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param id The ID of the extension. (required)
   * @param extensionConfigurationDto The JSON body of the request. Contains new configuration of the extension to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateLocalExtensionConfigurationWithHttpInfo(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateLocalExtensionConfigurationRequestBuilder(id, extensionConfigurationDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateLocalExtensionConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateLocalExtensionConfigurationRequestBuilder(String id, ExtensionConfigurationDto extensionConfigurationDto) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateLocalExtensionConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{id}/instances/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extensionConfigurationDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
