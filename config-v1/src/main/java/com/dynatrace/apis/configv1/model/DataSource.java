/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CapturedMethod;
import com.dynatrace.apis.configv1.model.ScopeConditions;
import com.dynatrace.apis.configv1.model.ValueCondition;
import com.dynatrace.apis.configv1.model.ValueProcessing;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DataSource
 */
@JsonPropertyOrder({
  DataSource.JSON_PROPERTY_ENABLED,
  DataSource.JSON_PROPERTY_SOURCE,
  DataSource.JSON_PROPERTY_VALUE_PROCESSING,
  DataSource.JSON_PROPERTY_TECHNOLOGY,
  DataSource.JSON_PROPERTY_SESSION_ATTRIBUTE_TECHNOLOGY,
  DataSource.JSON_PROPERTY_SERVER_VARIABLE_TECHNOLOGY,
  DataSource.JSON_PROPERTY_METHODS,
  DataSource.JSON_PROPERTY_PARAMETER_NAME,
  DataSource.JSON_PROPERTY_SCOPE,
  DataSource.JSON_PROPERTY_CAPTURING_AND_STORAGE_LOCATION,
  DataSource.JSON_PROPERTY_IIB_NODE_TYPE,
  DataSource.JSON_PROPERTY_IIB_METHOD_NODE_CONDITION,
  DataSource.JSON_PROPERTY_CICS_S_D_K_METHOD_NODE_CONDITION,
  DataSource.JSON_PROPERTY_IIB_LABEL_METHOD_NODE_CONDITION,
  DataSource.JSON_PROPERTY_SPAN_ATTRIBUTE_KEY,
  DataSource.JSON_PROPERTY_CICS_TRANSACTION_CALL_TYPE,
  DataSource.JSON_PROPERTY_IMS_TRANSACTION_CALL_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DataSource {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**.
   */
  public enum SourceEnum {
    CICS_SDK("CICS_SDK"),
    
    CICS_SYSTEM_ID("CICS_SYSTEM_ID"),
    
    CICS_TASK_ID("CICS_TASK_ID"),
    
    CICS_TRANSACTION_CALL_TYPE("CICS_TRANSACTION_CALL_TYPE"),
    
    CLIENT_IP("CLIENT_IP"),
    
    CUSTOM_ATTRIBUTE("CUSTOM_ATTRIBUTE"),
    
    DLI_DB_OR_LTERM_NAME("DLI_DB_OR_LTERM_NAME"),
    
    DLI_SEGMENT_NAME("DLI_SEGMENT_NAME"),
    
    IIB_LABEL("IIB_LABEL"),
    
    IIB_NODE("IIB_NODE"),
    
    IMS_TRANSACTION_CALL_TYPE("IMS_TRANSACTION_CALL_TYPE"),
    
    METHOD_PARAM("METHOD_PARAM"),
    
    MQ_CORRELATION_ID("MQ_CORRELATION_ID"),
    
    MQ_MESSAGE_ID("MQ_MESSAGE_ID"),
    
    MQ_MESSAGE_SIZE("MQ_MESSAGE_SIZE"),
    
    POST_PARAMETER("POST_PARAMETER"),
    
    QUERY_PARAMETER("QUERY_PARAMETER"),
    
    REQUEST_HEADER("REQUEST_HEADER"),
    
    RESPONSE_HEADER("RESPONSE_HEADER"),
    
    SERVER_VARIABLE("SERVER_VARIABLE"),
    
    SESSION_ATTRIBUTE("SESSION_ATTRIBUTE"),
    
    SPAN_ATTRIBUTE("SPAN_ATTRIBUTE"),
    
    URI("URI"),
    
    URI_PATH("URI_PATH"),
    
    WEBSERVICE_METHOD("WEBSERVICE_METHOD"),
    
    WEBSERVICE_NAME("WEBSERVICE_NAME");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  private SourceEnum source;

  public static final String JSON_PROPERTY_VALUE_PROCESSING = "valueProcessing";
  private ValueProcessing valueProcessing;

  /**
   * The technology of the method to capture if the **source** value is &#x60;METHOD_PARAM&#x60;. \\n\\n Not applicable in other cases.
   */
  public enum TechnologyEnum {
    DOTNET("DOTNET"),
    
    JAVA("JAVA"),
    
    PHP("PHP");

    private String value;

    TechnologyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TechnologyEnum fromValue(String value) {
      for (TechnologyEnum b : TechnologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TECHNOLOGY = "technology";
  private TechnologyEnum technology;

  /**
   * The technology of the session attribute to capture if the **source** value is &#x60;SESSION_ATTRIBUTE&#x60;. \\n\\n Not applicable in other cases.
   */
  public enum SessionAttributeTechnologyEnum {
    ASP_NET("ASP_NET"),
    
    ASP_NET_CORE("ASP_NET_CORE"),
    
    JAVA("JAVA"),
    
    PHP("PHP");

    private String value;

    SessionAttributeTechnologyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SessionAttributeTechnologyEnum fromValue(String value) {
      for (SessionAttributeTechnologyEnum b : SessionAttributeTechnologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SESSION_ATTRIBUTE_TECHNOLOGY = "sessionAttributeTechnology";
  private SessionAttributeTechnologyEnum sessionAttributeTechnology;

  /**
   * The technology of the server variable to capture if the **source** value is &#x60;SERVER_VARIABLE&#x60;. \\n\\n Not applicable in other cases.
   */
  public enum ServerVariableTechnologyEnum {
    ASP_NET("ASP_NET");

    private String value;

    ServerVariableTechnologyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServerVariableTechnologyEnum fromValue(String value) {
      for (ServerVariableTechnologyEnum b : ServerVariableTechnologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERVER_VARIABLE_TECHNOLOGY = "serverVariableTechnology";
  private ServerVariableTechnologyEnum serverVariableTechnology;

  public static final String JSON_PROPERTY_METHODS = "methods";
  private List<CapturedMethod> methods = null;

  public static final String JSON_PROPERTY_PARAMETER_NAME = "parameterName";
  private String parameterName;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private ScopeConditions scope;

  /**
   * Specifies the location where the values are captured and stored.   Required if the **source** is one of the following: &#x60;GET_PARAMETER&#x60;, &#x60;URI&#x60;, &#x60;REQUEST_HEADER&#x60;, &#x60;RESPONSE_HEADER&#x60;.    Not applicable in other cases.    If the **source** value is &#x60;REQUEST_HEADER&#x60; or &#x60;RESPONSE_HEADER&#x60;, the &#x60;CAPTURE_AND_STORE_ON_BOTH&#x60; location is not allowed.
   */
  public enum CapturingAndStorageLocationEnum {
    AND_STORE_ON_BOTH("CAPTURE_AND_STORE_ON_BOTH"),
    
    AND_STORE_ON_CLIENT("CAPTURE_AND_STORE_ON_CLIENT"),
    
    AND_STORE_ON_SERVER("CAPTURE_AND_STORE_ON_SERVER"),
    
    ON_CLIENT_STORE_ON_SERVER("CAPTURE_ON_CLIENT_STORE_ON_SERVER");

    private String value;

    CapturingAndStorageLocationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CapturingAndStorageLocationEnum fromValue(String value) {
      for (CapturingAndStorageLocationEnum b : CapturingAndStorageLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CAPTURING_AND_STORAGE_LOCATION = "capturingAndStorageLocation";
  private CapturingAndStorageLocationEnum capturingAndStorageLocation;

  /**
   * The IBM integration bus node type for which the value is captured.   This or &#x60;iibMethodNodeCondition&#x60; is required if the **source** is: &#x60;IIB_NODE&#x60;.   Not applicable in other cases.
   */
  public enum IibNodeTypeEnum {
    AGGREGATE_CONTROL_NODE("AGGREGATE_CONTROL_NODE"),
    
    AGGREGATE_REPLY_NODE("AGGREGATE_REPLY_NODE"),
    
    AGGREGATE_REQUEST_NODE("AGGREGATE_REQUEST_NODE"),
    
    CALLABLE_FLOW_REPLY_NODE("CALLABLE_FLOW_REPLY_NODE"),
    
    COLLECTOR_NODE("COLLECTOR_NODE"),
    
    COMPUTE_NODE("COMPUTE_NODE"),
    
    DATABASE_NODE("DATABASE_NODE"),
    
    DATABASE_RETRIEVE_NODE("DATABASE_RETRIEVE_NODE"),
    
    DATABASE_ROUTE_NODE("DATABASE_ROUTE_NODE"),
    
    DECISION_SERVICE_NODE("DECISION_SERVICE_NODE"),
    
    DOT_NET_COMPUTE_NODE("DOT_NET_COMPUTE_NODE"),
    
    FILE_READ_NODE("FILE_READ_NODE"),
    
    FILTER_NODE("FILTER_NODE"),
    
    FLOW_ORDER_NODE("FLOW_ORDER_NODE"),
    
    GROUP_COMPLETE_NODE("GROUP_COMPLETE_NODE"),
    
    GROUP_GATHER_NODE("GROUP_GATHER_NODE"),
    
    GROUP_SCATTER_NODE("GROUP_SCATTER_NODE"),
    
    HTTP_ASYNC_REQUEST("HTTP_ASYNC_REQUEST"),
    
    HTTP_ASYNC_RESPONSE("HTTP_ASYNC_RESPONSE"),
    
    HTTP_HEADER("HTTP_HEADER"),
    
    HTTP_INPUT("HTTP_INPUT"),
    
    HTTP_REPLY("HTTP_REPLY"),
    
    HTTP_REQUEST("HTTP_REQUEST"),
    
    JAVA_COMPUTE_NODE("JAVA_COMPUTE_NODE"),
    
    JMS_CLIENT_RECEIVE("JMS_CLIENT_RECEIVE"),
    
    JMS_CLIENT_REPLY_NODE("JMS_CLIENT_REPLY_NODE"),
    
    JMS_HEADER("JMS_HEADER"),
    
    JMS_INPUT_NODE("JMS_INPUT_NODE"),
    
    JMS_OUTPUT_NODE("JMS_OUTPUT_NODE"),
    
    JMS_REPLY_NODE("JMS_REPLY_NODE"),
    
    MQ_GET_NODE("MQ_GET_NODE"),
    
    MQ_INPUT_NODE("MQ_INPUT_NODE"),
    
    MQ_OUTPUT_NODE("MQ_OUTPUT_NODE"),
    
    MQ_REPLY_NODE("MQ_REPLY_NODE"),
    
    PASSTHRU_NODE("PASSTHRU_NODE"),
    
    PUBLICATION_NODE("PUBLICATION_NODE"),
    
    RESET_CONTENT_DESCRIPTOR_NODE("RESET_CONTENT_DESCRIPTOR_NODE"),
    
    REST_ASYNC_REQUEST_NODE("REST_ASYNC_REQUEST_NODE"),
    
    REST_ASYNC_RESPONSE_NODE("REST_ASYNC_RESPONSE_NODE"),
    
    REST_REQUEST_NODE("REST_REQUEST_NODE"),
    
    RE_SEQUENCE_NODE("RE_SEQUENCE_NODE"),
    
    ROUTE_NODE("ROUTE_NODE"),
    
    SAP_REPLY_NODE("SAP_REPLY_NODE"),
    
    SCA_REPLY_NODE("SCA_REPLY_NODE"),
    
    SECURITY_PEP("SECURITY_PEP"),
    
    SEQUENCE_NODE("SEQUENCE_NODE"),
    
    SOAP_ASYNC_REQUEST_NODE("SOAP_ASYNC_REQUEST_NODE"),
    
    SOAP_ASYNC_RESPONSE_NODE("SOAP_ASYNC_RESPONSE_NODE"),
    
    SOAP_EXTRACT_NODE("SOAP_EXTRACT_NODE"),
    
    SOAP_INPUT_NODE("SOAP_INPUT_NODE"),
    
    SOAP_REPLY_NODE("SOAP_REPLY_NODE"),
    
    SOAP_REQUEST_NODE("SOAP_REQUEST_NODE"),
    
    SOAP_WRAPPER_NODE("SOAP_WRAPPER_NODE"),
    
    SR_RETRIEVE_ENTITY_NODE("SR_RETRIEVE_ENTITY_NODE"),
    
    SR_RETRIEVE_IT_SERVICE_NODE("SR_RETRIEVE_IT_SERVICE_NODE"),
    
    THROW_NODE("THROW_NODE"),
    
    TRACE_NODE("TRACE_NODE"),
    
    TRY_CATCH_NODE("TRY_CATCH_NODE"),
    
    VALIDATE_NODE("VALIDATE_NODE"),
    
    WS_REPLY_NODE("WS_REPLY_NODE"),
    
    XSL_MQSI_NODE("XSL_MQSI_NODE");

    private String value;

    IibNodeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IibNodeTypeEnum fromValue(String value) {
      for (IibNodeTypeEnum b : IibNodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IIB_NODE_TYPE = "iibNodeType";
  private IibNodeTypeEnum iibNodeType;

  public static final String JSON_PROPERTY_IIB_METHOD_NODE_CONDITION = "iibMethodNodeCondition";
  private ValueCondition iibMethodNodeCondition;

  public static final String JSON_PROPERTY_CICS_S_D_K_METHOD_NODE_CONDITION = "cicsSDKMethodNodeCondition";
  private ValueCondition cicsSDKMethodNodeCondition;

  public static final String JSON_PROPERTY_IIB_LABEL_METHOD_NODE_CONDITION = "iibLabelMethodNodeCondition";
  private ValueCondition iibLabelMethodNodeCondition;

  public static final String JSON_PROPERTY_SPAN_ATTRIBUTE_KEY = "spanAttributeKey";
  private String spanAttributeKey;

  /**
   * CICS transaction call type condition for which the value is captured.   Required if the **source** is: &#x60;CICS_TRANSACTION_CALL_TYPE&#x60;.   Not applicable in other cases.
   */
  public enum CicsTransactionCallTypeEnum {
    CTG("CTG"),
    
    DPL("DPL"),
    
    EXPLICIT_ADK("EXPLICIT_ADK"),
    
    HTTP("HTTP"),
    
    IMS_CONNECT("IMS_CONNECT"),
    
    IMS_CONNECT_API("IMS_CONNECT_API"),
    
    IMS_ITRA("IMS_ITRA"),
    
    IMS_MSC("IMS_MSC"),
    
    IMS_PGM_SWITCH("IMS_PGM_SWITCH"),
    
    IMS_SHARED_QUEUES("IMS_SHARED_QUEUES"),
    
    IMS_TRANS_EXEC("IMS_TRANS_EXEC"),
    
    MQ("MQ"),
    
    SOAP("SOAP"),
    
    START("START"),
    
    TTX("TTX"),
    
    TX("TX"),
    
    UNKNOWN("UNKNOWN"),
    
    ZOS_CONNECT("ZOS_CONNECT");

    private String value;

    CicsTransactionCallTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CicsTransactionCallTypeEnum fromValue(String value) {
      for (CicsTransactionCallTypeEnum b : CicsTransactionCallTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CICS_TRANSACTION_CALL_TYPE = "cicsTransactionCallType";
  private CicsTransactionCallTypeEnum cicsTransactionCallType;

  /**
   * IMS transaction call type condition for which the value is captured.   Required if the **source** is: &#x60;IMS_TRANSACTION_CALL_TYPE&#x60;.   Not applicable in other cases.
   */
  public enum ImsTransactionCallTypeEnum {
    CTG("CTG"),
    
    DPL("DPL"),
    
    EXPLICIT_ADK("EXPLICIT_ADK"),
    
    HTTP("HTTP"),
    
    IMS_CONNECT("IMS_CONNECT"),
    
    IMS_CONNECT_API("IMS_CONNECT_API"),
    
    IMS_ITRA("IMS_ITRA"),
    
    IMS_MSC("IMS_MSC"),
    
    IMS_PGM_SWITCH("IMS_PGM_SWITCH"),
    
    IMS_SHARED_QUEUES("IMS_SHARED_QUEUES"),
    
    IMS_TRANS_EXEC("IMS_TRANS_EXEC"),
    
    MQ("MQ"),
    
    SOAP("SOAP"),
    
    START("START"),
    
    TTX("TTX"),
    
    TX("TX"),
    
    UNKNOWN("UNKNOWN"),
    
    ZOS_CONNECT("ZOS_CONNECT");

    private String value;

    ImsTransactionCallTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImsTransactionCallTypeEnum fromValue(String value) {
      for (ImsTransactionCallTypeEnum b : ImsTransactionCallTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IMS_TRANSACTION_CALL_TYPE = "imsTransactionCallType";
  private ImsTransactionCallTypeEnum imsTransactionCallType;

  public DataSource() { 
  }

  public DataSource enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The data source is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The data source is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DataSource source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**.
   * @return source
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**.")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SourceEnum getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(SourceEnum source) {
    this.source = source;
  }


  public DataSource valueProcessing(ValueProcessing valueProcessing) {
    this.valueProcessing = valueProcessing;
    return this;
  }

   /**
   * Get valueProcessing
   * @return valueProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueProcessing getValueProcessing() {
    return valueProcessing;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueProcessing(ValueProcessing valueProcessing) {
    this.valueProcessing = valueProcessing;
  }


  public DataSource technology(TechnologyEnum technology) {
    this.technology = technology;
    return this;
  }

   /**
   * The technology of the method to capture if the **source** value is &#x60;METHOD_PARAM&#x60;. \\n\\n Not applicable in other cases.
   * @return technology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The technology of the method to capture if the **source** value is `METHOD_PARAM`. \\n\\n Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TechnologyEnum getTechnology() {
    return technology;
  }


  @JsonProperty(JSON_PROPERTY_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTechnology(TechnologyEnum technology) {
    this.technology = technology;
  }


  public DataSource sessionAttributeTechnology(SessionAttributeTechnologyEnum sessionAttributeTechnology) {
    this.sessionAttributeTechnology = sessionAttributeTechnology;
    return this;
  }

   /**
   * The technology of the session attribute to capture if the **source** value is &#x60;SESSION_ATTRIBUTE&#x60;. \\n\\n Not applicable in other cases.
   * @return sessionAttributeTechnology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`. \\n\\n Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_SESSION_ATTRIBUTE_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SessionAttributeTechnologyEnum getSessionAttributeTechnology() {
    return sessionAttributeTechnology;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_ATTRIBUTE_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionAttributeTechnology(SessionAttributeTechnologyEnum sessionAttributeTechnology) {
    this.sessionAttributeTechnology = sessionAttributeTechnology;
  }


  public DataSource serverVariableTechnology(ServerVariableTechnologyEnum serverVariableTechnology) {
    this.serverVariableTechnology = serverVariableTechnology;
    return this;
  }

   /**
   * The technology of the server variable to capture if the **source** value is &#x60;SERVER_VARIABLE&#x60;. \\n\\n Not applicable in other cases.
   * @return serverVariableTechnology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The technology of the server variable to capture if the **source** value is `SERVER_VARIABLE`. \\n\\n Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_SERVER_VARIABLE_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServerVariableTechnologyEnum getServerVariableTechnology() {
    return serverVariableTechnology;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_VARIABLE_TECHNOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerVariableTechnology(ServerVariableTechnologyEnum serverVariableTechnology) {
    this.serverVariableTechnology = serverVariableTechnology;
  }


  public DataSource methods(List<CapturedMethod> methods) {
    this.methods = methods;
    return this;
  }

  public DataSource addMethodsItem(CapturedMethod methodsItem) {
    if (this.methods == null) {
      this.methods = new ArrayList<>();
    }
    this.methods.add(methodsItem);
    return this;
  }

   /**
   * The method specification if the **source** value is &#x60;METHOD_PARAM&#x60;.    Not applicable in other cases.
   * @return methods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The method specification if the **source** value is `METHOD_PARAM`.    Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_METHODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CapturedMethod> getMethods() {
    return methods;
  }


  @JsonProperty(JSON_PROPERTY_METHODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethods(List<CapturedMethod> methods) {
    this.methods = methods;
  }


  public DataSource parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

   /**
   * The name of the web request parameter to capture.   Required if the **source** is one of the following: &#x60;POST_PARAMETER&#x60;, &#x60;GET_PARAMETER&#x60;, &#x60;REQUEST_HEADER&#x60;, &#x60;RESPONSE_HEADER&#x60;, &#x60;CUSTOM_ATTRIBUTE&#x60;.   Not applicable in other cases.
   * @return parameterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the web request parameter to capture.   Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.   Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_PARAMETER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParameterName() {
    return parameterName;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public DataSource scope(ScopeConditions scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScopeConditions getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(ScopeConditions scope) {
    this.scope = scope;
  }


  public DataSource capturingAndStorageLocation(CapturingAndStorageLocationEnum capturingAndStorageLocation) {
    this.capturingAndStorageLocation = capturingAndStorageLocation;
    return this;
  }

   /**
   * Specifies the location where the values are captured and stored.   Required if the **source** is one of the following: &#x60;GET_PARAMETER&#x60;, &#x60;URI&#x60;, &#x60;REQUEST_HEADER&#x60;, &#x60;RESPONSE_HEADER&#x60;.    Not applicable in other cases.    If the **source** value is &#x60;REQUEST_HEADER&#x60; or &#x60;RESPONSE_HEADER&#x60;, the &#x60;CAPTURE_AND_STORE_ON_BOTH&#x60; location is not allowed.
   * @return capturingAndStorageLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the location where the values are captured and stored.   Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.    Not applicable in other cases.    If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed.")
  @JsonProperty(JSON_PROPERTY_CAPTURING_AND_STORAGE_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CapturingAndStorageLocationEnum getCapturingAndStorageLocation() {
    return capturingAndStorageLocation;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURING_AND_STORAGE_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapturingAndStorageLocation(CapturingAndStorageLocationEnum capturingAndStorageLocation) {
    this.capturingAndStorageLocation = capturingAndStorageLocation;
  }


  public DataSource iibNodeType(IibNodeTypeEnum iibNodeType) {
    this.iibNodeType = iibNodeType;
    return this;
  }

   /**
   * The IBM integration bus node type for which the value is captured.   This or &#x60;iibMethodNodeCondition&#x60; is required if the **source** is: &#x60;IIB_NODE&#x60;.   Not applicable in other cases.
   * @return iibNodeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IBM integration bus node type for which the value is captured.   This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.   Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_IIB_NODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IibNodeTypeEnum getIibNodeType() {
    return iibNodeType;
  }


  @JsonProperty(JSON_PROPERTY_IIB_NODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIibNodeType(IibNodeTypeEnum iibNodeType) {
    this.iibNodeType = iibNodeType;
  }


  public DataSource iibMethodNodeCondition(ValueCondition iibMethodNodeCondition) {
    this.iibMethodNodeCondition = iibMethodNodeCondition;
    return this;
  }

   /**
   * Get iibMethodNodeCondition
   * @return iibMethodNodeCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IIB_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueCondition getIibMethodNodeCondition() {
    return iibMethodNodeCondition;
  }


  @JsonProperty(JSON_PROPERTY_IIB_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIibMethodNodeCondition(ValueCondition iibMethodNodeCondition) {
    this.iibMethodNodeCondition = iibMethodNodeCondition;
  }


  public DataSource cicsSDKMethodNodeCondition(ValueCondition cicsSDKMethodNodeCondition) {
    this.cicsSDKMethodNodeCondition = cicsSDKMethodNodeCondition;
    return this;
  }

   /**
   * Get cicsSDKMethodNodeCondition
   * @return cicsSDKMethodNodeCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CICS_S_D_K_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueCondition getCicsSDKMethodNodeCondition() {
    return cicsSDKMethodNodeCondition;
  }


  @JsonProperty(JSON_PROPERTY_CICS_S_D_K_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCicsSDKMethodNodeCondition(ValueCondition cicsSDKMethodNodeCondition) {
    this.cicsSDKMethodNodeCondition = cicsSDKMethodNodeCondition;
  }


  public DataSource iibLabelMethodNodeCondition(ValueCondition iibLabelMethodNodeCondition) {
    this.iibLabelMethodNodeCondition = iibLabelMethodNodeCondition;
    return this;
  }

   /**
   * Get iibLabelMethodNodeCondition
   * @return iibLabelMethodNodeCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IIB_LABEL_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueCondition getIibLabelMethodNodeCondition() {
    return iibLabelMethodNodeCondition;
  }


  @JsonProperty(JSON_PROPERTY_IIB_LABEL_METHOD_NODE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIibLabelMethodNodeCondition(ValueCondition iibLabelMethodNodeCondition) {
    this.iibLabelMethodNodeCondition = iibLabelMethodNodeCondition;
  }


  public DataSource spanAttributeKey(String spanAttributeKey) {
    this.spanAttributeKey = spanAttributeKey;
    return this;
  }

   /**
   * The key of the span attribute to capture.   Required if the **source** is: &#x60;SPAN_ATTRIBUTE&#x60;.   Not applicable in other cases.
   * @return spanAttributeKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the span attribute to capture.   Required if the **source** is: `SPAN_ATTRIBUTE`.   Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_SPAN_ATTRIBUTE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpanAttributeKey() {
    return spanAttributeKey;
  }


  @JsonProperty(JSON_PROPERTY_SPAN_ATTRIBUTE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpanAttributeKey(String spanAttributeKey) {
    this.spanAttributeKey = spanAttributeKey;
  }


  public DataSource cicsTransactionCallType(CicsTransactionCallTypeEnum cicsTransactionCallType) {
    this.cicsTransactionCallType = cicsTransactionCallType;
    return this;
  }

   /**
   * CICS transaction call type condition for which the value is captured.   Required if the **source** is: &#x60;CICS_TRANSACTION_CALL_TYPE&#x60;.   Not applicable in other cases.
   * @return cicsTransactionCallType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CICS transaction call type condition for which the value is captured.   Required if the **source** is: `CICS_TRANSACTION_CALL_TYPE`.   Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_CICS_TRANSACTION_CALL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CicsTransactionCallTypeEnum getCicsTransactionCallType() {
    return cicsTransactionCallType;
  }


  @JsonProperty(JSON_PROPERTY_CICS_TRANSACTION_CALL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCicsTransactionCallType(CicsTransactionCallTypeEnum cicsTransactionCallType) {
    this.cicsTransactionCallType = cicsTransactionCallType;
  }


  public DataSource imsTransactionCallType(ImsTransactionCallTypeEnum imsTransactionCallType) {
    this.imsTransactionCallType = imsTransactionCallType;
    return this;
  }

   /**
   * IMS transaction call type condition for which the value is captured.   Required if the **source** is: &#x60;IMS_TRANSACTION_CALL_TYPE&#x60;.   Not applicable in other cases.
   * @return imsTransactionCallType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IMS transaction call type condition for which the value is captured.   Required if the **source** is: `IMS_TRANSACTION_CALL_TYPE`.   Not applicable in other cases.")
  @JsonProperty(JSON_PROPERTY_IMS_TRANSACTION_CALL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImsTransactionCallTypeEnum getImsTransactionCallType() {
    return imsTransactionCallType;
  }


  @JsonProperty(JSON_PROPERTY_IMS_TRANSACTION_CALL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImsTransactionCallType(ImsTransactionCallTypeEnum imsTransactionCallType) {
    this.imsTransactionCallType = imsTransactionCallType;
  }


  /**
   * Return true if this DataSource object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSource dataSource = (DataSource) o;
    return Objects.equals(this.enabled, dataSource.enabled) &&
        Objects.equals(this.source, dataSource.source) &&
        Objects.equals(this.valueProcessing, dataSource.valueProcessing) &&
        Objects.equals(this.technology, dataSource.technology) &&
        Objects.equals(this.sessionAttributeTechnology, dataSource.sessionAttributeTechnology) &&
        Objects.equals(this.serverVariableTechnology, dataSource.serverVariableTechnology) &&
        Objects.equals(this.methods, dataSource.methods) &&
        Objects.equals(this.parameterName, dataSource.parameterName) &&
        Objects.equals(this.scope, dataSource.scope) &&
        Objects.equals(this.capturingAndStorageLocation, dataSource.capturingAndStorageLocation) &&
        Objects.equals(this.iibNodeType, dataSource.iibNodeType) &&
        Objects.equals(this.iibMethodNodeCondition, dataSource.iibMethodNodeCondition) &&
        Objects.equals(this.cicsSDKMethodNodeCondition, dataSource.cicsSDKMethodNodeCondition) &&
        Objects.equals(this.iibLabelMethodNodeCondition, dataSource.iibLabelMethodNodeCondition) &&
        Objects.equals(this.spanAttributeKey, dataSource.spanAttributeKey) &&
        Objects.equals(this.cicsTransactionCallType, dataSource.cicsTransactionCallType) &&
        Objects.equals(this.imsTransactionCallType, dataSource.imsTransactionCallType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, source, valueProcessing, technology, sessionAttributeTechnology, serverVariableTechnology, methods, parameterName, scope, capturingAndStorageLocation, iibNodeType, iibMethodNodeCondition, cicsSDKMethodNodeCondition, iibLabelMethodNodeCondition, spanAttributeKey, cicsTransactionCallType, imsTransactionCallType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSource {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    valueProcessing: ").append(toIndentedString(valueProcessing)).append("\n");
    sb.append("    technology: ").append(toIndentedString(technology)).append("\n");
    sb.append("    sessionAttributeTechnology: ").append(toIndentedString(sessionAttributeTechnology)).append("\n");
    sb.append("    serverVariableTechnology: ").append(toIndentedString(serverVariableTechnology)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    capturingAndStorageLocation: ").append(toIndentedString(capturingAndStorageLocation)).append("\n");
    sb.append("    iibNodeType: ").append(toIndentedString(iibNodeType)).append("\n");
    sb.append("    iibMethodNodeCondition: ").append(toIndentedString(iibMethodNodeCondition)).append("\n");
    sb.append("    cicsSDKMethodNodeCondition: ").append(toIndentedString(cicsSDKMethodNodeCondition)).append("\n");
    sb.append("    iibLabelMethodNodeCondition: ").append(toIndentedString(iibLabelMethodNodeCondition)).append("\n");
    sb.append("    spanAttributeKey: ").append(toIndentedString(spanAttributeKey)).append("\n");
    sb.append("    cicsTransactionCallType: ").append(toIndentedString(cicsTransactionCallType)).append("\n");
    sb.append("    imsTransactionCallType: ").append(toIndentedString(imsTransactionCallType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

