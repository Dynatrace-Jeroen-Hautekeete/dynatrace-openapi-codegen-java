/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Rules for javascript injection
 */
@ApiModel(description = "Rules for javascript injection")
@JsonPropertyOrder({
  JavaScriptInjectionRules.JSON_PROPERTY_ENABLED,
  JavaScriptInjectionRules.JSON_PROPERTY_URL_OPERATOR,
  JavaScriptInjectionRules.JSON_PROPERTY_URL_PATTERN,
  JavaScriptInjectionRules.JSON_PROPERTY_RULE,
  JavaScriptInjectionRules.JSON_PROPERTY_HTML_PATTERN,
  JavaScriptInjectionRules.JSON_PROPERTY_TARGET
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class JavaScriptInjectionRules {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * The url operator of the java script injection.
   */
  public enum UrlOperatorEnum {
    ALL_PAGES("ALL_PAGES"),
    
    CONTAINS("CONTAINS"),
    
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    STARTS_WITH("STARTS_WITH");

    private String value;

    UrlOperatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UrlOperatorEnum fromValue(String value) {
      for (UrlOperatorEnum b : UrlOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_URL_OPERATOR = "urlOperator";
  private UrlOperatorEnum urlOperator;

  public static final String JSON_PROPERTY_URL_PATTERN = "urlPattern";
  private String urlPattern;

  /**
   * The url rule of the java script injection.
   */
  public enum RuleEnum {
    AFTER_SPECIFIC_HTML("AFTER_SPECIFIC_HTML"),
    
    AUTOMATIC_INJECTION("AUTOMATIC_INJECTION"),
    
    BEFORE_SPECIFIC_HTML("BEFORE_SPECIFIC_HTML"),
    
    DO_NOT_INJECT("DO_NOT_INJECT");

    private String value;

    RuleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RuleEnum fromValue(String value) {
      for (RuleEnum b : RuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RULE = "rule";
  private RuleEnum rule;

  public static final String JSON_PROPERTY_HTML_PATTERN = "htmlPattern";
  private String htmlPattern;

  /**
   * The target against which the rule of the java script injection should be matched.
   */
  public enum TargetEnum {
    PAGE_QUERY("PAGE_QUERY"),
    
    URL("URL");

    private String value;

    TargetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TargetEnum fromValue(String value) {
      for (TargetEnum b : TargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TARGET = "target";
  private TargetEnum target;

  public JavaScriptInjectionRules() { 
  }

  public JavaScriptInjectionRules enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The enable or disable rule of the java script injection.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The enable or disable rule of the java script injection.")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public JavaScriptInjectionRules urlOperator(UrlOperatorEnum urlOperator) {
    this.urlOperator = urlOperator;
    return this;
  }

   /**
   * The url operator of the java script injection.
   * @return urlOperator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url operator of the java script injection.")
  @JsonProperty(JSON_PROPERTY_URL_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UrlOperatorEnum getUrlOperator() {
    return urlOperator;
  }


  @JsonProperty(JSON_PROPERTY_URL_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrlOperator(UrlOperatorEnum urlOperator) {
    this.urlOperator = urlOperator;
  }


  public JavaScriptInjectionRules urlPattern(String urlPattern) {
    this.urlPattern = urlPattern;
    return this;
  }

   /**
   * The url pattern of the java script injection.
   * @return urlPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The url pattern of the java script injection.")
  @JsonProperty(JSON_PROPERTY_URL_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrlPattern() {
    return urlPattern;
  }


  @JsonProperty(JSON_PROPERTY_URL_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrlPattern(String urlPattern) {
    this.urlPattern = urlPattern;
  }


  public JavaScriptInjectionRules rule(RuleEnum rule) {
    this.rule = rule;
    return this;
  }

   /**
   * The url rule of the java script injection.
   * @return rule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The url rule of the java script injection.")
  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RuleEnum getRule() {
    return rule;
  }


  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRule(RuleEnum rule) {
    this.rule = rule;
  }


  public JavaScriptInjectionRules htmlPattern(String htmlPattern) {
    this.htmlPattern = htmlPattern;
    return this;
  }

   /**
   * The html pattern of the java script injection.
   * @return htmlPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The html pattern of the java script injection.")
  @JsonProperty(JSON_PROPERTY_HTML_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtmlPattern() {
    return htmlPattern;
  }


  @JsonProperty(JSON_PROPERTY_HTML_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtmlPattern(String htmlPattern) {
    this.htmlPattern = htmlPattern;
  }


  public JavaScriptInjectionRules target(TargetEnum target) {
    this.target = target;
    return this;
  }

   /**
   * The target against which the rule of the java script injection should be matched.
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The target against which the rule of the java script injection should be matched.")
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TargetEnum getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  /**
   * Return true if this JavaScriptInjectionRules object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JavaScriptInjectionRules javaScriptInjectionRules = (JavaScriptInjectionRules) o;
    return Objects.equals(this.enabled, javaScriptInjectionRules.enabled) &&
        Objects.equals(this.urlOperator, javaScriptInjectionRules.urlOperator) &&
        Objects.equals(this.urlPattern, javaScriptInjectionRules.urlPattern) &&
        Objects.equals(this.rule, javaScriptInjectionRules.rule) &&
        Objects.equals(this.htmlPattern, javaScriptInjectionRules.htmlPattern) &&
        Objects.equals(this.target, javaScriptInjectionRules.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, urlOperator, urlPattern, rule, htmlPattern, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JavaScriptInjectionRules {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    urlOperator: ").append(toIndentedString(urlOperator)).append("\n");
    sb.append("    urlPattern: ").append(toIndentedString(urlPattern)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    htmlPattern: ").append(toIndentedString(htmlPattern)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

