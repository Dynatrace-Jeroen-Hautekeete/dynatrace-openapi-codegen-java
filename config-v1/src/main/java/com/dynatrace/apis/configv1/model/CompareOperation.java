/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.EndsWithCompareOperation;
import com.dynatrace.apis.configv1.model.EqualsCompareOperation;
import com.dynatrace.apis.configv1.model.ExistsCompareOperation;
import com.dynatrace.apis.configv1.model.GreaterThanCompareOperation;
import com.dynatrace.apis.configv1.model.IntEqualsCompareOperation;
import com.dynatrace.apis.configv1.model.IpInRangeCompareOperation;
import com.dynatrace.apis.configv1.model.LessThanCompareOperation;
import com.dynatrace.apis.configv1.model.StartsWithCompareOperation;
import com.dynatrace.apis.configv1.model.StringContainsCompareOperation;
import com.dynatrace.apis.configv1.model.StringEqualsCompareOperation;
import com.dynatrace.apis.configv1.model.TagCompareOperation;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * The condition of the rule.   The actual set of fields depends on the type of the condition. Find the list of actual objects in the description of the **type** field or see [Service detection API - JSON models](https://dt-url.net/2ie3slq).
 */
@ApiModel(description = "The condition of the rule.   The actual set of fields depends on the type of the condition. Find the list of actual objects in the description of the **type** field or see [Service detection API - JSON models](https://dt-url.net/2ie3slq).")
@JsonPropertyOrder({
  CompareOperation.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EndsWithCompareOperation.class, name = "EndsWithCompareOperation"),
  @JsonSubTypes.Type(value = EqualsCompareOperation.class, name = "EqualsCompareOperation"),
  @JsonSubTypes.Type(value = ExistsCompareOperation.class, name = "ExistsCompareOperation"),
  @JsonSubTypes.Type(value = GreaterThanCompareOperation.class, name = "GreaterThanCompareOperation"),
  @JsonSubTypes.Type(value = IntEqualsCompareOperation.class, name = "IntEqualsCompareOperation"),
  @JsonSubTypes.Type(value = IpInRangeCompareOperation.class, name = "IpInRangeCompareOperation"),
  @JsonSubTypes.Type(value = LessThanCompareOperation.class, name = "LessThanCompareOperation"),
  @JsonSubTypes.Type(value = StartsWithCompareOperation.class, name = "StartsWithCompareOperation"),
  @JsonSubTypes.Type(value = StringContainsCompareOperation.class, name = "StringContainsCompareOperation"),
  @JsonSubTypes.Type(value = StringEqualsCompareOperation.class, name = "StringEqualsCompareOperation"),
  @JsonSubTypes.Type(value = TagCompareOperation.class, name = "TagCompareOperation"),
})

public class CompareOperation {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EQUALS&#x60; -&gt; EqualsCompareOperation  * &#x60;STRING_CONTAINS&#x60; -&gt; StringContainsCompareOperation  * &#x60;STARTS_WITH&#x60; -&gt; StartsWithCompareOperation  * &#x60;ENDS_WITH&#x60; -&gt; EndsWithCompareOperation  * &#x60;EXISTS&#x60; -&gt; ExistsCompareOperation  * &#x60;IP_IN_RANGE&#x60; -&gt; IpInRangeCompareOperation  * &#x60;LESS_THAN&#x60; -&gt; LessThanCompareOperation  * &#x60;GREATER_THAN&#x60; -&gt; GreaterThanCompareOperation  * &#x60;INT_EQUALS&#x60; -&gt; IntEqualsCompareOperation  * &#x60;STRING_EQUALS&#x60; -&gt; StringEqualsCompareOperation  * &#x60;TAG&#x60; -&gt; TagCompareOperation  
   */
  public enum TypeEnum {
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    EXISTS("EXISTS"),
    
    GREATER_THAN("GREATER_THAN"),
    
    INT_EQUALS("INT_EQUALS"),
    
    IP_IN_RANGE("IP_IN_RANGE"),
    
    LESS_THAN("LESS_THAN"),
    
    STARTS_WITH("STARTS_WITH"),
    
    STRING_CONTAINS("STRING_CONTAINS"),
    
    STRING_EQUALS("STRING_EQUALS"),
    
    TAG("TAG");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public CompareOperation() { 
  }

  public CompareOperation type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EQUALS&#x60; -&gt; EqualsCompareOperation  * &#x60;STRING_CONTAINS&#x60; -&gt; StringContainsCompareOperation  * &#x60;STARTS_WITH&#x60; -&gt; StartsWithCompareOperation  * &#x60;ENDS_WITH&#x60; -&gt; EndsWithCompareOperation  * &#x60;EXISTS&#x60; -&gt; ExistsCompareOperation  * &#x60;IP_IN_RANGE&#x60; -&gt; IpInRangeCompareOperation  * &#x60;LESS_THAN&#x60; -&gt; LessThanCompareOperation  * &#x60;GREATER_THAN&#x60; -&gt; GreaterThanCompareOperation  * &#x60;INT_EQUALS&#x60; -&gt; IntEqualsCompareOperation  * &#x60;STRING_EQUALS&#x60; -&gt; StringEqualsCompareOperation  * &#x60;TAG&#x60; -&gt; TagCompareOperation  
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `EQUALS` -> EqualsCompareOperation  * `STRING_CONTAINS` -> StringContainsCompareOperation  * `STARTS_WITH` -> StartsWithCompareOperation  * `ENDS_WITH` -> EndsWithCompareOperation  * `EXISTS` -> ExistsCompareOperation  * `IP_IN_RANGE` -> IpInRangeCompareOperation  * `LESS_THAN` -> LessThanCompareOperation  * `GREATER_THAN` -> GreaterThanCompareOperation  * `INT_EQUALS` -> IntEqualsCompareOperation  * `STRING_EQUALS` -> StringEqualsCompareOperation  * `TAG` -> TagCompareOperation  ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this CompareOperation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompareOperation compareOperation = (CompareOperation) o;
    return Objects.equals(this.type, compareOperation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompareOperation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("EndsWithCompareOperation", EndsWithCompareOperation.class);
  mappings.put("EqualsCompareOperation", EqualsCompareOperation.class);
  mappings.put("ExistsCompareOperation", ExistsCompareOperation.class);
  mappings.put("GreaterThanCompareOperation", GreaterThanCompareOperation.class);
  mappings.put("IntEqualsCompareOperation", IntEqualsCompareOperation.class);
  mappings.put("IpInRangeCompareOperation", IpInRangeCompareOperation.class);
  mappings.put("LessThanCompareOperation", LessThanCompareOperation.class);
  mappings.put("StartsWithCompareOperation", StartsWithCompareOperation.class);
  mappings.put("StringContainsCompareOperation", StringContainsCompareOperation.class);
  mappings.put("StringEqualsCompareOperation", StringEqualsCompareOperation.class);
  mappings.put("TagCompareOperation", TagCompareOperation.class);
  mappings.put("CompareOperation", CompareOperation.class);
  JSON.registerDiscriminator(CompareOperation.class, "type", mappings);
}
}

