/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The entity-selector-based rule for auto tag usage. It allows tagging entities via an entity selector.
 */
@ApiModel(description = "The entity-selector-based rule for auto tag usage. It allows tagging entities via an entity selector.")
@JsonPropertyOrder({
  EntitySelectorBasedAutoTagRule.JSON_PROPERTY_ENABLED,
  EntitySelectorBasedAutoTagRule.JSON_PROPERTY_ENTITY_SELECTOR,
  EntitySelectorBasedAutoTagRule.JSON_PROPERTY_VALUE_FORMAT,
  EntitySelectorBasedAutoTagRule.JSON_PROPERTY_NORMALIZATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class EntitySelectorBasedAutoTagRule {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_ENTITY_SELECTOR = "entitySelector";
  private String entitySelector;

  public static final String JSON_PROPERTY_VALUE_FORMAT = "valueFormat";
  private String valueFormat;

  /**
   * Changes applied to the value after applying the value format. Default is LEAVE_TEXT_AS_IS.
   */
  public enum NormalizationEnum {
    LEAVE_TEXT_AS_IS("LEAVE_TEXT_AS_IS"),
    
    TO_LOWER_CASE("TO_LOWER_CASE"),
    
    TO_UPPER_CASE("TO_UPPER_CASE");

    private String value;

    NormalizationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NormalizationEnum fromValue(String value) {
      for (NormalizationEnum b : NormalizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_NORMALIZATION = "normalization";
  private JsonNullable<NormalizationEnum> normalization = JsonNullable.<NormalizationEnum>undefined();

  public EntitySelectorBasedAutoTagRule() { 
  }

  public EntitySelectorBasedAutoTagRule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The rule is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rule is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EntitySelectorBasedAutoTagRule entitySelector(String entitySelector) {
    this.entitySelector = entitySelector;
    return this;
  }

   /**
   * The entity selector string, by which the entities are selected.
   * @return entitySelector
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The entity selector string, by which the entities are selected.")
  @JsonProperty(JSON_PROPERTY_ENTITY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEntitySelector() {
    return entitySelector;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntitySelector(String entitySelector) {
    this.entitySelector = entitySelector;
  }


  public EntitySelectorBasedAutoTagRule valueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
    return this;
  }

   /**
   * The value of the entity-selector-based auto-tag. If specified, the tag is used in the &#x60;name:valueFormat&#x60; format.   For example, you can extend the &#x60;Infrastructure&#x60; tag to &#x60;Infrastructure:Windows&#x60; and &#x60;Infrastructure:Linux&#x60;.   
   * @return valueFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value of the entity-selector-based auto-tag. If specified, the tag is used in the `name:valueFormat` format.   For example, you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.   ")
  @JsonProperty(JSON_PROPERTY_VALUE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValueFormat() {
    return valueFormat;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
  }


  public EntitySelectorBasedAutoTagRule normalization(NormalizationEnum normalization) {
    this.normalization = JsonNullable.<NormalizationEnum>of(normalization);
    return this;
  }

   /**
   * Changes applied to the value after applying the value format. Default is LEAVE_TEXT_AS_IS.
   * @return normalization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Changes applied to the value after applying the value format. Default is LEAVE_TEXT_AS_IS.")
  @JsonIgnore

  public NormalizationEnum getNormalization() {
        return normalization.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<NormalizationEnum> getNormalization_JsonNullable() {
    return normalization;
  }
  
  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  public void setNormalization_JsonNullable(JsonNullable<NormalizationEnum> normalization) {
    this.normalization = normalization;
  }

  public void setNormalization(NormalizationEnum normalization) {
    this.normalization = JsonNullable.<NormalizationEnum>of(normalization);
  }


  /**
   * Return true if this EntitySelectorBasedAutoTagRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitySelectorBasedAutoTagRule entitySelectorBasedAutoTagRule = (EntitySelectorBasedAutoTagRule) o;
    return Objects.equals(this.enabled, entitySelectorBasedAutoTagRule.enabled) &&
        Objects.equals(this.entitySelector, entitySelectorBasedAutoTagRule.entitySelector) &&
        Objects.equals(this.valueFormat, entitySelectorBasedAutoTagRule.valueFormat) &&
        equalsNullable(this.normalization, entitySelectorBasedAutoTagRule.normalization);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, entitySelector, valueFormat, hashCodeNullable(normalization));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitySelectorBasedAutoTagRule {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    entitySelector: ").append(toIndentedString(entitySelector)).append("\n");
    sb.append("    valueFormat: ").append(toIndentedString(valueFormat)).append("\n");
    sb.append("    normalization: ").append(toIndentedString(normalization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

