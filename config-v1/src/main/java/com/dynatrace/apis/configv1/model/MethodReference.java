/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a method to be captured.
 */
@ApiModel(description = "Configuration of a method to be captured.")
@JsonPropertyOrder({
  MethodReference.JSON_PROPERTY_VISIBILITY,
  MethodReference.JSON_PROPERTY_MODIFIERS,
  MethodReference.JSON_PROPERTY_CLASS_NAME,
  MethodReference.JSON_PROPERTY_FILE_NAME,
  MethodReference.JSON_PROPERTY_FILE_NAME_MATCHER,
  MethodReference.JSON_PROPERTY_METHOD_NAME,
  MethodReference.JSON_PROPERTY_ARGUMENT_TYPES,
  MethodReference.JSON_PROPERTY_RETURN_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MethodReference {
  /**
   * The visibility of the method to capture.
   */
  public enum VisibilityEnum {
    INTERNAL("INTERNAL"),
    
    PACKAGE_PROTECTED("PACKAGE_PROTECTED"),
    
    PRIVATE("PRIVATE"),
    
    PROTECTED("PROTECTED"),
    
    PUBLIC("PUBLIC");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  /**
   * Gets or Sets modifiers
   */
  public enum ModifiersEnum {
    ABSTRACT("ABSTRACT"),
    
    EXTERN("EXTERN"),
    
    FINAL("FINAL"),
    
    NATIVE("NATIVE"),
    
    STATIC("STATIC");

    private String value;

    ModifiersEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModifiersEnum fromValue(String value) {
      for (ModifiersEnum b : ModifiersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODIFIERS = "modifiers";
  private Set<ModifiersEnum> modifiers = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_CLASS_NAME = "className";
  private String className;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  /**
   * The operator of the comparison.    If not set, &#x60;EQUALS&#x60; is used.
   */
  public enum FileNameMatcherEnum {
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    STARTS_WITH("STARTS_WITH");

    private String value;

    FileNameMatcherEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileNameMatcherEnum fromValue(String value) {
      for (FileNameMatcherEnum b : FileNameMatcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILE_NAME_MATCHER = "fileNameMatcher";
  private FileNameMatcherEnum fileNameMatcher;

  public static final String JSON_PROPERTY_METHOD_NAME = "methodName";
  private String methodName;

  public static final String JSON_PROPERTY_ARGUMENT_TYPES = "argumentTypes";
  private List<String> argumentTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_RETURN_TYPE = "returnType";
  private String returnType;

  public MethodReference() { 
  }

  public MethodReference visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * The visibility of the method to capture.
   * @return visibility
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The visibility of the method to capture.")
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public MethodReference modifiers(Set<ModifiersEnum> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public MethodReference addModifiersItem(ModifiersEnum modifiersItem) {
    this.modifiers.add(modifiersItem);
    return this;
  }

   /**
   * The modifiers of the method to capture.
   * @return modifiers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The modifiers of the method to capture.")
  @JsonProperty(JSON_PROPERTY_MODIFIERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<ModifiersEnum> getModifiers() {
    return modifiers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MODIFIERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiers(Set<ModifiersEnum> modifiers) {
    this.modifiers = modifiers;
  }


  public MethodReference className(String className) {
    this.className = className;
    return this;
  }

   /**
   * The class name where the method to capture resides.    Either this or the **fileName** must be set.
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The class name where the method to capture resides.    Either this or the **fileName** must be set.")
  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClassName() {
    return className;
  }


  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassName(String className) {
    this.className = className;
  }


  public MethodReference fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * The file name where the method to capture resides.    Either this or **className** must be set.
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The file name where the method to capture resides.    Either this or **className** must be set.")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public MethodReference fileNameMatcher(FileNameMatcherEnum fileNameMatcher) {
    this.fileNameMatcher = fileNameMatcher;
    return this;
  }

   /**
   * The operator of the comparison.    If not set, &#x60;EQUALS&#x60; is used.
   * @return fileNameMatcher
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The operator of the comparison.    If not set, `EQUALS` is used.")
  @JsonProperty(JSON_PROPERTY_FILE_NAME_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileNameMatcherEnum getFileNameMatcher() {
    return fileNameMatcher;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileNameMatcher(FileNameMatcherEnum fileNameMatcher) {
    this.fileNameMatcher = fileNameMatcher;
  }


  public MethodReference methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * The name of the method to capture.
   * @return methodName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the method to capture.")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public MethodReference argumentTypes(List<String> argumentTypes) {
    this.argumentTypes = argumentTypes;
    return this;
  }

  public MethodReference addArgumentTypesItem(String argumentTypesItem) {
    this.argumentTypes.add(argumentTypesItem);
    return this;
  }

   /**
   * The list of argument types.
   * @return argumentTypes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of argument types.")
  @JsonProperty(JSON_PROPERTY_ARGUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getArgumentTypes() {
    return argumentTypes;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArgumentTypes(List<String> argumentTypes) {
    this.argumentTypes = argumentTypes;
  }


  public MethodReference returnType(String returnType) {
    this.returnType = returnType;
    return this;
  }

   /**
   * The return type.
   * @return returnType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The return type.")
  @JsonProperty(JSON_PROPERTY_RETURN_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReturnType() {
    return returnType;
  }


  @JsonProperty(JSON_PROPERTY_RETURN_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReturnType(String returnType) {
    this.returnType = returnType;
  }


  /**
   * Return true if this MethodReference object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodReference methodReference = (MethodReference) o;
    return Objects.equals(this.visibility, methodReference.visibility) &&
        Objects.equals(this.modifiers, methodReference.modifiers) &&
        Objects.equals(this.className, methodReference.className) &&
        Objects.equals(this.fileName, methodReference.fileName) &&
        Objects.equals(this.fileNameMatcher, methodReference.fileNameMatcher) &&
        Objects.equals(this.methodName, methodReference.methodName) &&
        Objects.equals(this.argumentTypes, methodReference.argumentTypes) &&
        Objects.equals(this.returnType, methodReference.returnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(visibility, modifiers, className, fileName, fileNameMatcher, methodName, argumentTypes, returnType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodReference {\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileNameMatcher: ").append(toIndentedString(fileNameMatcher)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    argumentTypes: ").append(toIndentedString(argumentTypes)).append("\n");
    sb.append("    returnType: ").append(toIndentedString(returnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

