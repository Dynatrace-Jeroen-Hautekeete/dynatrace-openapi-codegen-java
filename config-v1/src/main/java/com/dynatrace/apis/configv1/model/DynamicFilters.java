/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Dashboard filter configuration of a dashboard.
 */
@ApiModel(description = "Dashboard filter configuration of a dashboard.")
@JsonPropertyOrder({
  DynamicFilters.JSON_PROPERTY_FILTERS,
  DynamicFilters.JSON_PROPERTY_TAG_SUGGESTION_TYPES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DynamicFilters {
  public static final String JSON_PROPERTY_FILTERS = "filters";
  private Set<String> filters = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TAG_SUGGESTION_TYPES = "tagSuggestionTypes";
  private Set<String> tagSuggestionTypes = null;

  public DynamicFilters() { 
  }

  public DynamicFilters filters(Set<String> filters) {
    this.filters = filters;
    return this;
  }

  public DynamicFilters addFiltersItem(String filtersItem) {
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * A set of all possible global dashboard filters that can be applied to a dashboard   Currently supported values are:    OS_TYPE,  SERVICE_TYPE,  DEPLOYMENT_TYPE,  APPLICATION_INJECTION_TYPE,  PAAS_VENDOR_TYPE,  DATABASE_VENDOR,  HOST_VIRTUALIZATION_TYPE,  HOST_MONITORING_MODE,  KUBERNETES_CLUSTER,  RELATED_CLOUD_APPLICATION,  RELATED_NAMESPACE,  SERVICE_TAG_KEY:&lt;tagname&gt;,  HOST_TAG_KEY:&lt;tagname&gt;,  APPLICATION_TAG_KEY:&lt;tagname&gt;,  CUSTOM_DIMENSION:&lt;key&gt;,  PROCESS_GROUP_TAG_KEY:&lt;tagname&gt;,  PROCESS_GROUP_INSTANCE_TAG_KEY:&lt;tagname&gt;
   * @return filters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A set of all possible global dashboard filters that can be applied to a dashboard   Currently supported values are:    OS_TYPE,  SERVICE_TYPE,  DEPLOYMENT_TYPE,  APPLICATION_INJECTION_TYPE,  PAAS_VENDOR_TYPE,  DATABASE_VENDOR,  HOST_VIRTUALIZATION_TYPE,  HOST_MONITORING_MODE,  KUBERNETES_CLUSTER,  RELATED_CLOUD_APPLICATION,  RELATED_NAMESPACE,  SERVICE_TAG_KEY:<tagname>,  HOST_TAG_KEY:<tagname>,  APPLICATION_TAG_KEY:<tagname>,  CUSTOM_DIMENSION:<key>,  PROCESS_GROUP_TAG_KEY:<tagname>,  PROCESS_GROUP_INSTANCE_TAG_KEY:<tagname>")
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getFilters() {
    return filters;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilters(Set<String> filters) {
    this.filters = filters;
  }


  public DynamicFilters tagSuggestionTypes(Set<String> tagSuggestionTypes) {
    this.tagSuggestionTypes = tagSuggestionTypes;
    return this;
  }

  public DynamicFilters addTagSuggestionTypesItem(String tagSuggestionTypesItem) {
    if (this.tagSuggestionTypes == null) {
      this.tagSuggestionTypes = new LinkedHashSet<>();
    }
    this.tagSuggestionTypes.add(tagSuggestionTypesItem);
    return this;
  }

   /**
   * A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.   Only applicable if the **filters** set includes &#x60;TAG_KEY:&lt;tagname&gt;&#x60;.
   * @return tagSuggestionTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.   Only applicable if the **filters** set includes `TAG_KEY:<tagname>`.")
  @JsonProperty(JSON_PROPERTY_TAG_SUGGESTION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getTagSuggestionTypes() {
    return tagSuggestionTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAG_SUGGESTION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagSuggestionTypes(Set<String> tagSuggestionTypes) {
    this.tagSuggestionTypes = tagSuggestionTypes;
  }


  /**
   * Return true if this DynamicFilters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicFilters dynamicFilters = (DynamicFilters) o;
    return Objects.equals(this.filters, dynamicFilters.filters) &&
        Objects.equals(this.tagSuggestionTypes, dynamicFilters.tagSuggestionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, tagSuggestionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicFilters {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    tagSuggestionTypes: ").append(toIndentedString(tagSuggestionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

