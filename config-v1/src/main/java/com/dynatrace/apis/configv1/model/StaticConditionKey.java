/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ConditionKey;
import com.dynatrace.apis.configv1.model.CustomHostMetadataConditionKey;
import com.dynatrace.apis.configv1.model.CustomProcessMetadataConditionKey;
import com.dynatrace.apis.configv1.model.ProcessMetadataConditionKey;
import com.dynatrace.apis.configv1.model.StaticConditionKey;
import com.dynatrace.apis.configv1.model.StringConditionKey;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * Key for attributes without dynamic key. Some fields are inherited from the parent &#x60;ConditionKey&#x60; model.
 */
@ApiModel(description = "Key for attributes without dynamic key. Some fields are inherited from the parent `ConditionKey` model.")
@JsonPropertyOrder({
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CustomHostMetadataConditionKey.class, name = "HOST_CUSTOM_METADATA_KEY"),
  @JsonSubTypes.Type(value = CustomProcessMetadataConditionKey.class, name = "PROCESS_CUSTOM_METADATA_KEY"),
  @JsonSubTypes.Type(value = ProcessMetadataConditionKey.class, name = "PROCESS_PREDEFINED_METADATA_KEY"),
  @JsonSubTypes.Type(value = StaticConditionKey.class, name = "STATIC"),
  @JsonSubTypes.Type(value = StringConditionKey.class, name = "STRING"),
})

public class StaticConditionKey extends ConditionKey {
  public StaticConditionKey() { 
  }

  /**
   * Return true if this StaticConditionKey object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticConditionKey {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("HOST_CUSTOM_METADATA_KEY", CustomHostMetadataConditionKey.class);
  mappings.put("PROCESS_CUSTOM_METADATA_KEY", CustomProcessMetadataConditionKey.class);
  mappings.put("PROCESS_PREDEFINED_METADATA_KEY", ProcessMetadataConditionKey.class);
  mappings.put("STATIC", StaticConditionKey.class);
  mappings.put("STRING", StringConditionKey.class);
  mappings.put("StaticConditionKey", StaticConditionKey.class);
  JSON.registerDiscriminator(StaticConditionKey.class, "type", mappings);
}
}

