/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ServiceNowNotificationConfigAllOf
 */
@JsonPropertyOrder({
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_INSTANCE_NAME,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_URL,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_USERNAME,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_PASSWORD,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_MESSAGE,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_SEND_INCIDENTS,
  ServiceNowNotificationConfigAllOf.JSON_PROPERTY_SEND_EVENTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ServiceNowNotificationConfigAllOf {
  public static final String JSON_PROPERTY_INSTANCE_NAME = "instanceName";
  private String instanceName;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_SEND_INCIDENTS = "sendIncidents";
  private Boolean sendIncidents;

  public static final String JSON_PROPERTY_SEND_EVENTS = "sendEvents";
  private Boolean sendEvents;

  public ServiceNowNotificationConfigAllOf() { 
  }

  public ServiceNowNotificationConfigAllOf instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.    This field is mutually exclusive with the **url** field. You can only use one of them.
   * @return instanceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.    This field is mutually exclusive with the **url** field. You can only use one of them.")
  @JsonProperty(JSON_PROPERTY_INSTANCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInstanceName() {
    return instanceName;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public ServiceNowNotificationConfigAllOf url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL of the on-premise ServiceNow installation.    This field is mutually exclusive with the **instanceName** field. You can only use one of them.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the on-premise ServiceNow installation.    This field is mutually exclusive with the **instanceName** field. You can only use one of them.")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public ServiceNowNotificationConfigAllOf username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username of the ServiceNow account.    Make sure that your user account has the &#x60;rest_service&#x60;, &#x60;web_request_admin&#x60;, and &#x60;x_dynat_ruxit.Integration&#x60; roles.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username of the ServiceNow account.    Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles.")
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }


  public ServiceNowNotificationConfigAllOf password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The username to the ServiceNow account
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username to the ServiceNow account")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public ServiceNowNotificationConfigAllOf message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The content of the ServiceNow description.     You can use the following placeholders:  * &#x60;{ImpactedEntity}&#x60;: The entity impacted by the problem or *X* impacted entities.  * &#x60;{PID}&#x60;: The ID of the reported problem.  * &#x60;{ProblemDetailsHTML}&#x60;: All problem event details, including root cause, as an HTML-formatted string.  * &#x60;{ProblemID}&#x60;: The display number of the reported problem.  * &#x60;{ProblemImpact}&#x60;: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are &#x60;APPLICATION&#x60;, &#x60;SERVICE&#x60;, and &#x60;INFRASTRUCTURE&#x60;.  * &#x60;{ProblemSeverity}&#x60;: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are &#x60;AVAILABILITY&#x60;, &#x60;ERROR&#x60;, &#x60;PERFORMANCE&#x60;, &#x60;RESOURCE_CONTENTION&#x60;, and &#x60;CUSTOM_ALERT&#x60;.  * &#x60;{ProblemTitle}&#x60;: A short description of the problem.  * &#x60;{ProblemURL}&#x60;: The URL of the problem within Dynatrace.  * &#x60;{State}&#x60;: The state of the problem. Possible values are &#x60;OPEN&#x60; and &#x60;RESOLVED&#x60;.  * &#x60;{Tags}&#x60;: The list of tags that are defined for all impacted entities, separated by commas.  
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content of the ServiceNow description.     You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  ")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public ServiceNowNotificationConfigAllOf sendIncidents(Boolean sendIncidents) {
    this.sendIncidents = sendIncidents;
    return this;
  }

   /**
   * Send incidents into ServiceNow ITSM (&#x60;true&#x60;).
   * @return sendIncidents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send incidents into ServiceNow ITSM (`true`).")
  @JsonProperty(JSON_PROPERTY_SEND_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendIncidents() {
    return sendIncidents;
  }


  @JsonProperty(JSON_PROPERTY_SEND_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendIncidents(Boolean sendIncidents) {
    this.sendIncidents = sendIncidents;
  }


  public ServiceNowNotificationConfigAllOf sendEvents(Boolean sendEvents) {
    this.sendEvents = sendEvents;
    return this;
  }

   /**
   * Send events into ServiceNow ITOM (&#x60;true&#x60;).
   * @return sendEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send events into ServiceNow ITOM (`true`).")
  @JsonProperty(JSON_PROPERTY_SEND_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendEvents() {
    return sendEvents;
  }


  @JsonProperty(JSON_PROPERTY_SEND_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendEvents(Boolean sendEvents) {
    this.sendEvents = sendEvents;
  }


  /**
   * Return true if this ServiceNowNotificationConfig_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceNowNotificationConfigAllOf serviceNowNotificationConfigAllOf = (ServiceNowNotificationConfigAllOf) o;
    return Objects.equals(this.instanceName, serviceNowNotificationConfigAllOf.instanceName) &&
        Objects.equals(this.url, serviceNowNotificationConfigAllOf.url) &&
        Objects.equals(this.username, serviceNowNotificationConfigAllOf.username) &&
        Objects.equals(this.password, serviceNowNotificationConfigAllOf.password) &&
        Objects.equals(this.message, serviceNowNotificationConfigAllOf.message) &&
        Objects.equals(this.sendIncidents, serviceNowNotificationConfigAllOf.sendIncidents) &&
        Objects.equals(this.sendEvents, serviceNowNotificationConfigAllOf.sendEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceName, url, username, password, message, sendIncidents, sendEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceNowNotificationConfigAllOf {\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    sendIncidents: ").append(toIndentedString(sendIncidents)).append("\n");
    sb.append("    sendEvents: ").append(toIndentedString(sendEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

