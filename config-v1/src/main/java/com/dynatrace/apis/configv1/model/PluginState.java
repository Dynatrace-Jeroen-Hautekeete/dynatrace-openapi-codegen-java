/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The state of the plugin.
 */
@ApiModel(description = "The state of the plugin.")
@JsonPropertyOrder({
  PluginState.JSON_PROPERTY_PLUGIN_ID,
  PluginState.JSON_PROPERTY_VERSION,
  PluginState.JSON_PROPERTY_ENDPOINT_ID,
  PluginState.JSON_PROPERTY_STATE,
  PluginState.JSON_PROPERTY_STATE_DESCRIPTION,
  PluginState.JSON_PROPERTY_TIMESTAMP,
  PluginState.JSON_PROPERTY_HOST_ID,
  PluginState.JSON_PROPERTY_PROCESS_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class PluginState {
  public static final String JSON_PROPERTY_PLUGIN_ID = "pluginId";
  private String pluginId;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_ENDPOINT_ID = "endpointId";
  private String endpointId;

  /**
   * The state of the plugin.
   */
  public enum StateEnum {
    DISABLED("DISABLED"),
    
    ERROR_AUTH("ERROR_AUTH"),
    
    ERROR_COMMUNICATION_FAILURE("ERROR_COMMUNICATION_FAILURE"),
    
    ERROR_CONFIG("ERROR_CONFIG"),
    
    ERROR_TIMEOUT("ERROR_TIMEOUT"),
    
    ERROR_UNKNOWN("ERROR_UNKNOWN"),
    
    INCOMPATIBLE("INCOMPATIBLE"),
    
    LIMIT_REACHED("LIMIT_REACHED"),
    
    NOTHING_TO_REPORT("NOTHING_TO_REPORT"),
    
    OK("OK"),
    
    STATE_TYPE_UNKNOWN("STATE_TYPE_UNKNOWN"),
    
    UNINITIALIZED("UNINITIALIZED"),
    
    UNSUPPORTED("UNSUPPORTED"),
    
    WAITING_FOR_STATE("WAITING_FOR_STATE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_STATE_DESCRIPTION = "stateDescription";
  private String stateDescription;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Long timestamp;

  public static final String JSON_PROPERTY_HOST_ID = "hostId";
  private String hostId;

  public static final String JSON_PROPERTY_PROCESS_ID = "processId";
  private String processId;

  public PluginState() { 
  }

  public PluginState pluginId(String pluginId) {
    this.pluginId = pluginId;
    return this;
  }

   /**
   * The ID of the plugin.
   * @return pluginId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the plugin.")
  @JsonProperty(JSON_PROPERTY_PLUGIN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginId() {
    return pluginId;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginId(String pluginId) {
    this.pluginId = pluginId;
  }


  public PluginState version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the plugin (for example &#x60;1.0.0&#x60;).
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the plugin (for example `1.0.0`).")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public PluginState endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

   /**
   * The ID of the endpoint where the state is detected - Active Gate only.
   * @return endpointId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the endpoint where the state is detected - Active Gate only.")
  @JsonProperty(JSON_PROPERTY_ENDPOINT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndpointId() {
    return endpointId;
  }


  @JsonProperty(JSON_PROPERTY_ENDPOINT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }


  public PluginState state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the plugin.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of the plugin.")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(StateEnum state) {
    this.state = state;
  }


  public PluginState stateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
    return this;
  }

   /**
   * A short description of the state.
   * @return stateDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A short description of the state.")
  @JsonProperty(JSON_PROPERTY_STATE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStateDescription() {
    return stateDescription;
  }


  @JsonProperty(JSON_PROPERTY_STATE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
  }


  public PluginState timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp when the state was detected, in UTC milliseconds.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp when the state was detected, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public PluginState hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

   /**
   * The ID of the host on which the plugin runs.
   * @return hostId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the host on which the plugin runs.")
  @JsonProperty(JSON_PROPERTY_HOST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostId() {
    return hostId;
  }


  @JsonProperty(JSON_PROPERTY_HOST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public PluginState processId(String processId) {
    this.processId = processId;
    return this;
  }

   /**
   * The ID of the entity on which the plugin is active.
   * @return processId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the entity on which the plugin is active.")
  @JsonProperty(JSON_PROPERTY_PROCESS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessId() {
    return processId;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessId(String processId) {
    this.processId = processId;
  }


  /**
   * Return true if this PluginState object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginState pluginState = (PluginState) o;
    return Objects.equals(this.pluginId, pluginState.pluginId) &&
        Objects.equals(this.version, pluginState.version) &&
        Objects.equals(this.endpointId, pluginState.endpointId) &&
        Objects.equals(this.state, pluginState.state) &&
        Objects.equals(this.stateDescription, pluginState.stateDescription) &&
        Objects.equals(this.timestamp, pluginState.timestamp) &&
        Objects.equals(this.hostId, pluginState.hostId) &&
        Objects.equals(this.processId, pluginState.processId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginId, version, endpointId, state, stateDescription, timestamp, hostId, processId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginState {\n");
    sb.append("    pluginId: ").append(toIndentedString(pluginId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDescription: ").append(toIndentedString(stateDescription)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

