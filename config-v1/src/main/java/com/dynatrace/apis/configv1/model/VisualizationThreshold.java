/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.VisualizationThresholdRule;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Thresholds for Visualization
 */
@ApiModel(description = "Thresholds for Visualization")
@JsonPropertyOrder({
  VisualizationThreshold.JSON_PROPERTY_AXIS_TARGET,
  VisualizationThreshold.JSON_PROPERTY_COLUMN_ID,
  VisualizationThreshold.JSON_PROPERTY_QUERY_ID,
  VisualizationThreshold.JSON_PROPERTY_VISIBLE,
  VisualizationThreshold.JSON_PROPERTY_RULES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class VisualizationThreshold {
  /**
   * Gets or Sets axisTarget
   */
  public enum AxisTargetEnum {
    LEFT("LEFT"),
    
    RIGHT("RIGHT");

    private String value;

    AxisTargetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AxisTargetEnum fromValue(String value) {
      for (AxisTargetEnum b : AxisTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AXIS_TARGET = "axisTarget";
  private AxisTargetEnum axisTarget;

  public static final String JSON_PROPERTY_COLUMN_ID = "columnId";
  private String columnId;

  public static final String JSON_PROPERTY_QUERY_ID = "queryId";
  private String queryId;

  public static final String JSON_PROPERTY_VISIBLE = "visible";
  private Boolean visible;

  public static final String JSON_PROPERTY_RULES = "rules";
  private List<VisualizationThresholdRule> rules = null;

  public VisualizationThreshold() { 
  }

  public VisualizationThreshold axisTarget(AxisTargetEnum axisTarget) {
    this.axisTarget = axisTarget;
    return this;
  }

   /**
   * Get axisTarget
   * @return axisTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AXIS_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AxisTargetEnum getAxisTarget() {
    return axisTarget;
  }


  @JsonProperty(JSON_PROPERTY_AXIS_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxisTarget(AxisTargetEnum axisTarget) {
    this.axisTarget = axisTarget;
  }


  public VisualizationThreshold columnId(String columnId) {
    this.columnId = columnId;
    return this;
  }

   /**
   * Get columnId
   * @return columnId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getColumnId() {
    return columnId;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnId(String columnId) {
    this.columnId = columnId;
  }


  public VisualizationThreshold queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

   /**
   * Get queryId
   * @return queryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_QUERY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQueryId() {
    return queryId;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public VisualizationThreshold visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Get visible
   * @return visible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVisible() {
    return visible;
  }


  @JsonProperty(JSON_PROPERTY_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public VisualizationThreshold rules(List<VisualizationThresholdRule> rules) {
    this.rules = rules;
    return this;
  }

  public VisualizationThreshold addRulesItem(VisualizationThresholdRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VisualizationThresholdRule> getRules() {
    return rules;
  }


  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRules(List<VisualizationThresholdRule> rules) {
    this.rules = rules;
  }


  /**
   * Return true if this VisualizationThreshold object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualizationThreshold visualizationThreshold = (VisualizationThreshold) o;
    return Objects.equals(this.axisTarget, visualizationThreshold.axisTarget) &&
        Objects.equals(this.columnId, visualizationThreshold.columnId) &&
        Objects.equals(this.queryId, visualizationThreshold.queryId) &&
        Objects.equals(this.visible, visualizationThreshold.visible) &&
        Objects.equals(this.rules, visualizationThreshold.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(axisTarget, columnId, queryId, visible, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualizationThreshold {\n");
    sb.append("    axisTarget: ").append(toIndentedString(axisTarget)).append("\n");
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

