/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Global Configuration of OneAgent and JMX extension
 */
@ApiModel(description = "Global Configuration of OneAgent and JMX extension")
@JsonPropertyOrder({
  GlobalExtensionConfiguration.JSON_PROPERTY_EXTENSION_ID,
  GlobalExtensionConfiguration.JSON_PROPERTY_ENABLED,
  GlobalExtensionConfiguration.JSON_PROPERTY_INFRA_ONLY_ENABLED,
  GlobalExtensionConfiguration.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class GlobalExtensionConfiguration {
  public static final String JSON_PROPERTY_EXTENSION_ID = "extensionId";
  private String extensionId;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_INFRA_ONLY_ENABLED = "infraOnlyEnabled";
  private Boolean infraOnlyEnabled;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Map<String, String> properties = null;

  public GlobalExtensionConfiguration() { 
  }

  public GlobalExtensionConfiguration extensionId(String extensionId) {
    this.extensionId = extensionId;
    return this;
  }

   /**
   * The ID of the extension.
   * @return extensionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the extension.")
  @JsonProperty(JSON_PROPERTY_EXTENSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtensionId() {
    return extensionId;
  }


  @JsonProperty(JSON_PROPERTY_EXTENSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtensionId(String extensionId) {
    this.extensionId = extensionId;
  }


  public GlobalExtensionConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The extension is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The extension is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GlobalExtensionConfiguration infraOnlyEnabled(Boolean infraOnlyEnabled) {
    this.infraOnlyEnabled = infraOnlyEnabled;
    return this;
  }

   /**
   * The plugin is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;) globally for hosts in infrastructure-only monitoring mode
   * @return infraOnlyEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The plugin is enabled (`true`) or disabled (`false`) globally for hosts in infrastructure-only monitoring mode")
  @JsonProperty(JSON_PROPERTY_INFRA_ONLY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInfraOnlyEnabled() {
    return infraOnlyEnabled;
  }


  @JsonProperty(JSON_PROPERTY_INFRA_ONLY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfraOnlyEnabled(Boolean infraOnlyEnabled) {
    this.infraOnlyEnabled = infraOnlyEnabled;
  }


  public GlobalExtensionConfiguration properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public GlobalExtensionConfiguration putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The list of configuration parameters.    Each parameter is a key-value pair.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of configuration parameters.    Each parameter is a key-value pair.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  /**
   * Return true if this GlobalExtensionConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalExtensionConfiguration globalExtensionConfiguration = (GlobalExtensionConfiguration) o;
    return Objects.equals(this.extensionId, globalExtensionConfiguration.extensionId) &&
        Objects.equals(this.enabled, globalExtensionConfiguration.enabled) &&
        Objects.equals(this.infraOnlyEnabled, globalExtensionConfiguration.infraOnlyEnabled) &&
        Objects.equals(this.properties, globalExtensionConfiguration.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionId, enabled, infraOnlyEnabled, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalExtensionConfiguration {\n");
    sb.append("    extensionId: ").append(toIndentedString(extensionId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    infraOnlyEnabled: ").append(toIndentedString(infraOnlyEnabled)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

