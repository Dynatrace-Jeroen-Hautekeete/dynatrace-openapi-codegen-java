/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.CustomService;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ServiceCustomServicesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ServiceCustomServicesApi() {
    this(new ApiClient());
  }

  public ServiceCustomServicesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a custom service
   * In the body of the request, neither custom service nor its rules can have the ID. All IDs will be generated automatically by Dynatrace.
   * @param technology Technology of the new custom service. (required)
   * @param position Order of the new custom service. Set to &#x60;PREPEND&#x60; to prepend it to the list, &#x60;APPEND&#x60; to append it. Defaults to &#x60;APPEND&#x60;. (optional, default to APPEND)
   * @param customService JSON body of the request containing definition of the new custom service.   You must not specify the IDs for the custom service or any of its rules. The *order* field is not allowed either. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createCustomService(String technology, String position, CustomService customService) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createCustomServiceWithHttpInfo(technology, position, customService);
    return localVarResponse.getData();
  }

  /**
   * Creates a custom service
   * In the body of the request, neither custom service nor its rules can have the ID. All IDs will be generated automatically by Dynatrace.
   * @param technology Technology of the new custom service. (required)
   * @param position Order of the new custom service. Set to &#x60;PREPEND&#x60; to prepend it to the list, &#x60;APPEND&#x60; to append it. Defaults to &#x60;APPEND&#x60;. (optional, default to APPEND)
   * @param customService JSON body of the request containing definition of the new custom service.   You must not specify the IDs for the custom service or any of its rules. The *order* field is not allowed either. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createCustomServiceWithHttpInfo(String technology, String position, CustomService customService) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createCustomServiceRequestBuilder(technology, position, customService);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createCustomService", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createCustomServiceRequestBuilder(String technology, String position, CustomService customService) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling createCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position", position));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customService);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified custom service
   * 
   * @param technology Technology of the custom service to delete. (required)
   * @param id The ID of the custom service to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCustomService(String technology, UUID id) throws ApiException {
    deleteCustomServiceWithHttpInfo(technology, id);
  }

  /**
   * Deletes the specified custom service
   * 
   * @param technology Technology of the custom service to delete. (required)
   * @param id The ID of the custom service to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCustomServiceWithHttpInfo(String technology, UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCustomServiceRequestBuilder(technology, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteCustomService", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCustomServiceRequestBuilder(String technology, UUID id) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling deleteCustomService");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/{id}"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the definition of the specified custom service
   * 
   * @param technology Technology of the custom service you&#39;re inquiring. (required)
   * @param id The ID of the custom service you&#39;re inquiring. (required)
   * @param includeProcessGroupReferences Flag to include process group references to the response.    Process group references aren&#39;t compatible across environments.   &#x60;false&#x60; is used if the value is not set. (optional, default to false)
   * @return CustomService
   * @throws ApiException if fails to make API call
   */
  public CustomService getCustomService(String technology, UUID id, Boolean includeProcessGroupReferences) throws ApiException {
    ApiResponse<CustomService> localVarResponse = getCustomServiceWithHttpInfo(technology, id, includeProcessGroupReferences);
    return localVarResponse.getData();
  }

  /**
   * Gets the definition of the specified custom service
   * 
   * @param technology Technology of the custom service you&#39;re inquiring. (required)
   * @param id The ID of the custom service you&#39;re inquiring. (required)
   * @param includeProcessGroupReferences Flag to include process group references to the response.    Process group references aren&#39;t compatible across environments.   &#x60;false&#x60; is used if the value is not set. (optional, default to false)
   * @return ApiResponse&lt;CustomService&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomService> getCustomServiceWithHttpInfo(String technology, UUID id, Boolean includeProcessGroupReferences) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCustomServiceRequestBuilder(technology, id, includeProcessGroupReferences);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCustomService", localVarResponse);
        }
        return new ApiResponse<CustomService>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomService>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCustomServiceRequestBuilder(String technology, UUID id, Boolean includeProcessGroupReferences) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling getCustomService");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/{id}"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeProcessGroupReferences", includeProcessGroupReferences));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all custom services of the specified technology
   * 
   * @param technology Technology of the required custom services. (required)
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList listCustomServices(String technology) throws ApiException {
    ApiResponse<StubList> localVarResponse = listCustomServicesWithHttpInfo(technology);
    return localVarResponse.getData();
  }

  /**
   * Lists all custom services of the specified technology
   * 
   * @param technology Technology of the required custom services. (required)
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> listCustomServicesWithHttpInfo(String technology) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listCustomServicesRequestBuilder(technology);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listCustomServices", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listCustomServicesRequestBuilder(String technology) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling listCustomServices");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reorders the custom services of the specified technology
   * This request reorders the custom services of the specified technology according to the given list of IDs. Custom services not present in the body of the request will retain their relative ordering but will be ordered *after* all those present in the request.
   * @param technology Technology of custom services to update. (required)
   * @param stubList JSON body of the request containing the IDs of the custom services in the desired order. Any further properties (*name*, *description*) will be ignored. (optional)
   * @throws ApiException if fails to make API call
   */
  public void orderCustomServices(String technology, StubList stubList) throws ApiException {
    orderCustomServicesWithHttpInfo(technology, stubList);
  }

  /**
   * Reorders the custom services of the specified technology
   * This request reorders the custom services of the specified technology according to the given list of IDs. Custom services not present in the body of the request will retain their relative ordering but will be ordered *after* all those present in the request.
   * @param technology Technology of custom services to update. (required)
   * @param stubList JSON body of the request containing the IDs of the custom services in the desired order. Any further properties (*name*, *description*) will be ignored. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> orderCustomServicesWithHttpInfo(String technology, StubList stubList) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = orderCustomServicesRequestBuilder(technology, stubList);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("orderCustomServices", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder orderCustomServicesRequestBuilder(String technology, StubList stubList) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling orderCustomServices");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/order"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(stubList);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the specified custom service or create a new one.
   * Will use the config&#39;s ´order´ attribute if supplied, otherwise keeps the order of the existing config or appends if no existing config with the supplied ID was found.
   * @param technology Technology of the custom service to update. (required)
   * @param id The ID of the custom service to update.   The ID of the custom service in the body of the request must match this ID. (required)
   * @param customService JSON body of the request containing updated definition of the custom service. If *order* is present, it will be used. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation updateCustomService(String technology, UUID id, CustomService customService) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = updateCustomServiceWithHttpInfo(technology, id, customService);
    return localVarResponse.getData();
  }

  /**
   * Updates the specified custom service or create a new one.
   * Will use the config&#39;s ´order´ attribute if supplied, otherwise keeps the order of the existing config or appends if no existing config with the supplied ID was found.
   * @param technology Technology of the custom service to update. (required)
   * @param id The ID of the custom service to update.   The ID of the custom service in the body of the request must match this ID. (required)
   * @param customService JSON body of the request containing updated definition of the custom service. If *order* is present, it will be used. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> updateCustomServiceWithHttpInfo(String technology, UUID id, CustomService customService) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCustomServiceRequestBuilder(technology, id, customService);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateCustomService", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCustomServiceRequestBuilder(String technology, UUID id, CustomService customService) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling updateCustomService");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/{id}"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customService);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate the new custom service for the &#x60;POST /customServices/{technology}&#x60; request
   * 
   * @param technology Technology of the custom service to validate. (required)
   * @param customService JSON body of the request containing definition of the custom service to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateCustomService(String technology, CustomService customService) throws ApiException {
    validateCreateCustomServiceWithHttpInfo(technology, customService);
  }

  /**
   * Validate the new custom service for the &#x60;POST /customServices/{technology}&#x60; request
   * 
   * @param technology Technology of the custom service to validate. (required)
   * @param customService JSON body of the request containing definition of the custom service to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateCustomServiceWithHttpInfo(String technology, CustomService customService) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateCustomServiceRequestBuilder(technology, customService);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateCustomService", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateCustomServiceRequestBuilder(String technology, CustomService customService) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling validateCreateCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/validator"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customService);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate the new custom service for the &#x60;PUT /customServices/{technology}/{id}&#x60; request
   * 
   * @param technology Technology of the custom service to validate. (required)
   * @param id The ID of the custom service to validate. (required)
   * @param customService JSON body of the request containing definition of the custom service to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateCustomService(String technology, UUID id, CustomService customService) throws ApiException {
    validateUpdateCustomServiceWithHttpInfo(technology, id, customService);
  }

  /**
   * Validate the new custom service for the &#x60;PUT /customServices/{technology}/{id}&#x60; request
   * 
   * @param technology Technology of the custom service to validate. (required)
   * @param id The ID of the custom service to validate. (required)
   * @param customService JSON body of the request containing definition of the custom service to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateCustomServiceWithHttpInfo(String technology, UUID id, CustomService customService) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateCustomServiceRequestBuilder(technology, id, customService);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateCustomService", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateCustomServiceRequestBuilder(String technology, UUID id, CustomService customService) throws ApiException {
    // verify the required parameter 'technology' is set
    if (technology == null) {
      throw new ApiException(400, "Missing the required parameter 'technology' when calling validateUpdateCustomService");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateCustomService");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/customServices/{technology}/{id}/validator"
        .replace("{technology}", ApiClient.urlEncode(technology.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customService);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
