/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ExceptionPattern;
import com.dynatrace.apis.configv1.model.FdpTagCondition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A set of failure detection parameters (FDP).   These parameters define the conditions of failure and success.
 */
@ApiModel(description = "A set of failure detection parameters (FDP).   These parameters define the conditions of failure and success.")
@JsonPropertyOrder({
  FailureDetectionParameterSet.JSON_PROPERTY_ID,
  FailureDetectionParameterSet.JSON_PROPERTY_NAME,
  FailureDetectionParameterSet.JSON_PROPERTY_DESCRIPTION,
  FailureDetectionParameterSet.JSON_PROPERTY_CLIENT_SIDE_MISSING_HTTP_CODE_IS_FAILURE,
  FailureDetectionParameterSet.JSON_PROPERTY_SERVER_SIDE_MISSING_HTTP_CODE_IS_FAILURE,
  FailureDetectionParameterSet.JSON_PROPERTY_FAILING_HTTP_CODES_CLIENT_SIDE,
  FailureDetectionParameterSet.JSON_PROPERTY_FAILING_HTTP_CODES_SERVER_SIDE,
  FailureDetectionParameterSet.JSON_PROPERTY_HTTP404_NOT_FOUND_FAILURE_ENABLED,
  FailureDetectionParameterSet.JSON_PROPERTY_BROKEN_LINK_DOMAINS,
  FailureDetectionParameterSet.JSON_PROPERTY_IGNORE_ALL_EXCEPTIONS,
  FailureDetectionParameterSet.JSON_PROPERTY_SUCCESS_FORCING_EXCEPTION_PATTERNS,
  FailureDetectionParameterSet.JSON_PROPERTY_IGNORED_EXCEPTION_PATTERNS,
  FailureDetectionParameterSet.JSON_PROPERTY_EXCEPTION_ON_ANY_NODE_EXCEPTION_PATTERNS,
  FailureDetectionParameterSet.JSON_PROPERTY_TAG_CONDITIONS,
  FailureDetectionParameterSet.JSON_PROPERTY_IGNORE_SPAN_FAILURE_DETECTION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class FailureDetectionParameterSet {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CLIENT_SIDE_MISSING_HTTP_CODE_IS_FAILURE = "clientSideMissingHttpCodeIsFailure";
  private Boolean clientSideMissingHttpCodeIsFailure;

  public static final String JSON_PROPERTY_SERVER_SIDE_MISSING_HTTP_CODE_IS_FAILURE = "serverSideMissingHttpCodeIsFailure";
  private Boolean serverSideMissingHttpCodeIsFailure;

  public static final String JSON_PROPERTY_FAILING_HTTP_CODES_CLIENT_SIDE = "failingHttpCodesClientSide";
  private String failingHttpCodesClientSide;

  public static final String JSON_PROPERTY_FAILING_HTTP_CODES_SERVER_SIDE = "failingHttpCodesServerSide";
  private String failingHttpCodesServerSide;

  public static final String JSON_PROPERTY_HTTP404_NOT_FOUND_FAILURE_ENABLED = "http404NotFoundFailureEnabled";
  private Boolean http404NotFoundFailureEnabled;

  public static final String JSON_PROPERTY_BROKEN_LINK_DOMAINS = "brokenLinkDomains";
  private List<String> brokenLinkDomains = null;

  public static final String JSON_PROPERTY_IGNORE_ALL_EXCEPTIONS = "ignoreAllExceptions";
  private Boolean ignoreAllExceptions;

  public static final String JSON_PROPERTY_SUCCESS_FORCING_EXCEPTION_PATTERNS = "successForcingExceptionPatterns";
  private List<ExceptionPattern> successForcingExceptionPatterns = null;

  public static final String JSON_PROPERTY_IGNORED_EXCEPTION_PATTERNS = "ignoredExceptionPatterns";
  private List<ExceptionPattern> ignoredExceptionPatterns = null;

  public static final String JSON_PROPERTY_EXCEPTION_ON_ANY_NODE_EXCEPTION_PATTERNS = "exceptionOnAnyNodeExceptionPatterns";
  private List<ExceptionPattern> exceptionOnAnyNodeExceptionPatterns = null;

  public static final String JSON_PROPERTY_TAG_CONDITIONS = "tagConditions";
  private List<FdpTagCondition> tagConditions = null;

  public static final String JSON_PROPERTY_IGNORE_SPAN_FAILURE_DETECTION = "ignoreSpanFailureDetection";
  private Boolean ignoreSpanFailureDetection;

  public FailureDetectionParameterSet() { 
  }

  public FailureDetectionParameterSet id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the parameter set.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the parameter set.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public FailureDetectionParameterSet name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The display name of the FDP set.   The length of the name is limited to 150 characters.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name of the FDP set.   The length of the name is limited to 150 characters.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public FailureDetectionParameterSet description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the FDP set.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A short description of the FDP set.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public FailureDetectionParameterSet clientSideMissingHttpCodeIsFailure(Boolean clientSideMissingHttpCodeIsFailure) {
    this.clientSideMissingHttpCodeIsFailure = clientSideMissingHttpCodeIsFailure;
    return this;
  }

   /**
   * The missing HTTP response code on the client side is a failure (&#x60;true&#x60;) or a success (&#x60;false&#x60;).   If not set, &#x60;false&#x60; is used.
   * @return clientSideMissingHttpCodeIsFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The missing HTTP response code on the client side is a failure (`true`) or a success (`false`).   If not set, `false` is used.")
  @JsonProperty(JSON_PROPERTY_CLIENT_SIDE_MISSING_HTTP_CODE_IS_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getClientSideMissingHttpCodeIsFailure() {
    return clientSideMissingHttpCodeIsFailure;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_SIDE_MISSING_HTTP_CODE_IS_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientSideMissingHttpCodeIsFailure(Boolean clientSideMissingHttpCodeIsFailure) {
    this.clientSideMissingHttpCodeIsFailure = clientSideMissingHttpCodeIsFailure;
  }


  public FailureDetectionParameterSet serverSideMissingHttpCodeIsFailure(Boolean serverSideMissingHttpCodeIsFailure) {
    this.serverSideMissingHttpCodeIsFailure = serverSideMissingHttpCodeIsFailure;
    return this;
  }

   /**
   * The missing HTTP response code on the server side is a failure (&#x60;true&#x60;) or a success (&#x60;false&#x60;).   If not set, &#x60;false&#x60; is used.
   * @return serverSideMissingHttpCodeIsFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The missing HTTP response code on the server side is a failure (`true`) or a success (`false`).   If not set, `false` is used.")
  @JsonProperty(JSON_PROPERTY_SERVER_SIDE_MISSING_HTTP_CODE_IS_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getServerSideMissingHttpCodeIsFailure() {
    return serverSideMissingHttpCodeIsFailure;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_SIDE_MISSING_HTTP_CODE_IS_FAILURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerSideMissingHttpCodeIsFailure(Boolean serverSideMissingHttpCodeIsFailure) {
    this.serverSideMissingHttpCodeIsFailure = serverSideMissingHttpCodeIsFailure;
  }


  public FailureDetectionParameterSet failingHttpCodesClientSide(String failingHttpCodesClientSide) {
    this.failingHttpCodesClientSide = failingHttpCodesClientSide;
    return this;
  }

   /**
   * A list of client side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, &#x60;500-599, 400-499, 1008&#x60;).   If not set, the range of &#x60;400-599&#x60; is used.
   * @return failingHttpCodesClientSide
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of client side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, `500-599, 400-499, 1008`).   If not set, the range of `400-599` is used.")
  @JsonProperty(JSON_PROPERTY_FAILING_HTTP_CODES_CLIENT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFailingHttpCodesClientSide() {
    return failingHttpCodesClientSide;
  }


  @JsonProperty(JSON_PROPERTY_FAILING_HTTP_CODES_CLIENT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailingHttpCodesClientSide(String failingHttpCodesClientSide) {
    this.failingHttpCodesClientSide = failingHttpCodesClientSide;
  }


  public FailureDetectionParameterSet failingHttpCodesServerSide(String failingHttpCodesServerSide) {
    this.failingHttpCodesServerSide = failingHttpCodesServerSide;
    return this;
  }

   /**
   * A list of server side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, &#x60;500-599, 400-499, 1008&#x60;).If not set, the range of &#x60;500-599&#x60; is used.
   * @return failingHttpCodesServerSide
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of server side HTTP response codes that are considered a failure.   The format is a list of ranges and individual values (for example, `500-599, 400-499, 1008`).If not set, the range of `500-599` is used.")
  @JsonProperty(JSON_PROPERTY_FAILING_HTTP_CODES_SERVER_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFailingHttpCodesServerSide() {
    return failingHttpCodesServerSide;
  }


  @JsonProperty(JSON_PROPERTY_FAILING_HTTP_CODES_SERVER_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailingHttpCodesServerSide(String failingHttpCodesServerSide) {
    this.failingHttpCodesServerSide = failingHttpCodesServerSide;
  }


  public FailureDetectionParameterSet http404NotFoundFailureEnabled(Boolean http404NotFoundFailureEnabled) {
    this.http404NotFoundFailureEnabled = http404NotFoundFailureEnabled;
    return this;
  }

   /**
   * Special handling of the 404 HTTP response code is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;). See **brokenLinkDomains** for special handling details.   Only applicable when 404 is NOT in the list of failing HTTP response codes and only for the server side.   If not set, &#x60;false&#x60; is used.
   * @return http404NotFoundFailureEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Special handling of the 404 HTTP response code is enabled (`true`) or disabled (`false`). See **brokenLinkDomains** for special handling details.   Only applicable when 404 is NOT in the list of failing HTTP response codes and only for the server side.   If not set, `false` is used.")
  @JsonProperty(JSON_PROPERTY_HTTP404_NOT_FOUND_FAILURE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHttp404NotFoundFailureEnabled() {
    return http404NotFoundFailureEnabled;
  }


  @JsonProperty(JSON_PROPERTY_HTTP404_NOT_FOUND_FAILURE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttp404NotFoundFailureEnabled(Boolean http404NotFoundFailureEnabled) {
    this.http404NotFoundFailureEnabled = http404NotFoundFailureEnabled;
  }


  public FailureDetectionParameterSet brokenLinkDomains(List<String> brokenLinkDomains) {
    this.brokenLinkDomains = brokenLinkDomains;
    return this;
  }

  public FailureDetectionParameterSet addBrokenLinkDomainsItem(String brokenLinkDomainsItem) {
    if (this.brokenLinkDomains == null) {
      this.brokenLinkDomains = new ArrayList<>();
    }
    this.brokenLinkDomains.add(brokenLinkDomainsItem);
    return this;
  }

   /**
   * A list of domains for the special handling of the 404 HTTP response code.   If the top domain of the *Referer* is presented in the list OR equals the top domain of the request&#39;s host, the 404 code is considered a failure.   Only applicable when **isHttp404NotFoundFailureEnabled** is set to &#x60;true&#x60;.
   * @return brokenLinkDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of domains for the special handling of the 404 HTTP response code.   If the top domain of the *Referer* is presented in the list OR equals the top domain of the request's host, the 404 code is considered a failure.   Only applicable when **isHttp404NotFoundFailureEnabled** is set to `true`.")
  @JsonProperty(JSON_PROPERTY_BROKEN_LINK_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBrokenLinkDomains() {
    return brokenLinkDomains;
  }


  @JsonProperty(JSON_PROPERTY_BROKEN_LINK_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrokenLinkDomains(List<String> brokenLinkDomains) {
    this.brokenLinkDomains = brokenLinkDomains;
  }


  public FailureDetectionParameterSet ignoreAllExceptions(Boolean ignoreAllExceptions) {
    this.ignoreAllExceptions = ignoreAllExceptions;
    return this;
  }

   /**
   * If set to true all exceptions will be ignored. Which means defined exception patterns will not have any effect.
   * @return ignoreAllExceptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true all exceptions will be ignored. Which means defined exception patterns will not have any effect.")
  @JsonProperty(JSON_PROPERTY_IGNORE_ALL_EXCEPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreAllExceptions() {
    return ignoreAllExceptions;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_ALL_EXCEPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreAllExceptions(Boolean ignoreAllExceptions) {
    this.ignoreAllExceptions = ignoreAllExceptions;
  }


  public FailureDetectionParameterSet successForcingExceptionPatterns(List<ExceptionPattern> successForcingExceptionPatterns) {
    this.successForcingExceptionPatterns = successForcingExceptionPatterns;
    return this;
  }

  public FailureDetectionParameterSet addSuccessForcingExceptionPatternsItem(ExceptionPattern successForcingExceptionPatternsItem) {
    if (this.successForcingExceptionPatterns == null) {
      this.successForcingExceptionPatterns = new ArrayList<>();
    }
    this.successForcingExceptionPatterns.add(successForcingExceptionPatternsItem);
    return this;
  }

   /**
   * A list of success exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is considered a success.
   * @return successForcingExceptionPatterns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of success exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is considered a success.")
  @JsonProperty(JSON_PROPERTY_SUCCESS_FORCING_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ExceptionPattern> getSuccessForcingExceptionPatterns() {
    return successForcingExceptionPatterns;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESS_FORCING_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessForcingExceptionPatterns(List<ExceptionPattern> successForcingExceptionPatterns) {
    this.successForcingExceptionPatterns = successForcingExceptionPatterns;
  }


  public FailureDetectionParameterSet ignoredExceptionPatterns(List<ExceptionPattern> ignoredExceptionPatterns) {
    this.ignoredExceptionPatterns = ignoredExceptionPatterns;
    return this;
  }

  public FailureDetectionParameterSet addIgnoredExceptionPatternsItem(ExceptionPattern ignoredExceptionPatternsItem) {
    if (this.ignoredExceptionPatterns == null) {
      this.ignoredExceptionPatterns = new ArrayList<>();
    }
    this.ignoredExceptionPatterns.add(ignoredExceptionPatternsItem);
    return this;
  }

   /**
   * A list of ignored exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is ignored by failure detection.
   * @return ignoredExceptionPatterns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of ignored exceptions.   If an exception on the entry node of the service matches *any* of these patterns it is ignored by failure detection.")
  @JsonProperty(JSON_PROPERTY_IGNORED_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ExceptionPattern> getIgnoredExceptionPatterns() {
    return ignoredExceptionPatterns;
  }


  @JsonProperty(JSON_PROPERTY_IGNORED_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoredExceptionPatterns(List<ExceptionPattern> ignoredExceptionPatterns) {
    this.ignoredExceptionPatterns = ignoredExceptionPatterns;
  }


  public FailureDetectionParameterSet exceptionOnAnyNodeExceptionPatterns(List<ExceptionPattern> exceptionOnAnyNodeExceptionPatterns) {
    this.exceptionOnAnyNodeExceptionPatterns = exceptionOnAnyNodeExceptionPatterns;
    return this;
  }

  public FailureDetectionParameterSet addExceptionOnAnyNodeExceptionPatternsItem(ExceptionPattern exceptionOnAnyNodeExceptionPatternsItem) {
    if (this.exceptionOnAnyNodeExceptionPatterns == null) {
      this.exceptionOnAnyNodeExceptionPatterns = new ArrayList<>();
    }
    this.exceptionOnAnyNodeExceptionPatterns.add(exceptionOnAnyNodeExceptionPatternsItem);
    return this;
  }

   /**
   * A list of faulty exceptions.   If an exception on *any* node of the service matches *any* of these patterns it is considered a failure.
   * @return exceptionOnAnyNodeExceptionPatterns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of faulty exceptions.   If an exception on *any* node of the service matches *any* of these patterns it is considered a failure.")
  @JsonProperty(JSON_PROPERTY_EXCEPTION_ON_ANY_NODE_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ExceptionPattern> getExceptionOnAnyNodeExceptionPatterns() {
    return exceptionOnAnyNodeExceptionPatterns;
  }


  @JsonProperty(JSON_PROPERTY_EXCEPTION_ON_ANY_NODE_EXCEPTION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExceptionOnAnyNodeExceptionPatterns(List<ExceptionPattern> exceptionOnAnyNodeExceptionPatterns) {
    this.exceptionOnAnyNodeExceptionPatterns = exceptionOnAnyNodeExceptionPatterns;
  }


  public FailureDetectionParameterSet tagConditions(List<FdpTagCondition> tagConditions) {
    this.tagConditions = tagConditions;
    return this;
  }

  public FailureDetectionParameterSet addTagConditionsItem(FdpTagCondition tagConditionsItem) {
    if (this.tagConditions == null) {
      this.tagConditions = new ArrayList<>();
    }
    this.tagConditions.add(tagConditionsItem);
    return this;
  }

   /**
   * A list of tag-based conditions.   If *any* condition is fulfilled the request is considered a failure.
   * @return tagConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of tag-based conditions.   If *any* condition is fulfilled the request is considered a failure.")
  @JsonProperty(JSON_PROPERTY_TAG_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FdpTagCondition> getTagConditions() {
    return tagConditions;
  }


  @JsonProperty(JSON_PROPERTY_TAG_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagConditions(List<FdpTagCondition> tagConditions) {
    this.tagConditions = tagConditions;
  }


  public FailureDetectionParameterSet ignoreSpanFailureDetection(Boolean ignoreSpanFailureDetection) {
    this.ignoreSpanFailureDetection = ignoreSpanFailureDetection;
    return this;
  }

   /**
   * If set to true span failure detection will be ignored.
   * @return ignoreSpanFailureDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true span failure detection will be ignored.")
  @JsonProperty(JSON_PROPERTY_IGNORE_SPAN_FAILURE_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreSpanFailureDetection() {
    return ignoreSpanFailureDetection;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_SPAN_FAILURE_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreSpanFailureDetection(Boolean ignoreSpanFailureDetection) {
    this.ignoreSpanFailureDetection = ignoreSpanFailureDetection;
  }


  /**
   * Return true if this FailureDetectionParameterSet object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailureDetectionParameterSet failureDetectionParameterSet = (FailureDetectionParameterSet) o;
    return Objects.equals(this.id, failureDetectionParameterSet.id) &&
        Objects.equals(this.name, failureDetectionParameterSet.name) &&
        Objects.equals(this.description, failureDetectionParameterSet.description) &&
        Objects.equals(this.clientSideMissingHttpCodeIsFailure, failureDetectionParameterSet.clientSideMissingHttpCodeIsFailure) &&
        Objects.equals(this.serverSideMissingHttpCodeIsFailure, failureDetectionParameterSet.serverSideMissingHttpCodeIsFailure) &&
        Objects.equals(this.failingHttpCodesClientSide, failureDetectionParameterSet.failingHttpCodesClientSide) &&
        Objects.equals(this.failingHttpCodesServerSide, failureDetectionParameterSet.failingHttpCodesServerSide) &&
        Objects.equals(this.http404NotFoundFailureEnabled, failureDetectionParameterSet.http404NotFoundFailureEnabled) &&
        Objects.equals(this.brokenLinkDomains, failureDetectionParameterSet.brokenLinkDomains) &&
        Objects.equals(this.ignoreAllExceptions, failureDetectionParameterSet.ignoreAllExceptions) &&
        Objects.equals(this.successForcingExceptionPatterns, failureDetectionParameterSet.successForcingExceptionPatterns) &&
        Objects.equals(this.ignoredExceptionPatterns, failureDetectionParameterSet.ignoredExceptionPatterns) &&
        Objects.equals(this.exceptionOnAnyNodeExceptionPatterns, failureDetectionParameterSet.exceptionOnAnyNodeExceptionPatterns) &&
        Objects.equals(this.tagConditions, failureDetectionParameterSet.tagConditions) &&
        Objects.equals(this.ignoreSpanFailureDetection, failureDetectionParameterSet.ignoreSpanFailureDetection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, clientSideMissingHttpCodeIsFailure, serverSideMissingHttpCodeIsFailure, failingHttpCodesClientSide, failingHttpCodesServerSide, http404NotFoundFailureEnabled, brokenLinkDomains, ignoreAllExceptions, successForcingExceptionPatterns, ignoredExceptionPatterns, exceptionOnAnyNodeExceptionPatterns, tagConditions, ignoreSpanFailureDetection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailureDetectionParameterSet {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientSideMissingHttpCodeIsFailure: ").append(toIndentedString(clientSideMissingHttpCodeIsFailure)).append("\n");
    sb.append("    serverSideMissingHttpCodeIsFailure: ").append(toIndentedString(serverSideMissingHttpCodeIsFailure)).append("\n");
    sb.append("    failingHttpCodesClientSide: ").append(toIndentedString(failingHttpCodesClientSide)).append("\n");
    sb.append("    failingHttpCodesServerSide: ").append(toIndentedString(failingHttpCodesServerSide)).append("\n");
    sb.append("    http404NotFoundFailureEnabled: ").append(toIndentedString(http404NotFoundFailureEnabled)).append("\n");
    sb.append("    brokenLinkDomains: ").append(toIndentedString(brokenLinkDomains)).append("\n");
    sb.append("    ignoreAllExceptions: ").append(toIndentedString(ignoreAllExceptions)).append("\n");
    sb.append("    successForcingExceptionPatterns: ").append(toIndentedString(successForcingExceptionPatterns)).append("\n");
    sb.append("    ignoredExceptionPatterns: ").append(toIndentedString(ignoredExceptionPatterns)).append("\n");
    sb.append("    exceptionOnAnyNodeExceptionPatterns: ").append(toIndentedString(exceptionOnAnyNodeExceptionPatterns)).append("\n");
    sb.append("    tagConditions: ").append(toIndentedString(tagConditions)).append("\n");
    sb.append("    ignoreSpanFailureDetection: ").append(toIndentedString(ignoreSpanFailureDetection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

