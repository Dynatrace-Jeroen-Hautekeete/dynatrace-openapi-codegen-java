/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The settings of conditions for user action naming.
 */
@ApiModel(description = "The settings of conditions for user action naming.")
@JsonPropertyOrder({
  UserActionNamingRuleCondition.JSON_PROPERTY_OPERAND1,
  UserActionNamingRuleCondition.JSON_PROPERTY_OPERAND2,
  UserActionNamingRuleCondition.JSON_PROPERTY_OPERATOR
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserActionNamingRuleCondition {
  public static final String JSON_PROPERTY_OPERAND1 = "operand1";
  private String operand1;

  public static final String JSON_PROPERTY_OPERAND2 = "operand2";
  private String operand2;

  /**
   * The operator of the condition
   */
  public enum OperatorEnum {
    CONTAINS("CONTAINS"),
    
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    IS_EMPTY("IS_EMPTY"),
    
    IS_NOT_EMPTY("IS_NOT_EMPTY"),
    
    MATCHES_REGULAR_EXPRESSION("MATCHES_REGULAR_EXPRESSION"),
    
    NOT_CONTAINS("NOT_CONTAINS"),
    
    NOT_ENDS_WITH("NOT_ENDS_WITH"),
    
    NOT_EQUALS("NOT_EQUALS"),
    
    NOT_MATCHES_REGULAR_EXPRESSION("NOT_MATCHES_REGULAR_EXPRESSION"),
    
    NOT_STARTS_WITH("NOT_STARTS_WITH"),
    
    STARTS_WITH("STARTS_WITH");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private OperatorEnum operator;

  public UserActionNamingRuleCondition() { 
  }

  public UserActionNamingRuleCondition operand1(String operand1) {
    this.operand1 = operand1;
    return this;
  }

   /**
   * Must be a defined placeholder wrapped in curly braces
   * @return operand1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Must be a defined placeholder wrapped in curly braces")
  @JsonProperty(JSON_PROPERTY_OPERAND1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOperand1() {
    return operand1;
  }


  @JsonProperty(JSON_PROPERTY_OPERAND1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperand1(String operand1) {
    this.operand1 = operand1;
  }


  public UserActionNamingRuleCondition operand2(String operand2) {
    this.operand2 = operand2;
    return this;
  }

   /**
   * Must be null if operator is \&quot;IS_EMPTY\&quot;, a regex if operator is \&quot;MATCHES_REGULAR_ERPRESSION\&quot;. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
   * @return operand2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Must be null if operator is \"IS_EMPTY\", a regex if operator is \"MATCHES_REGULAR_ERPRESSION\". In all other cases the value can be a freetext or a placeholder wrapped in curly braces")
  @JsonProperty(JSON_PROPERTY_OPERAND2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOperand2() {
    return operand2;
  }


  @JsonProperty(JSON_PROPERTY_OPERAND2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperand2(String operand2) {
    this.operand2 = operand2;
  }


  public UserActionNamingRuleCondition operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * The operator of the condition
   * @return operator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The operator of the condition")
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OperatorEnum getOperator() {
    return operator;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  /**
   * Return true if this UserActionNamingRuleCondition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActionNamingRuleCondition userActionNamingRuleCondition = (UserActionNamingRuleCondition) o;
    return Objects.equals(this.operand1, userActionNamingRuleCondition.operand1) &&
        Objects.equals(this.operand2, userActionNamingRuleCondition.operand2) &&
        Objects.equals(this.operator, userActionNamingRuleCondition.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operand1, operand2, operator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActionNamingRuleCondition {\n");
    sb.append("    operand1: ").append(toIndentedString(operand1)).append("\n");
    sb.append("    operand2: ").append(toIndentedString(operand2)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

