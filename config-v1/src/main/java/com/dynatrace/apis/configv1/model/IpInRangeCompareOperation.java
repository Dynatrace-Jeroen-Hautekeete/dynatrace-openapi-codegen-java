/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CompareOperation;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * The condition of the &#x60;IP_IN_RANGE&#x60; type.   The condition checks whether the IP address belongs to a specified range.
 */
@ApiModel(description = "The condition of the `IP_IN_RANGE` type.   The condition checks whether the IP address belongs to a specified range.")
@JsonPropertyOrder({
  IpInRangeCompareOperation.JSON_PROPERTY_NEGATE,
  IpInRangeCompareOperation.JSON_PROPERTY_LOWER,
  IpInRangeCompareOperation.JSON_PROPERTY_UPPER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class IpInRangeCompareOperation extends CompareOperation {
  public static final String JSON_PROPERTY_NEGATE = "negate";
  private Boolean negate;

  public static final String JSON_PROPERTY_LOWER = "lower";
  private String lower;

  public static final String JSON_PROPERTY_UPPER = "upper";
  private String upper;

  public IpInRangeCompareOperation() { 
  }

  public IpInRangeCompareOperation negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

   /**
   * Inverts the operation of the condition. Set to &#x60;true&#x60; to turn **IP is in range** into **IP is not in range**.    If not set, then &#x60;false&#x60; is used.
   * @return negate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.    If not set, then `false` is used.")
  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNegate() {
    return negate;
  }


  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  public IpInRangeCompareOperation lower(String lower) {
    this.lower = lower;
    return this;
  }

   /**
   * The lower boundary of the IP range.
   * @return lower
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The lower boundary of the IP range.")
  @JsonProperty(JSON_PROPERTY_LOWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLower() {
    return lower;
  }


  @JsonProperty(JSON_PROPERTY_LOWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLower(String lower) {
    this.lower = lower;
  }


  public IpInRangeCompareOperation upper(String upper) {
    this.upper = upper;
    return this;
  }

   /**
   * The upper boundary of the IP range.
   * @return upper
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The upper boundary of the IP range.")
  @JsonProperty(JSON_PROPERTY_UPPER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUpper() {
    return upper;
  }


  @JsonProperty(JSON_PROPERTY_UPPER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpper(String upper) {
    this.upper = upper;
  }


  /**
   * Return true if this IpInRangeCompareOperation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpInRangeCompareOperation ipInRangeCompareOperation = (IpInRangeCompareOperation) o;
    return Objects.equals(this.negate, ipInRangeCompareOperation.negate) &&
        Objects.equals(this.lower, ipInRangeCompareOperation.lower) &&
        Objects.equals(this.upper, ipInRangeCompareOperation.upper) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negate, lower, upper, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpInRangeCompareOperation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    lower: ").append(toIndentedString(lower)).append("\n");
    sb.append("    upper: ").append(toIndentedString(upper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("IpInRangeCompareOperation", IpInRangeCompareOperation.class);
  JSON.registerDiscriminator(IpInRangeCompareOperation.class, "type", mappings);
}
}

