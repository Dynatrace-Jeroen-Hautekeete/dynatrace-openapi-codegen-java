/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.IpAddressRange;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Settings for restricting certain ip addresses and for introducing subnet mask. It also restricts the mode.
 */
@ApiModel(description = "Settings for restricting certain ip addresses and for introducing subnet mask. It also restricts the mode.")
@JsonPropertyOrder({
  WebApplicationConfigIpAddressRestrictionSettings.JSON_PROPERTY_MODE,
  WebApplicationConfigIpAddressRestrictionSettings.JSON_PROPERTY_IP_ADDRESS_RESTRICTIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class WebApplicationConfigIpAddressRestrictionSettings {
  /**
   * The mode of the list of ip address restrictions.
   */
  public enum ModeEnum {
    EXCLUDE("EXCLUDE"),
    
    INCLUDE("INCLUDE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODE = "mode";
  private ModeEnum mode;

  public static final String JSON_PROPERTY_IP_ADDRESS_RESTRICTIONS = "ipAddressRestrictions";
  private List<IpAddressRange> ipAddressRestrictions = null;

  public WebApplicationConfigIpAddressRestrictionSettings() { 
  }

  public WebApplicationConfigIpAddressRestrictionSettings mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The mode of the list of ip address restrictions.
   * @return mode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The mode of the list of ip address restrictions.")
  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ModeEnum getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public WebApplicationConfigIpAddressRestrictionSettings ipAddressRestrictions(List<IpAddressRange> ipAddressRestrictions) {
    this.ipAddressRestrictions = ipAddressRestrictions;
    return this;
  }

  public WebApplicationConfigIpAddressRestrictionSettings addIpAddressRestrictionsItem(IpAddressRange ipAddressRestrictionsItem) {
    if (this.ipAddressRestrictions == null) {
      this.ipAddressRestrictions = new ArrayList<>();
    }
    this.ipAddressRestrictions.add(ipAddressRestrictionsItem);
    return this;
  }

   /**
   * Get ipAddressRestrictions
   * @return ipAddressRestrictions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<IpAddressRange> getIpAddressRestrictions() {
    return ipAddressRestrictions;
  }


  @JsonProperty(JSON_PROPERTY_IP_ADDRESS_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpAddressRestrictions(List<IpAddressRange> ipAddressRestrictions) {
    this.ipAddressRestrictions = ipAddressRestrictions;
  }


  /**
   * Return true if this WebApplicationConfigIpAddressRestrictionSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebApplicationConfigIpAddressRestrictionSettings webApplicationConfigIpAddressRestrictionSettings = (WebApplicationConfigIpAddressRestrictionSettings) o;
    return Objects.equals(this.mode, webApplicationConfigIpAddressRestrictionSettings.mode) &&
        Objects.equals(this.ipAddressRestrictions, webApplicationConfigIpAddressRestrictionSettings.ipAddressRestrictions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, ipAddressRestrictions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebApplicationConfigIpAddressRestrictionSettings {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    ipAddressRestrictions: ").append(toIndentedString(ipAddressRestrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

