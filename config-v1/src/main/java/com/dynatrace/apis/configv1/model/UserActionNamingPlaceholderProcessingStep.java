/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The processing step settings.
 */
@ApiModel(description = "The processing step settings.")
@JsonPropertyOrder({
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_TYPE,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_PATTERN_BEFORE,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_PATTERN_BEFORE_SEARCH_TYPE,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_PATTERN_AFTER,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_PATTERN_AFTER_SEARCH_TYPE,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_REPLACEMENT,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_PATTERN_TO_REPLACE,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_REGULAR_EXPRESSION,
  UserActionNamingPlaceholderProcessingStep.JSON_PROPERTY_FALLBACK_TO_INPUT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserActionNamingPlaceholderProcessingStep {
  /**
   * An action to be taken by the processing:   * &#x60;SUBSTRING&#x60;: Extracts the string between **patternBefore** and **patternAfter**.  * &#x60;REPLACEMENT&#x60;: Replaces the string between **patternBefore** and **patternAfter** with the specified **replacement**. * &#x60;REPLACE_WITH_PATTERN&#x60;: Replaces the **patternToReplace** with the specified **replacement**.  * &#x60;EXTRACT_BY_REGULAR_EXPRESSION&#x60;: Extracts the part of the string that matches the **regularExpression**.  * &#x60;REPLACE_WITH_REGULAR_EXPRESSION&#x60;: Replaces all occurrences that match **regularExpression** with the specified **replacement**.  * &#x60;REPLACE_IDS&#x60;: Replaces all IDs and UUIDs with the specified **replacement**.
   */
  public enum TypeEnum {
    EXTRACT_BY_REGULAR_EXPRESSION("EXTRACT_BY_REGULAR_EXPRESSION"),
    
    REPLACEMENT("REPLACEMENT"),
    
    REPLACE_IDS("REPLACE_IDS"),
    
    REPLACE_WITH_PATTERN("REPLACE_WITH_PATTERN"),
    
    REPLACE_WITH_REGULAR_EXPRESSION("REPLACE_WITH_REGULAR_EXPRESSION"),
    
    SUBSTRING("SUBSTRING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_PATTERN_BEFORE = "patternBefore";
  private String patternBefore;

  /**
   * The required occurrence of **patternBefore**.
   */
  public enum PatternBeforeSearchTypeEnum {
    FIRST("FIRST"),
    
    LAST("LAST");

    private String value;

    PatternBeforeSearchTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PatternBeforeSearchTypeEnum fromValue(String value) {
      for (PatternBeforeSearchTypeEnum b : PatternBeforeSearchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PATTERN_BEFORE_SEARCH_TYPE = "patternBeforeSearchType";
  private PatternBeforeSearchTypeEnum patternBeforeSearchType;

  public static final String JSON_PROPERTY_PATTERN_AFTER = "patternAfter";
  private String patternAfter;

  /**
   * The required occurrence of **patternAfter**.
   */
  public enum PatternAfterSearchTypeEnum {
    FIRST("FIRST"),
    
    LAST("LAST");

    private String value;

    PatternAfterSearchTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PatternAfterSearchTypeEnum fromValue(String value) {
      for (PatternAfterSearchTypeEnum b : PatternAfterSearchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PATTERN_AFTER_SEARCH_TYPE = "patternAfterSearchType";
  private PatternAfterSearchTypeEnum patternAfterSearchType;

  public static final String JSON_PROPERTY_REPLACEMENT = "replacement";
  private String replacement;

  public static final String JSON_PROPERTY_PATTERN_TO_REPLACE = "patternToReplace";
  private String patternToReplace;

  public static final String JSON_PROPERTY_REGULAR_EXPRESSION = "regularExpression";
  private String regularExpression;

  public static final String JSON_PROPERTY_FALLBACK_TO_INPUT = "fallbackToInput";
  private Boolean fallbackToInput;

  public UserActionNamingPlaceholderProcessingStep() { 
  }

  public UserActionNamingPlaceholderProcessingStep type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * An action to be taken by the processing:   * &#x60;SUBSTRING&#x60;: Extracts the string between **patternBefore** and **patternAfter**.  * &#x60;REPLACEMENT&#x60;: Replaces the string between **patternBefore** and **patternAfter** with the specified **replacement**. * &#x60;REPLACE_WITH_PATTERN&#x60;: Replaces the **patternToReplace** with the specified **replacement**.  * &#x60;EXTRACT_BY_REGULAR_EXPRESSION&#x60;: Extracts the part of the string that matches the **regularExpression**.  * &#x60;REPLACE_WITH_REGULAR_EXPRESSION&#x60;: Replaces all occurrences that match **regularExpression** with the specified **replacement**.  * &#x60;REPLACE_IDS&#x60;: Replaces all IDs and UUIDs with the specified **replacement**.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An action to be taken by the processing:   * `SUBSTRING`: Extracts the string between **patternBefore** and **patternAfter**.  * `REPLACEMENT`: Replaces the string between **patternBefore** and **patternAfter** with the specified **replacement**. * `REPLACE_WITH_PATTERN`: Replaces the **patternToReplace** with the specified **replacement**.  * `EXTRACT_BY_REGULAR_EXPRESSION`: Extracts the part of the string that matches the **regularExpression**.  * `REPLACE_WITH_REGULAR_EXPRESSION`: Replaces all occurrences that match **regularExpression** with the specified **replacement**.  * `REPLACE_IDS`: Replaces all IDs and UUIDs with the specified **replacement**.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UserActionNamingPlaceholderProcessingStep patternBefore(String patternBefore) {
    this.patternBefore = patternBefore;
    return this;
  }

   /**
   * The pattern before the required value. It will be removed.
   * @return patternBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The pattern before the required value. It will be removed.")
  @JsonProperty(JSON_PROPERTY_PATTERN_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPatternBefore() {
    return patternBefore;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatternBefore(String patternBefore) {
    this.patternBefore = patternBefore;
  }


  public UserActionNamingPlaceholderProcessingStep patternBeforeSearchType(PatternBeforeSearchTypeEnum patternBeforeSearchType) {
    this.patternBeforeSearchType = patternBeforeSearchType;
    return this;
  }

   /**
   * The required occurrence of **patternBefore**.
   * @return patternBeforeSearchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The required occurrence of **patternBefore**.")
  @JsonProperty(JSON_PROPERTY_PATTERN_BEFORE_SEARCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PatternBeforeSearchTypeEnum getPatternBeforeSearchType() {
    return patternBeforeSearchType;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN_BEFORE_SEARCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatternBeforeSearchType(PatternBeforeSearchTypeEnum patternBeforeSearchType) {
    this.patternBeforeSearchType = patternBeforeSearchType;
  }


  public UserActionNamingPlaceholderProcessingStep patternAfter(String patternAfter) {
    this.patternAfter = patternAfter;
    return this;
  }

   /**
   * The pattern after the required value. It will be removed.
   * @return patternAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The pattern after the required value. It will be removed.")
  @JsonProperty(JSON_PROPERTY_PATTERN_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPatternAfter() {
    return patternAfter;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatternAfter(String patternAfter) {
    this.patternAfter = patternAfter;
  }


  public UserActionNamingPlaceholderProcessingStep patternAfterSearchType(PatternAfterSearchTypeEnum patternAfterSearchType) {
    this.patternAfterSearchType = patternAfterSearchType;
    return this;
  }

   /**
   * The required occurrence of **patternAfter**.
   * @return patternAfterSearchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The required occurrence of **patternAfter**.")
  @JsonProperty(JSON_PROPERTY_PATTERN_AFTER_SEARCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PatternAfterSearchTypeEnum getPatternAfterSearchType() {
    return patternAfterSearchType;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN_AFTER_SEARCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatternAfterSearchType(PatternAfterSearchTypeEnum patternAfterSearchType) {
    this.patternAfterSearchType = patternAfterSearchType;
  }


  public UserActionNamingPlaceholderProcessingStep replacement(String replacement) {
    this.replacement = replacement;
    return this;
  }

   /**
   * Replacement for the original value.
   * @return replacement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Replacement for the original value.")
  @JsonProperty(JSON_PROPERTY_REPLACEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReplacement() {
    return replacement;
  }


  @JsonProperty(JSON_PROPERTY_REPLACEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplacement(String replacement) {
    this.replacement = replacement;
  }


  public UserActionNamingPlaceholderProcessingStep patternToReplace(String patternToReplace) {
    this.patternToReplace = patternToReplace;
    return this;
  }

   /**
   * The pattern to be replaced.    Only applicable if the **type** is &#x60;REPLACE_WITH_PATTERN&#x60;.
   * @return patternToReplace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The pattern to be replaced.    Only applicable if the **type** is `REPLACE_WITH_PATTERN`.")
  @JsonProperty(JSON_PROPERTY_PATTERN_TO_REPLACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPatternToReplace() {
    return patternToReplace;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN_TO_REPLACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatternToReplace(String patternToReplace) {
    this.patternToReplace = patternToReplace;
  }


  public UserActionNamingPlaceholderProcessingStep regularExpression(String regularExpression) {
    this.regularExpression = regularExpression;
    return this;
  }

   /**
   * A regular expression for the string to be extracted or replaced.    Only applicable if the **type** is &#x60;EXTRACT_BY_REGULAR_EXPRESSION&#x60; or &#x60;REPLACE_WITH_REGULAR_EXPRESSION&#x60;.
   * @return regularExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A regular expression for the string to be extracted or replaced.    Only applicable if the **type** is `EXTRACT_BY_REGULAR_EXPRESSION` or `REPLACE_WITH_REGULAR_EXPRESSION`.")
  @JsonProperty(JSON_PROPERTY_REGULAR_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegularExpression() {
    return regularExpression;
  }


  @JsonProperty(JSON_PROPERTY_REGULAR_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegularExpression(String regularExpression) {
    this.regularExpression = regularExpression;
  }


  public UserActionNamingPlaceholderProcessingStep fallbackToInput(Boolean fallbackToInput) {
    this.fallbackToInput = fallbackToInput;
    return this;
  }

   /**
   * If set to true: Returns the input if **patternBefore** or **patternAfter** cannot be found and the **type** is &#x60;SUBSTRING&#x60;.    Returns the input if **regularExpression** doesn&#39;t match and **type** is &#x60;EXTRACT_BY_REGULAR_EXPRESSION&#x60;.    Otherwise null is returned.
   * @return fallbackToInput
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true: Returns the input if **patternBefore** or **patternAfter** cannot be found and the **type** is `SUBSTRING`.    Returns the input if **regularExpression** doesn't match and **type** is `EXTRACT_BY_REGULAR_EXPRESSION`.    Otherwise null is returned.")
  @JsonProperty(JSON_PROPERTY_FALLBACK_TO_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFallbackToInput() {
    return fallbackToInput;
  }


  @JsonProperty(JSON_PROPERTY_FALLBACK_TO_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFallbackToInput(Boolean fallbackToInput) {
    this.fallbackToInput = fallbackToInput;
  }


  /**
   * Return true if this UserActionNamingPlaceholderProcessingStep object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActionNamingPlaceholderProcessingStep userActionNamingPlaceholderProcessingStep = (UserActionNamingPlaceholderProcessingStep) o;
    return Objects.equals(this.type, userActionNamingPlaceholderProcessingStep.type) &&
        Objects.equals(this.patternBefore, userActionNamingPlaceholderProcessingStep.patternBefore) &&
        Objects.equals(this.patternBeforeSearchType, userActionNamingPlaceholderProcessingStep.patternBeforeSearchType) &&
        Objects.equals(this.patternAfter, userActionNamingPlaceholderProcessingStep.patternAfter) &&
        Objects.equals(this.patternAfterSearchType, userActionNamingPlaceholderProcessingStep.patternAfterSearchType) &&
        Objects.equals(this.replacement, userActionNamingPlaceholderProcessingStep.replacement) &&
        Objects.equals(this.patternToReplace, userActionNamingPlaceholderProcessingStep.patternToReplace) &&
        Objects.equals(this.regularExpression, userActionNamingPlaceholderProcessingStep.regularExpression) &&
        Objects.equals(this.fallbackToInput, userActionNamingPlaceholderProcessingStep.fallbackToInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, patternBefore, patternBeforeSearchType, patternAfter, patternAfterSearchType, replacement, patternToReplace, regularExpression, fallbackToInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActionNamingPlaceholderProcessingStep {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    patternBefore: ").append(toIndentedString(patternBefore)).append("\n");
    sb.append("    patternBeforeSearchType: ").append(toIndentedString(patternBeforeSearchType)).append("\n");
    sb.append("    patternAfter: ").append(toIndentedString(patternAfter)).append("\n");
    sb.append("    patternAfterSearchType: ").append(toIndentedString(patternAfterSearchType)).append("\n");
    sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
    sb.append("    patternToReplace: ").append(toIndentedString(patternToReplace)).append("\n");
    sb.append("    regularExpression: ").append(toIndentedString(regularExpression)).append("\n");
    sb.append("    fallbackToInput: ").append(toIndentedString(fallbackToInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

