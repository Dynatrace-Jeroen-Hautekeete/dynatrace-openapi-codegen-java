/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.DexpFilterCriterion;
import com.dynatrace.apis.configv1.model.DexpFilterRelationship;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Filter for data explorer queries.
 */
@ApiModel(description = "Filter for data explorer queries.")
@JsonPropertyOrder({
  DataExplorerFilter.JSON_PROPERTY_FILTER,
  DataExplorerFilter.JSON_PROPERTY_GLOBAL_ENTITY,
  DataExplorerFilter.JSON_PROPERTY_FILTER_TYPE,
  DataExplorerFilter.JSON_PROPERTY_FILTER_OPERATOR,
  DataExplorerFilter.JSON_PROPERTY_ENTITY_ATTRIBUTE,
  DataExplorerFilter.JSON_PROPERTY_RELATIONSHIP,
  DataExplorerFilter.JSON_PROPERTY_NESTED_FILTERS,
  DataExplorerFilter.JSON_PROPERTY_CRITERIA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DataExplorerFilter {
  public static final String JSON_PROPERTY_FILTER = "filter";
  private String filter;

  public static final String JSON_PROPERTY_GLOBAL_ENTITY = "globalEntity";
  private String globalEntity;

  /**
   * Gets or Sets filterType
   */
  public enum FilterTypeEnum {
    DIMENSION("DIMENSION"),
    
    ENTITY_ATTRIBUTE("ENTITY_ATTRIBUTE"),
    
    ID("ID"),
    
    NAME("NAME"),
    
    TAG("TAG");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterTypeEnum fromValue(String value) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER_TYPE = "filterType";
  private FilterTypeEnum filterType;

  /**
   * Gets or Sets filterOperator
   */
  public enum FilterOperatorEnum {
    AND("AND"),
    
    NOT("NOT"),
    
    OR("OR");

    private String value;

    FilterOperatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterOperatorEnum fromValue(String value) {
      for (FilterOperatorEnum b : FilterOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER_OPERATOR = "filterOperator";
  private FilterOperatorEnum filterOperator;

  public static final String JSON_PROPERTY_ENTITY_ATTRIBUTE = "entityAttribute";
  private String entityAttribute;

  public static final String JSON_PROPERTY_RELATIONSHIP = "relationship";
  private DexpFilterRelationship relationship;

  public static final String JSON_PROPERTY_NESTED_FILTERS = "nestedFilters";
  private Set<DataExplorerFilter> nestedFilters = null;

  public static final String JSON_PROPERTY_CRITERIA = "criteria";
  private Set<DexpFilterCriterion> criteria = null;

  public DataExplorerFilter() { 
  }

  public DataExplorerFilter filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(String filter) {
    this.filter = filter;
  }


  public DataExplorerFilter globalEntity(String globalEntity) {
    this.globalEntity = globalEntity;
    return this;
  }

   /**
   * Get globalEntity
   * @return globalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GLOBAL_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGlobalEntity() {
    return globalEntity;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobalEntity(String globalEntity) {
    this.globalEntity = globalEntity;
  }


  public DataExplorerFilter filterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterTypeEnum getFilterType() {
    return filterType;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
  }


  public DataExplorerFilter filterOperator(FilterOperatorEnum filterOperator) {
    this.filterOperator = filterOperator;
    return this;
  }

   /**
   * Get filterOperator
   * @return filterOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterOperatorEnum getFilterOperator() {
    return filterOperator;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterOperator(FilterOperatorEnum filterOperator) {
    this.filterOperator = filterOperator;
  }


  public DataExplorerFilter entityAttribute(String entityAttribute) {
    this.entityAttribute = entityAttribute;
    return this;
  }

   /**
   * Get entityAttribute
   * @return entityAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityAttribute() {
    return entityAttribute;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityAttribute(String entityAttribute) {
    this.entityAttribute = entityAttribute;
  }


  public DataExplorerFilter relationship(DexpFilterRelationship relationship) {
    this.relationship = relationship;
    return this;
  }

   /**
   * Get relationship
   * @return relationship
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RELATIONSHIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DexpFilterRelationship getRelationship() {
    return relationship;
  }


  @JsonProperty(JSON_PROPERTY_RELATIONSHIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelationship(DexpFilterRelationship relationship) {
    this.relationship = relationship;
  }


  public DataExplorerFilter nestedFilters(Set<DataExplorerFilter> nestedFilters) {
    this.nestedFilters = nestedFilters;
    return this;
  }

  public DataExplorerFilter addNestedFiltersItem(DataExplorerFilter nestedFiltersItem) {
    if (this.nestedFilters == null) {
      this.nestedFilters = new LinkedHashSet<>();
    }
    this.nestedFilters.add(nestedFiltersItem);
    return this;
  }

   /**
   * Get nestedFilters
   * @return nestedFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NESTED_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<DataExplorerFilter> getNestedFilters() {
    return nestedFilters;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_NESTED_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNestedFilters(Set<DataExplorerFilter> nestedFilters) {
    this.nestedFilters = nestedFilters;
  }


  public DataExplorerFilter criteria(Set<DexpFilterCriterion> criteria) {
    this.criteria = criteria;
    return this;
  }

  public DataExplorerFilter addCriteriaItem(DexpFilterCriterion criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new LinkedHashSet<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<DexpFilterCriterion> getCriteria() {
    return criteria;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCriteria(Set<DexpFilterCriterion> criteria) {
    this.criteria = criteria;
  }


  /**
   * Return true if this DataExplorerFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExplorerFilter dataExplorerFilter = (DataExplorerFilter) o;
    return Objects.equals(this.filter, dataExplorerFilter.filter) &&
        Objects.equals(this.globalEntity, dataExplorerFilter.globalEntity) &&
        Objects.equals(this.filterType, dataExplorerFilter.filterType) &&
        Objects.equals(this.filterOperator, dataExplorerFilter.filterOperator) &&
        Objects.equals(this.entityAttribute, dataExplorerFilter.entityAttribute) &&
        Objects.equals(this.relationship, dataExplorerFilter.relationship) &&
        Objects.equals(this.nestedFilters, dataExplorerFilter.nestedFilters) &&
        Objects.equals(this.criteria, dataExplorerFilter.criteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, globalEntity, filterType, filterOperator, entityAttribute, relationship, nestedFilters, criteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExplorerFilter {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    globalEntity: ").append(toIndentedString(globalEntity)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    filterOperator: ").append(toIndentedString(filterOperator)).append("\n");
    sb.append("    entityAttribute: ").append(toIndentedString(entityAttribute)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    nestedFilters: ").append(toIndentedString(nestedFilters)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

