/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.BooleanComparisonInfo;
import com.dynatrace.apis.configv1.model.ESBInputNodeTypeComparisonInfo;
import com.dynatrace.apis.configv1.model.FailedStateComparisonInfo;
import com.dynatrace.apis.configv1.model.FailureReasonComparisonInfo;
import com.dynatrace.apis.configv1.model.FastStringComparisonInfo;
import com.dynatrace.apis.configv1.model.FlawStateComparisonInfo;
import com.dynatrace.apis.configv1.model.HttpMethodComparisonInfo;
import com.dynatrace.apis.configv1.model.HttpStatusClassComparisonInfo;
import com.dynatrace.apis.configv1.model.IIBInputNodeTypeComparisonInfo;
import com.dynatrace.apis.configv1.model.NumberComparisonInfo;
import com.dynatrace.apis.configv1.model.NumberRequestAttributeComparisonInfo;
import com.dynatrace.apis.configv1.model.ServiceTypeComparisonInfo;
import com.dynatrace.apis.configv1.model.StringComparisonInfo;
import com.dynatrace.apis.configv1.model.StringRequestAttributeComparisonInfo;
import com.dynatrace.apis.configv1.model.TagComparisonInfo;
import com.dynatrace.apis.configv1.model.ZosComparisonInfo;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * Type-specific comparison for attributes. The actual set of fields depends on the type of the comparison. Find the list of actual objects in the description of the **type** field or see [Service metrics API - JSON models](https://dt-url.net/9803svb).
 */
@ApiModel(description = "Type-specific comparison for attributes. The actual set of fields depends on the type of the comparison. Find the list of actual objects in the description of the **type** field or see [Service metrics API - JSON models](https://dt-url.net/9803svb).")
@JsonPropertyOrder({
  ComparisonInfo.JSON_PROPERTY_COMPARISON,
  ComparisonInfo.JSON_PROPERTY_VALUE,
  ComparisonInfo.JSON_PROPERTY_VALUES,
  ComparisonInfo.JSON_PROPERTY_NEGATE,
  ComparisonInfo.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BooleanComparisonInfo.class, name = "BooleanComparisonInfo"),
  @JsonSubTypes.Type(value = ESBInputNodeTypeComparisonInfo.class, name = "ESBInputNodeTypeComparisonInfo"),
  @JsonSubTypes.Type(value = FailedStateComparisonInfo.class, name = "FailedStateComparisonInfo"),
  @JsonSubTypes.Type(value = FailureReasonComparisonInfo.class, name = "FailureReasonComparisonInfo"),
  @JsonSubTypes.Type(value = FastStringComparisonInfo.class, name = "FastStringComparisonInfo"),
  @JsonSubTypes.Type(value = FlawStateComparisonInfo.class, name = "FlawStateComparisonInfo"),
  @JsonSubTypes.Type(value = HttpMethodComparisonInfo.class, name = "HttpMethodComparisonInfo"),
  @JsonSubTypes.Type(value = HttpStatusClassComparisonInfo.class, name = "HttpStatusClassComparisonInfo"),
  @JsonSubTypes.Type(value = IIBInputNodeTypeComparisonInfo.class, name = "IIBInputNodeTypeComparisonInfo"),
  @JsonSubTypes.Type(value = NumberComparisonInfo.class, name = "NumberComparisonInfo"),
  @JsonSubTypes.Type(value = NumberRequestAttributeComparisonInfo.class, name = "NumberRequestAttributeComparisonInfo"),
  @JsonSubTypes.Type(value = ServiceTypeComparisonInfo.class, name = "ServiceTypeComparisonInfo"),
  @JsonSubTypes.Type(value = StringComparisonInfo.class, name = "StringComparisonInfo"),
  @JsonSubTypes.Type(value = StringRequestAttributeComparisonInfo.class, name = "StringRequestAttributeComparisonInfo"),
  @JsonSubTypes.Type(value = TagComparisonInfo.class, name = "TagComparisonInfo"),
  @JsonSubTypes.Type(value = ZosComparisonInfo.class, name = "ZosComparisonInfo"),
})

public class ComparisonInfo {
  public static final String JSON_PROPERTY_COMPARISON = "comparison";
  private String comparison;

  public static final String JSON_PROPERTY_VALUE = "value";
  private Object value;

  public static final String JSON_PROPERTY_VALUES = "values";
  private Set<Object> values = null;

  public static final String JSON_PROPERTY_NEGATE = "negate";
  private Boolean negate;

  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;STRING&#x60; -&gt; StringComparisonInfo  * &#x60;NUMBER&#x60; -&gt; NumberComparisonInfo  * &#x60;BOOLEAN&#x60; -&gt; BooleanComparisonInfo  * &#x60;HTTP_METHOD&#x60; -&gt; HttpMethodComparisonInfo  * &#x60;STRING_REQUEST_ATTRIBUTE&#x60; -&gt; StringRequestAttributeComparisonInfo  * &#x60;NUMBER_REQUEST_ATTRIBUTE&#x60; -&gt; NumberRequestAttributeComparisonInfo  * &#x60;ZOS_CALL_TYPE&#x60; -&gt; ZosComparisonInfo  * &#x60;IIB_INPUT_NODE_TYPE&#x60; -&gt; IIBInputNodeTypeComparisonInfo  * &#x60;ESB_INPUT_NODE_TYPE&#x60; -&gt; ESBInputNodeTypeComparisonInfo  * &#x60;FAILED_STATE&#x60; -&gt; FailedStateComparisonInfo  * &#x60;FLAW_STATE&#x60; -&gt; FlawStateComparisonInfo  * &#x60;FAILURE_REASON&#x60; -&gt; FailureReasonComparisonInfo  * &#x60;HTTP_STATUS_CLASS&#x60; -&gt; HttpStatusClassComparisonInfo  * &#x60;TAG&#x60; -&gt; TagComparisonInfo  * &#x60;FAST_STRING&#x60; -&gt; FastStringComparisonInfo  * &#x60;SERVICE_TYPE&#x60; -&gt; ServiceTypeComparisonInfo  
   */
  public enum TypeEnum {
    BOOLEAN("BOOLEAN"),
    
    ESB_INPUT_NODE_TYPE("ESB_INPUT_NODE_TYPE"),
    
    FAILED_STATE("FAILED_STATE"),
    
    FAILURE_REASON("FAILURE_REASON"),
    
    FAST_STRING("FAST_STRING"),
    
    FLAW_STATE("FLAW_STATE"),
    
    HTTP_METHOD("HTTP_METHOD"),
    
    HTTP_STATUS_CLASS("HTTP_STATUS_CLASS"),
    
    IIB_INPUT_NODE_TYPE("IIB_INPUT_NODE_TYPE"),
    
    NUMBER("NUMBER"),
    
    NUMBER_REQUEST_ATTRIBUTE("NUMBER_REQUEST_ATTRIBUTE"),
    
    SERVICE_TYPE("SERVICE_TYPE"),
    
    STRING("STRING"),
    
    STRING_REQUEST_ATTRIBUTE("STRING_REQUEST_ATTRIBUTE"),
    
    TAG("TAG"),
    
    ZOS_CALL_TYPE("ZOS_CALL_TYPE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public ComparisonInfo() { 
  }

  public ComparisonInfo comparison(String comparison) {
    this.comparison = comparison;
    return this;
  }

   /**
   * Operator of the comparision. You can reverse it by setting **negate** to &#x60;true&#x60;.
   * @return comparison
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operator of the comparision. You can reverse it by setting **negate** to `true`.")
  @JsonProperty(JSON_PROPERTY_COMPARISON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getComparison() {
    return comparison;
  }


  @JsonProperty(JSON_PROPERTY_COMPARISON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComparison(String comparison) {
    this.comparison = comparison;
  }


  public ComparisonInfo value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * The value to compare to.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value to compare to.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(Object value) {
    this.value = value;
  }


  public ComparisonInfo values(Set<Object> values) {
    this.values = values;
    return this;
  }

  public ComparisonInfo addValuesItem(Object valuesItem) {
    if (this.values == null) {
      this.values = new LinkedHashSet<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * The values to compare to.
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The values to compare to.")
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Object> getValues() {
    return values;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(Set<Object> values) {
    this.values = values;
  }


  public ComparisonInfo negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

   /**
   * Reverse the comparison **operator**. For example, it turns **equals** into **does not equal**.
   * @return negate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Reverse the comparison **operator**. For example, it turns **equals** into **does not equal**.")
  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getNegate() {
    return negate;
  }


  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  public ComparisonInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;STRING&#x60; -&gt; StringComparisonInfo  * &#x60;NUMBER&#x60; -&gt; NumberComparisonInfo  * &#x60;BOOLEAN&#x60; -&gt; BooleanComparisonInfo  * &#x60;HTTP_METHOD&#x60; -&gt; HttpMethodComparisonInfo  * &#x60;STRING_REQUEST_ATTRIBUTE&#x60; -&gt; StringRequestAttributeComparisonInfo  * &#x60;NUMBER_REQUEST_ATTRIBUTE&#x60; -&gt; NumberRequestAttributeComparisonInfo  * &#x60;ZOS_CALL_TYPE&#x60; -&gt; ZosComparisonInfo  * &#x60;IIB_INPUT_NODE_TYPE&#x60; -&gt; IIBInputNodeTypeComparisonInfo  * &#x60;ESB_INPUT_NODE_TYPE&#x60; -&gt; ESBInputNodeTypeComparisonInfo  * &#x60;FAILED_STATE&#x60; -&gt; FailedStateComparisonInfo  * &#x60;FLAW_STATE&#x60; -&gt; FlawStateComparisonInfo  * &#x60;FAILURE_REASON&#x60; -&gt; FailureReasonComparisonInfo  * &#x60;HTTP_STATUS_CLASS&#x60; -&gt; HttpStatusClassComparisonInfo  * &#x60;TAG&#x60; -&gt; TagComparisonInfo  * &#x60;FAST_STRING&#x60; -&gt; FastStringComparisonInfo  * &#x60;SERVICE_TYPE&#x60; -&gt; ServiceTypeComparisonInfo  
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `STRING` -> StringComparisonInfo  * `NUMBER` -> NumberComparisonInfo  * `BOOLEAN` -> BooleanComparisonInfo  * `HTTP_METHOD` -> HttpMethodComparisonInfo  * `STRING_REQUEST_ATTRIBUTE` -> StringRequestAttributeComparisonInfo  * `NUMBER_REQUEST_ATTRIBUTE` -> NumberRequestAttributeComparisonInfo  * `ZOS_CALL_TYPE` -> ZosComparisonInfo  * `IIB_INPUT_NODE_TYPE` -> IIBInputNodeTypeComparisonInfo  * `ESB_INPUT_NODE_TYPE` -> ESBInputNodeTypeComparisonInfo  * `FAILED_STATE` -> FailedStateComparisonInfo  * `FLAW_STATE` -> FlawStateComparisonInfo  * `FAILURE_REASON` -> FailureReasonComparisonInfo  * `HTTP_STATUS_CLASS` -> HttpStatusClassComparisonInfo  * `TAG` -> TagComparisonInfo  * `FAST_STRING` -> FastStringComparisonInfo  * `SERVICE_TYPE` -> ServiceTypeComparisonInfo  ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this ComparisonInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComparisonInfo comparisonInfo = (ComparisonInfo) o;
    return Objects.equals(this.comparison, comparisonInfo.comparison) &&
        Objects.equals(this.value, comparisonInfo.value) &&
        Objects.equals(this.values, comparisonInfo.values) &&
        Objects.equals(this.negate, comparisonInfo.negate) &&
        Objects.equals(this.type, comparisonInfo.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparison, value, values, negate, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComparisonInfo {\n");
    sb.append("    comparison: ").append(toIndentedString(comparison)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("BooleanComparisonInfo", BooleanComparisonInfo.class);
  mappings.put("ESBInputNodeTypeComparisonInfo", ESBInputNodeTypeComparisonInfo.class);
  mappings.put("FailedStateComparisonInfo", FailedStateComparisonInfo.class);
  mappings.put("FailureReasonComparisonInfo", FailureReasonComparisonInfo.class);
  mappings.put("FastStringComparisonInfo", FastStringComparisonInfo.class);
  mappings.put("FlawStateComparisonInfo", FlawStateComparisonInfo.class);
  mappings.put("HttpMethodComparisonInfo", HttpMethodComparisonInfo.class);
  mappings.put("HttpStatusClassComparisonInfo", HttpStatusClassComparisonInfo.class);
  mappings.put("IIBInputNodeTypeComparisonInfo", IIBInputNodeTypeComparisonInfo.class);
  mappings.put("NumberComparisonInfo", NumberComparisonInfo.class);
  mappings.put("NumberRequestAttributeComparisonInfo", NumberRequestAttributeComparisonInfo.class);
  mappings.put("ServiceTypeComparisonInfo", ServiceTypeComparisonInfo.class);
  mappings.put("StringComparisonInfo", StringComparisonInfo.class);
  mappings.put("StringRequestAttributeComparisonInfo", StringRequestAttributeComparisonInfo.class);
  mappings.put("TagComparisonInfo", TagComparisonInfo.class);
  mappings.put("ZosComparisonInfo", ZosComparisonInfo.class);
  mappings.put("ComparisonInfo", ComparisonInfo.class);
  JSON.registerDiscriminator(ComparisonInfo.class, "type", mappings);
}
}

