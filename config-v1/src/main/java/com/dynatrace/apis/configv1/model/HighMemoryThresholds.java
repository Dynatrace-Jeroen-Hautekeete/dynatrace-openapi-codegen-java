/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Custom thresholds for high memory usage. If not set then the automatic mode is used.    **Both** conditions must be met to trigger an alert.
 */
@ApiModel(description = "Custom thresholds for high memory usage. If not set then the automatic mode is used.    **Both** conditions must be met to trigger an alert.")
@JsonPropertyOrder({
  HighMemoryThresholds.JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_WINDOWS,
  HighMemoryThresholds.JSON_PROPERTY_USED_MEMORY_PERCENTAGE_WINDOWS,
  HighMemoryThresholds.JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_NON_WINDOWS,
  HighMemoryThresholds.JSON_PROPERTY_USED_MEMORY_PERCENTAGE_NON_WINDOWS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class HighMemoryThresholds {
  public static final String JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_WINDOWS = "pageFaultsPerSecondWindows";
  private Integer pageFaultsPerSecondWindows;

  public static final String JSON_PROPERTY_USED_MEMORY_PERCENTAGE_WINDOWS = "usedMemoryPercentageWindows";
  private Integer usedMemoryPercentageWindows;

  public static final String JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_NON_WINDOWS = "pageFaultsPerSecondNonWindows";
  private Integer pageFaultsPerSecondNonWindows;

  public static final String JSON_PROPERTY_USED_MEMORY_PERCENTAGE_NON_WINDOWS = "usedMemoryPercentageNonWindows";
  private Integer usedMemoryPercentageNonWindows;

  public HighMemoryThresholds() { 
  }

  public HighMemoryThresholds pageFaultsPerSecondWindows(Integer pageFaultsPerSecondWindows) {
    this.pageFaultsPerSecondWindows = pageFaultsPerSecondWindows;
    return this;
  }

   /**
   * Memory page fault rate is higher than *X* faults per second on Windows.
   * minimum: 1
   * maximum: 10000
   * @return pageFaultsPerSecondWindows
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Memory page fault rate is higher than *X* faults per second on Windows.")
  @JsonProperty(JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPageFaultsPerSecondWindows() {
    return pageFaultsPerSecondWindows;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPageFaultsPerSecondWindows(Integer pageFaultsPerSecondWindows) {
    this.pageFaultsPerSecondWindows = pageFaultsPerSecondWindows;
  }


  public HighMemoryThresholds usedMemoryPercentageWindows(Integer usedMemoryPercentageWindows) {
    this.usedMemoryPercentageWindows = usedMemoryPercentageWindows;
    return this;
  }

   /**
   * Memory usage is higher than *X*% on Windows.
   * minimum: 1
   * maximum: 100
   * @return usedMemoryPercentageWindows
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Memory usage is higher than *X*% on Windows.")
  @JsonProperty(JSON_PROPERTY_USED_MEMORY_PERCENTAGE_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUsedMemoryPercentageWindows() {
    return usedMemoryPercentageWindows;
  }


  @JsonProperty(JSON_PROPERTY_USED_MEMORY_PERCENTAGE_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsedMemoryPercentageWindows(Integer usedMemoryPercentageWindows) {
    this.usedMemoryPercentageWindows = usedMemoryPercentageWindows;
  }


  public HighMemoryThresholds pageFaultsPerSecondNonWindows(Integer pageFaultsPerSecondNonWindows) {
    this.pageFaultsPerSecondNonWindows = pageFaultsPerSecondNonWindows;
    return this;
  }

   /**
   * Memory page fault rate is higher than *X* faults per second on Linux.
   * minimum: 1
   * maximum: 10000
   * @return pageFaultsPerSecondNonWindows
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Memory page fault rate is higher than *X* faults per second on Linux.")
  @JsonProperty(JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_NON_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPageFaultsPerSecondNonWindows() {
    return pageFaultsPerSecondNonWindows;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_FAULTS_PER_SECOND_NON_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPageFaultsPerSecondNonWindows(Integer pageFaultsPerSecondNonWindows) {
    this.pageFaultsPerSecondNonWindows = pageFaultsPerSecondNonWindows;
  }


  public HighMemoryThresholds usedMemoryPercentageNonWindows(Integer usedMemoryPercentageNonWindows) {
    this.usedMemoryPercentageNonWindows = usedMemoryPercentageNonWindows;
    return this;
  }

   /**
   * Memory usage is higher than *X*% on Linux.
   * minimum: 1
   * maximum: 100
   * @return usedMemoryPercentageNonWindows
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Memory usage is higher than *X*% on Linux.")
  @JsonProperty(JSON_PROPERTY_USED_MEMORY_PERCENTAGE_NON_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUsedMemoryPercentageNonWindows() {
    return usedMemoryPercentageNonWindows;
  }


  @JsonProperty(JSON_PROPERTY_USED_MEMORY_PERCENTAGE_NON_WINDOWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsedMemoryPercentageNonWindows(Integer usedMemoryPercentageNonWindows) {
    this.usedMemoryPercentageNonWindows = usedMemoryPercentageNonWindows;
  }


  /**
   * Return true if this HighMemoryThresholds object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HighMemoryThresholds highMemoryThresholds = (HighMemoryThresholds) o;
    return Objects.equals(this.pageFaultsPerSecondWindows, highMemoryThresholds.pageFaultsPerSecondWindows) &&
        Objects.equals(this.usedMemoryPercentageWindows, highMemoryThresholds.usedMemoryPercentageWindows) &&
        Objects.equals(this.pageFaultsPerSecondNonWindows, highMemoryThresholds.pageFaultsPerSecondNonWindows) &&
        Objects.equals(this.usedMemoryPercentageNonWindows, highMemoryThresholds.usedMemoryPercentageNonWindows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageFaultsPerSecondWindows, usedMemoryPercentageWindows, pageFaultsPerSecondNonWindows, usedMemoryPercentageNonWindows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HighMemoryThresholds {\n");
    sb.append("    pageFaultsPerSecondWindows: ").append(toIndentedString(pageFaultsPerSecondWindows)).append("\n");
    sb.append("    usedMemoryPercentageWindows: ").append(toIndentedString(usedMemoryPercentageWindows)).append("\n");
    sb.append("    pageFaultsPerSecondNonWindows: ").append(toIndentedString(pageFaultsPerSecondNonWindows)).append("\n");
    sb.append("    usedMemoryPercentageNonWindows: ").append(toIndentedString(usedMemoryPercentageNonWindows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

