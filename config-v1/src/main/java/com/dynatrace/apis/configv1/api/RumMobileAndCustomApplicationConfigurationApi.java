/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.KeyUserActionMobile;
import com.dynatrace.apis.configv1.model.KeyUserActionMobileList;
import com.dynatrace.apis.configv1.model.MobileCustomAppConfig;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionProperty;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyList;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyShort;
import com.dynatrace.apis.configv1.model.MobileSessionUserActionPropertyUpd;
import com.dynatrace.apis.configv1.model.NewMobileCustomAppConfig;
import com.dynatrace.apis.configv1.model.StubList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class RumMobileAndCustomApplicationConfigurationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RumMobileAndCustomApplicationConfigurationApi() {
    this(new ApiClient());
  }

  public RumMobileAndCustomApplicationConfigurationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new mobile or custom application
   * The body must not provide an identifier. An identifier is assigned automatically by Dynatrace.   You can, however, provide your own applicationId. If you don&#39;t specify an applicationId, it is assigned automatically by Dynatrace.
   * @param newMobileCustomAppConfig The JSON body of the request. Contains the parameters of the new mobile or custom application. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createMobileApplicationConfig(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createMobileApplicationConfigWithHttpInfo(newMobileCustomAppConfig);
    return localVarResponse.getData();
  }

  /**
   * Creates a new mobile or custom application
   * The body must not provide an identifier. An identifier is assigned automatically by Dynatrace.   You can, however, provide your own applicationId. If you don&#39;t specify an applicationId, it is assigned automatically by Dynatrace.
   * @param newMobileCustomAppConfig The JSON body of the request. Contains the parameters of the new mobile or custom application. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createMobileApplicationConfigWithHttpInfo(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createMobileApplicationConfigRequestBuilder(newMobileCustomAppConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createMobileApplicationConfigRequestBuilder(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(newMobileCustomAppConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Marks the user action as a key user action in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param actionName The name of the user action to be marked as a key user action. (required)
   * @return KeyUserActionMobile
   * @throws ApiException if fails to make API call
   */
  public KeyUserActionMobile createMobileKeyUserAction(String applicationId, String actionName) throws ApiException {
    ApiResponse<KeyUserActionMobile> localVarResponse = createMobileKeyUserActionWithHttpInfo(applicationId, actionName);
    return localVarResponse.getData();
  }

  /**
   * Marks the user action as a key user action in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param actionName The name of the user action to be marked as a key user action. (required)
   * @return ApiResponse&lt;KeyUserActionMobile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeyUserActionMobile> createMobileKeyUserActionWithHttpInfo(String applicationId, String actionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createMobileKeyUserActionRequestBuilder(applicationId, actionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createMobileKeyUserAction", localVarResponse);
        }
        return new ApiResponse<KeyUserActionMobile>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeyUserActionMobile>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createMobileKeyUserActionRequestBuilder(String applicationId, String actionName) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling createMobileKeyUserAction");
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      throw new ApiException(400, "Missing the required parameter 'actionName' when calling createMobileKeyUserAction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/keyUserActions/{actionName}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{actionName}", ApiClient.urlEncode(actionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates a new mobile session or user action property for the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param mobileSessionUserActionProperty The JSON body of the request. Contains the configuration of the property. (optional)
   * @return MobileSessionUserActionPropertyShort
   * @throws ApiException if fails to make API call
   */
  public MobileSessionUserActionPropertyShort createSessionProperty(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    ApiResponse<MobileSessionUserActionPropertyShort> localVarResponse = createSessionPropertyWithHttpInfo(applicationId, mobileSessionUserActionProperty);
    return localVarResponse.getData();
  }

  /**
   * Creates a new mobile session or user action property for the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param mobileSessionUserActionProperty The JSON body of the request. Contains the configuration of the property. (optional)
   * @return ApiResponse&lt;MobileSessionUserActionPropertyShort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MobileSessionUserActionPropertyShort> createSessionPropertyWithHttpInfo(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSessionPropertyRequestBuilder(applicationId, mobileSessionUserActionProperty);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSessionProperty", localVarResponse);
        }
        return new ApiResponse<MobileSessionUserActionPropertyShort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MobileSessionUserActionPropertyShort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSessionPropertyRequestBuilder(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling createSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileSessionUserActionProperty);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified mobile or custom application
   * 
   * @param id The ID of the application to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteMobileApplicationConfig(String id) throws ApiException {
    deleteMobileApplicationConfigWithHttpInfo(id);
  }

  /**
   * Deletes the specified mobile or custom application
   * 
   * @param id The ID of the application to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteMobileApplicationConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteMobileApplicationConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteMobileApplicationConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteMobileApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Removes the specified user action from the list of key user actions in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param actionName The ID of the user action to be removed from the key user actions list. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteMobileKeyUserAction(String applicationId, String actionName) throws ApiException {
    deleteMobileKeyUserActionWithHttpInfo(applicationId, actionName);
  }

  /**
   * Removes the specified user action from the list of key user actions in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param actionName The ID of the user action to be removed from the key user actions list. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteMobileKeyUserActionWithHttpInfo(String applicationId, String actionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteMobileKeyUserActionRequestBuilder(applicationId, actionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteMobileKeyUserAction", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteMobileKeyUserActionRequestBuilder(String applicationId, String actionName) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling deleteMobileKeyUserAction");
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      throw new ApiException(400, "Missing the required parameter 'actionName' when calling deleteMobileKeyUserAction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/keyUserActions/{actionName}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{actionName}", ApiClient.urlEncode(actionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified mobile session or user action property for an application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSessionProperty(String applicationId, String key) throws ApiException {
    deleteSessionPropertyWithHttpInfo(applicationId, key);
  }

  /**
   * Deletes the specified mobile session or user action property for an application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSessionPropertyWithHttpInfo(String applicationId, String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSessionPropertyRequestBuilder(applicationId, key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSessionProperty", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSessionPropertyRequestBuilder(String applicationId, String key) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling deleteSessionProperty");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling deleteSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties/{key}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration of the specified mobile or custom application
   * 
   * @param id The ID of the required mobile or custom application. (required)
   * @return MobileCustomAppConfig
   * @throws ApiException if fails to make API call
   */
  public MobileCustomAppConfig getMobileApplicationConfig(String id) throws ApiException {
    ApiResponse<MobileCustomAppConfig> localVarResponse = getMobileApplicationConfigWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of the specified mobile or custom application
   * 
   * @param id The ID of the required mobile or custom application. (required)
   * @return ApiResponse&lt;MobileCustomAppConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MobileCustomAppConfig> getMobileApplicationConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMobileApplicationConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<MobileCustomAppConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MobileCustomAppConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMobileApplicationConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getMobileApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the specified mobile session or user action property of an application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @return MobileSessionUserActionProperty
   * @throws ApiException if fails to make API call
   */
  public MobileSessionUserActionProperty getSessionProperty(String applicationId, String key) throws ApiException {
    ApiResponse<MobileSessionUserActionProperty> localVarResponse = getSessionPropertyWithHttpInfo(applicationId, key);
    return localVarResponse.getData();
  }

  /**
   * Gets the specified mobile session or user action property of an application
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @return ApiResponse&lt;MobileSessionUserActionProperty&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MobileSessionUserActionProperty> getSessionPropertyWithHttpInfo(String applicationId, String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSessionPropertyRequestBuilder(applicationId, key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSessionProperty", localVarResponse);
        }
        return new ApiResponse<MobileSessionUserActionProperty>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MobileSessionUserActionProperty>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSessionPropertyRequestBuilder(String applicationId, String key) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling getSessionProperty");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties/{key}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all existing mobile and custom applications
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList listMobileApplicationConfigs() throws ApiException {
    ApiResponse<StubList> localVarResponse = listMobileApplicationConfigsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all existing mobile and custom applications
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> listMobileApplicationConfigsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listMobileApplicationConfigsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listMobileApplicationConfigs", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listMobileApplicationConfigsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of key user actions in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @return KeyUserActionMobileList
   * @throws ApiException if fails to make API call
   */
  public KeyUserActionMobileList listMobileKeyUserActions(String applicationId) throws ApiException {
    ApiResponse<KeyUserActionMobileList> localVarResponse = listMobileKeyUserActionsWithHttpInfo(applicationId);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of key user actions in the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @return ApiResponse&lt;KeyUserActionMobileList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeyUserActionMobileList> listMobileKeyUserActionsWithHttpInfo(String applicationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listMobileKeyUserActionsRequestBuilder(applicationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listMobileKeyUserActions", localVarResponse);
        }
        return new ApiResponse<KeyUserActionMobileList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeyUserActionMobileList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listMobileKeyUserActionsRequestBuilder(String applicationId) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling listMobileKeyUserActions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/keyUserActions"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all mobile session and user action properties for the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @return MobileSessionUserActionPropertyList
   * @throws ApiException if fails to make API call
   */
  public MobileSessionUserActionPropertyList listSessionProperties(String applicationId) throws ApiException {
    ApiResponse<MobileSessionUserActionPropertyList> localVarResponse = listSessionPropertiesWithHttpInfo(applicationId);
    return localVarResponse.getData();
  }

  /**
   * Lists all mobile session and user action properties for the specified application
   * 
   * @param applicationId The ID of the required application. (required)
   * @return ApiResponse&lt;MobileSessionUserActionPropertyList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MobileSessionUserActionPropertyList> listSessionPropertiesWithHttpInfo(String applicationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSessionPropertiesRequestBuilder(applicationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSessionProperties", localVarResponse);
        }
        return new ApiResponse<MobileSessionUserActionPropertyList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MobileSessionUserActionPropertyList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSessionPropertiesRequestBuilder(String applicationId) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling listSessionProperties");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of the specified mobile or custom application
   * You can&#39;t change applicationId and applicationType with this request.  All other values must be included in the body, depending on the applicationType.
   * @param id The ID of the application to be updated. (required)
   * @param mobileCustomAppConfig The JSON body of the request. Contains updated configuration of the mobile or custom application.   Do not set the identifier in the body. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateMobileApplicationConfig(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    updateMobileApplicationConfigWithHttpInfo(id, mobileCustomAppConfig);
  }

  /**
   * Updates the configuration of the specified mobile or custom application
   * You can&#39;t change applicationId and applicationType with this request.  All other values must be included in the body, depending on the applicationType.
   * @param id The ID of the application to be updated. (required)
   * @param mobileCustomAppConfig The JSON body of the request. Contains updated configuration of the mobile or custom application.   Do not set the identifier in the body. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateMobileApplicationConfigWithHttpInfo(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateMobileApplicationConfigRequestBuilder(id, mobileCustomAppConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateMobileApplicationConfigRequestBuilder(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateMobileApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileCustomAppConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the specified mobile session or user action property for an application
   * If the property with the specified ID does not exist, a new property is created.
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @param mobileSessionUserActionPropertyUpd The JSON body of the request. Contains the configuration of the property. (optional)
   * @return MobileSessionUserActionPropertyShort
   * @throws ApiException if fails to make API call
   */
  public MobileSessionUserActionPropertyShort updateSessionProperty(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    ApiResponse<MobileSessionUserActionPropertyShort> localVarResponse = updateSessionPropertyWithHttpInfo(applicationId, key, mobileSessionUserActionPropertyUpd);
    return localVarResponse.getData();
  }

  /**
   * Updates the specified mobile session or user action property for an application
   * If the property with the specified ID does not exist, a new property is created.
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @param mobileSessionUserActionPropertyUpd The JSON body of the request. Contains the configuration of the property. (optional)
   * @return ApiResponse&lt;MobileSessionUserActionPropertyShort&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MobileSessionUserActionPropertyShort> updateSessionPropertyWithHttpInfo(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSessionPropertyRequestBuilder(applicationId, key, mobileSessionUserActionPropertyUpd);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSessionProperty", localVarResponse);
        }
        return new ApiResponse<MobileSessionUserActionPropertyShort>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MobileSessionUserActionPropertyShort>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSessionPropertyRequestBuilder(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling updateSessionProperty");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling updateSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties/{key}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileSessionUserActionPropertyUpd);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /applications/mobile&#x60; request
   * 
   * @param newMobileCustomAppConfig The JSON body of the request. Contains the mobile or custom application configuration to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateMobileApplicationConfig(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {
    validateCreateMobileApplicationConfigWithHttpInfo(newMobileCustomAppConfig);
  }

  /**
   * Validates the payload for the &#x60;POST /applications/mobile&#x60; request
   * 
   * @param newMobileCustomAppConfig The JSON body of the request. Contains the mobile or custom application configuration to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateMobileApplicationConfigWithHttpInfo(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateMobileApplicationConfigRequestBuilder(newMobileCustomAppConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateMobileApplicationConfigRequestBuilder(NewMobileCustomAppConfig newMobileCustomAppConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(newMobileCustomAppConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /applications/mobile/{applicationId}/userActionAndSessionProperties&#x60; request
   * 
   * @param applicationId The ID of the required application. (required)
   * @param mobileSessionUserActionProperty The JSON body of the request. Contains the configuration of the property to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateSessionProperty(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    validateCreateSessionPropertyWithHttpInfo(applicationId, mobileSessionUserActionProperty);
  }

  /**
   * Validates the payload for the &#x60;POST /applications/mobile/{applicationId}/userActionAndSessionProperties&#x60; request
   * 
   * @param applicationId The ID of the required application. (required)
   * @param mobileSessionUserActionProperty The JSON body of the request. Contains the configuration of the property to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateSessionPropertyWithHttpInfo(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateSessionPropertyRequestBuilder(applicationId, mobileSessionUserActionProperty);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateSessionProperty", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateSessionPropertyRequestBuilder(String applicationId, MobileSessionUserActionProperty mobileSessionUserActionProperty) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling validateCreateSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties/validator"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileSessionUserActionProperty);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;PUT /applications/mobile/{id}&#x60; request.
   * 
   * @param id The ID of the mobile or custom application to be validated. (required)
   * @param mobileCustomAppConfig The JSON body of the request. Contains the mobile or custom application configuration to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateMobileApplicationConfig(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    validateUpdateMobileApplicationConfigWithHttpInfo(id, mobileCustomAppConfig);
  }

  /**
   * Validates the payload for the &#x60;PUT /applications/mobile/{id}&#x60; request.
   * 
   * @param id The ID of the mobile or custom application to be validated. (required)
   * @param mobileCustomAppConfig The JSON body of the request. Contains the mobile or custom application configuration to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateMobileApplicationConfigWithHttpInfo(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateMobileApplicationConfigRequestBuilder(id, mobileCustomAppConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateMobileApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateMobileApplicationConfigRequestBuilder(String id, MobileCustomAppConfig mobileCustomAppConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateMobileApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{id}/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileCustomAppConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;PUT /applications/mobile/{applicationId}/userActionAndSessionProperties/{key}&#x60; request
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @param mobileSessionUserActionPropertyUpd The JSON body of the request. Contains the configuration of the property to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateSessionProperty(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    validateUpdateSessionPropertyWithHttpInfo(applicationId, key, mobileSessionUserActionPropertyUpd);
  }

  /**
   * Validates the payload for the &#x60;PUT /applications/mobile/{applicationId}/userActionAndSessionProperties/{key}&#x60; request
   * 
   * @param applicationId The ID of the required application. (required)
   * @param key The key of the required mobile session or user action property. (required)
   * @param mobileSessionUserActionPropertyUpd The JSON body of the request. Contains the configuration of the property to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateSessionPropertyWithHttpInfo(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateSessionPropertyRequestBuilder(applicationId, key, mobileSessionUserActionPropertyUpd);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateSessionProperty", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateSessionPropertyRequestBuilder(String applicationId, String key, MobileSessionUserActionPropertyUpd mobileSessionUserActionPropertyUpd) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling validateUpdateSessionProperty");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling validateUpdateSessionProperty");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/mobile/{applicationId}/userActionAndSessionProperties/{key}/validator"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(mobileSessionUserActionPropertyUpd);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
