/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Allowed beacon origin for CORS requests.
 */
@ApiModel(description = "Allowed beacon origin for CORS requests.")
@JsonPropertyOrder({
  BeaconDomainPattern.JSON_PROPERTY_DOMAIN_NAME_MATCHER,
  BeaconDomainPattern.JSON_PROPERTY_DOMAIN_NAME_PATTERN
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class BeaconDomainPattern {
  /**
   * The matching operation for the **domainNamePattern**.
   */
  public enum DomainNameMatcherEnum {
    CONTAINS("CONTAINS"),
    
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    STARTS_WITH("STARTS_WITH");

    private String value;

    DomainNameMatcherEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DomainNameMatcherEnum fromValue(String value) {
      for (DomainNameMatcherEnum b : DomainNameMatcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DOMAIN_NAME_MATCHER = "domainNameMatcher";
  private DomainNameMatcherEnum domainNameMatcher;

  public static final String JSON_PROPERTY_DOMAIN_NAME_PATTERN = "domainNamePattern";
  private String domainNamePattern;

  public BeaconDomainPattern() { 
  }

  public BeaconDomainPattern domainNameMatcher(DomainNameMatcherEnum domainNameMatcher) {
    this.domainNameMatcher = domainNameMatcher;
    return this;
  }

   /**
   * The matching operation for the **domainNamePattern**.
   * @return domainNameMatcher
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The matching operation for the **domainNamePattern**.")
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_MATCHER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DomainNameMatcherEnum getDomainNameMatcher() {
    return domainNameMatcher;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_MATCHER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomainNameMatcher(DomainNameMatcherEnum domainNameMatcher) {
    this.domainNameMatcher = domainNameMatcher;
  }


  public BeaconDomainPattern domainNamePattern(String domainNamePattern) {
    this.domainNamePattern = domainNamePattern;
    return this;
  }

   /**
   * The pattern of the allowed domain name.
   * @return domainNamePattern
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The pattern of the allowed domain name.")
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDomainNamePattern() {
    return domainNamePattern;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomainNamePattern(String domainNamePattern) {
    this.domainNamePattern = domainNamePattern;
  }


  /**
   * Return true if this BeaconDomainPattern object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeaconDomainPattern beaconDomainPattern = (BeaconDomainPattern) o;
    return Objects.equals(this.domainNameMatcher, beaconDomainPattern.domainNameMatcher) &&
        Objects.equals(this.domainNamePattern, beaconDomainPattern.domainNamePattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainNameMatcher, domainNamePattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeaconDomainPattern {\n");
    sb.append("    domainNameMatcher: ").append(toIndentedString(domainNameMatcher)).append("\n");
    sb.append("    domainNamePattern: ").append(toIndentedString(domainNamePattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

