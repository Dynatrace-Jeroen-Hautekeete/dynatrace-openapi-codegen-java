/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * User action property filter.
 */
@ApiModel(description = "User action property filter.")
@JsonPropertyOrder({
  UserActionPropertyFilter.JSON_PROPERTY_KEY,
  UserActionPropertyFilter.JSON_PROPERTY_VALUE,
  UserActionPropertyFilter.JSON_PROPERTY_FROM,
  UserActionPropertyFilter.JSON_PROPERTY_TO,
  UserActionPropertyFilter.JSON_PROPERTY_MATCH_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserActionPropertyFilter {
  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_FROM = "from";
  private Double from;

  public static final String JSON_PROPERTY_TO = "to";
  private Double to;

  /**
   * Specifies the match type of a string filter, e.g. using &#x60;Contains&#x60; or &#x60;Equals&#x60;.    Only applicable to string values.
   */
  public enum MatchTypeEnum {
    CONTAINS("Contains"),
    
    EQUALS("Equals");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MATCH_TYPE = "matchType";
  private MatchTypeEnum matchType;

  public UserActionPropertyFilter() { 
  }

  public UserActionPropertyFilter key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The key of the action property we&#39;re checking.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the action property we're checking.")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public UserActionPropertyFilter value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Only actions that have this value in the specified property are included in the metric calculation.    Only applicable to string values.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only actions that have this value in the specified property are included in the metric calculation.    Only applicable to string values.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }


  public UserActionPropertyFilter from(Double from) {
    this.from = from;
    return this;
  }

   /**
   * Only actions that have a value greater than or equal to this are included in the metric calculation.    Only applicable to numerical values.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only actions that have a value greater than or equal to this are included in the metric calculation.    Only applicable to numerical values.")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(Double from) {
    this.from = from;
  }


  public UserActionPropertyFilter to(Double to) {
    this.to = to;
    return this;
  }

   /**
   * Only actions that have a value less than or equal to this are included in the metric calculation.    Only applicable to numerical values.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only actions that have a value less than or equal to this are included in the metric calculation.    Only applicable to numerical values.")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(Double to) {
    this.to = to;
  }


  public UserActionPropertyFilter matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * Specifies the match type of a string filter, e.g. using &#x60;Contains&#x60; or &#x60;Equals&#x60;.    Only applicable to string values.
   * @return matchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the match type of a string filter, e.g. using `Contains` or `Equals`.    Only applicable to string values.")
  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MatchTypeEnum getMatchType() {
    return matchType;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  /**
   * Return true if this UserActionPropertyFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActionPropertyFilter userActionPropertyFilter = (UserActionPropertyFilter) o;
    return Objects.equals(this.key, userActionPropertyFilter.key) &&
        Objects.equals(this.value, userActionPropertyFilter.value) &&
        Objects.equals(this.from, userActionPropertyFilter.from) &&
        Objects.equals(this.to, userActionPropertyFilter.to) &&
        Objects.equals(this.matchType, userActionPropertyFilter.matchType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, value, from, to, matchType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActionPropertyFilter {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

