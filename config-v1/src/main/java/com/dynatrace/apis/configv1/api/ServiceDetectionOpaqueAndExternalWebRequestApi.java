/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.OpaqueAndExternalWebRequestRule;
import com.dynatrace.apis.configv1.model.StubList;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ServiceDetectionOpaqueAndExternalWebRequestApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ServiceDetectionOpaqueAndExternalWebRequestApi() {
    this(new ApiClient());
  }

  public ServiceDetectionOpaqueAndExternalWebRequestApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new service detection rule
   * The body must not provide an ID as it will be automatically assigned.
   * @param position The position of the new rule:    * &#x60;APPEND&#x60;: at the end of the rule list.   * &#x60;PREPEND&#x60;: on top of the rule list.    (optional, default to APPEND)
   * @param opaqueAndExternalWebRequestRule The JSON body of the request containing parameters of the new service detection rule.    You must not specify the ID of the rule!   The **order** field is ignored in this request. To enforce a particular order use the &#x60;PUT /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST/reorder&#x60; request. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createOpaqueAndExternalWebRequestDetectionRule(String position, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(position, opaqueAndExternalWebRequestRule);
    return localVarResponse.getData();
  }

  /**
   * Creates a new service detection rule
   * The body must not provide an ID as it will be automatically assigned.
   * @param position The position of the new rule:    * &#x60;APPEND&#x60;: at the end of the rule list.   * &#x60;PREPEND&#x60;: on top of the rule list.    (optional, default to APPEND)
   * @param opaqueAndExternalWebRequestRule The JSON body of the request containing parameters of the new service detection rule.    You must not specify the ID of the rule!   The **order** field is ignored in this request. To enforce a particular order use the &#x60;PUT /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST/reorder&#x60; request. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(String position, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(position, opaqueAndExternalWebRequestRule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(String position, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("position", position));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opaqueAndExternalWebRequestRule);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified service detection rule
   * 
   * @param id The ID of the service detection rule to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOpaqueAndExternalWebRequestDetectionRule(UUID id) throws ApiException {
    deleteOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(id);
  }

  /**
   * Deletes the specified service detection rule
   * 
   * @param id The ID of the service detection rule to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteOpaqueAndExternalWebRequestDetectionRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Shows the properties of the specified service detection rule
   * 
   * @param id The ID of the required service detection rule. (required)
   * @return OpaqueAndExternalWebRequestRule
   * @throws ApiException if fails to make API call
   */
  public OpaqueAndExternalWebRequestRule getOpaqueAndExternalWebRequestDetectionRule(UUID id) throws ApiException {
    ApiResponse<OpaqueAndExternalWebRequestRule> localVarResponse = getOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Shows the properties of the specified service detection rule
   * 
   * @param id The ID of the required service detection rule. (required)
   * @return ApiResponse&lt;OpaqueAndExternalWebRequestRule&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OpaqueAndExternalWebRequestRule> getOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<OpaqueAndExternalWebRequestRule>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpaqueAndExternalWebRequestRule>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getOpaqueAndExternalWebRequestDetectionRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all opaque and external web request service detection rules
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList listOpaqueAndExternalWebRequestDetectionRules() throws ApiException {
    ApiResponse<StubList> localVarResponse = listOpaqueAndExternalWebRequestDetectionRulesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all opaque and external web request service detection rules
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> listOpaqueAndExternalWebRequestDetectionRulesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOpaqueAndExternalWebRequestDetectionRulesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOpaqueAndExternalWebRequestDetectionRules", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOpaqueAndExternalWebRequestDetectionRulesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reorders the service detection rules of the specified type
   * The request reorders the rules of the specified type according to the order of the IDs in the body of the request.    Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
   * @param stubList The JSON body of the request containing the service detection rules in the required order. (optional)
   * @throws ApiException if fails to make API call
   */
  public void orderOpaqueAndExternalWebRequestDetectionRules(StubList stubList) throws ApiException {
    orderOpaqueAndExternalWebRequestDetectionRulesWithHttpInfo(stubList);
  }

  /**
   * Reorders the service detection rules of the specified type
   * The request reorders the rules of the specified type according to the order of the IDs in the body of the request.    Rules that are omitted in the body of the request will retain their relative order but will be placed *after* all those present in the request.
   * @param stubList The JSON body of the request containing the service detection rules in the required order. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> orderOpaqueAndExternalWebRequestDetectionRulesWithHttpInfo(StubList stubList) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = orderOpaqueAndExternalWebRequestDetectionRulesRequestBuilder(stubList);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("orderOpaqueAndExternalWebRequestDetectionRules", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder orderOpaqueAndExternalWebRequestDetectionRulesRequestBuilder(StubList stubList) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/order";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(stubList);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates an existing service detection rule
   * If the rule with the specified ID doesn&#39;t exist, a new rule will be created and appended to the end of the rule list.    The request keeps an existing order of rules, unless the **order** parameter is set.
   * @param id The ID of the rule to be updated. (required)
   * @param opaqueAndExternalWebRequestRule The JSON body of the request containing updated parameters of the service detection rule. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation updateOpaqueAndExternalWebRequestDetectionRule(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = updateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(id, opaqueAndExternalWebRequestRule);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing service detection rule
   * If the rule with the specified ID doesn&#39;t exist, a new rule will be created and appended to the end of the rule list.    The request keeps an existing order of rules, unless the **order** parameter is set.
   * @param id The ID of the rule to be updated. (required)
   * @param opaqueAndExternalWebRequestRule The JSON body of the request containing updated parameters of the service detection rule. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> updateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(id, opaqueAndExternalWebRequestRule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateOpaqueAndExternalWebRequestDetectionRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opaqueAndExternalWebRequestRule);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST&#x60; request
   * 
   * @param opaqueAndExternalWebRequestRule  (required)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateOpaqueAndExternalWebRequestDetectionRule(OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    validateCreateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(opaqueAndExternalWebRequestRule);
  }

  /**
   * Validates the payload for the &#x60;POST /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST&#x60; request
   * 
   * @param opaqueAndExternalWebRequestRule  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(opaqueAndExternalWebRequestRule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    // verify the required parameter 'opaqueAndExternalWebRequestRule' is set
    if (opaqueAndExternalWebRequestRule == null) {
      throw new ApiException(400, "Missing the required parameter 'opaqueAndExternalWebRequestRule' when calling validateCreateOpaqueAndExternalWebRequestDetectionRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opaqueAndExternalWebRequestRule);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate the payload for the &#x60;PUT /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}&#x60; request
   * 
   * @param id The ID of the service detection rule to be validated. (required)
   * @param opaqueAndExternalWebRequestRule  (required)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateOpaqueAndExternalWebRequestDetectionRule(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    validateUpdateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(id, opaqueAndExternalWebRequestRule);
  }

  /**
   * Validate the payload for the &#x60;PUT /ruleBasedServiceDetection/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}&#x60; request
   * 
   * @param id The ID of the service detection rule to be validated. (required)
   * @param opaqueAndExternalWebRequestRule  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateOpaqueAndExternalWebRequestDetectionRuleWithHttpInfo(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(id, opaqueAndExternalWebRequestRule);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateOpaqueAndExternalWebRequestDetectionRule", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateOpaqueAndExternalWebRequestDetectionRuleRequestBuilder(UUID id, OpaqueAndExternalWebRequestRule opaqueAndExternalWebRequestRule) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateOpaqueAndExternalWebRequestDetectionRule");
    }
    // verify the required parameter 'opaqueAndExternalWebRequestRule' is set
    if (opaqueAndExternalWebRequestRule == null) {
      throw new ApiException(400, "Missing the required parameter 'opaqueAndExternalWebRequestRule' when calling validateUpdateOpaqueAndExternalWebRequestDetectionRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/service/detectionRules/OPAQUE_AND_EXTERNAL_WEB_REQUEST/{id}/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opaqueAndExternalWebRequestRule);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
