/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.DataExplorerFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a data explorer query.
 */
@ApiModel(description = "Configuration of a data explorer query.")
@JsonPropertyOrder({
  DataExplorerQuery.JSON_PROPERTY_ID,
  DataExplorerQuery.JSON_PROPERTY_METRIC,
  DataExplorerQuery.JSON_PROPERTY_SPACE_AGGREGATION,
  DataExplorerQuery.JSON_PROPERTY_TIME_AGGREGATION,
  DataExplorerQuery.JSON_PROPERTY_SPLIT_BY,
  DataExplorerQuery.JSON_PROPERTY_SORT_BY,
  DataExplorerQuery.JSON_PROPERTY_FILTER_BY,
  DataExplorerQuery.JSON_PROPERTY_LIMIT,
  DataExplorerQuery.JSON_PROPERTY_METRIC_SELECTOR,
  DataExplorerQuery.JSON_PROPERTY_FOLD_TRANSFORMATION,
  DataExplorerQuery.JSON_PROPERTY_ENABLED,
  DataExplorerQuery.JSON_PROPERTY_GENERATED_METRIC_SELECTOR
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DataExplorerQuery {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_METRIC = "metric";
  private String metric;

  /**
   * Space aggregation applied to the query
   */
  public enum SpaceAggregationEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    PERCENTILE_10("PERCENTILE_10"),
    
    PERCENTILE_75("PERCENTILE_75"),
    
    PERCENTILE_90("PERCENTILE_90"),
    
    SUM("SUM"),
    
    VALUE("VALUE");

    private String value;

    SpaceAggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SpaceAggregationEnum fromValue(String value) {
      for (SpaceAggregationEnum b : SpaceAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SPACE_AGGREGATION = "spaceAggregation";
  private SpaceAggregationEnum spaceAggregation;

  /**
   * Time roll up applied to the query
   */
  public enum TimeAggregationEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    DEFAULT("DEFAULT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    SUM("SUM"),
    
    VALUE("VALUE");

    private String value;

    TimeAggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeAggregationEnum fromValue(String value) {
      for (TimeAggregationEnum b : TimeAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TIME_AGGREGATION = "timeAggregation";
  private TimeAggregationEnum timeAggregation;

  public static final String JSON_PROPERTY_SPLIT_BY = "splitBy";
  private List<String> splitBy = new ArrayList<>();

  /**
   * The sorting applied to the query
   */
  public enum SortByEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortByEnum fromValue(String value) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SORT_BY = "sortBy";
  private SortByEnum sortBy;

  public static final String JSON_PROPERTY_FILTER_BY = "filterBy";
  private DataExplorerFilter filterBy;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit;

  public static final String JSON_PROPERTY_METRIC_SELECTOR = "metricSelector";
  private String metricSelector;

  /**
   * The fold transformation
   */
  public enum FoldTransformationEnum {
    LAST_VALUE("LAST_VALUE"),
    
    TOTAL("TOTAL");

    private String value;

    FoldTransformationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FoldTransformationEnum fromValue(String value) {
      for (FoldTransformationEnum b : FoldTransformationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FOLD_TRANSFORMATION = "foldTransformation";
  private FoldTransformationEnum foldTransformation;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_GENERATED_METRIC_SELECTOR = "generatedMetricSelector";
  private String generatedMetricSelector;

  public DataExplorerQuery() { 
  }

  public DataExplorerQuery id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the query
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the query")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public DataExplorerQuery metric(String metric) {
    this.metric = metric;
    return this;
  }

   /**
   * The metric id
   * @return metric
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The metric id")
  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetric() {
    return metric;
  }


  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetric(String metric) {
    this.metric = metric;
  }


  public DataExplorerQuery spaceAggregation(SpaceAggregationEnum spaceAggregation) {
    this.spaceAggregation = spaceAggregation;
    return this;
  }

   /**
   * Space aggregation applied to the query
   * @return spaceAggregation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Space aggregation applied to the query")
  @JsonProperty(JSON_PROPERTY_SPACE_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SpaceAggregationEnum getSpaceAggregation() {
    return spaceAggregation;
  }


  @JsonProperty(JSON_PROPERTY_SPACE_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSpaceAggregation(SpaceAggregationEnum spaceAggregation) {
    this.spaceAggregation = spaceAggregation;
  }


  public DataExplorerQuery timeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
    return this;
  }

   /**
   * Time roll up applied to the query
   * @return timeAggregation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Time roll up applied to the query")
  @JsonProperty(JSON_PROPERTY_TIME_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TimeAggregationEnum getTimeAggregation() {
    return timeAggregation;
  }


  @JsonProperty(JSON_PROPERTY_TIME_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
  }


  public DataExplorerQuery splitBy(List<String> splitBy) {
    this.splitBy = splitBy;
    return this;
  }

  public DataExplorerQuery addSplitByItem(String splitByItem) {
    this.splitBy.add(splitByItem);
    return this;
  }

   /**
   * The splittings applied to the query
   * @return splitBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The splittings applied to the query")
  @JsonProperty(JSON_PROPERTY_SPLIT_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getSplitBy() {
    return splitBy;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSplitBy(List<String> splitBy) {
    this.splitBy = splitBy;
  }


  public DataExplorerQuery sortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * The sorting applied to the query
   * @return sortBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sorting applied to the query")
  @JsonProperty(JSON_PROPERTY_SORT_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SortByEnum getSortBy() {
    return sortBy;
  }


  @JsonProperty(JSON_PROPERTY_SORT_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }


  public DataExplorerQuery filterBy(DataExplorerFilter filterBy) {
    this.filterBy = filterBy;
    return this;
  }

   /**
   * Get filterBy
   * @return filterBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DataExplorerFilter getFilterBy() {
    return filterBy;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilterBy(DataExplorerFilter filterBy) {
    this.filterBy = filterBy;
  }


  public DataExplorerQuery limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Limit the results of the query
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Limit the results of the query")
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public DataExplorerQuery metricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
    return this;
  }

   /**
   * The metric selector
   * @return metricSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric selector")
  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetricSelector() {
    return metricSelector;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
  }


  public DataExplorerQuery foldTransformation(FoldTransformationEnum foldTransformation) {
    this.foldTransformation = foldTransformation;
    return this;
  }

   /**
   * The fold transformation
   * @return foldTransformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fold transformation")
  @JsonProperty(JSON_PROPERTY_FOLD_TRANSFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FoldTransformationEnum getFoldTransformation() {
    return foldTransformation;
  }


  @JsonProperty(JSON_PROPERTY_FOLD_TRANSFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoldTransformation(FoldTransformationEnum foldTransformation) {
    this.foldTransformation = foldTransformation;
  }


  public DataExplorerQuery enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Status of the query
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Status of the query")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DataExplorerQuery generatedMetricSelector(String generatedMetricSelector) {
    this.generatedMetricSelector = generatedMetricSelector;
    return this;
  }

   /**
   * Generated metric selector
   * @return generatedMetricSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Generated metric selector")
  @JsonProperty(JSON_PROPERTY_GENERATED_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGeneratedMetricSelector() {
    return generatedMetricSelector;
  }


  @JsonProperty(JSON_PROPERTY_GENERATED_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeneratedMetricSelector(String generatedMetricSelector) {
    this.generatedMetricSelector = generatedMetricSelector;
  }


  /**
   * Return true if this DataExplorerQuery object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExplorerQuery dataExplorerQuery = (DataExplorerQuery) o;
    return Objects.equals(this.id, dataExplorerQuery.id) &&
        Objects.equals(this.metric, dataExplorerQuery.metric) &&
        Objects.equals(this.spaceAggregation, dataExplorerQuery.spaceAggregation) &&
        Objects.equals(this.timeAggregation, dataExplorerQuery.timeAggregation) &&
        Objects.equals(this.splitBy, dataExplorerQuery.splitBy) &&
        Objects.equals(this.sortBy, dataExplorerQuery.sortBy) &&
        Objects.equals(this.filterBy, dataExplorerQuery.filterBy) &&
        Objects.equals(this.limit, dataExplorerQuery.limit) &&
        Objects.equals(this.metricSelector, dataExplorerQuery.metricSelector) &&
        Objects.equals(this.foldTransformation, dataExplorerQuery.foldTransformation) &&
        Objects.equals(this.enabled, dataExplorerQuery.enabled) &&
        Objects.equals(this.generatedMetricSelector, dataExplorerQuery.generatedMetricSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metric, spaceAggregation, timeAggregation, splitBy, sortBy, filterBy, limit, metricSelector, foldTransformation, enabled, generatedMetricSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExplorerQuery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    spaceAggregation: ").append(toIndentedString(spaceAggregation)).append("\n");
    sb.append("    timeAggregation: ").append(toIndentedString(timeAggregation)).append("\n");
    sb.append("    splitBy: ").append(toIndentedString(splitBy)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    filterBy: ").append(toIndentedString(filterBy)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metricSelector: ").append(toIndentedString(metricSelector)).append("\n");
    sb.append("    foldTransformation: ").append(toIndentedString(foldTransformation)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    generatedMetricSelector: ").append(toIndentedString(generatedMetricSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

