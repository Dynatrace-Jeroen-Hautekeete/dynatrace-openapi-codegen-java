/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration to capture meta data with the JavaScript agent.
 */
@ApiModel(description = "Configuration to capture meta data with the JavaScript agent.")
@JsonPropertyOrder({
  MetaDataCapturing.JSON_PROPERTY_TYPE,
  MetaDataCapturing.JSON_PROPERTY_CAPTURING_NAME,
  MetaDataCapturing.JSON_PROPERTY_NAME,
  MetaDataCapturing.JSON_PROPERTY_UNIQUE_ID,
  MetaDataCapturing.JSON_PROPERTY_PUBLIC_METADATA,
  MetaDataCapturing.JSON_PROPERTY_USE_LAST_VALUE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MetaDataCapturing {
  /**
   * The type of the meta data to capture.
   */
  public enum TypeEnum {
    COOKIE("COOKIE"),
    
    CSS_SELECTOR("CSS_SELECTOR"),
    
    JAVA_SCRIPT_FUNCTION("JAVA_SCRIPT_FUNCTION"),
    
    JAVA_SCRIPT_VARIABLE("JAVA_SCRIPT_VARIABLE"),
    
    META_TAG("META_TAG"),
    
    QUERY_STRING("QUERY_STRING"),
    
    RESPONSE_HEADER("RESPONSE_HEADER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_CAPTURING_NAME = "capturingName";
  private String capturingName;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_UNIQUE_ID = "uniqueId";
  private Integer uniqueId;

  public static final String JSON_PROPERTY_PUBLIC_METADATA = "publicMetadata";
  private Boolean publicMetadata;

  public static final String JSON_PROPERTY_USE_LAST_VALUE = "useLastValue";
  private Boolean useLastValue;

  public MetaDataCapturing() { 
  }

  public MetaDataCapturing type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the meta data to capture.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the meta data to capture.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MetaDataCapturing capturingName(String capturingName) {
    this.capturingName = capturingName;
    return this;
  }

   /**
   * The name of the meta data to capture.
   * @return capturingName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the meta data to capture.")
  @JsonProperty(JSON_PROPERTY_CAPTURING_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCapturingName() {
    return capturingName;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURING_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCapturingName(String capturingName) {
    this.capturingName = capturingName;
  }


  public MetaDataCapturing name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name for displaying the captured values in Dynatrace.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name for displaying the captured values in Dynatrace.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public MetaDataCapturing uniqueId(Integer uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

   /**
   * The unique id of the meta data to capture.
   * minimum: 0
   * @return uniqueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique id of the meta data to capture.")
  @JsonProperty(JSON_PROPERTY_UNIQUE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUniqueId() {
    return uniqueId;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueId(Integer uniqueId) {
    this.uniqueId = uniqueId;
  }


  public MetaDataCapturing publicMetadata(Boolean publicMetadata) {
    this.publicMetadata = publicMetadata;
    return this;
  }

   /**
   * True if this metadata should be captured regardless of the privacy settings
   * @return publicMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this metadata should be captured regardless of the privacy settings")
  @JsonProperty(JSON_PROPERTY_PUBLIC_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublicMetadata() {
    return publicMetadata;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicMetadata(Boolean publicMetadata) {
    this.publicMetadata = publicMetadata;
  }


  public MetaDataCapturing useLastValue(Boolean useLastValue) {
    this.useLastValue = useLastValue;
    return this;
  }

   /**
   * True if the last captured value should be used for this metadata. By default the first value will be used.
   * @return useLastValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the last captured value should be used for this metadata. By default the first value will be used.")
  @JsonProperty(JSON_PROPERTY_USE_LAST_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseLastValue() {
    return useLastValue;
  }


  @JsonProperty(JSON_PROPERTY_USE_LAST_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseLastValue(Boolean useLastValue) {
    this.useLastValue = useLastValue;
  }


  /**
   * Return true if this MetaDataCapturing object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaDataCapturing metaDataCapturing = (MetaDataCapturing) o;
    return Objects.equals(this.type, metaDataCapturing.type) &&
        Objects.equals(this.capturingName, metaDataCapturing.capturingName) &&
        Objects.equals(this.name, metaDataCapturing.name) &&
        Objects.equals(this.uniqueId, metaDataCapturing.uniqueId) &&
        Objects.equals(this.publicMetadata, metaDataCapturing.publicMetadata) &&
        Objects.equals(this.useLastValue, metaDataCapturing.useLastValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, capturingName, name, uniqueId, publicMetadata, useLastValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaDataCapturing {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    capturingName: ").append(toIndentedString(capturingName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    publicMetadata: ").append(toIndentedString(publicMetadata)).append("\n");
    sb.append("    useLastValue: ").append(toIndentedString(useLastValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

