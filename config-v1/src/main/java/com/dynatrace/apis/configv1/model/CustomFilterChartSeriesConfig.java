/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CustomFilterChartSeriesDimensionConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a charted metric.
 */
@ApiModel(description = "Configuration of a charted metric.")
@JsonPropertyOrder({
  CustomFilterChartSeriesConfig.JSON_PROPERTY_METRIC,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_AGGREGATION,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_PERCENTILE,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_TYPE,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_ENTITY_TYPE,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_DIMENSIONS,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_SORT_ASCENDING,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_SORT_COLUMN,
  CustomFilterChartSeriesConfig.JSON_PROPERTY_AGGREGATION_RATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class CustomFilterChartSeriesConfig {
  public static final String JSON_PROPERTY_METRIC = "metric";
  private String metric;

  /**
   * The charted aggregation of the metric.
   */
  public enum AggregationEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    DISTINCT("DISTINCT"),
    
    FASTEST10PERCENT("FASTEST10PERCENT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    NONE("NONE"),
    
    OF_INTEREST_RATIO("OF_INTEREST_RATIO"),
    
    OTHER_RATIO("OTHER_RATIO"),
    
    PERCENTILE("PERCENTILE"),
    
    PER_MIN("PER_MIN"),
    
    SLOWEST10PERCENT("SLOWEST10PERCENT"),
    
    SLOWEST5PERCENT("SLOWEST5PERCENT"),
    
    SUM("SUM"),
    
    SUM_DIMENSIONS("SUM_DIMENSIONS");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION = "aggregation";
  private AggregationEnum aggregation;

  public static final String JSON_PROPERTY_PERCENTILE = "percentile";
  private Long percentile;

  /**
   * The visualization of the timeseries chart.
   */
  public enum TypeEnum {
    AREA("AREA"),
    
    BAR("BAR"),
    
    LINE("LINE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private String entityType;

  public static final String JSON_PROPERTY_DIMENSIONS = "dimensions";
  private List<CustomFilterChartSeriesDimensionConfig> dimensions = new ArrayList<>();

  public static final String JSON_PROPERTY_SORT_ASCENDING = "sortAscending";
  private Boolean sortAscending;

  public static final String JSON_PROPERTY_SORT_COLUMN = "sortColumn";
  private Boolean sortColumn;

  /**
   * Gets or Sets aggregationRate
   */
  public enum AggregationRateEnum {
    HOUR("HOUR"),
    
    MINUTE("MINUTE"),
    
    SECOND("SECOND"),
    
    TOTAL("TOTAL");

    private String value;

    AggregationRateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationRateEnum fromValue(String value) {
      for (AggregationRateEnum b : AggregationRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION_RATE = "aggregationRate";
  private AggregationRateEnum aggregationRate;

  public CustomFilterChartSeriesConfig() { 
  }

  public CustomFilterChartSeriesConfig metric(String metric) {
    this.metric = metric;
    return this;
  }

   /**
   * The name of the charted metric.
   * @return metric
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the charted metric.")
  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetric() {
    return metric;
  }


  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetric(String metric) {
    this.metric = metric;
  }


  public CustomFilterChartSeriesConfig aggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
    return this;
  }

   /**
   * The charted aggregation of the metric.
   * @return aggregation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The charted aggregation of the metric.")
  @JsonProperty(JSON_PROPERTY_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AggregationEnum getAggregation() {
    return aggregation;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }


  public CustomFilterChartSeriesConfig percentile(Long percentile) {
    this.percentile = percentile;
    return this;
  }

   /**
   * The charted percentile.    Only applicable if the **aggregation** is set to &#x60;PERCENTILE&#x60;.
   * @return percentile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The charted percentile.    Only applicable if the **aggregation** is set to `PERCENTILE`.")
  @JsonProperty(JSON_PROPERTY_PERCENTILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPercentile() {
    return percentile;
  }


  @JsonProperty(JSON_PROPERTY_PERCENTILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPercentile(Long percentile) {
    this.percentile = percentile;
  }


  public CustomFilterChartSeriesConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The visualization of the timeseries chart.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The visualization of the timeseries chart.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CustomFilterChartSeriesConfig entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of the Dynatrace entity that delivered the charted metric.
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the Dynatrace entity that delivered the charted metric.")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public CustomFilterChartSeriesConfig dimensions(List<CustomFilterChartSeriesDimensionConfig> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public CustomFilterChartSeriesConfig addDimensionsItem(CustomFilterChartSeriesDimensionConfig dimensionsItem) {
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Configuration of the charted metric splitting.
   * @return dimensions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Configuration of the charted metric splitting.")
  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CustomFilterChartSeriesDimensionConfig> getDimensions() {
    return dimensions;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDimensions(List<CustomFilterChartSeriesDimensionConfig> dimensions) {
    this.dimensions = dimensions;
  }


  public CustomFilterChartSeriesConfig sortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
    return this;
  }

   /**
   * Sort ascending (&#x60;true&#x60;) or descending (&#x60;false&#x60;). 
   * @return sortAscending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sort ascending (`true`) or descending (`false`). ")
  @JsonProperty(JSON_PROPERTY_SORT_ASCENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSortAscending() {
    return sortAscending;
  }


  @JsonProperty(JSON_PROPERTY_SORT_ASCENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
  }


  public CustomFilterChartSeriesConfig sortColumn(Boolean sortColumn) {
    this.sortColumn = sortColumn;
    return this;
  }

   /**
   * Get sortColumn
   * @return sortColumn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SORT_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSortColumn() {
    return sortColumn;
  }


  @JsonProperty(JSON_PROPERTY_SORT_COLUMN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortColumn(Boolean sortColumn) {
    this.sortColumn = sortColumn;
  }


  public CustomFilterChartSeriesConfig aggregationRate(AggregationRateEnum aggregationRate) {
    this.aggregationRate = aggregationRate;
    return this;
  }

   /**
   * Get aggregationRate
   * @return aggregationRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AGGREGATION_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AggregationRateEnum getAggregationRate() {
    return aggregationRate;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATION_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregationRate(AggregationRateEnum aggregationRate) {
    this.aggregationRate = aggregationRate;
  }


  /**
   * Return true if this CustomFilterChartSeriesConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFilterChartSeriesConfig customFilterChartSeriesConfig = (CustomFilterChartSeriesConfig) o;
    return Objects.equals(this.metric, customFilterChartSeriesConfig.metric) &&
        Objects.equals(this.aggregation, customFilterChartSeriesConfig.aggregation) &&
        Objects.equals(this.percentile, customFilterChartSeriesConfig.percentile) &&
        Objects.equals(this.type, customFilterChartSeriesConfig.type) &&
        Objects.equals(this.entityType, customFilterChartSeriesConfig.entityType) &&
        Objects.equals(this.dimensions, customFilterChartSeriesConfig.dimensions) &&
        Objects.equals(this.sortAscending, customFilterChartSeriesConfig.sortAscending) &&
        Objects.equals(this.sortColumn, customFilterChartSeriesConfig.sortColumn) &&
        Objects.equals(this.aggregationRate, customFilterChartSeriesConfig.aggregationRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metric, aggregation, percentile, type, entityType, dimensions, sortAscending, sortColumn, aggregationRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFilterChartSeriesConfig {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    percentile: ").append(toIndentedString(percentile)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    sortAscending: ").append(toIndentedString(sortAscending)).append("\n");
    sb.append("    sortColumn: ").append(toIndentedString(sortColumn)).append("\n");
    sb.append("    aggregationRate: ").append(toIndentedString(aggregationRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

