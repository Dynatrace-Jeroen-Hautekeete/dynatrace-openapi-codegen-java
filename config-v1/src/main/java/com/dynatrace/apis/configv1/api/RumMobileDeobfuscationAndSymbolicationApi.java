/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import java.io.File;
import com.dynatrace.apis.configv1.model.SupportedVersion;
import com.dynatrace.apis.configv1.model.SymbolFile;
import com.dynatrace.apis.configv1.model.SymbolFileClientLinkDto;
import com.dynatrace.apis.configv1.model.SymbolFileList;
import com.dynatrace.apis.configv1.model.SymbolFilePinning;
import com.dynatrace.apis.configv1.model.SymbolFileStorageInfo;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class RumMobileDeobfuscationAndSymbolicationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RumMobileDeobfuscationAndSymbolicationApi() {
    this(new ApiClient());
  }

  public RumMobileDeobfuscationAndSymbolicationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Upload a symbolication file. Either a ProGuard file for Android or a zip file containing all the iOS dSYM files. 
   * 
   * @param applicationId The application id used in Dynatrace of the app this file belongs to (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the uploaded file (required)
   * @param os The operating system the file belongs to (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param body The file to be uploaded. A proguard file (*.txt) for Android or the zip file produced by the DTXDssClient provided with the OneAgent for iOS.  (required)
   * @param contentType  (optional)
   * @throws ApiException if fails to make API call
   */
  public void createOrUpdate(UUID applicationId, String packageName, String os, String versionCode, String versionName, File body, String contentType) throws ApiException {
    createOrUpdateWithHttpInfo(applicationId, packageName, os, versionCode, versionName, body, contentType);
  }

  /**
   * Upload a symbolication file. Either a ProGuard file for Android or a zip file containing all the iOS dSYM files. 
   * 
   * @param applicationId The application id used in Dynatrace of the app this file belongs to (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the uploaded file (required)
   * @param os The operating system the file belongs to (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param body The file to be uploaded. A proguard file (*.txt) for Android or the zip file produced by the DTXDssClient provided with the OneAgent for iOS.  (required)
   * @param contentType  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createOrUpdateWithHttpInfo(UUID applicationId, String packageName, String os, String versionCode, String versionName, File body, String contentType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateRequestBuilder(applicationId, packageName, os, versionCode, versionName, body, contentType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrUpdate", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateRequestBuilder(UUID applicationId, String packageName, String os, String versionCode, String versionName, File body, String contentType) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling createOrUpdate");
    }
    // verify the required parameter 'packageName' is set
    if (packageName == null) {
      throw new ApiException(400, "Missing the required parameter 'packageName' when calling createOrUpdate");
    }
    // verify the required parameter 'os' is set
    if (os == null) {
      throw new ApiException(400, "Missing the required parameter 'os' when calling createOrUpdate");
    }
    // verify the required parameter 'versionCode' is set
    if (versionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'versionCode' when calling createOrUpdate");
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      throw new ApiException(400, "Missing the required parameter 'versionName' when calling createOrUpdate");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling createOrUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{packageName}", ApiClient.urlEncode(packageName.toString()))
        .replace("{os}", ApiClient.urlEncode(os.toString()))
        .replace("{versionCode}", ApiClient.urlEncode(versionCode.toString()))
        .replace("{versionName}", ApiClient.urlEncode(versionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (contentType != null) {
      localVarRequestBuilder.header("content-type", contentType.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/x-compressed");
    localVarRequestBuilder.header("Accept", "*/*");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Pin or unpin all symbolication files of a app version. A pinned file will not be deleted automtically, when running out of space.
   * 
   * @param applicationId The application id used in Dynatrace of the app which should be (un)pinned (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the files to be (un)pinned (required)
   * @param os The operating system for which the files will be (un)pinned (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param symbolFilePinning JSON body of the request, containing the pinning status to set. (optional)
   * @throws ApiException if fails to make API call
   */
  public void createOrUpdatePinning(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    createOrUpdatePinningWithHttpInfo(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
  }

  /**
   * Pin or unpin all symbolication files of a app version. A pinned file will not be deleted automtically, when running out of space.
   * 
   * @param applicationId The application id used in Dynatrace of the app which should be (un)pinned (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the files to be (un)pinned (required)
   * @param os The operating system for which the files will be (un)pinned (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param symbolFilePinning JSON body of the request, containing the pinning status to set. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createOrUpdatePinningWithHttpInfo(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdatePinningRequestBuilder(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrUpdatePinning", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdatePinningRequestBuilder(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling createOrUpdatePinning");
    }
    // verify the required parameter 'packageName' is set
    if (packageName == null) {
      throw new ApiException(400, "Missing the required parameter 'packageName' when calling createOrUpdatePinning");
    }
    // verify the required parameter 'os' is set
    if (os == null) {
      throw new ApiException(400, "Missing the required parameter 'os' when calling createOrUpdatePinning");
    }
    // verify the required parameter 'versionCode' is set
    if (versionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'versionCode' when calling createOrUpdatePinning");
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      throw new ApiException(400, "Missing the required parameter 'versionName' when calling createOrUpdatePinning");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{packageName}", ApiClient.urlEncode(packageName.toString()))
        .replace("{os}", ApiClient.urlEncode(os.toString()))
        .replace("{versionCode}", ApiClient.urlEncode(versionCode.toString()))
        .replace("{versionName}", ApiClient.urlEncode(versionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "*/*");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(symbolFilePinning);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes all symbolication file belonging to the Dynatrace App specified
   * 
   * @param applicationId The application id used in Dynatrace of the mobile application the files will be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteApp(UUID applicationId) throws ApiException {
    deleteAppWithHttpInfo(applicationId);
  }

  /**
   * Deletes all symbolication file belonging to the Dynatrace App specified
   * 
   * @param applicationId The application id used in Dynatrace of the mobile application the files will be deleted (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAppWithHttpInfo(UUID applicationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAppRequestBuilder(applicationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteApp", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAppRequestBuilder(UUID applicationId) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling deleteApp");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "*/*");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete the symbolication file belonging to the given application, os and version
   * 
   * @param applicationId The application id used in Dynatrace of the mobile application where a file should be deleted (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the file to be deleted (required)
   * @param os The operating system the file belongs to (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) of the file to be deleted (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the file to be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSingleFile(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    deleteSingleFileWithHttpInfo(applicationId, packageName, os, versionCode, versionName);
  }

  /**
   * Delete the symbolication file belonging to the given application, os and version
   * 
   * @param applicationId The application id used in Dynatrace of the mobile application where a file should be deleted (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the file to be deleted (required)
   * @param os The operating system the file belongs to (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) of the file to be deleted (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the file to be deleted (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSingleFileWithHttpInfo(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSingleFileRequestBuilder(applicationId, packageName, os, versionCode, versionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSingleFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSingleFileRequestBuilder(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling deleteSingleFile");
    }
    // verify the required parameter 'packageName' is set
    if (packageName == null) {
      throw new ApiException(400, "Missing the required parameter 'packageName' when calling deleteSingleFile");
    }
    // verify the required parameter 'os' is set
    if (os == null) {
      throw new ApiException(400, "Missing the required parameter 'os' when calling deleteSingleFile");
    }
    // verify the required parameter 'versionCode' is set
    if (versionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'versionCode' when calling deleteSingleFile");
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      throw new ApiException(400, "Missing the required parameter 'versionName' when calling deleteSingleFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{packageName}", ApiClient.urlEncode(packageName.toString()))
        .replace("{os}", ApiClient.urlEncode(os.toString()))
        .replace("{versionCode}", ApiClient.urlEncode(versionCode.toString()))
        .replace("{versionName}", ApiClient.urlEncode(versionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "*/*");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) from the Symbol File Store.
   * 
   * @return SymbolFileList
   * @throws ApiException if fails to make API call
   */
  public SymbolFileList getAll() throws ApiException {
    ApiResponse<SymbolFileList> localVarResponse = getAllWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) from the Symbol File Store.
   * 
   * @return ApiResponse&lt;SymbolFileList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SymbolFileList> getAllWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAll", localVarResponse);
        }
        return new ApiResponse<SymbolFileList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SymbolFileList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) for one single mobile application from the Symbol File Store of this tenant.
   * 
   * @param applicationId The application id used in Dynatrace for the mobile application to be queried (required)
   * @return SymbolFileList
   * @throws ApiException if fails to make API call
   */
  public SymbolFileList getAllPerApplication(UUID applicationId) throws ApiException {
    ApiResponse<SymbolFileList> localVarResponse = getAllPerApplicationWithHttpInfo(applicationId);
    return localVarResponse.getData();
  }

  /**
   * Lists the metadata of all symbolication files (ProGuard files for Android or dSYM files for iOS Apps) for one single mobile application from the Symbol File Store of this tenant.
   * 
   * @param applicationId The application id used in Dynatrace for the mobile application to be queried (required)
   * @return ApiResponse&lt;SymbolFileList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SymbolFileList> getAllPerApplicationWithHttpInfo(UUID applicationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllPerApplicationRequestBuilder(applicationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllPerApplication", localVarResponse);
        }
        return new ApiResponse<SymbolFileList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SymbolFileList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllPerApplicationRequestBuilder(UUID applicationId) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling getAllPerApplication");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets a download link for the latest version of the DTXDssClient.
   * 
   * @return SymbolFileClientLinkDto
   * @throws ApiException if fails to make API call
   */
  public SymbolFileClientLinkDto getDssClientUrl() throws ApiException {
    ApiResponse<SymbolFileClientLinkDto> localVarResponse = getDssClientUrlWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets a download link for the latest version of the DTXDssClient.
   * 
   * @return ApiResponse&lt;SymbolFileClientLinkDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SymbolFileClientLinkDto> getDssClientUrlWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDssClientUrlRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDssClientUrl", localVarResponse);
        }
        return new ApiResponse<SymbolFileClientLinkDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SymbolFileClientLinkDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDssClientUrlRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/dtxdss-download";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Retrieves information about used/empty diskspace, number of stored files,....
   * 
   * @return SymbolFileStorageInfo
   * @throws ApiException if fails to make API call
   */
  public SymbolFileStorageInfo getInfo() throws ApiException {
    ApiResponse<SymbolFileStorageInfo> localVarResponse = getInfoWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieves information about used/empty diskspace, number of stored files,....
   * 
   * @return ApiResponse&lt;SymbolFileStorageInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SymbolFileStorageInfo> getInfoWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInfoRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInfo", localVarResponse);
        }
        return new ApiResponse<SymbolFileStorageInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SymbolFileStorageInfo>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInfoRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the metadata of the symbolication file belonging to the specified app version. There always can exist only one file per os and version
   * 
   * @param applicationId The application id used in Dynatrace for the mobile application to be queried (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app to be queried (required)
   * @param os The operating system for which the file should be displayed. (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) of the file to be retrieved (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the file to be retrieved (required)
   * @return SymbolFile
   * @throws ApiException if fails to make API call
   */
  public SymbolFile getSingle(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    ApiResponse<SymbolFile> localVarResponse = getSingleWithHttpInfo(applicationId, packageName, os, versionCode, versionName);
    return localVarResponse.getData();
  }

  /**
   * Gets the metadata of the symbolication file belonging to the specified app version. There always can exist only one file per os and version
   * 
   * @param applicationId The application id used in Dynatrace for the mobile application to be queried (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app to be queried (required)
   * @param os The operating system for which the file should be displayed. (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) of the file to be retrieved (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) of the file to be retrieved (required)
   * @return ApiResponse&lt;SymbolFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SymbolFile> getSingleWithHttpInfo(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSingleRequestBuilder(applicationId, packageName, os, versionCode, versionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSingle", localVarResponse);
        }
        return new ApiResponse<SymbolFile>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SymbolFile>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSingleRequestBuilder(UUID applicationId, String packageName, String os, String versionCode, String versionName) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling getSingle");
    }
    // verify the required parameter 'packageName' is set
    if (packageName == null) {
      throw new ApiException(400, "Missing the required parameter 'packageName' when calling getSingle");
    }
    // verify the required parameter 'os' is set
    if (os == null) {
      throw new ApiException(400, "Missing the required parameter 'os' when calling getSingle");
    }
    // verify the required parameter 'versionCode' is set
    if (versionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'versionCode' when calling getSingle");
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      throw new ApiException(400, "Missing the required parameter 'versionName' when calling getSingle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{packageName}", ApiClient.urlEncode(packageName.toString()))
        .replace("{os}", ApiClient.urlEncode(os.toString()))
        .replace("{versionCode}", ApiClient.urlEncode(versionCode.toString()))
        .replace("{versionName}", ApiClient.urlEncode(versionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns the supported file format version for iOS symbol files.
   * 
   * @return SupportedVersion
   * @throws ApiException if fails to make API call
   */
  public SupportedVersion getSupportedVersion() throws ApiException {
    ApiResponse<SupportedVersion> localVarResponse = getSupportedVersionWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Returns the supported file format version for iOS symbol files.
   * 
   * @return ApiResponse&lt;SupportedVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SupportedVersion> getSupportedVersionWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSupportedVersionRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSupportedVersion", localVarResponse);
        }
        return new ApiResponse<SupportedVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SupportedVersion>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSupportedVersionRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/ios/supportedversion";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validate updates of existing request attribute for the &#x60;PUT /{applicationId}/{packageName}/{os}/{versionName}/pinning&#x60; request.
   * 
   * @param applicationId The application id used in Dynatrace of the app which should be (un)pinned (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the files to be (un)pinned (required)
   * @param os The operating system for which the files will be (un)pinned (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param symbolFilePinning JSON body of the request, containing the pinning status to set. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validatePinning(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    validatePinningWithHttpInfo(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
  }

  /**
   * Validate updates of existing request attribute for the &#x60;PUT /{applicationId}/{packageName}/{os}/{versionName}/pinning&#x60; request.
   * 
   * @param applicationId The application id used in Dynatrace of the app which should be (un)pinned (required)
   * @param packageName The CFBundleIdentifier (iOS) or the package name (Android) which identifies the app associated with the files to be (un)pinned (required)
   * @param os The operating system for which the files will be (un)pinned (required)
   * @param versionCode The version code (Android) / CFBundleVersion (iOS) the file belongs to (required)
   * @param versionName The version name (Android) / CFBundleShortVersionString (iOS) the file belongs to (required)
   * @param symbolFilePinning JSON body of the request, containing the pinning status to set. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validatePinningWithHttpInfo(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validatePinningRequestBuilder(applicationId, packageName, os, versionCode, versionName, symbolFilePinning);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validatePinning", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validatePinningRequestBuilder(UUID applicationId, String packageName, String os, String versionCode, String versionName, SymbolFilePinning symbolFilePinning) throws ApiException {
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      throw new ApiException(400, "Missing the required parameter 'applicationId' when calling validatePinning");
    }
    // verify the required parameter 'packageName' is set
    if (packageName == null) {
      throw new ApiException(400, "Missing the required parameter 'packageName' when calling validatePinning");
    }
    // verify the required parameter 'os' is set
    if (os == null) {
      throw new ApiException(400, "Missing the required parameter 'os' when calling validatePinning");
    }
    // verify the required parameter 'versionCode' is set
    if (versionCode == null) {
      throw new ApiException(400, "Missing the required parameter 'versionCode' when calling validatePinning");
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      throw new ApiException(400, "Missing the required parameter 'versionName' when calling validatePinning");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/symfiles/{applicationId}/{packageName}/{os}/{versionCode}/{versionName}/pinning/validator"
        .replace("{applicationId}", ApiClient.urlEncode(applicationId.toString()))
        .replace("{packageName}", ApiClient.urlEncode(packageName.toString()))
        .replace("{os}", ApiClient.urlEncode(os.toString()))
        .replace("{versionCode}", ApiClient.urlEncode(versionCode.toString()))
        .replace("{versionName}", ApiClient.urlEncode(versionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "*/*");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(symbolFilePinning);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
