/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A rule for the content provider.
 */
@ApiModel(description = "A rule for the content provider.")
@JsonPropertyOrder({
  ResourceProvider.JSON_PROPERTY_RESOURCE_NAME,
  ResourceProvider.JSON_PROPERTY_RESOURCE_TYPE,
  ResourceProvider.JSON_PROPERTY_BRAND_ICON_URL,
  ResourceProvider.JSON_PROPERTY_DOMAIN_NAME_PATTERNS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ResourceProvider {
  public static final String JSON_PROPERTY_RESOURCE_NAME = "resourceName";
  private String resourceName;

  /**
   * The type of the provider.
   */
  public enum ResourceTypeEnum {
    CDN_RESOURCES("CDN_RESOURCES"),
    
    FIRST_PARTY_RESOURCES("FIRST_PARTY_RESOURCES"),
    
    THIRD_PARTY_RESOURCES("THIRD_PARTY_RESOURCES");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  private ResourceTypeEnum resourceType;

  public static final String JSON_PROPERTY_BRAND_ICON_URL = "brandIconUrl";
  private String brandIconUrl;

  public static final String JSON_PROPERTY_DOMAIN_NAME_PATTERNS = "domainNamePatterns";
  private List<String> domainNamePatterns = new ArrayList<>();

  public ResourceProvider() { 
  }

  public ResourceProvider resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

   /**
   * The name of the provider.
   * @return resourceName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the provider.")
  @JsonProperty(JSON_PROPERTY_RESOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResourceName() {
    return resourceName;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public ResourceProvider resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * The type of the provider.
   * @return resourceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the provider.")
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public ResourceProvider brandIconUrl(String brandIconUrl) {
    this.brandIconUrl = brandIconUrl;
    return this;
  }

   /**
   * The URL of the provider&#39;s icon.
   * @return brandIconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the provider's icon.")
  @JsonProperty(JSON_PROPERTY_BRAND_ICON_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBrandIconUrl() {
    return brandIconUrl;
  }


  @JsonProperty(JSON_PROPERTY_BRAND_ICON_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrandIconUrl(String brandIconUrl) {
    this.brandIconUrl = brandIconUrl;
  }


  public ResourceProvider domainNamePatterns(List<String> domainNamePatterns) {
    this.domainNamePatterns = domainNamePatterns;
    return this;
  }

  public ResourceProvider addDomainNamePatternsItem(String domainNamePatternsItem) {
    this.domainNamePatterns.add(domainNamePatternsItem);
    return this;
  }

   /**
   * A list of domain patterns of the provider.
   * @return domainNamePatterns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of domain patterns of the provider.")
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getDomainNamePatterns() {
    return domainNamePatterns;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomainNamePatterns(List<String> domainNamePatterns) {
    this.domainNamePatterns = domainNamePatterns;
  }


  /**
   * Return true if this ResourceProvider object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceProvider resourceProvider = (ResourceProvider) o;
    return Objects.equals(this.resourceName, resourceProvider.resourceName) &&
        Objects.equals(this.resourceType, resourceProvider.resourceType) &&
        Objects.equals(this.brandIconUrl, resourceProvider.brandIconUrl) &&
        Objects.equals(this.domainNamePatterns, resourceProvider.domainNamePatterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceName, resourceType, brandIconUrl, domainNamePatterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceProvider {\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    brandIconUrl: ").append(toIndentedString(brandIconUrl)).append("\n");
    sb.append("    domainNamePatterns: ").append(toIndentedString(domainNamePatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

