/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration for the queries
 */
@ApiModel(description = "Configuration for the queries")
@JsonPropertyOrder({
  DataExplorerQuerySettings.JSON_PROPERTY_RESOLUTION,
  DataExplorerQuerySettings.JSON_PROPERTY_FOLD_TRANSFORMATION,
  DataExplorerQuerySettings.JSON_PROPERTY_FOLD_AGGREGATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DataExplorerQuerySettings {
  public static final String JSON_PROPERTY_RESOLUTION = "resolution";
  private String resolution;

  /**
   * The fold transformation
   */
  public enum FoldTransformationEnum {
    LAST_VALUE("LAST_VALUE"),
    
    TOTAL("TOTAL");

    private String value;

    FoldTransformationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FoldTransformationEnum fromValue(String value) {
      for (FoldTransformationEnum b : FoldTransformationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FOLD_TRANSFORMATION = "foldTransformation";
  private FoldTransformationEnum foldTransformation;

  /**
   * The fold aggregation
   */
  public enum FoldAggregationEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    PERCENTILE_10("PERCENTILE_10"),
    
    PERCENTILE_75("PERCENTILE_75"),
    
    PERCENTILE_90("PERCENTILE_90"),
    
    SUM("SUM"),
    
    VALUE("VALUE");

    private String value;

    FoldAggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FoldAggregationEnum fromValue(String value) {
      for (FoldAggregationEnum b : FoldAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FOLD_AGGREGATION = "foldAggregation";
  private FoldAggregationEnum foldAggregation;

  public DataExplorerQuerySettings() { 
  }

  public DataExplorerQuerySettings resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * The resolution
   * @return resolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The resolution")
  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResolution() {
    return resolution;
  }


  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public DataExplorerQuerySettings foldTransformation(FoldTransformationEnum foldTransformation) {
    this.foldTransformation = foldTransformation;
    return this;
  }

   /**
   * The fold transformation
   * @return foldTransformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fold transformation")
  @JsonProperty(JSON_PROPERTY_FOLD_TRANSFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FoldTransformationEnum getFoldTransformation() {
    return foldTransformation;
  }


  @JsonProperty(JSON_PROPERTY_FOLD_TRANSFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoldTransformation(FoldTransformationEnum foldTransformation) {
    this.foldTransformation = foldTransformation;
  }


  public DataExplorerQuerySettings foldAggregation(FoldAggregationEnum foldAggregation) {
    this.foldAggregation = foldAggregation;
    return this;
  }

   /**
   * The fold aggregation
   * @return foldAggregation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fold aggregation")
  @JsonProperty(JSON_PROPERTY_FOLD_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FoldAggregationEnum getFoldAggregation() {
    return foldAggregation;
  }


  @JsonProperty(JSON_PROPERTY_FOLD_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoldAggregation(FoldAggregationEnum foldAggregation) {
    this.foldAggregation = foldAggregation;
  }


  /**
   * Return true if this DataExplorerQuerySettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExplorerQuerySettings dataExplorerQuerySettings = (DataExplorerQuerySettings) o;
    return Objects.equals(this.resolution, dataExplorerQuerySettings.resolution) &&
        Objects.equals(this.foldTransformation, dataExplorerQuerySettings.foldTransformation) &&
        Objects.equals(this.foldAggregation, dataExplorerQuerySettings.foldAggregation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resolution, foldTransformation, foldAggregation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExplorerQuerySettings {\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    foldTransformation: ").append(toIndentedString(foldTransformation)).append("\n");
    sb.append("    foldAggregation: ").append(toIndentedString(foldAggregation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

