/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources.
 */
@ApiModel(description = "These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources.")
@JsonPropertyOrder({
  WaterfallSettings.JSON_PROPERTY_UNCOMPRESSED_RESOURCES_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_RESOURCES_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_RESOURCE_BROWSER_CACHING_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_SLOW_FIRST_PARTY_RESOURCES_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_SLOW_THIRD_PARTY_RESOURCES_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_SLOW_CDN_RESOURCES_THRESHOLD,
  WaterfallSettings.JSON_PROPERTY_SPEED_INDEX_VISUALLY_COMPLETE_RATIO_THRESHOLD
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class WaterfallSettings {
  public static final String JSON_PROPERTY_UNCOMPRESSED_RESOURCES_THRESHOLD = "uncompressedResourcesThreshold";
  private Integer uncompressedResourcesThreshold;

  public static final String JSON_PROPERTY_RESOURCES_THRESHOLD = "resourcesThreshold";
  private Integer resourcesThreshold;

  public static final String JSON_PROPERTY_RESOURCE_BROWSER_CACHING_THRESHOLD = "resourceBrowserCachingThreshold";
  private Integer resourceBrowserCachingThreshold;

  public static final String JSON_PROPERTY_SLOW_FIRST_PARTY_RESOURCES_THRESHOLD = "slowFirstPartyResourcesThreshold";
  private Integer slowFirstPartyResourcesThreshold;

  public static final String JSON_PROPERTY_SLOW_THIRD_PARTY_RESOURCES_THRESHOLD = "slowThirdPartyResourcesThreshold";
  private Integer slowThirdPartyResourcesThreshold;

  public static final String JSON_PROPERTY_SLOW_CDN_RESOURCES_THRESHOLD = "slowCdnResourcesThreshold";
  private Integer slowCdnResourcesThreshold;

  public static final String JSON_PROPERTY_SPEED_INDEX_VISUALLY_COMPLETE_RATIO_THRESHOLD = "speedIndexVisuallyCompleteRatioThreshold";
  private Integer speedIndexVisuallyCompleteRatioThreshold;

  public WaterfallSettings() { 
  }

  public WaterfallSettings uncompressedResourcesThreshold(Integer uncompressedResourcesThreshold) {
    this.uncompressedResourcesThreshold = uncompressedResourcesThreshold;
    return this;
  }

   /**
   * Warn about uncompressed resources larger than *X* bytes.
   * minimum: 0
   * maximum: 99999
   * @return uncompressedResourcesThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about uncompressed resources larger than *X* bytes.")
  @JsonProperty(JSON_PROPERTY_UNCOMPRESSED_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUncompressedResourcesThreshold() {
    return uncompressedResourcesThreshold;
  }


  @JsonProperty(JSON_PROPERTY_UNCOMPRESSED_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUncompressedResourcesThreshold(Integer uncompressedResourcesThreshold) {
    this.uncompressedResourcesThreshold = uncompressedResourcesThreshold;
  }


  public WaterfallSettings resourcesThreshold(Integer resourcesThreshold) {
    this.resourcesThreshold = resourcesThreshold;
    return this;
  }

   /**
   * Warn about resources larger than *X* bytes.
   * minimum: 0
   * maximum: 99999000
   * @return resourcesThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about resources larger than *X* bytes.")
  @JsonProperty(JSON_PROPERTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getResourcesThreshold() {
    return resourcesThreshold;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourcesThreshold(Integer resourcesThreshold) {
    this.resourcesThreshold = resourcesThreshold;
  }


  public WaterfallSettings resourceBrowserCachingThreshold(Integer resourceBrowserCachingThreshold) {
    this.resourceBrowserCachingThreshold = resourceBrowserCachingThreshold;
    return this;
  }

   /**
   * Warn about resources with a lower browser cache rate above *X*%.
   * minimum: 1
   * maximum: 100
   * @return resourceBrowserCachingThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about resources with a lower browser cache rate above *X*%.")
  @JsonProperty(JSON_PROPERTY_RESOURCE_BROWSER_CACHING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getResourceBrowserCachingThreshold() {
    return resourceBrowserCachingThreshold;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_BROWSER_CACHING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceBrowserCachingThreshold(Integer resourceBrowserCachingThreshold) {
    this.resourceBrowserCachingThreshold = resourceBrowserCachingThreshold;
  }


  public WaterfallSettings slowFirstPartyResourcesThreshold(Integer slowFirstPartyResourcesThreshold) {
    this.slowFirstPartyResourcesThreshold = slowFirstPartyResourcesThreshold;
    return this;
  }

   /**
   * Warn about slow 1st party resources with a response time above *X* ms.
   * minimum: 0
   * maximum: 99999000
   * @return slowFirstPartyResourcesThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about slow 1st party resources with a response time above *X* ms.")
  @JsonProperty(JSON_PROPERTY_SLOW_FIRST_PARTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlowFirstPartyResourcesThreshold() {
    return slowFirstPartyResourcesThreshold;
  }


  @JsonProperty(JSON_PROPERTY_SLOW_FIRST_PARTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlowFirstPartyResourcesThreshold(Integer slowFirstPartyResourcesThreshold) {
    this.slowFirstPartyResourcesThreshold = slowFirstPartyResourcesThreshold;
  }


  public WaterfallSettings slowThirdPartyResourcesThreshold(Integer slowThirdPartyResourcesThreshold) {
    this.slowThirdPartyResourcesThreshold = slowThirdPartyResourcesThreshold;
    return this;
  }

   /**
   * Warn about slow 3rd party resources with a response time above *X* ms.
   * minimum: 0
   * maximum: 99999000
   * @return slowThirdPartyResourcesThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about slow 3rd party resources with a response time above *X* ms.")
  @JsonProperty(JSON_PROPERTY_SLOW_THIRD_PARTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlowThirdPartyResourcesThreshold() {
    return slowThirdPartyResourcesThreshold;
  }


  @JsonProperty(JSON_PROPERTY_SLOW_THIRD_PARTY_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlowThirdPartyResourcesThreshold(Integer slowThirdPartyResourcesThreshold) {
    this.slowThirdPartyResourcesThreshold = slowThirdPartyResourcesThreshold;
  }


  public WaterfallSettings slowCdnResourcesThreshold(Integer slowCdnResourcesThreshold) {
    this.slowCdnResourcesThreshold = slowCdnResourcesThreshold;
    return this;
  }

   /**
   * Warn about slow CDN resources with a response time above *X* ms.
   * minimum: 0
   * maximum: 99999000
   * @return slowCdnResourcesThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn about slow CDN resources with a response time above *X* ms.")
  @JsonProperty(JSON_PROPERTY_SLOW_CDN_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlowCdnResourcesThreshold() {
    return slowCdnResourcesThreshold;
  }


  @JsonProperty(JSON_PROPERTY_SLOW_CDN_RESOURCES_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlowCdnResourcesThreshold(Integer slowCdnResourcesThreshold) {
    this.slowCdnResourcesThreshold = slowCdnResourcesThreshold;
  }


  public WaterfallSettings speedIndexVisuallyCompleteRatioThreshold(Integer speedIndexVisuallyCompleteRatioThreshold) {
    this.speedIndexVisuallyCompleteRatioThreshold = speedIndexVisuallyCompleteRatioThreshold;
    return this;
  }

   /**
   * Warn if Speed index exceeds *X* % of Visually complete.
   * minimum: 1
   * maximum: 99
   * @return speedIndexVisuallyCompleteRatioThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Warn if Speed index exceeds *X* % of Visually complete.")
  @JsonProperty(JSON_PROPERTY_SPEED_INDEX_VISUALLY_COMPLETE_RATIO_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSpeedIndexVisuallyCompleteRatioThreshold() {
    return speedIndexVisuallyCompleteRatioThreshold;
  }


  @JsonProperty(JSON_PROPERTY_SPEED_INDEX_VISUALLY_COMPLETE_RATIO_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSpeedIndexVisuallyCompleteRatioThreshold(Integer speedIndexVisuallyCompleteRatioThreshold) {
    this.speedIndexVisuallyCompleteRatioThreshold = speedIndexVisuallyCompleteRatioThreshold;
  }


  /**
   * Return true if this WaterfallSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterfallSettings waterfallSettings = (WaterfallSettings) o;
    return Objects.equals(this.uncompressedResourcesThreshold, waterfallSettings.uncompressedResourcesThreshold) &&
        Objects.equals(this.resourcesThreshold, waterfallSettings.resourcesThreshold) &&
        Objects.equals(this.resourceBrowserCachingThreshold, waterfallSettings.resourceBrowserCachingThreshold) &&
        Objects.equals(this.slowFirstPartyResourcesThreshold, waterfallSettings.slowFirstPartyResourcesThreshold) &&
        Objects.equals(this.slowThirdPartyResourcesThreshold, waterfallSettings.slowThirdPartyResourcesThreshold) &&
        Objects.equals(this.slowCdnResourcesThreshold, waterfallSettings.slowCdnResourcesThreshold) &&
        Objects.equals(this.speedIndexVisuallyCompleteRatioThreshold, waterfallSettings.speedIndexVisuallyCompleteRatioThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uncompressedResourcesThreshold, resourcesThreshold, resourceBrowserCachingThreshold, slowFirstPartyResourcesThreshold, slowThirdPartyResourcesThreshold, slowCdnResourcesThreshold, speedIndexVisuallyCompleteRatioThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterfallSettings {\n");
    sb.append("    uncompressedResourcesThreshold: ").append(toIndentedString(uncompressedResourcesThreshold)).append("\n");
    sb.append("    resourcesThreshold: ").append(toIndentedString(resourcesThreshold)).append("\n");
    sb.append("    resourceBrowserCachingThreshold: ").append(toIndentedString(resourceBrowserCachingThreshold)).append("\n");
    sb.append("    slowFirstPartyResourcesThreshold: ").append(toIndentedString(slowFirstPartyResourcesThreshold)).append("\n");
    sb.append("    slowThirdPartyResourcesThreshold: ").append(toIndentedString(slowThirdPartyResourcesThreshold)).append("\n");
    sb.append("    slowCdnResourcesThreshold: ").append(toIndentedString(slowCdnResourcesThreshold)).append("\n");
    sb.append("    speedIndexVisuallyCompleteRatioThreshold: ").append(toIndentedString(speedIndexVisuallyCompleteRatioThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

