/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Browser exclusion rules for the browsers that are to be excluded.
 */
@ApiModel(description = "Browser exclusion rules for the browsers that are to be excluded.")
@JsonPropertyOrder({
  WebApplicationConfigBrowserRestriction.JSON_PROPERTY_BROWSER_VERSION,
  WebApplicationConfigBrowserRestriction.JSON_PROPERTY_BROWSER_TYPE,
  WebApplicationConfigBrowserRestriction.JSON_PROPERTY_PLATFORM,
  WebApplicationConfigBrowserRestriction.JSON_PROPERTY_COMPARATOR
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class WebApplicationConfigBrowserRestriction {
  public static final String JSON_PROPERTY_BROWSER_VERSION = "browserVersion";
  private String browserVersion;

  /**
   * The type of the browser that is used.
   */
  public enum BrowserTypeEnum {
    ANDROID_WEBKIT("ANDROID_WEBKIT"),
    
    BOTS_SPIDERS("BOTS_SPIDERS"),
    
    CHROME("CHROME"),
    
    EDGE("EDGE"),
    
    FIREFOX("FIREFOX"),
    
    INTERNET_EXPLORER("INTERNET_EXPLORER"),
    
    OPERA("OPERA"),
    
    SAFARI("SAFARI");

    private String value;

    BrowserTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BrowserTypeEnum fromValue(String value) {
      for (BrowserTypeEnum b : BrowserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BROWSER_TYPE = "browserType";
  private BrowserTypeEnum browserType;

  /**
   * The platform on which the browser is being used.
   */
  public enum PlatformEnum {
    ALL("ALL"),
    
    DESKTOP("DESKTOP"),
    
    MOBILE("MOBILE");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLATFORM = "platform";
  private PlatformEnum platform;

  /**
   * Compares different browsers together.
   */
  public enum ComparatorEnum {
    EQUALS("EQUALS"),
    
    GREATER_THAN_OR_EQUAL("GREATER_THAN_OR_EQUAL"),
    
    LOWER_THAN_OR_EQUAL("LOWER_THAN_OR_EQUAL");

    private String value;

    ComparatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ComparatorEnum fromValue(String value) {
      for (ComparatorEnum b : ComparatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COMPARATOR = "comparator";
  private ComparatorEnum comparator;

  public WebApplicationConfigBrowserRestriction() { 
  }

  public WebApplicationConfigBrowserRestriction browserVersion(String browserVersion) {
    this.browserVersion = browserVersion;
    return this;
  }

   /**
   * The version of the browser that is used.
   * @return browserVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the browser that is used.")
  @JsonProperty(JSON_PROPERTY_BROWSER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBrowserVersion() {
    return browserVersion;
  }


  @JsonProperty(JSON_PROPERTY_BROWSER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrowserVersion(String browserVersion) {
    this.browserVersion = browserVersion;
  }


  public WebApplicationConfigBrowserRestriction browserType(BrowserTypeEnum browserType) {
    this.browserType = browserType;
    return this;
  }

   /**
   * The type of the browser that is used.
   * @return browserType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the browser that is used.")
  @JsonProperty(JSON_PROPERTY_BROWSER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BrowserTypeEnum getBrowserType() {
    return browserType;
  }


  @JsonProperty(JSON_PROPERTY_BROWSER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBrowserType(BrowserTypeEnum browserType) {
    this.browserType = browserType;
  }


  public WebApplicationConfigBrowserRestriction platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

   /**
   * The platform on which the browser is being used.
   * @return platform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The platform on which the browser is being used.")
  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlatformEnum getPlatform() {
    return platform;
  }


  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public WebApplicationConfigBrowserRestriction comparator(ComparatorEnum comparator) {
    this.comparator = comparator;
    return this;
  }

   /**
   * Compares different browsers together.
   * @return comparator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Compares different browsers together.")
  @JsonProperty(JSON_PROPERTY_COMPARATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ComparatorEnum getComparator() {
    return comparator;
  }


  @JsonProperty(JSON_PROPERTY_COMPARATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComparator(ComparatorEnum comparator) {
    this.comparator = comparator;
  }


  /**
   * Return true if this WebApplicationConfigBrowserRestriction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebApplicationConfigBrowserRestriction webApplicationConfigBrowserRestriction = (WebApplicationConfigBrowserRestriction) o;
    return Objects.equals(this.browserVersion, webApplicationConfigBrowserRestriction.browserVersion) &&
        Objects.equals(this.browserType, webApplicationConfigBrowserRestriction.browserType) &&
        Objects.equals(this.platform, webApplicationConfigBrowserRestriction.platform) &&
        Objects.equals(this.comparator, webApplicationConfigBrowserRestriction.comparator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browserVersion, browserType, platform, comparator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebApplicationConfigBrowserRestriction {\n");
    sb.append("    browserVersion: ").append(toIndentedString(browserVersion)).append("\n");
    sb.append("    browserType: ").append(toIndentedString(browserType)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    comparator: ").append(toIndentedString(comparator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

