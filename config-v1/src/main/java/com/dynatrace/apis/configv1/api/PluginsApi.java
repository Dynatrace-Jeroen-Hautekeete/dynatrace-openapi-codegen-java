/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import java.io.File;
import com.dynatrace.apis.configv1.model.Plugin;
import com.dynatrace.apis.configv1.model.PluginStateList;
import com.dynatrace.apis.configv1.model.RemotePluginEndpoint;
import com.dynatrace.apis.configv1.model.StubList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class PluginsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PluginsApi() {
    this(new ApiClient());
  }

  public PluginsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new endpoint for the specified ActiveGate plugin
   * The body must not provide an ID of the endpoint, as IDs are automatically assigned.
   * @param id The ID of the plugin where you want to create an endpoint. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains parameters of the new plugin endpoint. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createRemotePluginEndpoint(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createRemotePluginEndpointWithHttpInfo(id, remotePluginEndpoint);
    return localVarResponse.getData();
  }

  /**
   * Creates a new endpoint for the specified ActiveGate plugin
   * The body must not provide an ID of the endpoint, as IDs are automatically assigned.
   * @param id The ID of the plugin where you want to create an endpoint. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains parameters of the new plugin endpoint. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createRemotePluginEndpointWithHttpInfo(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRemotePluginEndpointRequestBuilder(id, remotePluginEndpoint);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRemotePluginEndpoint", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRemotePluginEndpointRequestBuilder(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createRemotePluginEndpoint");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(remotePluginEndpoint);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the ZIP file of the specified plugin
   * Deletion of the plugin file uninstalls the plugin, making it unavailable for use.
   * @param id The ID of the plugin to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deletePlugin(String id) throws ApiException {
    deletePluginWithHttpInfo(id);
  }

  /**
   * Deletes the ZIP file of the specified plugin
   * Deletion of the plugin file uninstalls the plugin, making it unavailable for use.
   * @param id The ID of the plugin to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deletePluginWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deletePluginRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deletePlugin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deletePluginRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deletePlugin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/binary"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes an existing endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the plugin where you want to delete an endpoint. (required)
   * @param endpointId The ID of the endpoint to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRemotePluginEndpoint(String id, String endpointId) throws ApiException {
    deleteRemotePluginEndpointWithHttpInfo(id, endpointId);
  }

  /**
   * Deletes an existing endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the plugin where you want to delete an endpoint. (required)
   * @param endpointId The ID of the endpoint to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRemotePluginEndpointWithHttpInfo(String id, String endpointId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRemotePluginEndpointRequestBuilder(id, endpointId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRemotePluginEndpoint", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRemotePluginEndpointRequestBuilder(String id, String endpointId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRemotePluginEndpoint");
    }
    // verify the required parameter 'endpointId' is set
    if (endpointId == null) {
      throw new ApiException(400, "Missing the required parameter 'endpointId' when calling deleteRemotePluginEndpoint");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints/{endpointId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{endpointId}", ApiClient.urlEncode(endpointId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the properties of the specified plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return Plugin
   * @throws ApiException if fails to make API call
   */
  public Plugin getPlugin(String id) throws ApiException {
    ApiResponse<Plugin> localVarResponse = getPluginWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Lists the properties of the specified plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return ApiResponse&lt;Plugin&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Plugin> getPluginWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPluginRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlugin", localVarResponse);
        }
        return new ApiResponse<Plugin>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Plugin>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPluginRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getPlugin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Downloads the ZIP file of the specified plugin
   * 
   * @param id The ID of the plugin you want to download. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getPluginBinary(String id) throws ApiException {
    ApiResponse<Object> localVarResponse = getPluginBinaryWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Downloads the ZIP file of the specified plugin
   * 
   * @param id The ID of the plugin you want to download. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> getPluginBinaryWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPluginBinaryRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPluginBinary", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPluginBinaryRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getPluginBinary");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/binary"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists the states of the specified plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return PluginStateList
   * @throws ApiException if fails to make API call
   */
  public PluginStateList getPluginStates(String id) throws ApiException {
    ApiResponse<PluginStateList> localVarResponse = getPluginStatesWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Lists the states of the specified plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return ApiResponse&lt;PluginStateList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PluginStateList> getPluginStatesWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPluginStatesRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPluginStates", localVarResponse);
        }
        return new ApiResponse<PluginStateList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PluginStateList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPluginStatesRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getPluginStates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/states"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all uploaded plugins
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList getPlugins() throws ApiException {
    ApiResponse<StubList> localVarResponse = getPluginsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all uploaded plugins
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> getPluginsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPluginsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlugins", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPluginsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets parameters of the specified endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @param endpointId The ID of the required endpoint. (required)
   * @return RemotePluginEndpoint
   * @throws ApiException if fails to make API call
   */
  public RemotePluginEndpoint getRemotePluginEndpoint(String id, String endpointId) throws ApiException {
    ApiResponse<RemotePluginEndpoint> localVarResponse = getRemotePluginEndpointWithHttpInfo(id, endpointId);
    return localVarResponse.getData();
  }

  /**
   * Gets parameters of the specified endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @param endpointId The ID of the required endpoint. (required)
   * @return ApiResponse&lt;RemotePluginEndpoint&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RemotePluginEndpoint> getRemotePluginEndpointWithHttpInfo(String id, String endpointId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemotePluginEndpointRequestBuilder(id, endpointId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemotePluginEndpoint", localVarResponse);
        }
        return new ApiResponse<RemotePluginEndpoint>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RemotePluginEndpoint>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemotePluginEndpointRequestBuilder(String id, String endpointId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getRemotePluginEndpoint");
    }
    // verify the required parameter 'endpointId' is set
    if (endpointId == null) {
      throw new ApiException(400, "Missing the required parameter 'endpointId' when calling getRemotePluginEndpoint");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints/{endpointId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{endpointId}", ApiClient.urlEncode(endpointId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists endpoints of the specified ActiveGate plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList getRemotePluginEndpoints(String id) throws ApiException {
    ApiResponse<StubList> localVarResponse = getRemotePluginEndpointsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Lists endpoints of the specified ActiveGate plugin
   * 
   * @param id The ID of the required plugin. (required)
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> getRemotePluginEndpointsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemotePluginEndpointsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemotePluginEndpoints", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemotePluginEndpointsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getRemotePluginEndpoints");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List available ActiveGate plugin modules
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList getRemotePluginModules() throws ApiException {
    ApiResponse<StubList> localVarResponse = getRemotePluginModulesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List available ActiveGate plugin modules
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> getRemotePluginModulesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemotePluginModulesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemotePluginModules", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemotePluginModulesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/activeGatePluginModules";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates an existing endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the plugin where you want to update an endpoint.   If you set the plugin ID in the body as well, it must match this ID. (required)
   * @param endpointId The ID of the endpoint to be updated.   If you set the endpoint ID in the body as well, it must match this ID. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains updated parameters of the plugin endpoint. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateRemotePluginEndpoint(String id, String endpointId, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    updateRemotePluginEndpointWithHttpInfo(id, endpointId, remotePluginEndpoint);
  }

  /**
   * Updates an existing endpoint of the ActiveGate plugin
   * 
   * @param id The ID of the plugin where you want to update an endpoint.   If you set the plugin ID in the body as well, it must match this ID. (required)
   * @param endpointId The ID of the endpoint to be updated.   If you set the endpoint ID in the body as well, it must match this ID. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains updated parameters of the plugin endpoint. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateRemotePluginEndpointWithHttpInfo(String id, String endpointId, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRemotePluginEndpointRequestBuilder(id, endpointId, remotePluginEndpoint);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRemotePluginEndpoint", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRemotePluginEndpointRequestBuilder(String id, String endpointId, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateRemotePluginEndpoint");
    }
    // verify the required parameter 'endpointId' is set
    if (endpointId == null) {
      throw new ApiException(400, "Missing the required parameter 'endpointId' when calling updateRemotePluginEndpoint");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints/{endpointId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{endpointId}", ApiClient.urlEncode(endpointId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(remotePluginEndpoint);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Uploads a ZIP plugin file
   * 
   * @param _file Plugin ZIP file to be uploaded.    File name must match the **name** field in the &#x60;plugin.json&#x60; file.   For example, for the plugin whose **name** is &#x60;custom.remote.python.demo&#x60;, the name of the plugin file must be &#x60;custom.remote.python.demo.zip&#x60;. (required)
   * @param overrideAlerts Use plugin-defined thresholds for alerts (&#x60;true&#x60;) or user-defined thresholds (&#x60;false&#x60;).    Plugin-defined thresholds are stored in the &#x60;plugin.json&#x60; file.   If not set, user-defined thresholds are used. (optional, default to false)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation uploadPlugin(File _file, Boolean overrideAlerts) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = uploadPluginWithHttpInfo(_file, overrideAlerts);
    return localVarResponse.getData();
  }

  /**
   * Uploads a ZIP plugin file
   * 
   * @param _file Plugin ZIP file to be uploaded.    File name must match the **name** field in the &#x60;plugin.json&#x60; file.   For example, for the plugin whose **name** is &#x60;custom.remote.python.demo&#x60;, the name of the plugin file must be &#x60;custom.remote.python.demo.zip&#x60;. (required)
   * @param overrideAlerts Use plugin-defined thresholds for alerts (&#x60;true&#x60;) or user-defined thresholds (&#x60;false&#x60;).    Plugin-defined thresholds are stored in the &#x60;plugin.json&#x60; file.   If not set, user-defined thresholds are used. (optional, default to false)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> uploadPluginWithHttpInfo(File _file, Boolean overrideAlerts) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadPluginRequestBuilder(_file, overrideAlerts);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("uploadPlugin", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadPluginRequestBuilder(File _file, Boolean overrideAlerts) throws ApiException {
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling uploadPlugin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("overrideAlerts", overrideAlerts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates a ZIP plugin file for &#x60;POST/plugins&#x60; request
   * 
   * @param _file The ZIP plugin file to be uploaded.    The file name must match the ID of the plugin. Example: &#x60;custom.remote.python.demo.zip&#x60; (required)
   * @param jsonOnly Validate only the &#x60;plugin.json&#x60; file (&#x60;true&#x60;) or the entire plugin structure (&#x60;false&#x60;).    If not set, the entire plugin is validated.  (optional, default to false)
   * @throws ApiException if fails to make API call
   */
  public void validatePlugin(File _file, Boolean jsonOnly) throws ApiException {
    validatePluginWithHttpInfo(_file, jsonOnly);
  }

  /**
   * Validates a ZIP plugin file for &#x60;POST/plugins&#x60; request
   * 
   * @param _file The ZIP plugin file to be uploaded.    The file name must match the ID of the plugin. Example: &#x60;custom.remote.python.demo.zip&#x60; (required)
   * @param jsonOnly Validate only the &#x60;plugin.json&#x60; file (&#x60;true&#x60;) or the entire plugin structure (&#x60;false&#x60;).    If not set, the entire plugin is validated.  (optional, default to false)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validatePluginWithHttpInfo(File _file, Boolean jsonOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validatePluginRequestBuilder(_file, jsonOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validatePlugin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validatePluginRequestBuilder(File _file, Boolean jsonOnly) throws ApiException {
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling validatePlugin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/validator";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("jsonOnly", jsonOnly));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /plugins/{id}/endpoints&#x60; request
   * 
   * @param id The ID of the required plugin. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains parameters of the new plugin endpoint. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateRemotePluginEndpoint(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    validateRemotePluginEndpointWithHttpInfo(id, remotePluginEndpoint);
  }

  /**
   * Validates the payload for the &#x60;POST /plugins/{id}/endpoints&#x60; request
   * 
   * @param id The ID of the required plugin. (required)
   * @param remotePluginEndpoint The JSON body of the request. Contains parameters of the new plugin endpoint. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateRemotePluginEndpointWithHttpInfo(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateRemotePluginEndpointRequestBuilder(id, remotePluginEndpoint);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateRemotePluginEndpoint", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateRemotePluginEndpointRequestBuilder(String id, RemotePluginEndpoint remotePluginEndpoint) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateRemotePluginEndpoint");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/plugins/{id}/endpoints/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(remotePluginEndpoint);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
