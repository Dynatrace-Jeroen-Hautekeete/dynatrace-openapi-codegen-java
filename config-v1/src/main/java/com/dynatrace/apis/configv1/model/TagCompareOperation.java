/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CompareOperation;
import com.dynatrace.apis.configv1.model.TagInfo;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * The condition of the &#x60;TAG&#x60; type.   The condition checks if the process group of the potential service is tagged with a specific tag.
 */
@ApiModel(description = "The condition of the `TAG` type.   The condition checks if the process group of the potential service is tagged with a specific tag.")
@JsonPropertyOrder({
  TagCompareOperation.JSON_PROPERTY_COMPARE_KEY_ONLY,
  TagCompareOperation.JSON_PROPERTY_TAGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class TagCompareOperation extends CompareOperation {
  public static final String JSON_PROPERTY_COMPARE_KEY_ONLY = "compareKeyOnly";
  private Boolean compareKeyOnly;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Set<TagInfo> tags = new LinkedHashSet<>();

  public TagCompareOperation() { 
  }

  public TagCompareOperation compareKeyOnly(Boolean compareKeyOnly) {
    this.compareKeyOnly = compareKeyOnly;
    return this;
  }

   /**
   * If &#x60;true&#x60; ignores the tag values and only validates that the tag key is matching. Defaults to &#x60;false&#x60;.
   * @return compareKeyOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true` ignores the tag values and only validates that the tag key is matching. Defaults to `false`.")
  @JsonProperty(JSON_PROPERTY_COMPARE_KEY_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCompareKeyOnly() {
    return compareKeyOnly;
  }


  @JsonProperty(JSON_PROPERTY_COMPARE_KEY_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompareKeyOnly(Boolean compareKeyOnly) {
    this.compareKeyOnly = compareKeyOnly;
  }


  public TagCompareOperation tags(Set<TagInfo> tags) {
    this.tags = tags;
    return this;
  }

  public TagCompareOperation addTagsItem(TagInfo tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The value to compare to.   If several values are specified, the OR logic applies.
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The value to compare to.   If several values are specified, the OR logic applies.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<TagInfo> getTags() {
    return tags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTags(Set<TagInfo> tags) {
    this.tags = tags;
  }


  /**
   * Return true if this TagCompareOperation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagCompareOperation tagCompareOperation = (TagCompareOperation) o;
    return Objects.equals(this.compareKeyOnly, tagCompareOperation.compareKeyOnly) &&
        Objects.equals(this.tags, tagCompareOperation.tags) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compareKeyOnly, tags, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagCompareOperation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    compareKeyOnly: ").append(toIndentedString(compareKeyOnly)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("TagCompareOperation", TagCompareOperation.class);
  JSON.registerDiscriminator(TagCompareOperation.class, "type", mappings);
}
}

