/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BeforeTransformationAllOf
 */
@JsonPropertyOrder({
  BeforeTransformationAllOf.JSON_PROPERTY_DELIMITER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class BeforeTransformationAllOf {
  public static final String JSON_PROPERTY_DELIMITER = "delimiter";
  private String delimiter;

  public BeforeTransformationAllOf() { 
  }

  public BeforeTransformationAllOf delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

   /**
   * The delimiter of the transformation. The transformation keeps everything before this delimiter and removes everything after it.    The delimiter itself is not kept.   If several delimiters appear in the initial value, only the first one is used.
   * @return delimiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The delimiter of the transformation. The transformation keeps everything before this delimiter and removes everything after it.    The delimiter itself is not kept.   If several delimiters appear in the initial value, only the first one is used.")
  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDelimiter() {
    return delimiter;
  }


  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  /**
   * Return true if this BeforeTransformation_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeforeTransformationAllOf beforeTransformationAllOf = (BeforeTransformationAllOf) o;
    return Objects.equals(this.delimiter, beforeTransformationAllOf.delimiter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delimiter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeforeTransformationAllOf {\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

