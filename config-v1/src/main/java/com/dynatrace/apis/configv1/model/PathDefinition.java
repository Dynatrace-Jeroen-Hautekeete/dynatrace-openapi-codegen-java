/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A filtering criterion for log path.
 */
@ApiModel(description = "A filtering criterion for log path.")
@JsonPropertyOrder({
  PathDefinition.JSON_PROPERTY_DEFINITION,
  PathDefinition.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class PathDefinition {
  public static final String JSON_PROPERTY_DEFINITION = "definition";
  private String definition;

  /**
   * The type of the log path **definition**: fixed or an expression with wildcards.
   */
  public enum TypeEnum {
    FIXED("FIXED"),
    
    WILDCARD("WILDCARD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public PathDefinition() { 
  }

  public PathDefinition definition(String definition) {
    this.definition = definition;
    return this;
  }

   /**
   * The path to the required log path.    If the **type** is set to &#x60;WILDCARD&#x60;, it may contain wildcard characters (&#x60;*&#x60;).
   * @return definition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/var/log/sample.log", required = true, value = "The path to the required log path.    If the **type** is set to `WILDCARD`, it may contain wildcard characters (`*`).")
  @JsonProperty(JSON_PROPERTY_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDefinition() {
    return definition;
  }


  @JsonProperty(JSON_PROPERTY_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public PathDefinition type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the log path **definition**: fixed or an expression with wildcards.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FIXED", required = true, value = "The type of the log path **definition**: fixed or an expression with wildcards.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this PathDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathDefinition pathDefinition = (PathDefinition) o;
    return Objects.equals(this.definition, pathDefinition.definition) &&
        Objects.equals(this.type, pathDefinition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definition, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathDefinition {\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

