/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of the HTTP error in the web application.
 */
@ApiModel(description = "Configuration of the HTTP error in the web application.")
@JsonPropertyOrder({
  HttpErrorRule.JSON_PROPERTY_CONSIDER_UNKNOWN_ERROR_CODE,
  HttpErrorRule.JSON_PROPERTY_CONSIDER_BLOCKED_REQUESTS,
  HttpErrorRule.JSON_PROPERTY_ERROR_CODES,
  HttpErrorRule.JSON_PROPERTY_FILTER_BY_URL,
  HttpErrorRule.JSON_PROPERTY_FILTER,
  HttpErrorRule.JSON_PROPERTY_URL,
  HttpErrorRule.JSON_PROPERTY_CAPTURE,
  HttpErrorRule.JSON_PROPERTY_IMPACT_APDEX,
  HttpErrorRule.JSON_PROPERTY_CONSIDER_FOR_AI
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class HttpErrorRule {
  public static final String JSON_PROPERTY_CONSIDER_UNKNOWN_ERROR_CODE = "considerUnknownErrorCode";
  private Boolean considerUnknownErrorCode;

  public static final String JSON_PROPERTY_CONSIDER_BLOCKED_REQUESTS = "considerBlockedRequests";
  private Boolean considerBlockedRequests;

  public static final String JSON_PROPERTY_ERROR_CODES = "errorCodes";
  private String errorCodes;

  public static final String JSON_PROPERTY_FILTER_BY_URL = "filterByUrl";
  private Boolean filterByUrl;

  /**
   * The matching rule for the URL.
   */
  public enum FilterEnum {
    BEGINS_WITH("BEGINS_WITH"),
    
    CONTAINS("CONTAINS"),
    
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS");

    private String value;

    FilterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilterEnum fromValue(String value) {
      for (FilterEnum b : FilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILTER = "filter";
  private FilterEnum filter;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_CAPTURE = "capture";
  private Boolean capture;

  public static final String JSON_PROPERTY_IMPACT_APDEX = "impactApdex";
  private Boolean impactApdex;

  public static final String JSON_PROPERTY_CONSIDER_FOR_AI = "considerForAi";
  private Boolean considerForAi;

  public HttpErrorRule() { 
  }

  public HttpErrorRule considerUnknownErrorCode(Boolean considerUnknownErrorCode) {
    this.considerUnknownErrorCode = considerUnknownErrorCode;
    return this;
  }

   /**
   * If &#x60;true&#x60;, match by errors that have unknown HTTP status code.
   * @return considerUnknownErrorCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If `true`, match by errors that have unknown HTTP status code.")
  @JsonProperty(JSON_PROPERTY_CONSIDER_UNKNOWN_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getConsiderUnknownErrorCode() {
    return considerUnknownErrorCode;
  }


  @JsonProperty(JSON_PROPERTY_CONSIDER_UNKNOWN_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsiderUnknownErrorCode(Boolean considerUnknownErrorCode) {
    this.considerUnknownErrorCode = considerUnknownErrorCode;
  }


  public HttpErrorRule considerBlockedRequests(Boolean considerBlockedRequests) {
    this.considerBlockedRequests = considerBlockedRequests;
    return this;
  }

   /**
   * If &#x60;true&#x60;, match by errors that have CSP Rule violations.
   * @return considerBlockedRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, match by errors that have CSP Rule violations.")
  @JsonProperty(JSON_PROPERTY_CONSIDER_BLOCKED_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConsiderBlockedRequests() {
    return considerBlockedRequests;
  }


  @JsonProperty(JSON_PROPERTY_CONSIDER_BLOCKED_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsiderBlockedRequests(Boolean considerBlockedRequests) {
    this.considerBlockedRequests = considerBlockedRequests;
  }


  public HttpErrorRule errorCodes(String errorCodes) {
    this.errorCodes = errorCodes;
    return this;
  }

   /**
   * The HTTP status code or status code range to match by.   This field is required if **considerUnknownErrorCode** AND **considerBlockedRequests** are both set to &#x60;false&#x60;.
   * @return errorCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "400", value = "The HTTP status code or status code range to match by.   This field is required if **considerUnknownErrorCode** AND **considerBlockedRequests** are both set to `false`.")
  @JsonProperty(JSON_PROPERTY_ERROR_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorCodes() {
    return errorCodes;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorCodes(String errorCodes) {
    this.errorCodes = errorCodes;
  }


  public HttpErrorRule filterByUrl(Boolean filterByUrl) {
    this.filterByUrl = filterByUrl;
    return this;
  }

   /**
   * If &#x60;true&#x60;, filter errors by URL.
   * @return filterByUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If `true`, filter errors by URL.")
  @JsonProperty(JSON_PROPERTY_FILTER_BY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getFilterByUrl() {
    return filterByUrl;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_BY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilterByUrl(Boolean filterByUrl) {
    this.filterByUrl = filterByUrl;
  }


  public HttpErrorRule filter(FilterEnum filter) {
    this.filter = filter;
    return this;
  }

   /**
   * The matching rule for the URL.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The matching rule for the URL.")
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterEnum getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(FilterEnum filter) {
    this.filter = filter;
  }


  public HttpErrorRule url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL to look for.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL to look for.")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public HttpErrorRule capture(Boolean capture) {
    this.capture = capture;
    return this;
  }

   /**
   * Capture (&#x60;true&#x60;) or ignore (&#x60;false&#x60;) the error.
   * @return capture
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Capture (`true`) or ignore (`false`) the error.")
  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getCapture() {
    return capture;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCapture(Boolean capture) {
    this.capture = capture;
  }


  public HttpErrorRule impactApdex(Boolean impactApdex) {
    this.impactApdex = impactApdex;
    return this;
  }

   /**
   * Include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the error in Apdex calculation.
   * @return impactApdex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Include (`true`) or exclude (`false`) the error in Apdex calculation.")
  @JsonProperty(JSON_PROPERTY_IMPACT_APDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getImpactApdex() {
    return impactApdex;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_APDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpactApdex(Boolean impactApdex) {
    this.impactApdex = impactApdex;
  }


  public HttpErrorRule considerForAi(Boolean considerForAi) {
    this.considerForAi = considerForAi;
    return this;
  }

   /**
   * Include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2).
   * @return considerForAi
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2).")
  @JsonProperty(JSON_PROPERTY_CONSIDER_FOR_AI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getConsiderForAi() {
    return considerForAi;
  }


  @JsonProperty(JSON_PROPERTY_CONSIDER_FOR_AI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsiderForAi(Boolean considerForAi) {
    this.considerForAi = considerForAi;
  }


  /**
   * Return true if this HttpErrorRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpErrorRule httpErrorRule = (HttpErrorRule) o;
    return Objects.equals(this.considerUnknownErrorCode, httpErrorRule.considerUnknownErrorCode) &&
        Objects.equals(this.considerBlockedRequests, httpErrorRule.considerBlockedRequests) &&
        Objects.equals(this.errorCodes, httpErrorRule.errorCodes) &&
        Objects.equals(this.filterByUrl, httpErrorRule.filterByUrl) &&
        Objects.equals(this.filter, httpErrorRule.filter) &&
        Objects.equals(this.url, httpErrorRule.url) &&
        Objects.equals(this.capture, httpErrorRule.capture) &&
        Objects.equals(this.impactApdex, httpErrorRule.impactApdex) &&
        Objects.equals(this.considerForAi, httpErrorRule.considerForAi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(considerUnknownErrorCode, considerBlockedRequests, errorCodes, filterByUrl, filter, url, capture, impactApdex, considerForAi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpErrorRule {\n");
    sb.append("    considerUnknownErrorCode: ").append(toIndentedString(considerUnknownErrorCode)).append("\n");
    sb.append("    considerBlockedRequests: ").append(toIndentedString(considerBlockedRequests)).append("\n");
    sb.append("    errorCodes: ").append(toIndentedString(errorCodes)).append("\n");
    sb.append("    filterByUrl: ").append(toIndentedString(filterByUrl)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    capture: ").append(toIndentedString(capture)).append("\n");
    sb.append("    impactApdex: ").append(toIndentedString(impactApdex)).append("\n");
    sb.append("    considerForAi: ").append(toIndentedString(considerForAi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

