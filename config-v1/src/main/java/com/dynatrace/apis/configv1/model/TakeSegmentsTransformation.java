/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.TransformationBase;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * The transformation of the &#x60;TAKE_SEGMENTS&#x60; type.   The transformation splits the detected value into an array and keeps the specified number of first or last elements.
 */
@ApiModel(description = "The transformation of the `TAKE_SEGMENTS` type.   The transformation splits the detected value into an array and keeps the specified number of first or last elements.")
@JsonPropertyOrder({
  TakeSegmentsTransformation.JSON_PROPERTY_SEGMENT_COUNT,
  TakeSegmentsTransformation.JSON_PROPERTY_DELIMITER,
  TakeSegmentsTransformation.JSON_PROPERTY_TAKE_FROM_END
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class TakeSegmentsTransformation extends TransformationBase {
  public static final String JSON_PROPERTY_SEGMENT_COUNT = "segmentCount";
  private Integer segmentCount;

  public static final String JSON_PROPERTY_DELIMITER = "delimiter";
  private String delimiter;

  public static final String JSON_PROPERTY_TAKE_FROM_END = "takeFromEnd";
  private Boolean takeFromEnd;

  public TakeSegmentsTransformation() { 
  }

  public TakeSegmentsTransformation segmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
    return this;
  }

   /**
   * The number of elements to be kept.
   * minimum: 1
   * @return segmentCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of elements to be kept.")
  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSegmentCount() {
    return segmentCount;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSegmentCount(Integer segmentCount) {
    this.segmentCount = segmentCount;
  }


  public TakeSegmentsTransformation delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

   /**
   * The delimiter for splitting the detected value. The delimiter itself is not kept.
   * @return delimiter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The delimiter for splitting the detected value. The delimiter itself is not kept.")
  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDelimiter() {
    return delimiter;
  }


  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public TakeSegmentsTransformation takeFromEnd(Boolean takeFromEnd) {
    this.takeFromEnd = takeFromEnd;
    return this;
  }

   /**
   * Keeps the first (&#x60;false&#x60;) or last (&#x60;true&#x60;) elements.    If not set, then &#x60;false&#x60; is used, keeping the first elements.
   * @return takeFromEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Keeps the first (`false`) or last (`true`) elements.    If not set, then `false` is used, keeping the first elements.")
  @JsonProperty(JSON_PROPERTY_TAKE_FROM_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTakeFromEnd() {
    return takeFromEnd;
  }


  @JsonProperty(JSON_PROPERTY_TAKE_FROM_END)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTakeFromEnd(Boolean takeFromEnd) {
    this.takeFromEnd = takeFromEnd;
  }


  /**
   * Return true if this TakeSegmentsTransformation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TakeSegmentsTransformation takeSegmentsTransformation = (TakeSegmentsTransformation) o;
    return Objects.equals(this.segmentCount, takeSegmentsTransformation.segmentCount) &&
        Objects.equals(this.delimiter, takeSegmentsTransformation.delimiter) &&
        Objects.equals(this.takeFromEnd, takeSegmentsTransformation.takeFromEnd) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentCount, delimiter, takeFromEnd, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TakeSegmentsTransformation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    segmentCount: ").append(toIndentedString(segmentCount)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    takeFromEnd: ").append(toIndentedString(takeFromEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("TakeSegmentsTransformation", TakeSegmentsTransformation.class);
  JSON.registerDiscriminator(TakeSegmentsTransformation.class, "type", mappings);
}
}

