/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ConfigurationMetadata;
import com.dynatrace.apis.configv1.model.DashboardMetadata;
import com.dynatrace.apis.configv1.model.Tile;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a dashboard.
 */
@ApiModel(description = "Configuration of a dashboard.")
@JsonPropertyOrder({
  Dashboard.JSON_PROPERTY_METADATA,
  Dashboard.JSON_PROPERTY_ID,
  Dashboard.JSON_PROPERTY_DASHBOARD_METADATA,
  Dashboard.JSON_PROPERTY_TILES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class Dashboard {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConfigurationMetadata metadata;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DASHBOARD_METADATA = "dashboardMetadata";
  private DashboardMetadata dashboardMetadata;

  public static final String JSON_PROPERTY_TILES = "tiles";
  private List<Tile> tiles = new ArrayList<>();

  public Dashboard() { 
  }

  public Dashboard metadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
  }


  public Dashboard id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the dashboard.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the dashboard.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Dashboard dashboardMetadata(DashboardMetadata dashboardMetadata) {
    this.dashboardMetadata = dashboardMetadata;
    return this;
  }

   /**
   * Get dashboardMetadata
   * @return dashboardMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DASHBOARD_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DashboardMetadata getDashboardMetadata() {
    return dashboardMetadata;
  }


  @JsonProperty(JSON_PROPERTY_DASHBOARD_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDashboardMetadata(DashboardMetadata dashboardMetadata) {
    this.dashboardMetadata = dashboardMetadata;
  }


  public Dashboard tiles(List<Tile> tiles) {
    this.tiles = tiles;
    return this;
  }

  public Dashboard addTilesItem(Tile tilesItem) {
    this.tiles.add(tilesItem);
    return this;
  }

   /**
   * The list of tiles on the dashboard.
   * @return tiles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of tiles on the dashboard.")
  @JsonProperty(JSON_PROPERTY_TILES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Tile> getTiles() {
    return tiles;
  }


  @JsonProperty(JSON_PROPERTY_TILES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTiles(List<Tile> tiles) {
    this.tiles = tiles;
  }


  /**
   * Return true if this Dashboard object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dashboard dashboard = (Dashboard) o;
    return Objects.equals(this.metadata, dashboard.metadata) &&
        Objects.equals(this.id, dashboard.id) &&
        Objects.equals(this.dashboardMetadata, dashboard.dashboardMetadata) &&
        Objects.equals(this.tiles, dashboard.tiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, id, dashboardMetadata, tiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dashboard {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dashboardMetadata: ").append(toIndentedString(dashboardMetadata)).append("\n");
    sb.append("    tiles: ").append(toIndentedString(tiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

