/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.VisualizationThreshold;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Visualization global configuration
 */
@ApiModel(description = "Visualization global configuration")
@JsonPropertyOrder({
  VisualizationGlobalProperties.JSON_PROPERTY_THEME,
  VisualizationGlobalProperties.JSON_PROPERTY_HAS_TRENDLINE,
  VisualizationGlobalProperties.JSON_PROPERTY_SERIES_TYPE,
  VisualizationGlobalProperties.JSON_PROPERTY_HIDE_LEGEND,
  VisualizationGlobalProperties.JSON_PROPERTY_THRESHOLD
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class VisualizationGlobalProperties {
  /**
   * Gets or Sets theme
   */
  public enum ThemeEnum {
    BLUE("BLUE"),
    
    DEFAULT("DEFAULT"),
    
    GRAY("GRAY"),
    
    GREEN("GREEN"),
    
    ORANGE("ORANGE"),
    
    PURPLE("PURPLE"),
    
    RED("RED"),
    
    ROYALBLUE("ROYALBLUE"),
    
    TURQUOISE("TURQUOISE"),
    
    YELLOW("YELLOW");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_THEME = "theme";
  private ThemeEnum theme;

  public static final String JSON_PROPERTY_HAS_TRENDLINE = "hasTrendline";
  private Boolean hasTrendline;

  /**
   * Gets or Sets seriesType
   */
  public enum SeriesTypeEnum {
    AREA("AREA"),
    
    COLUMN("COLUMN"),
    
    LINE("LINE"),
    
    STACKED_AREA("STACKED_AREA"),
    
    STACKED_COLUMN("STACKED_COLUMN");

    private String value;

    SeriesTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeriesTypeEnum fromValue(String value) {
      for (SeriesTypeEnum b : SeriesTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERIES_TYPE = "seriesType";
  private SeriesTypeEnum seriesType;

  public static final String JSON_PROPERTY_HIDE_LEGEND = "hideLegend";
  private Boolean hideLegend;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private VisualizationThreshold threshold;

  public VisualizationGlobalProperties() { 
  }

  public VisualizationGlobalProperties theme(ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Get theme
   * @return theme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ThemeEnum getTheme() {
    return theme;
  }


  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }


  public VisualizationGlobalProperties hasTrendline(Boolean hasTrendline) {
    this.hasTrendline = hasTrendline;
    return this;
  }

   /**
   * Get hasTrendline
   * @return hasTrendline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HAS_TRENDLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasTrendline() {
    return hasTrendline;
  }


  @JsonProperty(JSON_PROPERTY_HAS_TRENDLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasTrendline(Boolean hasTrendline) {
    this.hasTrendline = hasTrendline;
  }


  public VisualizationGlobalProperties seriesType(SeriesTypeEnum seriesType) {
    this.seriesType = seriesType;
    return this;
  }

   /**
   * Get seriesType
   * @return seriesType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SERIES_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SeriesTypeEnum getSeriesType() {
    return seriesType;
  }


  @JsonProperty(JSON_PROPERTY_SERIES_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeriesType(SeriesTypeEnum seriesType) {
    this.seriesType = seriesType;
  }


  public VisualizationGlobalProperties hideLegend(Boolean hideLegend) {
    this.hideLegend = hideLegend;
    return this;
  }

   /**
   * Get hideLegend
   * @return hideLegend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HIDE_LEGEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHideLegend() {
    return hideLegend;
  }


  @JsonProperty(JSON_PROPERTY_HIDE_LEGEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHideLegend(Boolean hideLegend) {
    this.hideLegend = hideLegend;
  }


  public VisualizationGlobalProperties threshold(VisualizationThreshold threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * Get threshold
   * @return threshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisualizationThreshold getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreshold(VisualizationThreshold threshold) {
    this.threshold = threshold;
  }


  /**
   * Return true if this VisualizationGlobalProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualizationGlobalProperties visualizationGlobalProperties = (VisualizationGlobalProperties) o;
    return Objects.equals(this.theme, visualizationGlobalProperties.theme) &&
        Objects.equals(this.hasTrendline, visualizationGlobalProperties.hasTrendline) &&
        Objects.equals(this.seriesType, visualizationGlobalProperties.seriesType) &&
        Objects.equals(this.hideLegend, visualizationGlobalProperties.hideLegend) &&
        Objects.equals(this.threshold, visualizationGlobalProperties.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(theme, hasTrendline, seriesType, hideLegend, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualizationGlobalProperties {\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    hasTrendline: ").append(toIndentedString(hasTrendline)).append("\n");
    sb.append("    seriesType: ").append(toIndentedString(seriesType)).append("\n");
    sb.append("    hideLegend: ").append(toIndentedString(hideLegend)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

