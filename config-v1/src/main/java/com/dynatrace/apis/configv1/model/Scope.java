/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.MonitoredEntityFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The scope of the maintenance window.    The scope restricts the alert/problem detection suppression to certain Dynatrace entities. It can contain a list of entities and/or matching rules for dynamic formation of the scope.    If no scope is specified, the alert/problem detection suppression applies to the entire environment.
 */
@ApiModel(description = "The scope of the maintenance window.    The scope restricts the alert/problem detection suppression to certain Dynatrace entities. It can contain a list of entities and/or matching rules for dynamic formation of the scope.    If no scope is specified, the alert/problem detection suppression applies to the entire environment.")
@JsonPropertyOrder({
  Scope.JSON_PROPERTY_ENTITIES,
  Scope.JSON_PROPERTY_MATCHES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class Scope {
  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<String> entities = new ArrayList<>();

  public static final String JSON_PROPERTY_MATCHES = "matches";
  private List<MonitoredEntityFilter> matches = new ArrayList<>();

  public Scope() { 
  }

  public Scope entities(List<String> entities) {
    this.entities = entities;
    return this;
  }

  public Scope addEntitiesItem(String entitiesItem) {
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * A list of Dynatrace entities (for example, hosts or services) to be included in the scope.   Allowed values are Dynatrace entity IDs.
   * @return entities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of Dynatrace entities (for example, hosts or services) to be included in the scope.   Allowed values are Dynatrace entity IDs.")
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getEntities() {
    return entities;
  }


  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntities(List<String> entities) {
    this.entities = entities;
  }


  public Scope matches(List<MonitoredEntityFilter> matches) {
    this.matches = matches;
    return this;
  }

  public Scope addMatchesItem(MonitoredEntityFilter matchesItem) {
    this.matches.add(matchesItem);
    return this;
  }

   /**
   * A list of matching rules for dynamic scope formation.   If several rules are set, the OR logic applies.
   * @return matches
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of matching rules for dynamic scope formation.   If several rules are set, the OR logic applies.")
  @JsonProperty(JSON_PROPERTY_MATCHES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MonitoredEntityFilter> getMatches() {
    return matches;
  }


  @JsonProperty(JSON_PROPERTY_MATCHES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMatches(List<MonitoredEntityFilter> matches) {
    this.matches = matches;
  }


  /**
   * Return true if this Scope object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scope scope = (Scope) o;
    return Objects.equals(this.entities, scope.entities) &&
        Objects.equals(this.matches, scope.matches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, matches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scope {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

