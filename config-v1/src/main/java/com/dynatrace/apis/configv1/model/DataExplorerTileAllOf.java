/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.DataExplorerQuery;
import com.dynatrace.apis.configv1.model.DataExplorerQuerySettings;
import com.dynatrace.apis.configv1.model.VisualizationConfiguration;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DataExplorerTileAllOf
 */
@JsonPropertyOrder({
  DataExplorerTileAllOf.JSON_PROPERTY_CUSTOM_NAME,
  DataExplorerTileAllOf.JSON_PROPERTY_QUERIES,
  DataExplorerTileAllOf.JSON_PROPERTY_VISUAL_CONFIG,
  DataExplorerTileAllOf.JSON_PROPERTY_QUERIES_SETTINGS,
  DataExplorerTileAllOf.JSON_PROPERTY_METRIC_EXPRESSIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DataExplorerTileAllOf {
  public static final String JSON_PROPERTY_CUSTOM_NAME = "customName";
  private String customName;

  public static final String JSON_PROPERTY_QUERIES = "queries";
  private List<DataExplorerQuery> queries = null;

  public static final String JSON_PROPERTY_VISUAL_CONFIG = "visualConfig";
  private VisualizationConfiguration visualConfig;

  public static final String JSON_PROPERTY_QUERIES_SETTINGS = "queriesSettings";
  private DataExplorerQuerySettings queriesSettings;

  public static final String JSON_PROPERTY_METRIC_EXPRESSIONS = "metricExpressions";
  private List<String> metricExpressions = null;

  public DataExplorerTileAllOf() { 
  }

  public DataExplorerTileAllOf customName(String customName) {
    this.customName = customName;
    return this;
  }

   /**
   * The name of the tile, set by user.
   * @return customName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the tile, set by user.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomName() {
    return customName;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomName(String customName) {
    this.customName = customName;
  }


  public DataExplorerTileAllOf queries(List<DataExplorerQuery> queries) {
    this.queries = queries;
    return this;
  }

  public DataExplorerTileAllOf addQueriesItem(DataExplorerQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * The list queries to explore
   * @return queries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list queries to explore")
  @JsonProperty(JSON_PROPERTY_QUERIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DataExplorerQuery> getQueries() {
    return queries;
  }


  @JsonProperty(JSON_PROPERTY_QUERIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueries(List<DataExplorerQuery> queries) {
    this.queries = queries;
  }


  public DataExplorerTileAllOf visualConfig(VisualizationConfiguration visualConfig) {
    this.visualConfig = visualConfig;
    return this;
  }

   /**
   * Get visualConfig
   * @return visualConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VISUAL_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisualizationConfiguration getVisualConfig() {
    return visualConfig;
  }


  @JsonProperty(JSON_PROPERTY_VISUAL_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisualConfig(VisualizationConfiguration visualConfig) {
    this.visualConfig = visualConfig;
  }


  public DataExplorerTileAllOf queriesSettings(DataExplorerQuerySettings queriesSettings) {
    this.queriesSettings = queriesSettings;
    return this;
  }

   /**
   * Get queriesSettings
   * @return queriesSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_QUERIES_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataExplorerQuerySettings getQueriesSettings() {
    return queriesSettings;
  }


  @JsonProperty(JSON_PROPERTY_QUERIES_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueriesSettings(DataExplorerQuerySettings queriesSettings) {
    this.queriesSettings = queriesSettings;
  }


  public DataExplorerTileAllOf metricExpressions(List<String> metricExpressions) {
    this.metricExpressions = metricExpressions;
    return this;
  }

  public DataExplorerTileAllOf addMetricExpressionsItem(String metricExpressionsItem) {
    if (this.metricExpressions == null) {
      this.metricExpressions = new ArrayList<>();
    }
    this.metricExpressions.add(metricExpressionsItem);
    return this;
  }

   /**
   * The metric expressions generated by this configuration
   * @return metricExpressions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric expressions generated by this configuration")
  @JsonProperty(JSON_PROPERTY_METRIC_EXPRESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMetricExpressions() {
    return metricExpressions;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_EXPRESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricExpressions(List<String> metricExpressions) {
    this.metricExpressions = metricExpressions;
  }


  /**
   * Return true if this DataExplorerTile_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExplorerTileAllOf dataExplorerTileAllOf = (DataExplorerTileAllOf) o;
    return Objects.equals(this.customName, dataExplorerTileAllOf.customName) &&
        Objects.equals(this.queries, dataExplorerTileAllOf.queries) &&
        Objects.equals(this.visualConfig, dataExplorerTileAllOf.visualConfig) &&
        Objects.equals(this.queriesSettings, dataExplorerTileAllOf.queriesSettings) &&
        Objects.equals(this.metricExpressions, dataExplorerTileAllOf.metricExpressions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customName, queries, visualConfig, queriesSettings, metricExpressions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExplorerTileAllOf {\n");
    sb.append("    customName: ").append(toIndentedString(customName)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    visualConfig: ").append(toIndentedString(visualConfig)).append("\n");
    sb.append("    queriesSettings: ").append(toIndentedString(queriesSettings)).append("\n");
    sb.append("    metricExpressions: ").append(toIndentedString(metricExpressions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

