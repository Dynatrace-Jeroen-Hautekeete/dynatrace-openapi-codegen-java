/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Apdex configuration of a mobile or custom application.   A duration less than the **tolerable** threshold is considered satisfied.
 */
@ApiModel(description = "Apdex configuration of a mobile or custom application.   A duration less than the **tolerable** threshold is considered satisfied.")
@JsonPropertyOrder({
  MobileCustomApdex.JSON_PROPERTY_TOLERATED_THRESHOLD,
  MobileCustomApdex.JSON_PROPERTY_FRUSTRATING_THRESHOLD,
  MobileCustomApdex.JSON_PROPERTY_FRUSTRATED_ON_ERROR
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MobileCustomApdex {
  public static final String JSON_PROPERTY_TOLERATED_THRESHOLD = "toleratedThreshold";
  private Integer toleratedThreshold;

  public static final String JSON_PROPERTY_FRUSTRATING_THRESHOLD = "frustratingThreshold";
  private Integer frustratingThreshold;

  public static final String JSON_PROPERTY_FRUSTRATED_ON_ERROR = "frustratedOnError";
  private Boolean frustratedOnError;

  public MobileCustomApdex() { 
  }

  public MobileCustomApdex toleratedThreshold(Integer toleratedThreshold) {
    this.toleratedThreshold = toleratedThreshold;
    return this;
  }

   /**
   * Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable.
   * @return toleratedThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable.")
  @JsonProperty(JSON_PROPERTY_TOLERATED_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getToleratedThreshold() {
    return toleratedThreshold;
  }


  @JsonProperty(JSON_PROPERTY_TOLERATED_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToleratedThreshold(Integer toleratedThreshold) {
    this.toleratedThreshold = toleratedThreshold;
  }


  public MobileCustomApdex frustratingThreshold(Integer frustratingThreshold) {
    this.frustratingThreshold = frustratingThreshold;
    return this;
  }

   /**
   * Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated.
   * @return frustratingThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated.")
  @JsonProperty(JSON_PROPERTY_FRUSTRATING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFrustratingThreshold() {
    return frustratingThreshold;
  }


  @JsonProperty(JSON_PROPERTY_FRUSTRATING_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrustratingThreshold(Integer frustratingThreshold) {
    this.frustratingThreshold = frustratingThreshold;
  }


  public MobileCustomApdex frustratedOnError(Boolean frustratedOnError) {
    this.frustratedOnError = frustratedOnError;
    return this;
  }

   /**
   * Apdex error condition: if &#x60;true&#x60; the user session is considered frustrated when an error is reported.
   * @return frustratedOnError
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Apdex error condition: if `true` the user session is considered frustrated when an error is reported.")
  @JsonProperty(JSON_PROPERTY_FRUSTRATED_ON_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getFrustratedOnError() {
    return frustratedOnError;
  }


  @JsonProperty(JSON_PROPERTY_FRUSTRATED_ON_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrustratedOnError(Boolean frustratedOnError) {
    this.frustratedOnError = frustratedOnError;
  }


  /**
   * Return true if this MobileCustomApdex object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileCustomApdex mobileCustomApdex = (MobileCustomApdex) o;
    return Objects.equals(this.toleratedThreshold, mobileCustomApdex.toleratedThreshold) &&
        Objects.equals(this.frustratingThreshold, mobileCustomApdex.frustratingThreshold) &&
        Objects.equals(this.frustratedOnError, mobileCustomApdex.frustratedOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toleratedThreshold, frustratingThreshold, frustratedOnError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileCustomApdex {\n");
    sb.append("    toleratedThreshold: ").append(toIndentedString(toleratedThreshold)).append("\n");
    sb.append("    frustratingThreshold: ").append(toIndentedString(frustratingThreshold)).append("\n");
    sb.append("    frustratedOnError: ").append(toIndentedString(frustratedOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

