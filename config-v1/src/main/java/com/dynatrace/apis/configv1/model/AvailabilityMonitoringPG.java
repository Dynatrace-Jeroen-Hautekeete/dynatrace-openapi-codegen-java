/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of the availability monitoring for the process group.
 */
@ApiModel(description = "Configuration of the availability monitoring for the process group.")
@JsonPropertyOrder({
  AvailabilityMonitoringPG.JSON_PROPERTY_METHOD,
  AvailabilityMonitoringPG.JSON_PROPERTY_MINIMUM_THRESHOLD
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class AvailabilityMonitoringPG {
  /**
   * How to monitor the availability of the process group:   * &#x60;PROCESS_IMPACT&#x60;: Alert if any process of the group becomes unavailable.  * &#x60;MINIMUM_THRESHOLD&#x60;: Alert if the number of active processes in the group falls below the specified threshold.  * &#x60;OFF&#x60;: Availability monitoring is disabled.
   */
  public enum MethodEnum {
    MINIMUM_THRESHOLD("MINIMUM_THRESHOLD"),
    
    OFF("OFF"),
    
    PROCESS_IMPACT("PROCESS_IMPACT");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  public static final String JSON_PROPERTY_MINIMUM_THRESHOLD = "minimumThreshold";
  private Integer minimumThreshold;

  public AvailabilityMonitoringPG() { 
  }

  public AvailabilityMonitoringPG method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * How to monitor the availability of the process group:   * &#x60;PROCESS_IMPACT&#x60;: Alert if any process of the group becomes unavailable.  * &#x60;MINIMUM_THRESHOLD&#x60;: Alert if the number of active processes in the group falls below the specified threshold.  * &#x60;OFF&#x60;: Availability monitoring is disabled.
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "How to monitor the availability of the process group:   * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.")
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public AvailabilityMonitoringPG minimumThreshold(Integer minimumThreshold) {
    this.minimumThreshold = minimumThreshold;
    return this;
  }

   /**
   * Alert if the number of active processes in the group is lower than this value.
   * @return minimumThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alert if the number of active processes in the group is lower than this value.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinimumThreshold() {
    return minimumThreshold;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumThreshold(Integer minimumThreshold) {
    this.minimumThreshold = minimumThreshold;
  }


  /**
   * Return true if this AvailabilityMonitoringPG object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityMonitoringPG availabilityMonitoringPG = (AvailabilityMonitoringPG) o;
    return Objects.equals(this.method, availabilityMonitoringPG.method) &&
        Objects.equals(this.minimumThreshold, availabilityMonitoringPG.minimumThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, minimumThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityMonitoringPG {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    minimumThreshold: ").append(toIndentedString(minimumThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

