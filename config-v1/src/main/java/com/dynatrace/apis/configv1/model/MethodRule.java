/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MethodRule
 */
@JsonPropertyOrder({
  MethodRule.JSON_PROPERTY_ID,
  MethodRule.JSON_PROPERTY_METHOD_NAME,
  MethodRule.JSON_PROPERTY_ARGUMENT_TYPES,
  MethodRule.JSON_PROPERTY_RETURN_TYPE,
  MethodRule.JSON_PROPERTY_VISIBILITY,
  MethodRule.JSON_PROPERTY_MODIFIERS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MethodRule {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_METHOD_NAME = "methodName";
  private String methodName;

  public static final String JSON_PROPERTY_ARGUMENT_TYPES = "argumentTypes";
  private List<String> argumentTypes = null;

  public static final String JSON_PROPERTY_RETURN_TYPE = "returnType";
  private String returnType;

  /**
   * The visibility of the method rule.
   */
  public enum VisibilityEnum {
    INTERNAL("INTERNAL"),
    
    PACKAGE_PROTECTED("PACKAGE_PROTECTED"),
    
    PRIVATE("PRIVATE"),
    
    PROTECTED("PROTECTED"),
    
    PUBLIC("PUBLIC");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  /**
   * Gets or Sets modifiers
   */
  public enum ModifiersEnum {
    ABSTRACT("ABSTRACT"),
    
    EXTERN("EXTERN"),
    
    FINAL("FINAL"),
    
    NATIVE("NATIVE"),
    
    STATIC("STATIC");

    private String value;

    ModifiersEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModifiersEnum fromValue(String value) {
      for (ModifiersEnum b : ModifiersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODIFIERS = "modifiers";
  private Set<ModifiersEnum> modifiers = null;

  public MethodRule() { 
  }

  public MethodRule id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the method rule.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the method rule.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public MethodRule methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * The method to instrument.
   * @return methodName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The method to instrument.")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public MethodRule argumentTypes(List<String> argumentTypes) {
    this.argumentTypes = argumentTypes;
    return this;
  }

  public MethodRule addArgumentTypesItem(String argumentTypesItem) {
    if (this.argumentTypes == null) {
      this.argumentTypes = new ArrayList<>();
    }
    this.argumentTypes.add(argumentTypesItem);
    return this;
  }

   /**
   * Fully qualified types of argument the method expects.
   * @return argumentTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fully qualified types of argument the method expects.")
  @JsonProperty(JSON_PROPERTY_ARGUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getArgumentTypes() {
    return argumentTypes;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgumentTypes(List<String> argumentTypes) {
    this.argumentTypes = argumentTypes;
  }


  public MethodRule returnType(String returnType) {
    this.returnType = returnType;
    return this;
  }

   /**
   * Fully qualified type the method returns.
   * @return returnType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Fully qualified type the method returns.")
  @JsonProperty(JSON_PROPERTY_RETURN_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReturnType() {
    return returnType;
  }


  @JsonProperty(JSON_PROPERTY_RETURN_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReturnType(String returnType) {
    this.returnType = returnType;
  }


  public MethodRule visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * The visibility of the method rule.
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The visibility of the method rule.")
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public MethodRule modifiers(Set<ModifiersEnum> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public MethodRule addModifiersItem(ModifiersEnum modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new LinkedHashSet<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

   /**
   * The modifiers of the method rule.
   * @return modifiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The modifiers of the method rule.")
  @JsonProperty(JSON_PROPERTY_MODIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ModifiersEnum> getModifiers() {
    return modifiers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MODIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModifiers(Set<ModifiersEnum> modifiers) {
    this.modifiers = modifiers;
  }


  /**
   * Return true if this MethodRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodRule methodRule = (MethodRule) o;
    return Objects.equals(this.id, methodRule.id) &&
        Objects.equals(this.methodName, methodRule.methodName) &&
        Objects.equals(this.argumentTypes, methodRule.argumentTypes) &&
        Objects.equals(this.returnType, methodRule.returnType) &&
        Objects.equals(this.visibility, methodRule.visibility) &&
        Objects.equals(this.modifiers, methodRule.modifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, methodName, argumentTypes, returnType, visibility, modifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodRule {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    argumentTypes: ").append(toIndentedString(argumentTypes)).append("\n");
    sb.append("    returnType: ").append(toIndentedString(returnType)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

