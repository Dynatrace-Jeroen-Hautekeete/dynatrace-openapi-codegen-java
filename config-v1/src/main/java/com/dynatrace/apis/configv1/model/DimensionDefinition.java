/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.Placeholder;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameters of a definition of a calculated service metric.
 */
@ApiModel(description = "Parameters of a definition of a calculated service metric.")
@JsonPropertyOrder({
  DimensionDefinition.JSON_PROPERTY_NAME,
  DimensionDefinition.JSON_PROPERTY_DIMENSION,
  DimensionDefinition.JSON_PROPERTY_PLACEHOLDERS,
  DimensionDefinition.JSON_PROPERTY_TOP_X,
  DimensionDefinition.JSON_PROPERTY_TOP_X_DIRECTION,
  DimensionDefinition.JSON_PROPERTY_TOP_X_AGGREGATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DimensionDefinition {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DIMENSION = "dimension";
  private String dimension;

  public static final String JSON_PROPERTY_PLACEHOLDERS = "placeholders";
  private List<Placeholder> placeholders = null;

  public static final String JSON_PROPERTY_TOP_X = "topX";
  private Integer topX;

  /**
   * How to calculate the **topX** values.
   */
  public enum TopXDirectionEnum {
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    TopXDirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TopXDirectionEnum fromValue(String value) {
      for (TopXDirectionEnum b : TopXDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TOP_X_DIRECTION = "topXDirection";
  private TopXDirectionEnum topXDirection;

  /**
   * The aggregation of the dimension.
   */
  public enum TopXAggregationEnum {
    AVERAGE("AVERAGE"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MIN("MIN"),
    
    OF_INTEREST_RATIO("OF_INTEREST_RATIO"),
    
    OTHER_RATIO("OTHER_RATIO"),
    
    SINGLE_VALUE("SINGLE_VALUE"),
    
    SUM("SUM");

    private String value;

    TopXAggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TopXAggregationEnum fromValue(String value) {
      for (TopXAggregationEnum b : TopXAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TOP_X_AGGREGATION = "topXAggregation";
  private TopXAggregationEnum topXAggregation;

  public DimensionDefinition() { 
  }

  public DimensionDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the dimension.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the dimension.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public DimensionDefinition dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * The dimension value pattern.    You can define custom placeholders in the **placeholders** field and use them here.
   * @return dimension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The dimension value pattern.    You can define custom placeholders in the **placeholders** field and use them here.")
  @JsonProperty(JSON_PROPERTY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDimension() {
    return dimension;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDimension(String dimension) {
    this.dimension = dimension;
  }


  public DimensionDefinition placeholders(List<Placeholder> placeholders) {
    this.placeholders = placeholders;
    return this;
  }

  public DimensionDefinition addPlaceholdersItem(Placeholder placeholdersItem) {
    if (this.placeholders == null) {
      this.placeholders = new ArrayList<>();
    }
    this.placeholders.add(placeholdersItem);
    return this;
  }

   /**
   * The list of custom placeholders to be used in a dimension value pattern.
   * @return placeholders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of custom placeholders to be used in a dimension value pattern.")
  @JsonProperty(JSON_PROPERTY_PLACEHOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Placeholder> getPlaceholders() {
    return placeholders;
  }


  @JsonProperty(JSON_PROPERTY_PLACEHOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlaceholders(List<Placeholder> placeholders) {
    this.placeholders = placeholders;
  }


  public DimensionDefinition topX(Integer topX) {
    this.topX = topX;
    return this;
  }

   /**
   * The number of top values to be calculated.
   * minimum: 1
   * maximum: 100
   * @return topX
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of top values to be calculated.")
  @JsonProperty(JSON_PROPERTY_TOP_X)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTopX() {
    return topX;
  }


  @JsonProperty(JSON_PROPERTY_TOP_X)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTopX(Integer topX) {
    this.topX = topX;
  }


  public DimensionDefinition topXDirection(TopXDirectionEnum topXDirection) {
    this.topXDirection = topXDirection;
    return this;
  }

   /**
   * How to calculate the **topX** values.
   * @return topXDirection
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "How to calculate the **topX** values.")
  @JsonProperty(JSON_PROPERTY_TOP_X_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TopXDirectionEnum getTopXDirection() {
    return topXDirection;
  }


  @JsonProperty(JSON_PROPERTY_TOP_X_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTopXDirection(TopXDirectionEnum topXDirection) {
    this.topXDirection = topXDirection;
  }


  public DimensionDefinition topXAggregation(TopXAggregationEnum topXAggregation) {
    this.topXAggregation = topXAggregation;
    return this;
  }

   /**
   * The aggregation of the dimension.
   * @return topXAggregation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The aggregation of the dimension.")
  @JsonProperty(JSON_PROPERTY_TOP_X_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TopXAggregationEnum getTopXAggregation() {
    return topXAggregation;
  }


  @JsonProperty(JSON_PROPERTY_TOP_X_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTopXAggregation(TopXAggregationEnum topXAggregation) {
    this.topXAggregation = topXAggregation;
  }


  /**
   * Return true if this DimensionDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionDefinition dimensionDefinition = (DimensionDefinition) o;
    return Objects.equals(this.name, dimensionDefinition.name) &&
        Objects.equals(this.dimension, dimensionDefinition.dimension) &&
        Objects.equals(this.placeholders, dimensionDefinition.placeholders) &&
        Objects.equals(this.topX, dimensionDefinition.topX) &&
        Objects.equals(this.topXDirection, dimensionDefinition.topXDirection) &&
        Objects.equals(this.topXAggregation, dimensionDefinition.topXAggregation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dimension, placeholders, topX, topXDirection, topXAggregation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    placeholders: ").append(toIndentedString(placeholders)).append("\n");
    sb.append("    topX: ").append(toIndentedString(topX)).append("\n");
    sb.append("    topXDirection: ").append(toIndentedString(topXDirection)).append("\n");
    sb.append("    topXAggregation: ").append(toIndentedString(topXAggregation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

