/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ConfigurationMetadata;
import com.dynatrace.apis.configv1.model.Schedule;
import com.dynatrace.apis.configv1.model.Scope;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a maintenance window.
 */
@ApiModel(description = "Configuration of a maintenance window.")
@JsonPropertyOrder({
  MaintenanceWindow.JSON_PROPERTY_METADATA,
  MaintenanceWindow.JSON_PROPERTY_ID,
  MaintenanceWindow.JSON_PROPERTY_NAME,
  MaintenanceWindow.JSON_PROPERTY_DESCRIPTION,
  MaintenanceWindow.JSON_PROPERTY_TYPE,
  MaintenanceWindow.JSON_PROPERTY_SUPPRESSION,
  MaintenanceWindow.JSON_PROPERTY_SUPPRESS_SYNTHETIC_MONITORS_EXECUTION,
  MaintenanceWindow.JSON_PROPERTY_SCOPE,
  MaintenanceWindow.JSON_PROPERTY_SCHEDULE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MaintenanceWindow {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConfigurationMetadata metadata;

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * The type of the maintenance: planned or unplanned.
   */
  public enum TypeEnum {
    PLANNED("PLANNED"),
    
    UNPLANNED("UNPLANNED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * The type of suppression of alerting and problem detection during the maintenance.
   */
  public enum SuppressionEnum {
    DETECT_PROBLEMS_AND_ALERT("DETECT_PROBLEMS_AND_ALERT"),
    
    DETECT_PROBLEMS_DONT_ALERT("DETECT_PROBLEMS_DONT_ALERT"),
    
    DONT_DETECT_PROBLEMS("DONT_DETECT_PROBLEMS");

    private String value;

    SuppressionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SuppressionEnum fromValue(String value) {
      for (SuppressionEnum b : SuppressionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUPPRESSION = "suppression";
  private SuppressionEnum suppression;

  public static final String JSON_PROPERTY_SUPPRESS_SYNTHETIC_MONITORS_EXECUTION = "suppressSyntheticMonitorsExecution";
  private Boolean suppressSyntheticMonitorsExecution;

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private Scope scope;

  public static final String JSON_PROPERTY_SCHEDULE = "schedule";
  private Schedule schedule;

  public MaintenanceWindow() { 
  }

  public MaintenanceWindow metadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
  }


  public MaintenanceWindow id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the maintenance window.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the maintenance window.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public MaintenanceWindow name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the maintenance window, displayed in the UI.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the maintenance window, displayed in the UI.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public MaintenanceWindow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the maintenance purpose.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A short description of the maintenance purpose.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public MaintenanceWindow type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the maintenance: planned or unplanned.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the maintenance: planned or unplanned.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MaintenanceWindow suppression(SuppressionEnum suppression) {
    this.suppression = suppression;
    return this;
  }

   /**
   * The type of suppression of alerting and problem detection during the maintenance.
   * @return suppression
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of suppression of alerting and problem detection during the maintenance.")
  @JsonProperty(JSON_PROPERTY_SUPPRESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SuppressionEnum getSuppression() {
    return suppression;
  }


  @JsonProperty(JSON_PROPERTY_SUPPRESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSuppression(SuppressionEnum suppression) {
    this.suppression = suppression;
  }


  public MaintenanceWindow suppressSyntheticMonitorsExecution(Boolean suppressSyntheticMonitorsExecution) {
    this.suppressSyntheticMonitorsExecution = suppressSyntheticMonitorsExecution;
    return this;
  }

   /**
   * Suppress execution of synthetic monitors during the maintenance.
   * @return suppressSyntheticMonitorsExecution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Suppress execution of synthetic monitors during the maintenance.")
  @JsonProperty(JSON_PROPERTY_SUPPRESS_SYNTHETIC_MONITORS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuppressSyntheticMonitorsExecution() {
    return suppressSyntheticMonitorsExecution;
  }


  @JsonProperty(JSON_PROPERTY_SUPPRESS_SYNTHETIC_MONITORS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuppressSyntheticMonitorsExecution(Boolean suppressSyntheticMonitorsExecution) {
    this.suppressSyntheticMonitorsExecution = suppressSyntheticMonitorsExecution;
  }


  public MaintenanceWindow scope(Scope scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Scope getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(Scope scope) {
    this.scope = scope;
  }


  public MaintenanceWindow schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Schedule getSchedule() {
    return schedule;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }


  /**
   * Return true if this MaintenanceWindow object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceWindow maintenanceWindow = (MaintenanceWindow) o;
    return Objects.equals(this.metadata, maintenanceWindow.metadata) &&
        Objects.equals(this.id, maintenanceWindow.id) &&
        Objects.equals(this.name, maintenanceWindow.name) &&
        Objects.equals(this.description, maintenanceWindow.description) &&
        Objects.equals(this.type, maintenanceWindow.type) &&
        Objects.equals(this.suppression, maintenanceWindow.suppression) &&
        Objects.equals(this.suppressSyntheticMonitorsExecution, maintenanceWindow.suppressSyntheticMonitorsExecution) &&
        Objects.equals(this.scope, maintenanceWindow.scope) &&
        Objects.equals(this.schedule, maintenanceWindow.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, id, name, description, type, suppression, suppressSyntheticMonitorsExecution, scope, schedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceWindow {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    suppression: ").append(toIndentedString(suppression)).append("\n");
    sb.append("    suppressSyntheticMonitorsExecution: ").append(toIndentedString(suppressSyntheticMonitorsExecution)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

