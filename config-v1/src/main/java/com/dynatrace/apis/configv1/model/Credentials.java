/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.CertificateCredentials;
import com.dynatrace.apis.configv1.model.PublicCertificateCredentials;
import com.dynatrace.apis.configv1.model.TokenCredentials;
import com.dynatrace.apis.configv1.model.UserPasswordCredentials;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * A set of credentials for synthetic monitors.   The actual set of fields depends on the type of credentials. Find the list of actual objects in the description of the **type** field or see [Credential vault API - JSON models](https://dt-url.net/2sa3sen).
 */
@ApiModel(description = "A set of credentials for synthetic monitors.   The actual set of fields depends on the type of credentials. Find the list of actual objects in the description of the **type** field or see [Credential vault API - JSON models](https://dt-url.net/2sa3sen).")
@JsonPropertyOrder({
  Credentials.JSON_PROPERTY_NAME,
  Credentials.JSON_PROPERTY_ID,
  Credentials.JSON_PROPERTY_DESCRIPTION,
  Credentials.JSON_PROPERTY_OWNER_ACCESS_ONLY,
  Credentials.JSON_PROPERTY_SCOPE,
  Credentials.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CertificateCredentials.class, name = "CERTIFICATE"),
  @JsonSubTypes.Type(value = CertificateCredentials.class, name = "CertificateCredentials"),
  @JsonSubTypes.Type(value = PublicCertificateCredentials.class, name = "PUBLIC_CERTIFICATE"),
  @JsonSubTypes.Type(value = PublicCertificateCredentials.class, name = "PublicCertificateCredentials"),
  @JsonSubTypes.Type(value = TokenCredentials.class, name = "TOKEN"),
  @JsonSubTypes.Type(value = TokenCredentials.class, name = "TokenCredentials"),
  @JsonSubTypes.Type(value = UserPasswordCredentials.class, name = "USERNAME_PASSWORD"),
  @JsonSubTypes.Type(value = UserPasswordCredentials.class, name = "UserPasswordCredentials"),
})

public class Credentials {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_OWNER_ACCESS_ONLY = "ownerAccessOnly";
  private Boolean ownerAccessOnly;

  /**
   * The scope of the credentials set.
   */
  public enum ScopeEnum {
    ALL("ALL"),
    
    EXTENSION("EXTENSION"),
    
    SYNTHETIC("SYNTHETIC"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private ScopeEnum scope;

  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;CERTIFICATE&#x60; -&gt; CertificateCredentials  * &#x60;PUBLIC_CERTIFICATE&#x60; -&gt; PublicCertificateCredentials  * &#x60;USERNAME_PASSWORD&#x60; -&gt; UserPasswordCredentials  * &#x60;TOKEN&#x60; -&gt; TokenCredentials  
   */
  public enum TypeEnum {
    CERTIFICATE("CERTIFICATE"),
    
    PUBLIC_CERTIFICATE("PUBLIC_CERTIFICATE"),
    
    TOKEN("TOKEN"),
    
    USERNAME_PASSWORD("USERNAME_PASSWORD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public Credentials() { 
  }

  public Credentials name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the credentials set.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the credentials set.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Credentials id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the credentials set.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the credentials set.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Credentials description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the credentials set.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A short description of the credentials set.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Credentials ownerAccessOnly(Boolean ownerAccessOnly) {
    this.ownerAccessOnly = ownerAccessOnly;
    return this;
  }

   /**
   * The credentials set is available to every user (&#x60;false&#x60;) or to owner only (&#x60;true&#x60;).
   * @return ownerAccessOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The credentials set is available to every user (`false`) or to owner only (`true`).")
  @JsonProperty(JSON_PROPERTY_OWNER_ACCESS_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOwnerAccessOnly() {
    return ownerAccessOnly;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ACCESS_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerAccessOnly(Boolean ownerAccessOnly) {
    this.ownerAccessOnly = ownerAccessOnly;
  }


  public Credentials scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the credentials set.
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The scope of the credentials set.")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ScopeEnum getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public Credentials type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;CERTIFICATE&#x60; -&gt; CertificateCredentials  * &#x60;PUBLIC_CERTIFICATE&#x60; -&gt; PublicCertificateCredentials  * &#x60;USERNAME_PASSWORD&#x60; -&gt; UserPasswordCredentials  * &#x60;TOKEN&#x60; -&gt; TokenCredentials  
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `CERTIFICATE` -> CertificateCredentials  * `PUBLIC_CERTIFICATE` -> PublicCertificateCredentials  * `USERNAME_PASSWORD` -> UserPasswordCredentials  * `TOKEN` -> TokenCredentials  ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this Credentials object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Credentials credentials = (Credentials) o;
    return Objects.equals(this.name, credentials.name) &&
        Objects.equals(this.id, credentials.id) &&
        Objects.equals(this.description, credentials.description) &&
        Objects.equals(this.ownerAccessOnly, credentials.ownerAccessOnly) &&
        Objects.equals(this.scope, credentials.scope) &&
        Objects.equals(this.type, credentials.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, description, ownerAccessOnly, scope, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Credentials {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ownerAccessOnly: ").append(toIndentedString(ownerAccessOnly)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("CERTIFICATE", CertificateCredentials.class);
  mappings.put("CertificateCredentials", CertificateCredentials.class);
  mappings.put("PUBLIC_CERTIFICATE", PublicCertificateCredentials.class);
  mappings.put("PublicCertificateCredentials", PublicCertificateCredentials.class);
  mappings.put("TOKEN", TokenCredentials.class);
  mappings.put("TokenCredentials", TokenCredentials.class);
  mappings.put("USERNAME_PASSWORD", UserPasswordCredentials.class);
  mappings.put("UserPasswordCredentials", UserPasswordCredentials.class);
  mappings.put("Credentials", Credentials.class);
  JSON.registerDiscriminator(Credentials.class, "type", mappings);
}
}

