/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ColumnDefinition;
import com.dynatrace.apis.configv1.model.LogSourceFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Custom log metric definition.
 */
@ApiModel(description = "Custom log metric definition.")
@JsonPropertyOrder({
  LogMetricConfig.JSON_PROPERTY_METRIC_KEY,
  LogMetricConfig.JSON_PROPERTY_ACTIVE,
  LogMetricConfig.JSON_PROPERTY_DISPLAY_NAME,
  LogMetricConfig.JSON_PROPERTY_UNIT,
  LogMetricConfig.JSON_PROPERTY_UNIT_DISPLAY_NAME,
  LogMetricConfig.JSON_PROPERTY_SEARCH_STRING,
  LogMetricConfig.JSON_PROPERTY_METRIC_VALUE_TYPE,
  LogMetricConfig.JSON_PROPERTY_COLUMN_DEFINING_VALUE,
  LogMetricConfig.JSON_PROPERTY_LOG_SOURCE_FILTERS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class LogMetricConfig {
  public static final String JSON_PROPERTY_METRIC_KEY = "metricKey";
  private String metricKey;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  /**
   * The unit of the metric.
   */
  public enum UnitEnum {
    BILLION("BILLION"),
    
    BIT("BIT"),
    
    BIT_PER_HOUR("BIT_PER_HOUR"),
    
    BIT_PER_MINUTE("BIT_PER_MINUTE"),
    
    BIT_PER_SECOND("BIT_PER_SECOND"),
    
    BYTE("BYTE"),
    
    BYTE_PER_HOUR("BYTE_PER_HOUR"),
    
    BYTE_PER_MINUTE("BYTE_PER_MINUTE"),
    
    BYTE_PER_SECOND("BYTE_PER_SECOND"),
    
    CORES("CORES"),
    
    COUNT("COUNT"),
    
    DAY("DAY"),
    
    DECIBEL_MILLI_WATT("DECIBEL_MILLI_WATT"),
    
    GIBI_BYTE("GIBI_BYTE"),
    
    GIGA("GIGA"),
    
    GIGA_BYTE("GIGA_BYTE"),
    
    HOUR("HOUR"),
    
    KIBI_BYTE("KIBI_BYTE"),
    
    KIBI_BYTE_PER_HOUR("KIBI_BYTE_PER_HOUR"),
    
    KIBI_BYTE_PER_MINUTE("KIBI_BYTE_PER_MINUTE"),
    
    KIBI_BYTE_PER_SECOND("KIBI_BYTE_PER_SECOND"),
    
    KILO("KILO"),
    
    KILO_BYTE("KILO_BYTE"),
    
    KILO_BYTE_PER_HOUR("KILO_BYTE_PER_HOUR"),
    
    KILO_BYTE_PER_MINUTE("KILO_BYTE_PER_MINUTE"),
    
    KILO_BYTE_PER_SECOND("KILO_BYTE_PER_SECOND"),
    
    KILO_METRE_PER_HOUR("KILO_METRE_PER_HOUR"),
    
    MEBI_BYTE("MEBI_BYTE"),
    
    MEBI_BYTE_PER_HOUR("MEBI_BYTE_PER_HOUR"),
    
    MEBI_BYTE_PER_MINUTE("MEBI_BYTE_PER_MINUTE"),
    
    MEBI_BYTE_PER_SECOND("MEBI_BYTE_PER_SECOND"),
    
    MEGA("MEGA"),
    
    MEGA_BYTE("MEGA_BYTE"),
    
    MEGA_BYTE_PER_HOUR("MEGA_BYTE_PER_HOUR"),
    
    MEGA_BYTE_PER_MINUTE("MEGA_BYTE_PER_MINUTE"),
    
    MEGA_BYTE_PER_SECOND("MEGA_BYTE_PER_SECOND"),
    
    METRE_PER_HOUR("METRE_PER_HOUR"),
    
    METRE_PER_SECOND("METRE_PER_SECOND"),
    
    MICRO_SECOND("MICRO_SECOND"),
    
    MILLION("MILLION"),
    
    MILLI_CORES("MILLI_CORES"),
    
    MILLI_SECOND("MILLI_SECOND"),
    
    MILLI_SECOND_PER_MINUTE("MILLI_SECOND_PER_MINUTE"),
    
    MINUTE("MINUTE"),
    
    MONTH("MONTH"),
    
    MSU("MSU"),
    
    NANO_SECOND("NANO_SECOND"),
    
    NANO_SECOND_PER_MINUTE("NANO_SECOND_PER_MINUTE"),
    
    NOT_APPLICABLE("NOT_APPLICABLE"),
    
    PERCENT("PERCENT"),
    
    PER_HOUR("PER_HOUR"),
    
    PER_MINUTE("PER_MINUTE"),
    
    PER_SECOND("PER_SECOND"),
    
    PIXEL("PIXEL"),
    
    PROMILLE("PROMILLE"),
    
    RATIO("RATIO"),
    
    SECOND("SECOND"),
    
    STATE("STATE"),
    
    UNSPECIFIED("UNSPECIFIED"),
    
    WEEK("WEEK"),
    
    YEAR("YEAR");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT = "unit";
  private UnitEnum unit;

  public static final String JSON_PROPERTY_UNIT_DISPLAY_NAME = "unitDisplayName";
  private String unitDisplayName;

  public static final String JSON_PROPERTY_SEARCH_STRING = "searchString";
  private String searchString;

  /**
   * The type of the metric data points calculation. For now the only allowed value is &#x60;OCCURRENCES&#x60;.
   */
  public enum MetricValueTypeEnum {
    FP_COLUMN_AVG("FP_COLUMN_AVG"),
    
    FP_COLUMN_COUNT("FP_COLUMN_COUNT"),
    
    FP_COLUMN_MAX("FP_COLUMN_MAX"),
    
    FP_COLUMN_MIN("FP_COLUMN_MIN"),
    
    FP_COLUMN_SUM("FP_COLUMN_SUM"),
    
    FP_COLUMN_TOP_X_AVG("FP_COLUMN_TOP_X_AVG"),
    
    FP_COLUMN_TOP_X_COUNT("FP_COLUMN_TOP_X_COUNT"),
    
    FP_COLUMN_TOP_X_MAX("FP_COLUMN_TOP_X_MAX"),
    
    FP_COLUMN_TOP_X_MIN("FP_COLUMN_TOP_X_MIN"),
    
    FP_COLUMN_TOP_X_SUM("FP_COLUMN_TOP_X_SUM"),
    
    INT_COLUMN_AVG("INT_COLUMN_AVG"),
    
    INT_COLUMN_COUNT("INT_COLUMN_COUNT"),
    
    INT_COLUMN_MAX("INT_COLUMN_MAX"),
    
    INT_COLUMN_MIN("INT_COLUMN_MIN"),
    
    INT_COLUMN_SUM("INT_COLUMN_SUM"),
    
    INT_COLUMN_TOP_X_AVG("INT_COLUMN_TOP_X_AVG"),
    
    INT_COLUMN_TOP_X_COUNT("INT_COLUMN_TOP_X_COUNT"),
    
    INT_COLUMN_TOP_X_MAX("INT_COLUMN_TOP_X_MAX"),
    
    INT_COLUMN_TOP_X_MIN("INT_COLUMN_TOP_X_MIN"),
    
    INT_COLUMN_TOP_X_SUM("INT_COLUMN_TOP_X_SUM"),
    
    OCCURRENCES("OCCURRENCES");

    private String value;

    MetricValueTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetricValueTypeEnum fromValue(String value) {
      for (MetricValueTypeEnum b : MetricValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METRIC_VALUE_TYPE = "metricValueType";
  private MetricValueTypeEnum metricValueType;

  public static final String JSON_PROPERTY_COLUMN_DEFINING_VALUE = "columnDefiningValue";
  private ColumnDefinition columnDefiningValue;

  public static final String JSON_PROPERTY_LOG_SOURCE_FILTERS = "logSourceFilters";
  private List<LogSourceFilter> logSourceFilters = new ArrayList<>();

  public LogMetricConfig() { 
  }

  public LogMetricConfig metricKey(String metricKey) {
    this.metricKey = metricKey;
    return this;
  }

   /**
   * The unique key of the metric.   The key must have the &#x60;calc:log.&#x60; prefix.
   * @return metricKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "calc:log.metric", required = true, value = "The unique key of the metric.   The key must have the `calc:log.` prefix.")
  @JsonProperty(JSON_PROPERTY_METRIC_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetricKey() {
    return metricKey;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricKey(String metricKey) {
    this.metricKey = metricKey;
  }


  public LogMetricConfig active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * The metric is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public LogMetricConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the metric, displayed in the UI.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the metric, displayed in the UI.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public LogMetricConfig unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The unit of the metric.
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unit of the metric.")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UnitEnum getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public LogMetricConfig unitDisplayName(String unitDisplayName) {
    this.unitDisplayName = unitDisplayName;
    return this;
  }

   /**
   * The display name of the unit.    Only applicable if the **unit** is set to &#x60;UNSPECIFIED&#x60;.
   * @return unitDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name of the unit.    Only applicable if the **unit** is set to `UNSPECIFIED`.")
  @JsonProperty(JSON_PROPERTY_UNIT_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitDisplayName() {
    return unitDisplayName;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitDisplayName(String unitDisplayName) {
    this.unitDisplayName = unitDisplayName;
  }


  public LogMetricConfig searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * The pattern to look for in logs.    Use the [Dynatrace search query language](https://dt-url.net/vv83rhp) to specify it. Quotes must be escaped.    To return all results, leave the field blank.
   * @return searchString
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "prefix1* OR prefix2*", required = true, value = "The pattern to look for in logs.    Use the [Dynatrace search query language](https://dt-url.net/vv83rhp) to specify it. Quotes must be escaped.    To return all results, leave the field blank.")
  @JsonProperty(JSON_PROPERTY_SEARCH_STRING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSearchString() {
    return searchString;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_STRING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public LogMetricConfig metricValueType(MetricValueTypeEnum metricValueType) {
    this.metricValueType = metricValueType;
    return this;
  }

   /**
   * The type of the metric data points calculation. For now the only allowed value is &#x60;OCCURRENCES&#x60;.
   * @return metricValueType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "OCCURRENCES", required = true, value = "The type of the metric data points calculation. For now the only allowed value is `OCCURRENCES`.")
  @JsonProperty(JSON_PROPERTY_METRIC_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricValueTypeEnum getMetricValueType() {
    return metricValueType;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricValueType(MetricValueTypeEnum metricValueType) {
    this.metricValueType = metricValueType;
  }


  public LogMetricConfig columnDefiningValue(ColumnDefinition columnDefiningValue) {
    this.columnDefiningValue = columnDefiningValue;
    return this;
  }

   /**
   * Get columnDefiningValue
   * @return columnDefiningValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COLUMN_DEFINING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColumnDefinition getColumnDefiningValue() {
    return columnDefiningValue;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_DEFINING_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnDefiningValue(ColumnDefinition columnDefiningValue) {
    this.columnDefiningValue = columnDefiningValue;
  }


  public LogMetricConfig logSourceFilters(List<LogSourceFilter> logSourceFilters) {
    this.logSourceFilters = logSourceFilters;
    return this;
  }

  public LogMetricConfig addLogSourceFiltersItem(LogSourceFilter logSourceFiltersItem) {
    this.logSourceFilters.add(logSourceFiltersItem);
    return this;
  }

   /**
   * A list of filters to define the logs to look into.    If several filters are specified, the OR logic applies.
   * @return logSourceFilters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of filters to define the logs to look into.    If several filters are specified, the OR logic applies.")
  @JsonProperty(JSON_PROPERTY_LOG_SOURCE_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LogSourceFilter> getLogSourceFilters() {
    return logSourceFilters;
  }


  @JsonProperty(JSON_PROPERTY_LOG_SOURCE_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogSourceFilters(List<LogSourceFilter> logSourceFilters) {
    this.logSourceFilters = logSourceFilters;
  }


  /**
   * Return true if this LogMetricConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogMetricConfig logMetricConfig = (LogMetricConfig) o;
    return Objects.equals(this.metricKey, logMetricConfig.metricKey) &&
        Objects.equals(this.active, logMetricConfig.active) &&
        Objects.equals(this.displayName, logMetricConfig.displayName) &&
        Objects.equals(this.unit, logMetricConfig.unit) &&
        Objects.equals(this.unitDisplayName, logMetricConfig.unitDisplayName) &&
        Objects.equals(this.searchString, logMetricConfig.searchString) &&
        Objects.equals(this.metricValueType, logMetricConfig.metricValueType) &&
        Objects.equals(this.columnDefiningValue, logMetricConfig.columnDefiningValue) &&
        Objects.equals(this.logSourceFilters, logMetricConfig.logSourceFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricKey, active, displayName, unit, unitDisplayName, searchString, metricValueType, columnDefiningValue, logSourceFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogMetricConfig {\n");
    sb.append("    metricKey: ").append(toIndentedString(metricKey)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    unitDisplayName: ").append(toIndentedString(unitDisplayName)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    metricValueType: ").append(toIndentedString(metricValueType)).append("\n");
    sb.append("    columnDefiningValue: ").append(toIndentedString(columnDefiningValue)).append("\n");
    sb.append("    logSourceFilters: ").append(toIndentedString(logSourceFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

