/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.MzDimensionalRuleCondition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The dimensional rule of the management zone usage. It defines how the management zone applies.    Each rule is evaluated independently of all other rules.
 */
@ApiModel(description = "The dimensional rule of the management zone usage. It defines how the management zone applies.    Each rule is evaluated independently of all other rules.")
@JsonPropertyOrder({
  MzDimensionalRule.JSON_PROPERTY_ENABLED,
  MzDimensionalRule.JSON_PROPERTY_APPLIES_TO,
  MzDimensionalRule.JSON_PROPERTY_CONDITIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MzDimensionalRule {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * The target of the rule.
   */
  public enum AppliesToEnum {
    ANY("ANY"),
    
    LOG("LOG"),
    
    METRIC("METRIC");

    private String value;

    AppliesToEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AppliesToEnum fromValue(String value) {
      for (AppliesToEnum b : AppliesToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_APPLIES_TO = "appliesTo";
  private AppliesToEnum appliesTo;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private List<MzDimensionalRuleCondition> conditions = new ArrayList<>();

  public MzDimensionalRule() { 
  }

  public MzDimensionalRule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The rule is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The rule is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public MzDimensionalRule appliesTo(AppliesToEnum appliesTo) {
    this.appliesTo = appliesTo;
    return this;
  }

   /**
   * The target of the rule.
   * @return appliesTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The target of the rule.")
  @JsonProperty(JSON_PROPERTY_APPLIES_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AppliesToEnum getAppliesTo() {
    return appliesTo;
  }


  @JsonProperty(JSON_PROPERTY_APPLIES_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppliesTo(AppliesToEnum appliesTo) {
    this.appliesTo = appliesTo;
  }


  public MzDimensionalRule conditions(List<MzDimensionalRuleCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public MzDimensionalRule addConditionsItem(MzDimensionalRuleCondition conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * A list of conditions for the management zone.    The management zone applies only if **all** conditions are fulfilled.
   * @return conditions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of conditions for the management zone.    The management zone applies only if **all** conditions are fulfilled.")
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MzDimensionalRuleCondition> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditions(List<MzDimensionalRuleCondition> conditions) {
    this.conditions = conditions;
  }


  /**
   * Return true if this MzDimensionalRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MzDimensionalRule mzDimensionalRule = (MzDimensionalRule) o;
    return Objects.equals(this.enabled, mzDimensionalRule.enabled) &&
        Objects.equals(this.appliesTo, mzDimensionalRule.appliesTo) &&
        Objects.equals(this.conditions, mzDimensionalRule.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, appliesTo, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MzDimensionalRule {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    appliesTo: ").append(toIndentedString(appliesTo)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

