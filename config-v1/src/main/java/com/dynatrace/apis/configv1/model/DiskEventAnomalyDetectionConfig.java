/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ConfigurationMetadata;
import com.dynatrace.apis.configv1.model.DiskNameFilter;
import com.dynatrace.apis.configv1.model.TagFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DiskEventAnomalyDetectionConfig
 */
@JsonPropertyOrder({
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_METADATA,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_ID,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_NAME,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_ENABLED,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_METRIC,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_THRESHOLD,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_SAMPLES,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_VIOLATING_SAMPLES,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_DISK_NAME_FILTER,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_TAG_FILTERS,
  DiskEventAnomalyDetectionConfig.JSON_PROPERTY_HOST_GROUP_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DiskEventAnomalyDetectionConfig {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConfigurationMetadata metadata;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * The metric to monitor.
   */
  public enum MetricEnum {
    LOW_DISK_SPACE("LOW_DISK_SPACE"),
    
    LOW_INODES("LOW_INODES"),
    
    READ_TIME_EXCEEDING("READ_TIME_EXCEEDING"),
    
    WRITE_TIME_EXCEEDING("WRITE_TIME_EXCEEDING");

    private String value;

    MetricEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetricEnum fromValue(String value) {
      for (MetricEnum b : MetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METRIC = "metric";
  private MetricEnum metric;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Double threshold;

  public static final String JSON_PROPERTY_SAMPLES = "samples";
  private Integer samples;

  public static final String JSON_PROPERTY_VIOLATING_SAMPLES = "violatingSamples";
  private Integer violatingSamples;

  public static final String JSON_PROPERTY_DISK_NAME_FILTER = "diskNameFilter";
  private DiskNameFilter diskNameFilter;

  public static final String JSON_PROPERTY_TAG_FILTERS = "tagFilters";
  private Set<TagFilter> tagFilters = null;

  public static final String JSON_PROPERTY_HOST_GROUP_ID = "hostGroupId";
  private String hostGroupId;

  public DiskEventAnomalyDetectionConfig() { 
  }

  @JsonCreator
  public DiskEventAnomalyDetectionConfig(
    @JsonProperty(JSON_PROPERTY_ID) String id
  ) {
  this();
    this.id = id;
  }

  public DiskEventAnomalyDetectionConfig metadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
  }


   /**
   * The ID of the disk event rule.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the disk event rule.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public DiskEventAnomalyDetectionConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the disk event rule.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the disk event rule.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public DiskEventAnomalyDetectionConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Disk event rule enabled/disabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Disk event rule enabled/disabled.")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DiskEventAnomalyDetectionConfig metric(MetricEnum metric) {
    this.metric = metric;
    return this;
  }

   /**
   * The metric to monitor.
   * @return metric
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The metric to monitor.")
  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricEnum getMetric() {
    return metric;
  }


  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetric(MetricEnum metric) {
    this.metric = metric;
  }


  public DiskEventAnomalyDetectionConfig threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The threshold to trigger disk event.    * A percentage for &#x60;LowDiskSpace&#x60; or &#x60;LowInodes&#x60; metrics.   * In milliseconds for &#x60;ReadTimeExceeding&#x60; or &#x60;WriteTimeExceeding&#x60; metrics.
   * minimum: 0
   * maximum: 1000
   * @return threshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The threshold to trigger disk event.    * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics.")
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public DiskEventAnomalyDetectionConfig samples(Integer samples) {
    this.samples = samples;
    return this;
  }

   /**
   * The number of samples to evaluate.
   * minimum: 3
   * maximum: 60
   * @return samples
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The number of samples to evaluate.")
  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSamples() {
    return samples;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSamples(Integer samples) {
    this.samples = samples;
  }


  public DiskEventAnomalyDetectionConfig violatingSamples(Integer violatingSamples) {
    this.violatingSamples = violatingSamples;
    return this;
  }

   /**
   * The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples.
   * minimum: 1
   * @return violatingSamples
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8", required = true, value = "The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples.")
  @JsonProperty(JSON_PROPERTY_VIOLATING_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getViolatingSamples() {
    return violatingSamples;
  }


  @JsonProperty(JSON_PROPERTY_VIOLATING_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViolatingSamples(Integer violatingSamples) {
    this.violatingSamples = violatingSamples;
  }


  public DiskEventAnomalyDetectionConfig diskNameFilter(DiskNameFilter diskNameFilter) {
    this.diskNameFilter = diskNameFilter;
    return this;
  }

   /**
   * Get diskNameFilter
   * @return diskNameFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISK_NAME_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DiskNameFilter getDiskNameFilter() {
    return diskNameFilter;
  }


  @JsonProperty(JSON_PROPERTY_DISK_NAME_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiskNameFilter(DiskNameFilter diskNameFilter) {
    this.diskNameFilter = diskNameFilter;
  }


  public DiskEventAnomalyDetectionConfig tagFilters(Set<TagFilter> tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

  public DiskEventAnomalyDetectionConfig addTagFiltersItem(TagFilter tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new LinkedHashSet<>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Narrows the rule usage down to the hosts matching the specified tags.
   * @return tagFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Narrows the rule usage down to the hosts matching the specified tags.")
  @JsonProperty(JSON_PROPERTY_TAG_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<TagFilter> getTagFilters() {
    return tagFilters;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAG_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagFilters(Set<TagFilter> tagFilters) {
    this.tagFilters = tagFilters;
  }


  public DiskEventAnomalyDetectionConfig hostGroupId(String hostGroupId) {
    this.hostGroupId = hostGroupId;
    return this;
  }

   /**
   * Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group.
   * @return hostGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group.")
  @JsonProperty(JSON_PROPERTY_HOST_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostGroupId() {
    return hostGroupId;
  }


  @JsonProperty(JSON_PROPERTY_HOST_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostGroupId(String hostGroupId) {
    this.hostGroupId = hostGroupId;
  }


  /**
   * Return true if this DiskEventAnomalyDetectionConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskEventAnomalyDetectionConfig diskEventAnomalyDetectionConfig = (DiskEventAnomalyDetectionConfig) o;
    return Objects.equals(this.metadata, diskEventAnomalyDetectionConfig.metadata) &&
        Objects.equals(this.id, diskEventAnomalyDetectionConfig.id) &&
        Objects.equals(this.name, diskEventAnomalyDetectionConfig.name) &&
        Objects.equals(this.enabled, diskEventAnomalyDetectionConfig.enabled) &&
        Objects.equals(this.metric, diskEventAnomalyDetectionConfig.metric) &&
        Objects.equals(this.threshold, diskEventAnomalyDetectionConfig.threshold) &&
        Objects.equals(this.samples, diskEventAnomalyDetectionConfig.samples) &&
        Objects.equals(this.violatingSamples, diskEventAnomalyDetectionConfig.violatingSamples) &&
        Objects.equals(this.diskNameFilter, diskEventAnomalyDetectionConfig.diskNameFilter) &&
        Objects.equals(this.tagFilters, diskEventAnomalyDetectionConfig.tagFilters) &&
        Objects.equals(this.hostGroupId, diskEventAnomalyDetectionConfig.hostGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, id, name, enabled, metric, threshold, samples, violatingSamples, diskNameFilter, tagFilters, hostGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskEventAnomalyDetectionConfig {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("    violatingSamples: ").append(toIndentedString(violatingSamples)).append("\n");
    sb.append("    diskNameFilter: ").append(toIndentedString(diskNameFilter)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("    hostGroupId: ").append(toIndentedString(hostGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

