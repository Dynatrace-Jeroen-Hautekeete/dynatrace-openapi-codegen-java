/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Defines UserTags settings of an application.
 */
@ApiModel(description = "Defines UserTags settings of an application.")
@JsonPropertyOrder({
  UserTag.JSON_PROPERTY_UNIQUE_ID,
  UserTag.JSON_PROPERTY_METADATA_ID,
  UserTag.JSON_PROPERTY_CLEANUP_RULE,
  UserTag.JSON_PROPERTY_SERVER_SIDE_REQUEST_ATTRIBUTE,
  UserTag.JSON_PROPERTY_IGNORE_CASE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserTag {
  public static final String JSON_PROPERTY_UNIQUE_ID = "uniqueId";
  private Integer uniqueId;

  public static final String JSON_PROPERTY_METADATA_ID = "metadataId";
  private Integer metadataId;

  public static final String JSON_PROPERTY_CLEANUP_RULE = "cleanupRule";
  private String cleanupRule;

  public static final String JSON_PROPERTY_SERVER_SIDE_REQUEST_ATTRIBUTE = "serverSideRequestAttribute";
  private String serverSideRequestAttribute;

  public static final String JSON_PROPERTY_IGNORE_CASE = "ignoreCase";
  private Boolean ignoreCase;

  public UserTag() { 
  }

  public UserTag uniqueId(Integer uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

   /**
   * uniqueId, unique among all userTags and properties of this application
   * minimum: 1
   * @return uniqueId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "uniqueId, unique among all userTags and properties of this application")
  @JsonProperty(JSON_PROPERTY_UNIQUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUniqueId() {
    return uniqueId;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUniqueId(Integer uniqueId) {
    this.uniqueId = uniqueId;
  }


  public UserTag metadataId(Integer metadataId) {
    this.metadataId = metadataId;
    return this;
  }

   /**
   * If it&#39;s of type metaData, metaData id of the userTag
   * @return metadataId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If it's of type metaData, metaData id of the userTag")
  @JsonProperty(JSON_PROPERTY_METADATA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMetadataId() {
    return metadataId;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataId(Integer metadataId) {
    this.metadataId = metadataId;
  }


  public UserTag cleanupRule(String cleanupRule) {
    this.cleanupRule = cleanupRule;
    return this;
  }

   /**
   * Cleanup rule expression of the userTag
   * @return cleanupRule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cleanup rule expression of the userTag")
  @JsonProperty(JSON_PROPERTY_CLEANUP_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCleanupRule() {
    return cleanupRule;
  }


  @JsonProperty(JSON_PROPERTY_CLEANUP_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCleanupRule(String cleanupRule) {
    this.cleanupRule = cleanupRule;
  }


  public UserTag serverSideRequestAttribute(String serverSideRequestAttribute) {
    this.serverSideRequestAttribute = serverSideRequestAttribute;
    return this;
  }

   /**
   * requestAttribute Id of the userTag
   * @return serverSideRequestAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "requestAttribute Id of the userTag")
  @JsonProperty(JSON_PROPERTY_SERVER_SIDE_REQUEST_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServerSideRequestAttribute() {
    return serverSideRequestAttribute;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_SIDE_REQUEST_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerSideRequestAttribute(String serverSideRequestAttribute) {
    this.serverSideRequestAttribute = serverSideRequestAttribute;
  }


  public UserTag ignoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
    return this;
  }

   /**
   * If true, the value of this tag will always be stored in lower case. Defaults to false.
   * @return ignoreCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the value of this tag will always be stored in lower case. Defaults to false.")
  @JsonProperty(JSON_PROPERTY_IGNORE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreCase() {
    return ignoreCase;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
  }


  /**
   * Return true if this UserTag object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTag userTag = (UserTag) o;
    return Objects.equals(this.uniqueId, userTag.uniqueId) &&
        Objects.equals(this.metadataId, userTag.metadataId) &&
        Objects.equals(this.cleanupRule, userTag.cleanupRule) &&
        Objects.equals(this.serverSideRequestAttribute, userTag.serverSideRequestAttribute) &&
        Objects.equals(this.ignoreCase, userTag.ignoreCase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniqueId, metadataId, cleanupRule, serverSideRequestAttribute, ignoreCase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTag {\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
    sb.append("    cleanupRule: ").append(toIndentedString(cleanupRule)).append("\n");
    sb.append("    serverSideRequestAttribute: ").append(toIndentedString(serverSideRequestAttribute)).append("\n");
    sb.append("    ignoreCase: ").append(toIndentedString(ignoreCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

