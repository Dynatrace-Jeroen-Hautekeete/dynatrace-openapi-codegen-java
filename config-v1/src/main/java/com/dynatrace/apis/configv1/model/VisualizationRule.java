/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.VisualizationProperties;
import com.dynatrace.apis.configv1.model.VisualizationSerieOverride;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Rules for Visualization
 */
@ApiModel(description = "Rules for Visualization")
@JsonPropertyOrder({
  VisualizationRule.JSON_PROPERTY_VALUE_FORMAT,
  VisualizationRule.JSON_PROPERTY_SERIES_OVERRIDES,
  VisualizationRule.JSON_PROPERTY_UNIT_TRANSFORM,
  VisualizationRule.JSON_PROPERTY_PROPERTIES,
  VisualizationRule.JSON_PROPERTY_MATCHER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class VisualizationRule {
  public static final String JSON_PROPERTY_VALUE_FORMAT = "valueFormat";
  private String valueFormat;

  public static final String JSON_PROPERTY_SERIES_OVERRIDES = "seriesOverrides";
  private List<VisualizationSerieOverride> seriesOverrides = null;

  public static final String JSON_PROPERTY_UNIT_TRANSFORM = "unitTransform";
  private String unitTransform;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private VisualizationProperties properties;

  public static final String JSON_PROPERTY_MATCHER = "matcher";
  private String matcher;

  public VisualizationRule() { 
  }

  public VisualizationRule valueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
    return this;
  }

   /**
   * Get valueFormat
   * @return valueFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValueFormat() {
    return valueFormat;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
  }


  public VisualizationRule seriesOverrides(List<VisualizationSerieOverride> seriesOverrides) {
    this.seriesOverrides = seriesOverrides;
    return this;
  }

  public VisualizationRule addSeriesOverridesItem(VisualizationSerieOverride seriesOverridesItem) {
    if (this.seriesOverrides == null) {
      this.seriesOverrides = new ArrayList<>();
    }
    this.seriesOverrides.add(seriesOverridesItem);
    return this;
  }

   /**
   * Get seriesOverrides
   * @return seriesOverrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SERIES_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VisualizationSerieOverride> getSeriesOverrides() {
    return seriesOverrides;
  }


  @JsonProperty(JSON_PROPERTY_SERIES_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeriesOverrides(List<VisualizationSerieOverride> seriesOverrides) {
    this.seriesOverrides = seriesOverrides;
  }


  public VisualizationRule unitTransform(String unitTransform) {
    this.unitTransform = unitTransform;
    return this;
  }

   /**
   * Get unitTransform
   * @return unitTransform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UNIT_TRANSFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitTransform() {
    return unitTransform;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_TRANSFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitTransform(String unitTransform) {
    this.unitTransform = unitTransform;
  }


  public VisualizationRule properties(VisualizationProperties properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisualizationProperties getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(VisualizationProperties properties) {
    this.properties = properties;
  }


  public VisualizationRule matcher(String matcher) {
    this.matcher = matcher;
    return this;
  }

   /**
   * Get matcher
   * @return matcher
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatcher() {
    return matcher;
  }


  @JsonProperty(JSON_PROPERTY_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatcher(String matcher) {
    this.matcher = matcher;
  }


  /**
   * Return true if this VisualizationRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualizationRule visualizationRule = (VisualizationRule) o;
    return Objects.equals(this.valueFormat, visualizationRule.valueFormat) &&
        Objects.equals(this.seriesOverrides, visualizationRule.seriesOverrides) &&
        Objects.equals(this.unitTransform, visualizationRule.unitTransform) &&
        Objects.equals(this.properties, visualizationRule.properties) &&
        Objects.equals(this.matcher, visualizationRule.matcher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valueFormat, seriesOverrides, unitTransform, properties, matcher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualizationRule {\n");
    sb.append("    valueFormat: ").append(toIndentedString(valueFormat)).append("\n");
    sb.append("    seriesOverrides: ").append(toIndentedString(seriesOverrides)).append("\n");
    sb.append("    unitTransform: ").append(toIndentedString(unitTransform)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

