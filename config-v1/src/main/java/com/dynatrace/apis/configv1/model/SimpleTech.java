/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The value to compare to.
 */
@ApiModel(description = "The value to compare to.")
@JsonPropertyOrder({
  SimpleTech.JSON_PROPERTY_TYPE,
  SimpleTech.JSON_PROPERTY_VERBATIM_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class SimpleTech {
  /**
   * Predefined technology, if technology is not predefined, then the verbatim type must be set
   */
  public enum TypeEnum {
    ACTIVE_MQ("ACTIVE_MQ"),
    
    ACTIVE_MQ_ARTEMIS("ACTIVE_MQ_ARTEMIS"),
    
    ADO_NET("ADO_NET"),
    
    AIX("AIX"),
    
    AKKA("AKKA"),
    
    AMAZON_REDSHIFT("AMAZON_REDSHIFT"),
    
    AMQP("AMQP"),
    
    APACHE_CAMEL("APACHE_CAMEL"),
    
    APACHE_CASSANDRA("APACHE_CASSANDRA"),
    
    APACHE_COUCH_DB("APACHE_COUCH_DB"),
    
    APACHE_DERBY("APACHE_DERBY"),
    
    APACHE_HTTP_CLIENT_ASYNC("APACHE_HTTP_CLIENT_ASYNC"),
    
    APACHE_HTTP_CLIENT_SYNC("APACHE_HTTP_CLIENT_SYNC"),
    
    APACHE_HTTP_SERVER("APACHE_HTTP_SERVER"),
    
    APACHE_KAFKA("APACHE_KAFKA"),
    
    APACHE_LOG4J("APACHE_LOG4J"),
    
    APACHE_SOLR("APACHE_SOLR"),
    
    APACHE_STORM("APACHE_STORM"),
    
    APACHE_SYNAPSE("APACHE_SYNAPSE"),
    
    APACHE_TOMCAT("APACHE_TOMCAT"),
    
    APPARMOR("APPARMOR"),
    
    APPLICATION_INSIGHTS_SDK("APPLICATION_INSIGHTS_SDK"),
    
    ASP_DOTNET("ASP_DOTNET"),
    
    ASP_DOTNET_CORE("ASP_DOTNET_CORE"),
    
    ASP_DOTNET_CORE_SIGNALR("ASP_DOTNET_CORE_SIGNALR"),
    
    ASP_DOTNET_SIGNALR("ASP_DOTNET_SIGNALR"),
    
    ASYNC_HTTP_CLIENT("ASYNC_HTTP_CLIENT"),
    
    AWS_DYNAMO_DB("AWS_DYNAMO_DB"),
    
    AWS_LAMBDA("AWS_LAMBDA"),
    
    AWS_RDS("AWS_RDS"),
    
    AWS_SERVICE("AWS_SERVICE"),
    
    AXIS("AXIS"),
    
    AZURE_FUNCTIONS("AZURE_FUNCTIONS"),
    
    AZURE_SERVICE_BUS("AZURE_SERVICE_BUS"),
    
    AZURE_SERVICE_FABRIC("AZURE_SERVICE_FABRIC"),
    
    AZURE_STORAGE("AZURE_STORAGE"),
    
    BOSHBPM("BOSHBPM"),
    
    CICS_FILE_ACCESS("CICS_FILE_ACCESS"),
    
    CITRIX("CITRIX"),
    
    CITRIX_COMMON("CITRIX_COMMON"),
    
    CITRIX_DESKTOP_DELIVERY_CONTROLLERS("CITRIX_DESKTOP_DELIVERY_CONTROLLERS"),
    
    CITRIX_DIRECTOR("CITRIX_DIRECTOR"),
    
    CITRIX_LICENSE_SERVER("CITRIX_LICENSE_SERVER"),
    
    CITRIX_PROVISIONING_SERVICES("CITRIX_PROVISIONING_SERVICES"),
    
    CITRIX_STOREFRONT("CITRIX_STOREFRONT"),
    
    CITRIX_VIRTUAL_DELIVERY_AGENT("CITRIX_VIRTUAL_DELIVERY_AGENT"),
    
    CITRIX_WORKSPACE_ENVIRONMENT_MANAGEMENT("CITRIX_WORKSPACE_ENVIRONMENT_MANAGEMENT"),
    
    CITRIX_XEN("CITRIX_XEN"),
    
    CLOUDFOUNDRY("CLOUDFOUNDRY"),
    
    CLOUDFOUNDRY_AUCTIONEER("CLOUDFOUNDRY_AUCTIONEER"),
    
    CLOUDFOUNDRY_BOSH("CLOUDFOUNDRY_BOSH"),
    
    CLOUDFOUNDRY_GOROUTER("CLOUDFOUNDRY_GOROUTER"),
    
    COLDFUSION("COLDFUSION"),
    
    CONFLUENT_KAFKA_CLIENT("CONFLUENT_KAFKA_CLIENT"),
    
    CONTAINERD("CONTAINERD"),
    
    CORE_DNS("CORE_DNS"),
    
    COUCHBASE("COUCHBASE"),
    
    CRIO("CRIO"),
    
    CXF("CXF"),
    
    DATASTAX("DATASTAX"),
    
    DB2("DB2"),
    
    DIEGO_CELL("DIEGO_CELL"),
    
    DOCKER("DOCKER"),
    
    DOTNET("DOTNET"),
    
    DOTNET_REMOTING("DOTNET_REMOTING"),
    
    ELASTIC_SEARCH("ELASTIC_SEARCH"),
    
    ENVOY("ENVOY"),
    
    ERLANG("ERLANG"),
    
    ETCD("ETCD"),
    
    F5_LTM("F5_LTM"),
    
    FSHARP("FSHARP"),
    
    GARDEN("GARDEN"),
    
    GLASSFISH("GLASSFISH"),
    
    GO("GO"),
    
    GOOGLE_CLOUD_FUNCTIONS("GOOGLE_CLOUD_FUNCTIONS"),
    
    GRAAL_TRUFFLE("GRAAL_TRUFFLE"),
    
    GRAPH_QL("GRAPH_QL"),
    
    GRPC("GRPC"),
    
    GRSECURITY("GRSECURITY"),
    
    HADOOP("HADOOP"),
    
    HADOOP_HDFS("HADOOP_HDFS"),
    
    HADOOP_YARN("HADOOP_YARN"),
    
    HAPROXY("HAPROXY"),
    
    HEAT("HEAT"),
    
    HESSIAN("HESSIAN"),
    
    HORNET_Q("HORNET_Q"),
    
    IBM_CICS_REGION("IBM_CICS_REGION"),
    
    IBM_CICS_TRANSACTION_GATEWAY("IBM_CICS_TRANSACTION_GATEWAY"),
    
    IBM_IMS_CONNECT_REGION("IBM_IMS_CONNECT_REGION"),
    
    IBM_IMS_CONTROL_REGION("IBM_IMS_CONTROL_REGION"),
    
    IBM_IMS_MESSAGE_PROCESSING_REGION("IBM_IMS_MESSAGE_PROCESSING_REGION"),
    
    IBM_IMS_SOAP_GATEWAY("IBM_IMS_SOAP_GATEWAY"),
    
    IBM_INTEGRATION_BUS("IBM_INTEGRATION_BUS"),
    
    IBM_MQ("IBM_MQ"),
    
    IBM_MQ_CLIENT("IBM_MQ_CLIENT"),
    
    IBM_WEBSHPRERE_APPLICATION_SERVER("IBM_WEBSHPRERE_APPLICATION_SERVER"),
    
    IBM_WEBSHPRERE_LIBERTY("IBM_WEBSHPRERE_LIBERTY"),
    
    IBM_WEBSPHERE_APPLICATION_SERVER("IBM_WEBSPHERE_APPLICATION_SERVER"),
    
    IBM_WEBSPHERE_LIBERTY("IBM_WEBSPHERE_LIBERTY"),
    
    IIS("IIS"),
    
    IIS_APP_POOL("IIS_APP_POOL"),
    
    ISTIO("ISTIO"),
    
    JAVA("JAVA"),
    
    JAX_WS("JAX_WS"),
    
    JBOSS("JBOSS"),
    
    JBOSS_EAP("JBOSS_EAP"),
    
    JDK_HTTP_SERVER("JDK_HTTP_SERVER"),
    
    JERSEY("JERSEY"),
    
    JETTY("JETTY"),
    
    JRUBY("JRUBY"),
    
    JYTHON("JYTHON"),
    
    KUBERNETES("KUBERNETES"),
    
    LIBC("LIBC"),
    
    LIBVIRT("LIBVIRT"),
    
    LINKERD("LINKERD"),
    
    LINUX_SYSTEM("LINUX_SYSTEM"),
    
    MARIADB("MARIADB"),
    
    MEMCACHED("MEMCACHED"),
    
    MICROSOFT_SQL_SERVER("MICROSOFT_SQL_SERVER"),
    
    MONGODB("MONGODB"),
    
    MSSQL_CLIENT("MSSQL_CLIENT"),
    
    MULE_ESB("MULE_ESB"),
    
    MYSQL("MYSQL"),
    
    MYSQL_CONNECTOR("MYSQL_CONNECTOR"),
    
    NETFLIX_SERVO("NETFLIX_SERVO"),
    
    NETTY("NETTY"),
    
    NGINX("NGINX"),
    
    NODE_JS("NODE_JS"),
    
    OK_HTTP_CLIENT("OK_HTTP_CLIENT"),
    
    ONEAGENT_SDK("ONEAGENT_SDK"),
    
    OPENCENSUS("OPENCENSUS"),
    
    OPENSHIFT("OPENSHIFT"),
    
    OPENSTACK_COMPUTE("OPENSTACK_COMPUTE"),
    
    OPENSTACK_CONTROLLER("OPENSTACK_CONTROLLER"),
    
    OPENTELEMETRY("OPENTELEMETRY"),
    
    OPENTRACING("OPENTRACING"),
    
    OPEN_LIBERTY("OPEN_LIBERTY"),
    
    ORACLE_DATABASE("ORACLE_DATABASE"),
    
    ORACLE_WEBLOGIC("ORACLE_WEBLOGIC"),
    
    OWIN("OWIN"),
    
    PERL("PERL"),
    
    PHP("PHP"),
    
    PHP_FPM("PHP_FPM"),
    
    PLAY("PLAY"),
    
    POSTGRE_SQL("POSTGRE_SQL"),
    
    POSTGRE_SQL_DOTNET_DATA_PROVIDER("POSTGRE_SQL_DOTNET_DATA_PROVIDER"),
    
    POWER_DNS("POWER_DNS"),
    
    PROGRESS("PROGRESS"),
    
    PYTHON("PYTHON"),
    
    QOS_LOGBACK("QOS_LOGBACK"),
    
    RABBIT_MQ("RABBIT_MQ"),
    
    REACTOR_CORE("REACTOR_CORE"),
    
    REDIS("REDIS"),
    
    RESTEASY("RESTEASY"),
    
    RESTLET("RESTLET"),
    
    RIAK("RIAK"),
    
    RSOCKET("RSOCKET"),
    
    RUBY("RUBY"),
    
    RUNC("RUNC"),
    
    RXJAVA("RXJAVA"),
    
    SAG_WEBMETHODS_IS("SAG_WEBMETHODS_IS"),
    
    SAP("SAP"),
    
    SAP_HANADB("SAP_HANADB"),
    
    SAP_HYBRIS("SAP_HYBRIS"),
    
    SAP_MAXDB("SAP_MAXDB"),
    
    SAP_SYBASE("SAP_SYBASE"),
    
    SCALA("SCALA"),
    
    SELINUX("SELINUX"),
    
    SHAREPOINT("SHAREPOINT"),
    
    SPARK("SPARK"),
    
    SPRING("SPRING"),
    
    SQLITE("SQLITE"),
    
    THRIFT("THRIFT"),
    
    TIBCO("TIBCO"),
    
    TIBCO_BUSINESS_WORKS("TIBCO_BUSINESS_WORKS"),
    
    TIBCO_EMS("TIBCO_EMS"),
    
    UNDERTOW_IO("UNDERTOW_IO"),
    
    VARNISH_CACHE("VARNISH_CACHE"),
    
    VERTX("VERTX"),
    
    VIM2("VIM2"),
    
    VIOS("VIOS"),
    
    VIRTUAL_MACHINE_KVM("VIRTUAL_MACHINE_KVM"),
    
    VIRTUAL_MACHINE_QEMU("VIRTUAL_MACHINE_QEMU"),
    
    WILDFLY("WILDFLY"),
    
    WINDOWS_CONTAINERS("WINDOWS_CONTAINERS"),
    
    WINDOWS_SYSTEM("WINDOWS_SYSTEM"),
    
    WINK("WINK"),
    
    ZERO_MQ("ZERO_MQ"),
    
    ZOS_CONNECT("ZOS_CONNECT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_VERBATIM_TYPE = "verbatimType";
  private String verbatimType;

  public SimpleTech() { 
  }

  public SimpleTech type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Predefined technology, if technology is not predefined, then the verbatim type must be set
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Predefined technology, if technology is not predefined, then the verbatim type must be set")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SimpleTech verbatimType(String verbatimType) {
    this.verbatimType = verbatimType;
    return this;
  }

   /**
   * Non-predefined technology, use for custom technologies.
   * @return verbatimType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Non-predefined technology, use for custom technologies.")
  @JsonProperty(JSON_PROPERTY_VERBATIM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerbatimType() {
    return verbatimType;
  }


  @JsonProperty(JSON_PROPERTY_VERBATIM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerbatimType(String verbatimType) {
    this.verbatimType = verbatimType;
  }


  /**
   * Return true if this SimpleTech object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleTech simpleTech = (SimpleTech) o;
    return Objects.equals(this.type, simpleTech.type) &&
        Objects.equals(this.verbatimType, simpleTech.verbatimType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, verbatimType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleTech {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    verbatimType: ").append(toIndentedString(verbatimType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

