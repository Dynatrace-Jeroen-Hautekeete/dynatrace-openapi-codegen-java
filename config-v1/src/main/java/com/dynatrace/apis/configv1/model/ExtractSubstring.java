/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Preprocess by extracting a substring from the original value.
 */
@ApiModel(description = "Preprocess by extracting a substring from the original value.")
@JsonPropertyOrder({
  ExtractSubstring.JSON_PROPERTY_POSITION,
  ExtractSubstring.JSON_PROPERTY_DELIMITER,
  ExtractSubstring.JSON_PROPERTY_END_DELIMITER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ExtractSubstring {
  /**
   * The position of the extracted string relative to delimiters.
   */
  public enum PositionEnum {
    AFTER("AFTER"),
    
    BEFORE("BEFORE"),
    
    BETWEEN("BETWEEN");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POSITION = "position";
  private PositionEnum position;

  public static final String JSON_PROPERTY_DELIMITER = "delimiter";
  private String delimiter;

  public static final String JSON_PROPERTY_END_DELIMITER = "endDelimiter";
  private String endDelimiter;

  public ExtractSubstring() { 
  }

  public ExtractSubstring position(PositionEnum position) {
    this.position = position;
    return this;
  }

   /**
   * The position of the extracted string relative to delimiters.
   * @return position
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The position of the extracted string relative to delimiters.")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PositionEnum getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public ExtractSubstring delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

   /**
   * The delimiter string.
   * @return delimiter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The delimiter string.")
  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDelimiter() {
    return delimiter;
  }


  @JsonProperty(JSON_PROPERTY_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public ExtractSubstring endDelimiter(String endDelimiter) {
    this.endDelimiter = endDelimiter;
    return this;
  }

   /**
   * The end-delimiter string.    Required if the **position** value is &#x60;BETWEEN&#x60;. Otherwise not allowed.
   * @return endDelimiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The end-delimiter string.    Required if the **position** value is `BETWEEN`. Otherwise not allowed.")
  @JsonProperty(JSON_PROPERTY_END_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndDelimiter() {
    return endDelimiter;
  }


  @JsonProperty(JSON_PROPERTY_END_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDelimiter(String endDelimiter) {
    this.endDelimiter = endDelimiter;
  }


  /**
   * Return true if this ExtractSubstring object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtractSubstring extractSubstring = (ExtractSubstring) o;
    return Objects.equals(this.position, extractSubstring.position) &&
        Objects.equals(this.delimiter, extractSubstring.delimiter) &&
        Objects.equals(this.endDelimiter, extractSubstring.endDelimiter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, delimiter, endDelimiter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtractSubstring {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    endDelimiter: ").append(toIndentedString(endDelimiter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

