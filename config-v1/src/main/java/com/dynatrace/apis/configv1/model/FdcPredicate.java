/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.FdcPredicateIntegerEquals;
import com.dynatrace.apis.configv1.model.FdcPredicateIntegerGreaterThan;
import com.dynatrace.apis.configv1.model.FdcPredicateIntegerGreaterThanOrEqual;
import com.dynatrace.apis.configv1.model.FdcPredicateIntegerLessThan;
import com.dynatrace.apis.configv1.model.FdcPredicateIntegerLessThanOrEqual;
import com.dynatrace.apis.configv1.model.FdcPredicateLongEquals;
import com.dynatrace.apis.configv1.model.FdcPredicateLongGreaterThan;
import com.dynatrace.apis.configv1.model.FdcPredicateLongGreaterThanOrEqual;
import com.dynatrace.apis.configv1.model.FdcPredicateLongLessThan;
import com.dynatrace.apis.configv1.model.FdcPredicateLongLessThanOrEqual;
import com.dynatrace.apis.configv1.model.FdcPredicateManagementZonesContainsAll;
import com.dynatrace.apis.configv1.model.FdcPredicateServiceTypeEquals;
import com.dynatrace.apis.configv1.model.FdcPredicateSetOfIntegersContainsAll;
import com.dynatrace.apis.configv1.model.FdcPredicateSetOfIntegersContainsAny;
import com.dynatrace.apis.configv1.model.FdcPredicateStringContains;
import com.dynatrace.apis.configv1.model.FdcPredicateStringEndsWith;
import com.dynatrace.apis.configv1.model.FdcPredicateStringEquals;
import com.dynatrace.apis.configv1.model.FdcPredicateStringStartsWith;
import com.dynatrace.apis.configv1.model.FdcPredicateTagEquals;
import com.dynatrace.apis.configv1.model.FdcPredicateTagKeyEquals;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * The predicate that tests the value of the attribute.   The actual set of fields depends on the type of the predicate. Find the list of actual objects in the description of the **type** field or see [Failure detection API - JSON models](https://dt-url.net/9sg3swf).
 */
@ApiModel(description = "The predicate that tests the value of the attribute.   The actual set of fields depends on the type of the predicate. Find the list of actual objects in the description of the **type** field or see [Failure detection API - JSON models](https://dt-url.net/9sg3swf).")
@JsonPropertyOrder({
  FdcPredicate.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = FdcPredicateIntegerEquals.class, name = "FdcPredicateIntegerEquals"),
  @JsonSubTypes.Type(value = FdcPredicateIntegerGreaterThan.class, name = "FdcPredicateIntegerGreaterThan"),
  @JsonSubTypes.Type(value = FdcPredicateIntegerGreaterThanOrEqual.class, name = "FdcPredicateIntegerGreaterThanOrEqual"),
  @JsonSubTypes.Type(value = FdcPredicateIntegerLessThan.class, name = "FdcPredicateIntegerLessThan"),
  @JsonSubTypes.Type(value = FdcPredicateIntegerLessThanOrEqual.class, name = "FdcPredicateIntegerLessThanOrEqual"),
  @JsonSubTypes.Type(value = FdcPredicateLongEquals.class, name = "FdcPredicateLongEquals"),
  @JsonSubTypes.Type(value = FdcPredicateLongGreaterThan.class, name = "FdcPredicateLongGreaterThan"),
  @JsonSubTypes.Type(value = FdcPredicateLongGreaterThanOrEqual.class, name = "FdcPredicateLongGreaterThanOrEqual"),
  @JsonSubTypes.Type(value = FdcPredicateLongLessThan.class, name = "FdcPredicateLongLessThan"),
  @JsonSubTypes.Type(value = FdcPredicateLongLessThanOrEqual.class, name = "FdcPredicateLongLessThanOrEqual"),
  @JsonSubTypes.Type(value = FdcPredicateManagementZonesContainsAll.class, name = "FdcPredicateManagementZonesContainsAll"),
  @JsonSubTypes.Type(value = FdcPredicateServiceTypeEquals.class, name = "FdcPredicateServiceTypeEquals"),
  @JsonSubTypes.Type(value = FdcPredicateSetOfIntegersContainsAll.class, name = "FdcPredicateSetOfIntegersContainsAll"),
  @JsonSubTypes.Type(value = FdcPredicateSetOfIntegersContainsAny.class, name = "FdcPredicateSetOfIntegersContainsAny"),
  @JsonSubTypes.Type(value = FdcPredicateStringContains.class, name = "FdcPredicateStringContains"),
  @JsonSubTypes.Type(value = FdcPredicateStringEndsWith.class, name = "FdcPredicateStringEndsWith"),
  @JsonSubTypes.Type(value = FdcPredicateStringEquals.class, name = "FdcPredicateStringEquals"),
  @JsonSubTypes.Type(value = FdcPredicateStringStartsWith.class, name = "FdcPredicateStringStartsWith"),
  @JsonSubTypes.Type(value = FdcPredicateTagEquals.class, name = "FdcPredicateTagEquals"),
  @JsonSubTypes.Type(value = FdcPredicateTagKeyEquals.class, name = "FdcPredicateTagKeyEquals"),
})

public class FdcPredicate {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;STRING_EQUALS&#x60; -&gt; FdcPredicateStringEquals  * &#x60;STRING_STARTS_WITH&#x60; -&gt; FdcPredicateStringStartsWith  * &#x60;STRING_ENDS_WITH&#x60; -&gt; FdcPredicateStringEndsWith  * &#x60;STRING_CONTAINS_SUBSTRING&#x60; -&gt; FdcPredicateStringContains  * &#x60;INTEGER_EQUALS&#x60; -&gt; FdcPredicateIntegerEquals  * &#x60;INTEGER_LESS_THAN&#x60; -&gt; FdcPredicateIntegerLessThan  * &#x60;INTEGER_LESS_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateIntegerLessThanOrEqual  * &#x60;INTEGER_GREATER_THAN&#x60; -&gt; FdcPredicateIntegerGreaterThan  * &#x60;INTEGER_GREATER_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateIntegerGreaterThanOrEqual  * &#x60;LONG_EQUALS&#x60; -&gt; FdcPredicateLongEquals  * &#x60;LONG_LESS_THAN&#x60; -&gt; FdcPredicateLongLessThan  * &#x60;LONG_LESS_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateLongLessThanOrEqual  * &#x60;LONG_GREATER_THAN&#x60; -&gt; FdcPredicateLongGreaterThan  * &#x60;LONG_GREATER_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateLongGreaterThanOrEqual  * &#x60;TAG_KEY_EQUALS&#x60; -&gt; FdcPredicateTagKeyEquals  * &#x60;TAG_EQUALS&#x60; -&gt; FdcPredicateTagEquals  * &#x60;SERVICE_TYPE_EQUALS&#x60; -&gt; FdcPredicateServiceTypeEquals  * &#x60;MANAGEMENT_ZONES_CONTAINS_ALL&#x60; -&gt; FdcPredicateManagementZonesContainsAll  * &#x60;SET_OF_INTEGERS_CONTAINS_ANY&#x60; -&gt; FdcPredicateSetOfIntegersContainsAny  * &#x60;SET_OF_INTEGERS_CONTAINS_ALL&#x60; -&gt; FdcPredicateSetOfIntegersContainsAll  
   */
  public enum TypeEnum {
    INTEGER_EQUALS("INTEGER_EQUALS"),
    
    INTEGER_GREATER_THAN("INTEGER_GREATER_THAN"),
    
    INTEGER_GREATER_THAN_OR_EQUAL("INTEGER_GREATER_THAN_OR_EQUAL"),
    
    INTEGER_LESS_THAN("INTEGER_LESS_THAN"),
    
    INTEGER_LESS_THAN_OR_EQUAL("INTEGER_LESS_THAN_OR_EQUAL"),
    
    LONG_EQUALS("LONG_EQUALS"),
    
    LONG_GREATER_THAN("LONG_GREATER_THAN"),
    
    LONG_GREATER_THAN_OR_EQUAL("LONG_GREATER_THAN_OR_EQUAL"),
    
    LONG_LESS_THAN("LONG_LESS_THAN"),
    
    LONG_LESS_THAN_OR_EQUAL("LONG_LESS_THAN_OR_EQUAL"),
    
    MANAGEMENT_ZONES_CONTAINS_ALL("MANAGEMENT_ZONES_CONTAINS_ALL"),
    
    SERVICE_TYPE_EQUALS("SERVICE_TYPE_EQUALS"),
    
    SET_OF_INTEGERS_CONTAINS_ALL("SET_OF_INTEGERS_CONTAINS_ALL"),
    
    SET_OF_INTEGERS_CONTAINS_ANY("SET_OF_INTEGERS_CONTAINS_ANY"),
    
    STRING_CONTAINS_SUBSTRING("STRING_CONTAINS_SUBSTRING"),
    
    STRING_ENDS_WITH("STRING_ENDS_WITH"),
    
    STRING_EQUALS("STRING_EQUALS"),
    
    STRING_STARTS_WITH("STRING_STARTS_WITH"),
    
    TAG_EQUALS("TAG_EQUALS"),
    
    TAG_KEY_EQUALS("TAG_KEY_EQUALS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public FdcPredicate() { 
  }

  public FdcPredicate type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;STRING_EQUALS&#x60; -&gt; FdcPredicateStringEquals  * &#x60;STRING_STARTS_WITH&#x60; -&gt; FdcPredicateStringStartsWith  * &#x60;STRING_ENDS_WITH&#x60; -&gt; FdcPredicateStringEndsWith  * &#x60;STRING_CONTAINS_SUBSTRING&#x60; -&gt; FdcPredicateStringContains  * &#x60;INTEGER_EQUALS&#x60; -&gt; FdcPredicateIntegerEquals  * &#x60;INTEGER_LESS_THAN&#x60; -&gt; FdcPredicateIntegerLessThan  * &#x60;INTEGER_LESS_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateIntegerLessThanOrEqual  * &#x60;INTEGER_GREATER_THAN&#x60; -&gt; FdcPredicateIntegerGreaterThan  * &#x60;INTEGER_GREATER_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateIntegerGreaterThanOrEqual  * &#x60;LONG_EQUALS&#x60; -&gt; FdcPredicateLongEquals  * &#x60;LONG_LESS_THAN&#x60; -&gt; FdcPredicateLongLessThan  * &#x60;LONG_LESS_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateLongLessThanOrEqual  * &#x60;LONG_GREATER_THAN&#x60; -&gt; FdcPredicateLongGreaterThan  * &#x60;LONG_GREATER_THAN_OR_EQUAL&#x60; -&gt; FdcPredicateLongGreaterThanOrEqual  * &#x60;TAG_KEY_EQUALS&#x60; -&gt; FdcPredicateTagKeyEquals  * &#x60;TAG_EQUALS&#x60; -&gt; FdcPredicateTagEquals  * &#x60;SERVICE_TYPE_EQUALS&#x60; -&gt; FdcPredicateServiceTypeEquals  * &#x60;MANAGEMENT_ZONES_CONTAINS_ALL&#x60; -&gt; FdcPredicateManagementZonesContainsAll  * &#x60;SET_OF_INTEGERS_CONTAINS_ANY&#x60; -&gt; FdcPredicateSetOfIntegersContainsAny  * &#x60;SET_OF_INTEGERS_CONTAINS_ALL&#x60; -&gt; FdcPredicateSetOfIntegersContainsAll  
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `STRING_EQUALS` -> FdcPredicateStringEquals  * `STRING_STARTS_WITH` -> FdcPredicateStringStartsWith  * `STRING_ENDS_WITH` -> FdcPredicateStringEndsWith  * `STRING_CONTAINS_SUBSTRING` -> FdcPredicateStringContains  * `INTEGER_EQUALS` -> FdcPredicateIntegerEquals  * `INTEGER_LESS_THAN` -> FdcPredicateIntegerLessThan  * `INTEGER_LESS_THAN_OR_EQUAL` -> FdcPredicateIntegerLessThanOrEqual  * `INTEGER_GREATER_THAN` -> FdcPredicateIntegerGreaterThan  * `INTEGER_GREATER_THAN_OR_EQUAL` -> FdcPredicateIntegerGreaterThanOrEqual  * `LONG_EQUALS` -> FdcPredicateLongEquals  * `LONG_LESS_THAN` -> FdcPredicateLongLessThan  * `LONG_LESS_THAN_OR_EQUAL` -> FdcPredicateLongLessThanOrEqual  * `LONG_GREATER_THAN` -> FdcPredicateLongGreaterThan  * `LONG_GREATER_THAN_OR_EQUAL` -> FdcPredicateLongGreaterThanOrEqual  * `TAG_KEY_EQUALS` -> FdcPredicateTagKeyEquals  * `TAG_EQUALS` -> FdcPredicateTagEquals  * `SERVICE_TYPE_EQUALS` -> FdcPredicateServiceTypeEquals  * `MANAGEMENT_ZONES_CONTAINS_ALL` -> FdcPredicateManagementZonesContainsAll  * `SET_OF_INTEGERS_CONTAINS_ANY` -> FdcPredicateSetOfIntegersContainsAny  * `SET_OF_INTEGERS_CONTAINS_ALL` -> FdcPredicateSetOfIntegersContainsAll  ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this FdcPredicate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FdcPredicate fdcPredicate = (FdcPredicate) o;
    return Objects.equals(this.type, fdcPredicate.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FdcPredicate {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("FdcPredicateIntegerEquals", FdcPredicateIntegerEquals.class);
  mappings.put("FdcPredicateIntegerGreaterThan", FdcPredicateIntegerGreaterThan.class);
  mappings.put("FdcPredicateIntegerGreaterThanOrEqual", FdcPredicateIntegerGreaterThanOrEqual.class);
  mappings.put("FdcPredicateIntegerLessThan", FdcPredicateIntegerLessThan.class);
  mappings.put("FdcPredicateIntegerLessThanOrEqual", FdcPredicateIntegerLessThanOrEqual.class);
  mappings.put("FdcPredicateLongEquals", FdcPredicateLongEquals.class);
  mappings.put("FdcPredicateLongGreaterThan", FdcPredicateLongGreaterThan.class);
  mappings.put("FdcPredicateLongGreaterThanOrEqual", FdcPredicateLongGreaterThanOrEqual.class);
  mappings.put("FdcPredicateLongLessThan", FdcPredicateLongLessThan.class);
  mappings.put("FdcPredicateLongLessThanOrEqual", FdcPredicateLongLessThanOrEqual.class);
  mappings.put("FdcPredicateManagementZonesContainsAll", FdcPredicateManagementZonesContainsAll.class);
  mappings.put("FdcPredicateServiceTypeEquals", FdcPredicateServiceTypeEquals.class);
  mappings.put("FdcPredicateSetOfIntegersContainsAll", FdcPredicateSetOfIntegersContainsAll.class);
  mappings.put("FdcPredicateSetOfIntegersContainsAny", FdcPredicateSetOfIntegersContainsAny.class);
  mappings.put("FdcPredicateStringContains", FdcPredicateStringContains.class);
  mappings.put("FdcPredicateStringEndsWith", FdcPredicateStringEndsWith.class);
  mappings.put("FdcPredicateStringEquals", FdcPredicateStringEquals.class);
  mappings.put("FdcPredicateStringStartsWith", FdcPredicateStringStartsWith.class);
  mappings.put("FdcPredicateTagEquals", FdcPredicateTagEquals.class);
  mappings.put("FdcPredicateTagKeyEquals", FdcPredicateTagKeyEquals.class);
  mappings.put("FdcPredicate", FdcPredicate.class);
  JSON.registerDiscriminator(FdcPredicate.class, "type", mappings);
}
}

