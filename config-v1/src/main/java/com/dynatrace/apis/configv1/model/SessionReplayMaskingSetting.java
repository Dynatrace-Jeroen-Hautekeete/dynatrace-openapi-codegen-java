/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.MaskingRule;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of the Session Replay masking.
 */
@ApiModel(description = "Configuration of the Session Replay masking.")
@JsonPropertyOrder({
  SessionReplayMaskingSetting.JSON_PROPERTY_MASKING_PRESET,
  SessionReplayMaskingSetting.JSON_PROPERTY_MASKING_RULES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class SessionReplayMaskingSetting {
  /**
   * The type of the masking:   * &#x60;MASK_ALL&#x60;: Mask all texts, user input, and images.  * &#x60;MASK_USER_INPUT&#x60;: Mask all data that is provided through user input  * &#x60;ALLOW_LIST&#x60;: Only elements, specified in **maskingRules** are shown, everything else is masked.  * &#x60;BLOCK_LIST&#x60;: Elements, specified in **maskingRules** are masked, everything else is shown.
   */
  public enum MaskingPresetEnum {
    ALLOW_LIST("ALLOW_LIST"),
    
    BLOCK_LIST("BLOCK_LIST"),
    
    MASK_ALL("MASK_ALL"),
    
    MASK_USER_INPUT("MASK_USER_INPUT");

    private String value;

    MaskingPresetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MaskingPresetEnum fromValue(String value) {
      for (MaskingPresetEnum b : MaskingPresetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MASKING_PRESET = "maskingPreset";
  private MaskingPresetEnum maskingPreset;

  public static final String JSON_PROPERTY_MASKING_RULES = "maskingRules";
  private List<MaskingRule> maskingRules = null;

  public SessionReplayMaskingSetting() { 
  }

  public SessionReplayMaskingSetting maskingPreset(MaskingPresetEnum maskingPreset) {
    this.maskingPreset = maskingPreset;
    return this;
  }

   /**
   * The type of the masking:   * &#x60;MASK_ALL&#x60;: Mask all texts, user input, and images.  * &#x60;MASK_USER_INPUT&#x60;: Mask all data that is provided through user input  * &#x60;ALLOW_LIST&#x60;: Only elements, specified in **maskingRules** are shown, everything else is masked.  * &#x60;BLOCK_LIST&#x60;: Elements, specified in **maskingRules** are masked, everything else is shown.
   * @return maskingPreset
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the masking:   * `MASK_ALL`: Mask all texts, user input, and images.  * `MASK_USER_INPUT`: Mask all data that is provided through user input  * `ALLOW_LIST`: Only elements, specified in **maskingRules** are shown, everything else is masked.  * `BLOCK_LIST`: Elements, specified in **maskingRules** are masked, everything else is shown.")
  @JsonProperty(JSON_PROPERTY_MASKING_PRESET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MaskingPresetEnum getMaskingPreset() {
    return maskingPreset;
  }


  @JsonProperty(JSON_PROPERTY_MASKING_PRESET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaskingPreset(MaskingPresetEnum maskingPreset) {
    this.maskingPreset = maskingPreset;
  }


  public SessionReplayMaskingSetting maskingRules(List<MaskingRule> maskingRules) {
    this.maskingRules = maskingRules;
    return this;
  }

  public SessionReplayMaskingSetting addMaskingRulesItem(MaskingRule maskingRulesItem) {
    if (this.maskingRules == null) {
      this.maskingRules = new ArrayList<>();
    }
    this.maskingRules.add(maskingRulesItem);
    return this;
  }

   /**
   * A list of masking rules.
   * @return maskingRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of masking rules.")
  @JsonProperty(JSON_PROPERTY_MASKING_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MaskingRule> getMaskingRules() {
    return maskingRules;
  }


  @JsonProperty(JSON_PROPERTY_MASKING_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaskingRules(List<MaskingRule> maskingRules) {
    this.maskingRules = maskingRules;
  }


  /**
   * Return true if this SessionReplayMaskingSetting object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionReplayMaskingSetting sessionReplayMaskingSetting = (SessionReplayMaskingSetting) o;
    return Objects.equals(this.maskingPreset, sessionReplayMaskingSetting.maskingPreset) &&
        Objects.equals(this.maskingRules, sessionReplayMaskingSetting.maskingRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maskingPreset, maskingRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionReplayMaskingSetting {\n");
    sb.append("    maskingPreset: ").append(toIndentedString(maskingPreset)).append("\n");
    sb.append("    maskingRules: ").append(toIndentedString(maskingRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

