/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of the key user action.
 */
@ApiModel(description = "Configuration of the key user action.")
@JsonPropertyOrder({
  KeyUserAction.JSON_PROPERTY_NAME,
  KeyUserAction.JSON_PROPERTY_ACTION_TYPE,
  KeyUserAction.JSON_PROPERTY_DOMAIN,
  KeyUserAction.JSON_PROPERTY_ME_IDENTIFIER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class KeyUserAction {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The type of the action.
   */
  public enum ActionTypeEnum {
    CUSTOM("Custom"),
    
    LOAD("Load"),
    
    XHR("Xhr");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION_TYPE = "actionType";
  private ActionTypeEnum actionType;

  public static final String JSON_PROPERTY_DOMAIN = "domain";
  private String domain;

  public static final String JSON_PROPERTY_ME_IDENTIFIER = "meIdentifier";
  private String meIdentifier;

  public KeyUserAction() { 
  }

  @JsonCreator
  public KeyUserAction(
    @JsonProperty(JSON_PROPERTY_ME_IDENTIFIER) String meIdentifier
  ) {
  this();
    this.meIdentifier = meIdentifier;
  }

  public KeyUserAction name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the action.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the action.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public KeyUserAction actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

   /**
   * The type of the action.
   * @return actionType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the action.")
  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActionTypeEnum getActionType() {
    return actionType;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public KeyUserAction domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * The domain where the action is performed.
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The domain where the action is performed.")
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(String domain) {
    this.domain = domain;
  }


   /**
   * The Dynatrace entity ID of the action.
   * @return meIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Dynatrace entity ID of the action.")
  @JsonProperty(JSON_PROPERTY_ME_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMeIdentifier() {
    return meIdentifier;
  }




  /**
   * Return true if this KeyUserAction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyUserAction keyUserAction = (KeyUserAction) o;
    return Objects.equals(this.name, keyUserAction.name) &&
        Objects.equals(this.actionType, keyUserAction.actionType) &&
        Objects.equals(this.domain, keyUserAction.domain) &&
        Objects.equals(this.meIdentifier, keyUserAction.meIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, actionType, domain, meIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyUserAction {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    meIdentifier: ").append(toIndentedString(meIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

