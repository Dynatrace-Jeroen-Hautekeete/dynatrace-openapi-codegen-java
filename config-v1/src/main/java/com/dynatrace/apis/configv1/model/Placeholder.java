/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.PropagationSource;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The custom placeholder to be used as a naming value pattern.    It enables you to extract a request attribute value or other request attribute and use it in the naming pattern.
 */
@ApiModel(description = "The custom placeholder to be used as a naming value pattern.    It enables you to extract a request attribute value or other request attribute and use it in the naming pattern.")
@JsonPropertyOrder({
  Placeholder.JSON_PROPERTY_NAME,
  Placeholder.JSON_PROPERTY_ATTRIBUTE,
  Placeholder.JSON_PROPERTY_KIND,
  Placeholder.JSON_PROPERTY_DELIMITER_OR_REGEX,
  Placeholder.JSON_PROPERTY_END_DELIMITER,
  Placeholder.JSON_PROPERTY_REQUEST_ATTRIBUTE,
  Placeholder.JSON_PROPERTY_NORMALIZATION,
  Placeholder.JSON_PROPERTY_USE_FROM_CHILD_CALLS,
  Placeholder.JSON_PROPERTY_AGGREGATION,
  Placeholder.JSON_PROPERTY_SOURCE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class Placeholder {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The attribute to extract from. You can only use attributes of the **string** type.
   */
  public enum AttributeEnum {
    ACTOR_SYSTEM("ACTOR_SYSTEM"),
    
    AKKA_ACTOR_CLASS_NAME("AKKA_ACTOR_CLASS_NAME"),
    
    AKKA_ACTOR_MESSAGE_TYPE("AKKA_ACTOR_MESSAGE_TYPE"),
    
    AKKA_ACTOR_PATH("AKKA_ACTOR_PATH"),
    
    APPLICATION_BUILD_VERSION("APPLICATION_BUILD_VERSION"),
    
    APPLICATION_ENVIRONMENT("APPLICATION_ENVIRONMENT"),
    
    APPLICATION_NAME("APPLICATION_NAME"),
    
    APPLICATION_RELEASE_VERSION("APPLICATION_RELEASE_VERSION"),
    
    AZURE_FUNCTIONS_FUNCTION_NAME("AZURE_FUNCTIONS_FUNCTION_NAME"),
    
    AZURE_FUNCTIONS_SITE_NAME("AZURE_FUNCTIONS_SITE_NAME"),
    
    CICS_PROGRAM_NAME("CICS_PROGRAM_NAME"),
    
    CICS_SYSTEM_ID("CICS_SYSTEM_ID"),
    
    CICS_TASK_ID("CICS_TASK_ID"),
    
    CICS_TRANSACTION_ID("CICS_TRANSACTION_ID"),
    
    CICS_USER_ID("CICS_USER_ID"),
    
    CPU_TIME("CPU_TIME"),
    
    CTG_GATEWAY_URL("CTG_GATEWAY_URL"),
    
    CTG_PROGRAM("CTG_PROGRAM"),
    
    CTG_SERVER_NAME("CTG_SERVER_NAME"),
    
    CTG_TRANSACTION_ID("CTG_TRANSACTION_ID"),
    
    CUSTOMSERVICE_CLASS("CUSTOMSERVICE_CLASS"),
    
    CUSTOMSERVICE_METHOD("CUSTOMSERVICE_METHOD"),
    
    DATABASE_CHILD_CALL_COUNT("DATABASE_CHILD_CALL_COUNT"),
    
    DATABASE_CHILD_CALL_TIME("DATABASE_CHILD_CALL_TIME"),
    
    DATABASE_HOST("DATABASE_HOST"),
    
    DATABASE_NAME("DATABASE_NAME"),
    
    DATABASE_STATEMENT("DATABASE_STATEMENT"),
    
    DATABASE_TYPE("DATABASE_TYPE"),
    
    DATABASE_URL("DATABASE_URL"),
    
    DISK_IO_TIME("DISK_IO_TIME"),
    
    ERROR_COUNT("ERROR_COUNT"),
    
    ESB_APPLICATION_NAME("ESB_APPLICATION_NAME"),
    
    ESB_INPUT_TYPE("ESB_INPUT_TYPE"),
    
    ESB_LIBRARY_NAME("ESB_LIBRARY_NAME"),
    
    ESB_MESSAGE_FLOW_NAME("ESB_MESSAGE_FLOW_NAME"),
    
    EXCEPTION_CLASS("EXCEPTION_CLASS"),
    
    EXCEPTION_MESSAGE("EXCEPTION_MESSAGE"),
    
    FAILED_STATE("FAILED_STATE"),
    
    FAILURE_REASON("FAILURE_REASON"),
    
    FLAW_STATE("FLAW_STATE"),
    
    HTTP_REQUEST_METHOD("HTTP_REQUEST_METHOD"),
    
    HTTP_STATUS("HTTP_STATUS"),
    
    HTTP_STATUS_CLASS("HTTP_STATUS_CLASS"),
    
    IMS_PROGRAM_NAME("IMS_PROGRAM_NAME"),
    
    IMS_TRANSACTION_ID("IMS_TRANSACTION_ID"),
    
    IMS_USER_ID("IMS_USER_ID"),
    
    IO_TIME("IO_TIME"),
    
    IS_KEY_REQUEST("IS_KEY_REQUEST"),
    
    LAMBDA_COLDSTART("LAMBDA_COLDSTART"),
    
    LOCK_TIME("LOCK_TIME"),
    
    MESSAGING_DESTINATION_TYPE("MESSAGING_DESTINATION_TYPE"),
    
    MESSAGING_IS_TEMPORARY_QUEUE("MESSAGING_IS_TEMPORARY_QUEUE"),
    
    MESSAGING_QUEUE_NAME("MESSAGING_QUEUE_NAME"),
    
    MESSAGING_QUEUE_VENDOR("MESSAGING_QUEUE_VENDOR"),
    
    NETWORK_IO_TIME("NETWORK_IO_TIME"),
    
    NON_DATABASE_CHILD_CALL_COUNT("NON_DATABASE_CHILD_CALL_COUNT"),
    
    NON_DATABASE_CHILD_CALL_TIME("NON_DATABASE_CHILD_CALL_TIME"),
    
    PROCESS_GROUP_NAME("PROCESS_GROUP_NAME"),
    
    PROCESS_GROUP_TAG("PROCESS_GROUP_TAG"),
    
    REMOTE_ENDPOINT("REMOTE_ENDPOINT"),
    
    REMOTE_METHOD("REMOTE_METHOD"),
    
    REMOTE_SERVICE_NAME("REMOTE_SERVICE_NAME"),
    
    REQUEST_NAME("REQUEST_NAME"),
    
    REQUEST_TYPE("REQUEST_TYPE"),
    
    RESPONSE_TIME("RESPONSE_TIME"),
    
    RESPONSE_TIME_CLIENT("RESPONSE_TIME_CLIENT"),
    
    RMI_CLASS("RMI_CLASS"),
    
    RMI_METHOD("RMI_METHOD"),
    
    SERVICE_DISPLAY_NAME("SERVICE_DISPLAY_NAME"),
    
    SERVICE_NAME("SERVICE_NAME"),
    
    SERVICE_PORT("SERVICE_PORT"),
    
    SERVICE_PUBLIC_DOMAIN_NAME("SERVICE_PUBLIC_DOMAIN_NAME"),
    
    SERVICE_REQUEST_ATTRIBUTE("SERVICE_REQUEST_ATTRIBUTE"),
    
    SERVICE_TAG("SERVICE_TAG"),
    
    SERVICE_TYPE("SERVICE_TYPE"),
    
    SERVICE_WEB_APPLICATION_ID("SERVICE_WEB_APPLICATION_ID"),
    
    SERVICE_WEB_CONTEXT_ROOT("SERVICE_WEB_CONTEXT_ROOT"),
    
    SERVICE_WEB_SERVER_NAME("SERVICE_WEB_SERVER_NAME"),
    
    SERVICE_WEB_SERVICE_NAME("SERVICE_WEB_SERVICE_NAME"),
    
    SERVICE_WEB_SERVICE_NAMESPACE("SERVICE_WEB_SERVICE_NAMESPACE"),
    
    SUSPENSION_TIME("SUSPENSION_TIME"),
    
    TOTAL_PROCESSING_TIME("TOTAL_PROCESSING_TIME"),
    
    WAIT_TIME("WAIT_TIME"),
    
    WEBREQUEST_QUERY("WEBREQUEST_QUERY"),
    
    WEBREQUEST_RELATIVE_URL("WEBREQUEST_RELATIVE_URL"),
    
    WEBREQUEST_URL("WEBREQUEST_URL"),
    
    WEBREQUEST_URL_HOST("WEBREQUEST_URL_HOST"),
    
    WEBREQUEST_URL_PATH("WEBREQUEST_URL_PATH"),
    
    WEBREQUEST_URL_PORT("WEBREQUEST_URL_PORT"),
    
    WEBSERVICE_ENDPOINT("WEBSERVICE_ENDPOINT"),
    
    WEBSERVICE_METHOD("WEBSERVICE_METHOD"),
    
    ZOS_CALL_TYPE("ZOS_CALL_TYPE");

    private String value;

    AttributeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributeEnum fromValue(String value) {
      for (AttributeEnum b : AttributeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTE = "attribute";
  private AttributeEnum attribute;

  /**
   * The type of extraction.    Defines either usage of regular expression (&#x60;regex&#x60;) or the position of request attribute value to be extracted.   When the **attribute** is &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60; attribute and **aggregation** is &#x60;COUNT&#x60;, needs to be set to &#x60;ORIGINAL_TEXT&#x60;
   */
  public enum KindEnum {
    AFTER_DELIMITER("AFTER_DELIMITER"),
    
    BEFORE_DELIMITER("BEFORE_DELIMITER"),
    
    BETWEEN_DELIMITER("BETWEEN_DELIMITER"),
    
    ORIGINAL_TEXT("ORIGINAL_TEXT"),
    
    REGEX_EXTRACTION("REGEX_EXTRACTION");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KIND = "kind";
  private KindEnum kind;

  public static final String JSON_PROPERTY_DELIMITER_OR_REGEX = "delimiterOrRegex";
  private String delimiterOrRegex;

  public static final String JSON_PROPERTY_END_DELIMITER = "endDelimiter";
  private String endDelimiter;

  public static final String JSON_PROPERTY_REQUEST_ATTRIBUTE = "requestAttribute";
  private String requestAttribute;

  /**
   * The format of the extracted string.
   */
  public enum NormalizationEnum {
    ORIGINAL("ORIGINAL"),
    
    TO_LOWER_CASE("TO_LOWER_CASE"),
    
    TO_UPPER_CASE("TO_UPPER_CASE");

    private String value;

    NormalizationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NormalizationEnum fromValue(String value) {
      for (NormalizationEnum b : NormalizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NORMALIZATION = "normalization";
  private NormalizationEnum normalization;

  public static final String JSON_PROPERTY_USE_FROM_CHILD_CALLS = "useFromChildCalls";
  private Boolean useFromChildCalls;

  /**
   * Which value of the request attribute must be used when it occurs across multiple child requests.   Only applicable for the &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60; attribute, when **useFromChildCalls** is &#x60;true&#x60;.   For the &#x60;COUNT&#x60; aggregation, the **kind** field is not applicable.
   */
  public enum AggregationEnum {
    COUNT("COUNT"),
    
    FIRST("FIRST"),
    
    LAST("LAST");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION = "aggregation";
  private AggregationEnum aggregation;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private PropagationSource source;

  public Placeholder() { 
  }

  public Placeholder name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the placeholder. Use it in the naming pattern as &#x60;{name}&#x60;.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the placeholder. Use it in the naming pattern as `{name}`.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Placeholder attribute(AttributeEnum attribute) {
    this.attribute = attribute;
    return this;
  }

   /**
   * The attribute to extract from. You can only use attributes of the **string** type.
   * @return attribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The attribute to extract from. You can only use attributes of the **string** type.")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AttributeEnum getAttribute() {
    return attribute;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttribute(AttributeEnum attribute) {
    this.attribute = attribute;
  }


  public Placeholder kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * The type of extraction.    Defines either usage of regular expression (&#x60;regex&#x60;) or the position of request attribute value to be extracted.   When the **attribute** is &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60; attribute and **aggregation** is &#x60;COUNT&#x60;, needs to be set to &#x60;ORIGINAL_TEXT&#x60;
   * @return kind
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of extraction.    Defines either usage of regular expression (`regex`) or the position of request attribute value to be extracted.   When the **attribute** is `SERVICE_REQUEST_ATTRIBUTE` attribute and **aggregation** is `COUNT`, needs to be set to `ORIGINAL_TEXT`")
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public KindEnum getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public Placeholder delimiterOrRegex(String delimiterOrRegex) {
    this.delimiterOrRegex = delimiterOrRegex;
    return this;
  }

   /**
   * Depending on the **type** value:    * &#x60;REGEX_EXTRACTION&#x60;: The regular expression.   * &#x60;BETWEEN_DELIMITER&#x60;: The opening delimiter string to look for.   * All other values: The delimiter string to look for.
   * @return delimiterOrRegex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Depending on the **type** value:    * `REGEX_EXTRACTION`: The regular expression.   * `BETWEEN_DELIMITER`: The opening delimiter string to look for.   * All other values: The delimiter string to look for.")
  @JsonProperty(JSON_PROPERTY_DELIMITER_OR_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDelimiterOrRegex() {
    return delimiterOrRegex;
  }


  @JsonProperty(JSON_PROPERTY_DELIMITER_OR_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelimiterOrRegex(String delimiterOrRegex) {
    this.delimiterOrRegex = delimiterOrRegex;
  }


  public Placeholder endDelimiter(String endDelimiter) {
    this.endDelimiter = endDelimiter;
    return this;
  }

   /**
   * The closing delimiter string to look for.    Required if the **kind** value is &#x60;BETWEEN_DELIMITER&#x60;. Not applicable otherwise.
   * @return endDelimiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The closing delimiter string to look for.    Required if the **kind** value is `BETWEEN_DELIMITER`. Not applicable otherwise.")
  @JsonProperty(JSON_PROPERTY_END_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndDelimiter() {
    return endDelimiter;
  }


  @JsonProperty(JSON_PROPERTY_END_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDelimiter(String endDelimiter) {
    this.endDelimiter = endDelimiter;
  }


  public Placeholder requestAttribute(String requestAttribute) {
    this.requestAttribute = requestAttribute;
    return this;
  }

   /**
   * The request attribute to extract from.    Required if the **kind** value is &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60;. Not applicable otherwise.
   * @return requestAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The request attribute to extract from.    Required if the **kind** value is `SERVICE_REQUEST_ATTRIBUTE`. Not applicable otherwise.")
  @JsonProperty(JSON_PROPERTY_REQUEST_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequestAttribute() {
    return requestAttribute;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestAttribute(String requestAttribute) {
    this.requestAttribute = requestAttribute;
  }


  public Placeholder normalization(NormalizationEnum normalization) {
    this.normalization = normalization;
    return this;
  }

   /**
   * The format of the extracted string.
   * @return normalization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The format of the extracted string.")
  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NormalizationEnum getNormalization() {
    return normalization;
  }


  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNormalization(NormalizationEnum normalization) {
    this.normalization = normalization;
  }


  public Placeholder useFromChildCalls(Boolean useFromChildCalls) {
    this.useFromChildCalls = useFromChildCalls;
    return this;
  }

   /**
   * If &#x60;true&#x60; request attribute will be taken from a child service call.    Only applicable for the &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60; attribute. Defaults to &#x60;false&#x60;.
   * @return useFromChildCalls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true` request attribute will be taken from a child service call.    Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute. Defaults to `false`.")
  @JsonProperty(JSON_PROPERTY_USE_FROM_CHILD_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseFromChildCalls() {
    return useFromChildCalls;
  }


  @JsonProperty(JSON_PROPERTY_USE_FROM_CHILD_CALLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseFromChildCalls(Boolean useFromChildCalls) {
    this.useFromChildCalls = useFromChildCalls;
  }


  public Placeholder aggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Which value of the request attribute must be used when it occurs across multiple child requests.   Only applicable for the &#x60;SERVICE_REQUEST_ATTRIBUTE&#x60; attribute, when **useFromChildCalls** is &#x60;true&#x60;.   For the &#x60;COUNT&#x60; aggregation, the **kind** field is not applicable.
   * @return aggregation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Which value of the request attribute must be used when it occurs across multiple child requests.   Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute, when **useFromChildCalls** is `true`.   For the `COUNT` aggregation, the **kind** field is not applicable.")
  @JsonProperty(JSON_PROPERTY_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AggregationEnum getAggregation() {
    return aggregation;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }


  public Placeholder source(PropagationSource source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropagationSource getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(PropagationSource source) {
    this.source = source;
  }


  /**
   * Return true if this Placeholder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Placeholder placeholder = (Placeholder) o;
    return Objects.equals(this.name, placeholder.name) &&
        Objects.equals(this.attribute, placeholder.attribute) &&
        Objects.equals(this.kind, placeholder.kind) &&
        Objects.equals(this.delimiterOrRegex, placeholder.delimiterOrRegex) &&
        Objects.equals(this.endDelimiter, placeholder.endDelimiter) &&
        Objects.equals(this.requestAttribute, placeholder.requestAttribute) &&
        Objects.equals(this.normalization, placeholder.normalization) &&
        Objects.equals(this.useFromChildCalls, placeholder.useFromChildCalls) &&
        Objects.equals(this.aggregation, placeholder.aggregation) &&
        Objects.equals(this.source, placeholder.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, attribute, kind, delimiterOrRegex, endDelimiter, requestAttribute, normalization, useFromChildCalls, aggregation, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Placeholder {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    delimiterOrRegex: ").append(toIndentedString(delimiterOrRegex)).append("\n");
    sb.append("    endDelimiter: ").append(toIndentedString(endDelimiter)).append("\n");
    sb.append("    requestAttribute: ").append(toIndentedString(requestAttribute)).append("\n");
    sb.append("    normalization: ").append(toIndentedString(normalization)).append("\n");
    sb.append("    useFromChildCalls: ").append(toIndentedString(useFromChildCalls)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

