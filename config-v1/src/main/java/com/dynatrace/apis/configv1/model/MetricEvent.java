/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ConfigurationMetadata;
import com.dynatrace.apis.configv1.model.MetricEventAlertingScope;
import com.dynatrace.apis.configv1.model.MetricEventDimensions;
import com.dynatrace.apis.configv1.model.MetricEventMonitoringStrategy;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The configuration of the metric event.
 */
@ApiModel(description = "The configuration of the metric event.")
@JsonPropertyOrder({
  MetricEvent.JSON_PROPERTY_METADATA,
  MetricEvent.JSON_PROPERTY_ID,
  MetricEvent.JSON_PROPERTY_METRIC_ID,
  MetricEvent.JSON_PROPERTY_METRIC_SELECTOR,
  MetricEvent.JSON_PROPERTY_NAME,
  MetricEvent.JSON_PROPERTY_DESCRIPTION,
  MetricEvent.JSON_PROPERTY_AGGREGATION_TYPE,
  MetricEvent.JSON_PROPERTY_SEVERITY,
  MetricEvent.JSON_PROPERTY_ENABLED,
  MetricEvent.JSON_PROPERTY_DISABLED_REASON,
  MetricEvent.JSON_PROPERTY_WARNING_REASON,
  MetricEvent.JSON_PROPERTY_ALERTING_SCOPE,
  MetricEvent.JSON_PROPERTY_METRIC_DIMENSIONS,
  MetricEvent.JSON_PROPERTY_MONITORING_STRATEGY,
  MetricEvent.JSON_PROPERTY_PRIMARY_DIMENSION_KEY,
  MetricEvent.JSON_PROPERTY_QUERY_OFFSET
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class MetricEvent {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConfigurationMetadata metadata;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_METRIC_ID = "metricId";
  private String metricId;

  public static final String JSON_PROPERTY_METRIC_SELECTOR = "metricSelector";
  private String metricSelector;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * How the metric data points are aggregated for the evaluation.    The timeseries must support this aggregation.
   */
  public enum AggregationTypeEnum {
    AVG("AVG"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    P90("P90"),
    
    SUM("SUM"),
    
    VALUE("VALUE");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationTypeEnum fromValue(String value) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION_TYPE = "aggregationType";
  private AggregationTypeEnum aggregationType;

  /**
   * The type of the event to trigger on the threshold violation.   The &#x60;CUSTOM_ALERT&#x60; type is not correlated with other alerts. The &#x60;INFO&#x60; type does not open a problem.
   */
  public enum SeverityEnum {
    AVAILABILITY("AVAILABILITY"),
    
    CUSTOM_ALERT("CUSTOM_ALERT"),
    
    ERROR("ERROR"),
    
    INFO("INFO"),
    
    PERFORMANCE("PERFORMANCE"),
    
    RESOURCE_CONTENTION("RESOURCE_CONTENTION");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private SeverityEnum severity;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * The reason of automatic disabling.   The &#x60;NONE&#x60; means config was not disabled automatically.
   */
  public enum DisabledReasonEnum {
    METRIC_DEFINITION_INCONSISTENCY("METRIC_DEFINITION_INCONSISTENCY"),
    
    NONE("NONE"),
    
    TOO_MANY_DIMS("TOO_MANY_DIMS"),
    
    TOPX_FORCIBLY_DEACTIVATED("TOPX_FORCIBLY_DEACTIVATED");

    private String value;

    DisabledReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DisabledReasonEnum fromValue(String value) {
      for (DisabledReasonEnum b : DisabledReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISABLED_REASON = "disabledReason";
  private DisabledReasonEnum disabledReason;

  /**
   * The reason of a warning set on the config.   The &#x60;NONE&#x60; means config has no warnings.
   */
  public enum WarningReasonEnum {
    NONE("NONE"),
    
    TOO_MANY_DIMS("TOO_MANY_DIMS");

    private String value;

    WarningReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WarningReasonEnum fromValue(String value) {
      for (WarningReasonEnum b : WarningReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WARNING_REASON = "warningReason";
  private WarningReasonEnum warningReason;

  public static final String JSON_PROPERTY_ALERTING_SCOPE = "alertingScope";
  private List<MetricEventAlertingScope> alertingScope = null;

  public static final String JSON_PROPERTY_METRIC_DIMENSIONS = "metricDimensions";
  private List<MetricEventDimensions> metricDimensions = null;

  public static final String JSON_PROPERTY_MONITORING_STRATEGY = "monitoringStrategy";
  private MetricEventMonitoringStrategy monitoringStrategy;

  public static final String JSON_PROPERTY_PRIMARY_DIMENSION_KEY = "primaryDimensionKey";
  private String primaryDimensionKey;

  public static final String JSON_PROPERTY_QUERY_OFFSET = "queryOffset";
  private Long queryOffset;

  public MetricEvent() { 
  }

  @JsonCreator
  public MetricEvent(
    @JsonProperty(JSON_PROPERTY_DISABLED_REASON) DisabledReasonEnum disabledReason, 
    @JsonProperty(JSON_PROPERTY_WARNING_REASON) WarningReasonEnum warningReason
  ) {
  this();
    this.disabledReason = disabledReason;
    this.warningReason = warningReason;
  }

  public MetricEvent metadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConfigurationMetadata metadata) {
    this.metadata = metadata;
  }


  public MetricEvent id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the metric event.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the metric event.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public MetricEvent metricId(String metricId) {
    this.metricId = metricId;
    return this;
  }

   /**
   * The ID of the metric evaluated by the metric event.
   * @return metricId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the metric evaluated by the metric event.")
  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetricId() {
    return metricId;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricId(String metricId) {
    this.metricId = metricId;
  }


  public MetricEvent metricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
    return this;
  }

   /**
   * The metric selector that should be executed.
   * @return metricSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric selector that should be executed.")
  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetricSelector() {
    return metricSelector;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
  }


  public MetricEvent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the metric event displayed in the UI.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the metric event displayed in the UI.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public MetricEvent description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the metric event.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The description of the metric event.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public MetricEvent aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

   /**
   * How the metric data points are aggregated for the evaluation.    The timeseries must support this aggregation.
   * @return aggregationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How the metric data points are aggregated for the evaluation.    The timeseries must support this aggregation.")
  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }


  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }


  public MetricEvent severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

   /**
   * The type of the event to trigger on the threshold violation.   The &#x60;CUSTOM_ALERT&#x60; type is not correlated with other alerts. The &#x60;INFO&#x60; type does not open a problem.
   * @return severity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the event to trigger on the threshold violation.   The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem.")
  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SeverityEnum getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public MetricEvent enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * The metric event is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The metric event is enabled (`true`) or disabled (`false`).")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


   /**
   * The reason of automatic disabling.   The &#x60;NONE&#x60; means config was not disabled automatically.
   * @return disabledReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason of automatic disabling.   The `NONE` means config was not disabled automatically.")
  @JsonProperty(JSON_PROPERTY_DISABLED_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisabledReasonEnum getDisabledReason() {
    return disabledReason;
  }




   /**
   * The reason of a warning set on the config.   The &#x60;NONE&#x60; means config has no warnings.
   * @return warningReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason of a warning set on the config.   The `NONE` means config has no warnings.")
  @JsonProperty(JSON_PROPERTY_WARNING_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WarningReasonEnum getWarningReason() {
    return warningReason;
  }




  public MetricEvent alertingScope(List<MetricEventAlertingScope> alertingScope) {
    this.alertingScope = alertingScope;
    return this;
  }

  public MetricEvent addAlertingScopeItem(MetricEventAlertingScope alertingScopeItem) {
    if (this.alertingScope == null) {
      this.alertingScope = new ArrayList<>();
    }
    this.alertingScope.add(alertingScopeItem);
    return this;
  }

   /**
   * Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction.
   * @return alertingScope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction.")
  @JsonProperty(JSON_PROPERTY_ALERTING_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MetricEventAlertingScope> getAlertingScope() {
    return alertingScope;
  }


  @JsonProperty(JSON_PROPERTY_ALERTING_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlertingScope(List<MetricEventAlertingScope> alertingScope) {
    this.alertingScope = alertingScope;
  }


  public MetricEvent metricDimensions(List<MetricEventDimensions> metricDimensions) {
    this.metricDimensions = metricDimensions;
    return this;
  }

  public MetricEvent addMetricDimensionsItem(MetricEventDimensions metricDimensionsItem) {
    if (this.metricDimensions == null) {
      this.metricDimensions = new ArrayList<>();
    }
    this.metricDimensions.add(metricDimensionsItem);
    return this;
  }

   /**
   * Defines the dimensions of the metric to alert on. The filters are combined by conjunction.
   * @return metricDimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the dimensions of the metric to alert on. The filters are combined by conjunction.")
  @JsonProperty(JSON_PROPERTY_METRIC_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MetricEventDimensions> getMetricDimensions() {
    return metricDimensions;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_DIMENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricDimensions(List<MetricEventDimensions> metricDimensions) {
    this.metricDimensions = metricDimensions;
  }


  public MetricEvent monitoringStrategy(MetricEventMonitoringStrategy monitoringStrategy) {
    this.monitoringStrategy = monitoringStrategy;
    return this;
  }

   /**
   * Get monitoringStrategy
   * @return monitoringStrategy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MONITORING_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricEventMonitoringStrategy getMonitoringStrategy() {
    return monitoringStrategy;
  }


  @JsonProperty(JSON_PROPERTY_MONITORING_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonitoringStrategy(MetricEventMonitoringStrategy monitoringStrategy) {
    this.monitoringStrategy = monitoringStrategy;
  }


  public MetricEvent primaryDimensionKey(String primaryDimensionKey) {
    this.primaryDimensionKey = primaryDimensionKey;
    return this;
  }

   /**
   * Defines which dimension key should be used for the **alertingScope**.
   * @return primaryDimensionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines which dimension key should be used for the **alertingScope**.")
  @JsonProperty(JSON_PROPERTY_PRIMARY_DIMENSION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrimaryDimensionKey() {
    return primaryDimensionKey;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_DIMENSION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryDimensionKey(String primaryDimensionKey) {
    this.primaryDimensionKey = primaryDimensionKey;
  }


  public MetricEvent queryOffset(Long queryOffset) {
    this.queryOffset = queryOffset;
    return this;
  }

   /**
   * Defines the query offset to adapt the evaluation timeframe for known metric latency.
   * minimum: 1
   * maximum: 60
   * @return queryOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the query offset to adapt the evaluation timeframe for known metric latency.")
  @JsonProperty(JSON_PROPERTY_QUERY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQueryOffset() {
    return queryOffset;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryOffset(Long queryOffset) {
    this.queryOffset = queryOffset;
  }


  /**
   * Return true if this MetricEvent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricEvent metricEvent = (MetricEvent) o;
    return Objects.equals(this.metadata, metricEvent.metadata) &&
        Objects.equals(this.id, metricEvent.id) &&
        Objects.equals(this.metricId, metricEvent.metricId) &&
        Objects.equals(this.metricSelector, metricEvent.metricSelector) &&
        Objects.equals(this.name, metricEvent.name) &&
        Objects.equals(this.description, metricEvent.description) &&
        Objects.equals(this.aggregationType, metricEvent.aggregationType) &&
        Objects.equals(this.severity, metricEvent.severity) &&
        Objects.equals(this.enabled, metricEvent.enabled) &&
        Objects.equals(this.disabledReason, metricEvent.disabledReason) &&
        Objects.equals(this.warningReason, metricEvent.warningReason) &&
        Objects.equals(this.alertingScope, metricEvent.alertingScope) &&
        Objects.equals(this.metricDimensions, metricEvent.metricDimensions) &&
        Objects.equals(this.monitoringStrategy, metricEvent.monitoringStrategy) &&
        Objects.equals(this.primaryDimensionKey, metricEvent.primaryDimensionKey) &&
        Objects.equals(this.queryOffset, metricEvent.queryOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, id, metricId, metricSelector, name, description, aggregationType, severity, enabled, disabledReason, warningReason, alertingScope, metricDimensions, monitoringStrategy, primaryDimensionKey, queryOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricEvent {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    metricSelector: ").append(toIndentedString(metricSelector)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    warningReason: ").append(toIndentedString(warningReason)).append("\n");
    sb.append("    alertingScope: ").append(toIndentedString(alertingScope)).append("\n");
    sb.append("    metricDimensions: ").append(toIndentedString(metricDimensions)).append("\n");
    sb.append("    monitoringStrategy: ").append(toIndentedString(monitoringStrategy)).append("\n");
    sb.append("    primaryDimensionKey: ").append(toIndentedString(primaryDimensionKey)).append("\n");
    sb.append("    queryOffset: ").append(toIndentedString(queryOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

