/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Settings for heatmap visualization
 */
@ApiModel(description = "Settings for heatmap visualization")
@JsonPropertyOrder({
  HeatmapSettings.JSON_PROPERTY_X_AXIS_BUCKETS,
  HeatmapSettings.JSON_PROPERTY_SHOW_LABELS,
  HeatmapSettings.JSON_PROPERTY_Y_AXIS,
  HeatmapSettings.JSON_PROPERTY_Y_AXIS_BUCKETS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class HeatmapSettings {
  public static final String JSON_PROPERTY_X_AXIS_BUCKETS = "xAxisBuckets";
  private Integer xAxisBuckets;

  public static final String JSON_PROPERTY_SHOW_LABELS = "showLabels";
  private Boolean showLabels;

  /**
   * Y axis aggregation criteria
   */
  public enum YAxisEnum {
    DIMENSIONS("DIMENSIONS"),
    
    VALUE("VALUE");

    private String value;

    YAxisEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static YAxisEnum fromValue(String value) {
      for (YAxisEnum b : YAxisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_Y_AXIS = "yAxis";
  private YAxisEnum yAxis;

  public static final String JSON_PROPERTY_Y_AXIS_BUCKETS = "yAxisBuckets";
  private Integer yAxisBuckets;

  public HeatmapSettings() { 
  }

  public HeatmapSettings xAxisBuckets(Integer xAxisBuckets) {
    this.xAxisBuckets = xAxisBuckets;
    return this;
  }

   /**
   * Number of buckets in the X axis
   * @return xAxisBuckets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of buckets in the X axis")
  @JsonProperty(JSON_PROPERTY_X_AXIS_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getxAxisBuckets() {
    return xAxisBuckets;
  }


  @JsonProperty(JSON_PROPERTY_X_AXIS_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setxAxisBuckets(Integer xAxisBuckets) {
    this.xAxisBuckets = xAxisBuckets;
  }


  public HeatmapSettings showLabels(Boolean showLabels) {
    this.showLabels = showLabels;
    return this;
  }

   /**
   * Get showLabels
   * @return showLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SHOW_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowLabels() {
    return showLabels;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShowLabels(Boolean showLabels) {
    this.showLabels = showLabels;
  }


  public HeatmapSettings yAxis(YAxisEnum yAxis) {
    this.yAxis = yAxis;
    return this;
  }

   /**
   * Y axis aggregation criteria
   * @return yAxis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Y axis aggregation criteria")
  @JsonProperty(JSON_PROPERTY_Y_AXIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public YAxisEnum getyAxis() {
    return yAxis;
  }


  @JsonProperty(JSON_PROPERTY_Y_AXIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setyAxis(YAxisEnum yAxis) {
    this.yAxis = yAxis;
  }


  public HeatmapSettings yAxisBuckets(Integer yAxisBuckets) {
    this.yAxisBuckets = yAxisBuckets;
    return this;
  }

   /**
   * Number of buckets in the Y axis
   * @return yAxisBuckets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of buckets in the Y axis")
  @JsonProperty(JSON_PROPERTY_Y_AXIS_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getyAxisBuckets() {
    return yAxisBuckets;
  }


  @JsonProperty(JSON_PROPERTY_Y_AXIS_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setyAxisBuckets(Integer yAxisBuckets) {
    this.yAxisBuckets = yAxisBuckets;
  }


  /**
   * Return true if this HeatmapSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeatmapSettings heatmapSettings = (HeatmapSettings) o;
    return Objects.equals(this.xAxisBuckets, heatmapSettings.xAxisBuckets) &&
        Objects.equals(this.showLabels, heatmapSettings.showLabels) &&
        Objects.equals(this.yAxis, heatmapSettings.yAxis) &&
        Objects.equals(this.yAxisBuckets, heatmapSettings.yAxisBuckets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(xAxisBuckets, showLabels, yAxis, yAxisBuckets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeatmapSettings {\n");
    sb.append("    xAxisBuckets: ").append(toIndentedString(xAxisBuckets)).append("\n");
    sb.append("    showLabels: ").append(toIndentedString(showLabels)).append("\n");
    sb.append("    yAxis: ").append(toIndentedString(yAxis)).append("\n");
    sb.append("    yAxisBuckets: ").append(toIndentedString(yAxisBuckets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

