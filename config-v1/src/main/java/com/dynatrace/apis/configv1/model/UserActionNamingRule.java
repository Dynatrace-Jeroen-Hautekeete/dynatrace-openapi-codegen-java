/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.UserActionNamingRuleCondition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The settings of naming rule.
 */
@ApiModel(description = "The settings of naming rule.")
@JsonPropertyOrder({
  UserActionNamingRule.JSON_PROPERTY_TEMPLATE,
  UserActionNamingRule.JSON_PROPERTY_CONDITIONS,
  UserActionNamingRule.JSON_PROPERTY_USE_OR_CONDITIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserActionNamingRule {
  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private String template;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private List<UserActionNamingRuleCondition> conditions = null;

  public static final String JSON_PROPERTY_USE_OR_CONDITIONS = "useOrConditions";
  private Boolean useOrConditions;

  public UserActionNamingRule() { 
  }

  public UserActionNamingRule template(String template) {
    this.template = template;
    return this;
  }

   /**
   * Naming pattern. Use Curly brackets &#x60;{}&#x60; to select placeholders.
   * @return template
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Naming pattern. Use Curly brackets `{}` to select placeholders.")
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTemplate() {
    return template;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplate(String template) {
    this.template = template;
  }


  public UserActionNamingRule conditions(List<UserActionNamingRuleCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public UserActionNamingRule addConditionsItem(UserActionNamingRuleCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Defines the conditions when the naming rule should apply.
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the conditions when the naming rule should apply.")
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserActionNamingRuleCondition> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(List<UserActionNamingRuleCondition> conditions) {
    this.conditions = conditions;
  }


  public UserActionNamingRule useOrConditions(Boolean useOrConditions) {
    this.useOrConditions = useOrConditions;
    return this;
  }

   /**
   * If set to &#x60;true&#x60; the conditions will be connected by logical OR instead of logical AND.
   * @return useOrConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to `true` the conditions will be connected by logical OR instead of logical AND.")
  @JsonProperty(JSON_PROPERTY_USE_OR_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseOrConditions() {
    return useOrConditions;
  }


  @JsonProperty(JSON_PROPERTY_USE_OR_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseOrConditions(Boolean useOrConditions) {
    this.useOrConditions = useOrConditions;
  }


  /**
   * Return true if this UserActionNamingRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActionNamingRule userActionNamingRule = (UserActionNamingRule) o;
    return Objects.equals(this.template, userActionNamingRule.template) &&
        Objects.equals(this.conditions, userActionNamingRule.conditions) &&
        Objects.equals(this.useOrConditions, userActionNamingRule.useOrConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, conditions, useOrConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActionNamingRule {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    useOrConditions: ").append(toIndentedString(useOrConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

