/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.ApplicationDataPrivacy;
import com.dynatrace.apis.configv1.model.ApplicationDataPrivacyList;
import com.dynatrace.apis.configv1.model.ApplicationErrorRules;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;
import com.dynatrace.apis.configv1.model.KeyUserAction;
import com.dynatrace.apis.configv1.model.KeyUserActionList;
import com.dynatrace.apis.configv1.model.StubList;
import com.dynatrace.apis.configv1.model.WebApplicationConfig;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class RumWebApplicationConfigurationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RumWebApplicationConfigurationApi() {
    this(new ApiClient());
  }

  public RumWebApplicationConfigurationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Marks the user action as a key user action in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @param keyUserAction The JSON body of the request. Contains the action to be marked as a key user action. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createKeyUserAction(String id, KeyUserAction keyUserAction) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createKeyUserActionWithHttpInfo(id, keyUserAction);
    return localVarResponse.getData();
  }

  /**
   * Marks the user action as a key user action in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @param keyUserAction The JSON body of the request. Contains the action to be marked as a key user action. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createKeyUserActionWithHttpInfo(String id, KeyUserAction keyUserAction) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createKeyUserActionRequestBuilder(id, keyUserAction);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createKeyUserAction", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createKeyUserActionRequestBuilder(String id, KeyUserAction keyUserAction) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createKeyUserAction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/keyUserActions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(keyUserAction);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @param webApplicationConfig JSON body of the request, containing the new parameters of the default web application. (optional)
   * @throws ApiException if fails to make API call
   */
  public void createOrUpdateDefaultConfiguration(WebApplicationConfig webApplicationConfig) throws ApiException {
    createOrUpdateDefaultConfigurationWithHttpInfo(webApplicationConfig);
  }

  /**
   * Updates the configuration of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @param webApplicationConfig JSON body of the request, containing the new parameters of the default web application. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createOrUpdateDefaultConfigurationWithHttpInfo(WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateDefaultConfigurationRequestBuilder(webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrUpdateDefaultConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateDefaultConfigurationRequestBuilder(WebApplicationConfig webApplicationConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates a new web application
   * The body must not provide an ID as that will be automatically assigned by Dynatrace server.
   * @param webApplicationConfig JSON body of the request, containing parameters of the new web application configuraiton. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createWebApplicationConfig(WebApplicationConfig webApplicationConfig) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createWebApplicationConfigWithHttpInfo(webApplicationConfig);
    return localVarResponse.getData();
  }

  /**
   * Creates a new web application
   * The body must not provide an ID as that will be automatically assigned by Dynatrace server.
   * @param webApplicationConfig JSON body of the request, containing parameters of the new web application configuraiton. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createWebApplicationConfigWithHttpInfo(WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createWebApplicationConfigRequestBuilder(webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createWebApplicationConfigRequestBuilder(WebApplicationConfig webApplicationConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Removes the specified user action from the list of key user actions in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @param keyUserActionId The ID of the user action to be removed from the key user actions list. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteKeyUserAction(String id, String keyUserActionId) throws ApiException {
    deleteKeyUserActionWithHttpInfo(id, keyUserActionId);
  }

  /**
   * Removes the specified user action from the list of key user actions in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @param keyUserActionId The ID of the user action to be removed from the key user actions list. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteKeyUserActionWithHttpInfo(String id, String keyUserActionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteKeyUserActionRequestBuilder(id, keyUserActionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteKeyUserAction", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteKeyUserActionRequestBuilder(String id, String keyUserActionId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteKeyUserAction");
    }
    // verify the required parameter 'keyUserActionId' is set
    if (keyUserActionId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyUserActionId' when calling deleteKeyUserAction");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/keyUserActions/{keyUserActionId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{keyUserActionId}", ApiClient.urlEncode(keyUserActionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified web application
   * 
   * @param id The ID of the web application to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteWebApplicationConfig(String id) throws ApiException {
    deleteWebApplicationConfigWithHttpInfo(id);
  }

  /**
   * Deletes the specified web application
   * 
   * @param id The ID of the web application to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteWebApplicationConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteWebApplicationConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteWebApplicationConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteWebApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration of error rules in the specified application
   * 
   * @param id The ID of the required web application. (required)
   * @return ApplicationErrorRules
   * @throws ApiException if fails to make API call
   */
  public ApplicationErrorRules getApplicationErrorConfig(String id) throws ApiException {
    ApiResponse<ApplicationErrorRules> localVarResponse = getApplicationErrorConfigWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of error rules in the specified application
   * 
   * @param id The ID of the required web application. (required)
   * @return ApiResponse&lt;ApplicationErrorRules&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApplicationErrorRules> getApplicationErrorConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getApplicationErrorConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getApplicationErrorConfig", localVarResponse);
        }
        return new ApiResponse<ApplicationErrorRules>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ApplicationErrorRules>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getApplicationErrorConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getApplicationErrorConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/errorRules"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the data privacy settings of the specified web application
   * 
   * @param id The ID of the web application where you want to check data privacy settings. (required)
   * @return ApplicationDataPrivacy
   * @throws ApiException if fails to make API call
   */
  public ApplicationDataPrivacy getDataPrivacySettings(String id) throws ApiException {
    ApiResponse<ApplicationDataPrivacy> localVarResponse = getDataPrivacySettingsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the data privacy settings of the specified web application
   * 
   * @param id The ID of the web application where you want to check data privacy settings. (required)
   * @return ApiResponse&lt;ApplicationDataPrivacy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApplicationDataPrivacy> getDataPrivacySettingsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDataPrivacySettingsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<ApplicationDataPrivacy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ApplicationDataPrivacy>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDataPrivacySettingsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getDataPrivacySettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/dataPrivacy"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @return WebApplicationConfig
   * @throws ApiException if fails to make API call
   */
  public WebApplicationConfig getDefaultApplication() throws ApiException {
    ApiResponse<WebApplicationConfig> localVarResponse = getDefaultApplicationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @return ApiResponse&lt;WebApplicationConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WebApplicationConfig> getDefaultApplicationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDefaultApplicationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDefaultApplication", localVarResponse);
        }
        return new ApiResponse<WebApplicationConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WebApplicationConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDefaultApplicationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the data privacy settings of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all the traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @return ApplicationDataPrivacy
   * @throws ApiException if fails to make API call
   */
  public ApplicationDataPrivacy getDefaultApplicationDataPrivacySettings() throws ApiException {
    ApiResponse<ApplicationDataPrivacy> localVarResponse = getDefaultApplicationDataPrivacySettingsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the data privacy settings of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all the traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @return ApiResponse&lt;ApplicationDataPrivacy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApplicationDataPrivacy> getDefaultApplicationDataPrivacySettingsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDefaultApplicationDataPrivacySettingsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDefaultApplicationDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<ApplicationDataPrivacy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ApplicationDataPrivacy>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDefaultApplicationDataPrivacySettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default/dataPrivacy";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration of the specified web application
   * 
   * @param id The ID of the requested web application. (required)
   * @return WebApplicationConfig
   * @throws ApiException if fails to make API call
   */
  public WebApplicationConfig getWebApplicationConfig(String id) throws ApiException {
    ApiResponse<WebApplicationConfig> localVarResponse = getWebApplicationConfigWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of the specified web application
   * 
   * @param id The ID of the requested web application. (required)
   * @return ApiResponse&lt;WebApplicationConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WebApplicationConfig> getWebApplicationConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getWebApplicationConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<WebApplicationConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<WebApplicationConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getWebApplicationConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getWebApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists data privacy settings of all web applications
   * 
   * @return ApplicationDataPrivacyList
   * @throws ApiException if fails to make API call
   */
  public ApplicationDataPrivacyList listDataPrivacySettings() throws ApiException {
    ApiResponse<ApplicationDataPrivacyList> localVarResponse = listDataPrivacySettingsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists data privacy settings of all web applications
   * 
   * @return ApiResponse&lt;ApplicationDataPrivacyList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ApplicationDataPrivacyList> listDataPrivacySettingsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDataPrivacySettingsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<ApplicationDataPrivacyList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ApplicationDataPrivacyList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDataPrivacySettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/dataPrivacy";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of key user actions in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @return KeyUserActionList
   * @throws ApiException if fails to make API call
   */
  public KeyUserActionList listKeyUserActions(String id) throws ApiException {
    ApiResponse<KeyUserActionList> localVarResponse = listKeyUserActionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of key user actions in the specified web application
   * 
   * @param id The ID of the required web application. (required)
   * @return ApiResponse&lt;KeyUserActionList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeyUserActionList> listKeyUserActionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listKeyUserActionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listKeyUserActions", localVarResponse);
        }
        return new ApiResponse<KeyUserActionList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeyUserActionList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listKeyUserActionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listKeyUserActions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/keyUserActions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all existing web applications
   * 
   * @return StubList
   * @throws ApiException if fails to make API call
   */
  public StubList listWebApplicationConfigs() throws ApiException {
    ApiResponse<StubList> localVarResponse = listWebApplicationConfigsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all existing web applications
   * 
   * @return ApiResponse&lt;StubList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StubList> listWebApplicationConfigsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listWebApplicationConfigsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listWebApplicationConfigs", localVarResponse);
        }
        return new ApiResponse<StubList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<StubList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listWebApplicationConfigsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of error rules in the specified application
   * 
   * @param id The ID of the required web application. (required)
   * @param applicationErrorRules The JSON body of the request. Contains the updated configuration of error rules. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateApplicationErrorConfig(String id, ApplicationErrorRules applicationErrorRules) throws ApiException {
    updateApplicationErrorConfigWithHttpInfo(id, applicationErrorRules);
  }

  /**
   * Updates the configuration of error rules in the specified application
   * 
   * @param id The ID of the required web application. (required)
   * @param applicationErrorRules The JSON body of the request. Contains the updated configuration of error rules. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateApplicationErrorConfigWithHttpInfo(String id, ApplicationErrorRules applicationErrorRules) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateApplicationErrorConfigRequestBuilder(id, applicationErrorRules);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateApplicationErrorConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateApplicationErrorConfigRequestBuilder(String id, ApplicationErrorRules applicationErrorRules) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateApplicationErrorConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/errorRules"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(applicationErrorRules);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the data privacy settings of the specified web application
   * 
   * @param id The ID of the web application, where you want to update data privacy settings. (required)
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateDataPrivacySettings(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    updateDataPrivacySettingsWithHttpInfo(id, applicationDataPrivacy);
  }

  /**
   * Updates the data privacy settings of the specified web application
   * 
   * @param id The ID of the web application, where you want to update data privacy settings. (required)
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateDataPrivacySettingsWithHttpInfo(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDataPrivacySettingsRequestBuilder(id, applicationDataPrivacy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDataPrivacySettingsRequestBuilder(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateDataPrivacySettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/dataPrivacy"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(applicationDataPrivacy);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the data privacy settings of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateDefaultApplicationDataPrivacySettings(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    updateDefaultApplicationDataPrivacySettingsWithHttpInfo(applicationDataPrivacy);
  }

  /**
   * Updates the data privacy settings of the default web application
   * Default application is pre-configured in your Dynatrace environment. By default all traffic goes to this application.   After you configure your own applications, all the traffic, which doesn&#39;t fit to any of your applications, goes to the default one.
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateDefaultApplicationDataPrivacySettingsWithHttpInfo(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDefaultApplicationDataPrivacySettingsRequestBuilder(applicationDataPrivacy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDefaultApplicationDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDefaultApplicationDataPrivacySettingsRequestBuilder(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default/dataPrivacy";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(applicationDataPrivacy);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of the specified web application or creates a new one
   * If the application with the specified ID does not exist, a new application will be created.
   * @param id The ID of the web application to update.   If you set the ID in the body as well, it must match this ID. (required)
   * @param webApplicationConfig JSON body of the request, containing updated configuration of the web application. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation updateWebApplicationConfig(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = updateWebApplicationConfigWithHttpInfo(id, webApplicationConfig);
    return localVarResponse.getData();
  }

  /**
   * Updates the configuration of the specified web application or creates a new one
   * If the application with the specified ID does not exist, a new application will be created.
   * @param id The ID of the web application to update.   If you set the ID in the body as well, it must match this ID. (required)
   * @param webApplicationConfig JSON body of the request, containing updated configuration of the web application. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> updateWebApplicationConfigWithHttpInfo(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateWebApplicationConfigRequestBuilder(id, webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateWebApplicationConfigRequestBuilder(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateWebApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the configuration of the web application for the &#x60;POST /applications/web&#x60; request
   * 
   * @param webApplicationConfig JSON body of the request, containing the web application configuration to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateWebApplicationConfig(WebApplicationConfig webApplicationConfig) throws ApiException {
    validateCreateWebApplicationConfigWithHttpInfo(webApplicationConfig);
  }

  /**
   * Validates the configuration of the web application for the &#x60;POST /applications/web&#x60; request
   * 
   * @param webApplicationConfig JSON body of the request, containing the web application configuration to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateWebApplicationConfigWithHttpInfo(WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateWebApplicationConfigRequestBuilder(webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateWebApplicationConfigRequestBuilder(WebApplicationConfig webApplicationConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates data privacy settings for the &#x60;PUT /applications/web/{id}/dataPrivacy&#x60; request
   * 
   * @param id The ID of the web application, where you want to validate data privacy settings. (required)
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateDataPrivacySettings(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    validateDataPrivacySettingsWithHttpInfo(id, applicationDataPrivacy);
  }

  /**
   * Validates data privacy settings for the &#x60;PUT /applications/web/{id}/dataPrivacy&#x60; request
   * 
   * @param id The ID of the web application, where you want to validate data privacy settings. (required)
   * @param applicationDataPrivacy JSON body of the request, containing new data privacy settings. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateDataPrivacySettingsWithHttpInfo(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDataPrivacySettingsRequestBuilder(id, applicationDataPrivacy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDataPrivacySettingsRequestBuilder(String id, ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateDataPrivacySettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/dataPrivacy/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(applicationDataPrivacy);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates data privacy settings of the default web application for the &#x60;PUT /applications/web/default/dataPrivacy&#x60; request
   * 
   * @param applicationDataPrivacy JSON body of the request, containing the data privacy settings to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateDefaultApplicationDataPrivacySettings(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    validateDefaultApplicationDataPrivacySettingsWithHttpInfo(applicationDataPrivacy);
  }

  /**
   * Validates data privacy settings of the default web application for the &#x60;PUT /applications/web/default/dataPrivacy&#x60; request
   * 
   * @param applicationDataPrivacy JSON body of the request, containing the data privacy settings to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateDefaultApplicationDataPrivacySettingsWithHttpInfo(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDefaultApplicationDataPrivacySettingsRequestBuilder(applicationDataPrivacy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDefaultApplicationDataPrivacySettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDefaultApplicationDataPrivacySettingsRequestBuilder(ApplicationDataPrivacy applicationDataPrivacy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default/dataPrivacy/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(applicationDataPrivacy);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the configuration of the default web application for the &#x60;PUT /applications/web/default&#x60; request
   * 
   * @param webApplicationConfig JSON body of the request, containing web application configuration to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateDefaultConfiguration(WebApplicationConfig webApplicationConfig) throws ApiException {
    validateDefaultConfigurationWithHttpInfo(webApplicationConfig);
  }

  /**
   * Validates the configuration of the default web application for the &#x60;PUT /applications/web/default&#x60; request
   * 
   * @param webApplicationConfig JSON body of the request, containing web application configuration to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateDefaultConfigurationWithHttpInfo(WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateDefaultConfigurationRequestBuilder(webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateDefaultConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateDefaultConfigurationRequestBuilder(WebApplicationConfig webApplicationConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/default/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the configuration of the web application for the &#x60;PUT /applications/web/{id}&#x60; request.
   * 
   * @param id The ID of the web application to validate. (required)
   * @param webApplicationConfig JSON body of the request, containing the web application configuration to validate. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateWebApplicationConfig(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    validateUpdateWebApplicationConfigWithHttpInfo(id, webApplicationConfig);
  }

  /**
   * Validates the configuration of the web application for the &#x60;PUT /applications/web/{id}&#x60; request.
   * 
   * @param id The ID of the web application to validate. (required)
   * @param webApplicationConfig JSON body of the request, containing the web application configuration to validate. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateWebApplicationConfigWithHttpInfo(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateWebApplicationConfigRequestBuilder(id, webApplicationConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateWebApplicationConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateWebApplicationConfigRequestBuilder(String id, WebApplicationConfig webApplicationConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateWebApplicationConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/applications/web/{id}/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(webApplicationConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
