/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a predefined event filter.
 */
@ApiModel(description = "Configuration of a predefined event filter.")
@JsonPropertyOrder({
  AlertingPredefinedEventFilter.JSON_PROPERTY_EVENT_TYPE,
  AlertingPredefinedEventFilter.JSON_PROPERTY_NEGATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class AlertingPredefinedEventFilter {
  /**
   * The type of the predefined event.
   */
  public enum EventTypeEnum {
    APPLICATION_ERROR_RATE_INCREASED("APPLICATION_ERROR_RATE_INCREASED"),
    
    APPLICATION_SLOWDOWN("APPLICATION_SLOWDOWN"),
    
    APPLICATION_UNEXPECTED_HIGH_LOAD("APPLICATION_UNEXPECTED_HIGH_LOAD"),
    
    APPLICATION_UNEXPECTED_LOW_LOAD("APPLICATION_UNEXPECTED_LOW_LOAD"),
    
    AWS_LAMBDA_HIGH_ERROR_RATE("AWS_LAMBDA_HIGH_ERROR_RATE"),
    
    CUSTOM_APPLICATION_ERROR_RATE_INCREASED("CUSTOM_APPLICATION_ERROR_RATE_INCREASED"),
    
    CUSTOM_APPLICATION_SLOWDOWN("CUSTOM_APPLICATION_SLOWDOWN"),
    
    CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD("CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD"),
    
    CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD("CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD"),
    
    CUSTOM_APP_CRASH_RATE_INCREASED("CUSTOM_APP_CRASH_RATE_INCREASED"),
    
    DATABASE_CONNECTION_FAILURE("DATABASE_CONNECTION_FAILURE"),
    
    EBS_VOLUME_HIGH_LATENCY("EBS_VOLUME_HIGH_LATENCY"),
    
    EC2_HIGH_CPU("EC2_HIGH_CPU"),
    
    ELB_HIGH_BACKEND_ERROR_RATE("ELB_HIGH_BACKEND_ERROR_RATE"),
    
    ESXI_GUEST_ACTIVE_SWAP_WAIT("ESXI_GUEST_ACTIVE_SWAP_WAIT"),
    
    ESXI_GUEST_CPU_LIMIT_REACHED("ESXI_GUEST_CPU_LIMIT_REACHED"),
    
    ESXI_HOST_CPU_SATURATION("ESXI_HOST_CPU_SATURATION"),
    
    ESXI_HOST_DATASTORE_LOW_DISK_SPACE("ESXI_HOST_DATASTORE_LOW_DISK_SPACE"),
    
    ESXI_HOST_DISK_QUEUE_SLOW("ESXI_HOST_DISK_QUEUE_SLOW"),
    
    ESXI_HOST_DISK_SLOW("ESXI_HOST_DISK_SLOW"),
    
    ESXI_HOST_MEMORY_SATURATION("ESXI_HOST_MEMORY_SATURATION"),
    
    ESXI_HOST_NETWORK_PROBLEMS("ESXI_HOST_NETWORK_PROBLEMS"),
    
    ESXI_HOST_OVERLOADED_STORAGE("ESXI_HOST_OVERLOADED_STORAGE"),
    
    ESXI_VM_IMPACT_HOST_CPU_SATURATION("ESXI_VM_IMPACT_HOST_CPU_SATURATION"),
    
    ESXI_VM_IMPACT_HOST_MEMORY_SATURATION("ESXI_VM_IMPACT_HOST_MEMORY_SATURATION"),
    
    EXTERNAL_SYNTHETIC_TEST_OUTAGE("EXTERNAL_SYNTHETIC_TEST_OUTAGE"),
    
    EXTERNAL_SYNTHETIC_TEST_SLOWDOWN("EXTERNAL_SYNTHETIC_TEST_SLOWDOWN"),
    
    HOST_OF_SERVICE_UNAVAILABLE("HOST_OF_SERVICE_UNAVAILABLE"),
    
    HTTP_CHECK_GLOBAL_OUTAGE("HTTP_CHECK_GLOBAL_OUTAGE"),
    
    HTTP_CHECK_LOCAL_OUTAGE("HTTP_CHECK_LOCAL_OUTAGE"),
    
    HTTP_CHECK_TEST_LOCATION_SLOWDOWN("HTTP_CHECK_TEST_LOCATION_SLOWDOWN"),
    
    MOBILE_APPLICATION_ERROR_RATE_INCREASED("MOBILE_APPLICATION_ERROR_RATE_INCREASED"),
    
    MOBILE_APPLICATION_SLOWDOWN("MOBILE_APPLICATION_SLOWDOWN"),
    
    MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD("MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD"),
    
    MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD("MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD"),
    
    MOBILE_APP_CRASH_RATE_INCREASED("MOBILE_APP_CRASH_RATE_INCREASED"),
    
    MONITORING_UNAVAILABLE("MONITORING_UNAVAILABLE"),
    
    OSI_DISK_LOW_INODES("OSI_DISK_LOW_INODES"),
    
    OSI_GRACEFULLY_SHUTDOWN("OSI_GRACEFULLY_SHUTDOWN"),
    
    OSI_HIGH_CPU("OSI_HIGH_CPU"),
    
    OSI_HIGH_MEMORY("OSI_HIGH_MEMORY"),
    
    OSI_LOW_DISK_SPACE("OSI_LOW_DISK_SPACE"),
    
    OSI_NIC_DROPPED_PACKETS_HIGH("OSI_NIC_DROPPED_PACKETS_HIGH"),
    
    OSI_NIC_ERRORS_HIGH("OSI_NIC_ERRORS_HIGH"),
    
    OSI_NIC_UTILIZATION_HIGH("OSI_NIC_UTILIZATION_HIGH"),
    
    OSI_SLOW_DISK("OSI_SLOW_DISK"),
    
    OSI_UNEXPECTEDLY_UNAVAILABLE("OSI_UNEXPECTEDLY_UNAVAILABLE"),
    
    PGI_OF_SERVICE_UNAVAILABLE("PGI_OF_SERVICE_UNAVAILABLE"),
    
    PGI_UNAVAILABLE("PGI_UNAVAILABLE"),
    
    PG_LOW_INSTANCE_COUNT("PG_LOW_INSTANCE_COUNT"),
    
    PROCESS_CRASHED("PROCESS_CRASHED"),
    
    PROCESS_HIGH_GC_ACTIVITY("PROCESS_HIGH_GC_ACTIVITY"),
    
    PROCESS_MEMORY_RESOURCE_EXHAUSTED("PROCESS_MEMORY_RESOURCE_EXHAUSTED"),
    
    PROCESS_NA_HIGH_CONN_FAIL_RATE("PROCESS_NA_HIGH_CONN_FAIL_RATE"),
    
    PROCESS_NA_HIGH_LOSS_RATE("PROCESS_NA_HIGH_LOSS_RATE"),
    
    PROCESS_THREADS_RESOURCE_EXHAUSTED("PROCESS_THREADS_RESOURCE_EXHAUSTED"),
    
    RDS_HIGH_CPU("RDS_HIGH_CPU"),
    
    RDS_HIGH_LATENCY("RDS_HIGH_LATENCY"),
    
    RDS_LOW_MEMORY("RDS_LOW_MEMORY"),
    
    RDS_LOW_STORAGE_SPACE("RDS_LOW_STORAGE_SPACE"),
    
    RDS_OF_SERVICE_UNAVAILABLE("RDS_OF_SERVICE_UNAVAILABLE"),
    
    RDS_RESTART_SEQUENCE("RDS_RESTART_SEQUENCE"),
    
    SERVICE_ERROR_RATE_INCREASED("SERVICE_ERROR_RATE_INCREASED"),
    
    SERVICE_SLOWDOWN("SERVICE_SLOWDOWN"),
    
    SERVICE_UNEXPECTED_HIGH_LOAD("SERVICE_UNEXPECTED_HIGH_LOAD"),
    
    SERVICE_UNEXPECTED_LOW_LOAD("SERVICE_UNEXPECTED_LOW_LOAD"),
    
    SYNTHETIC_GLOBAL_OUTAGE("SYNTHETIC_GLOBAL_OUTAGE"),
    
    SYNTHETIC_LOCAL_OUTAGE("SYNTHETIC_LOCAL_OUTAGE"),
    
    SYNTHETIC_NODE_OUTAGE("SYNTHETIC_NODE_OUTAGE"),
    
    SYNTHETIC_PRIVATE_LOCATION_OUTAGE("SYNTHETIC_PRIVATE_LOCATION_OUTAGE"),
    
    SYNTHETIC_TEST_LOCATION_SLOWDOWN("SYNTHETIC_TEST_LOCATION_SLOWDOWN");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private EventTypeEnum eventType;

  public static final String JSON_PROPERTY_NEGATE = "negate";
  private Boolean negate;

  public AlertingPredefinedEventFilter() { 
  }

  public AlertingPredefinedEventFilter eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the predefined event.
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the predefined event.")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public AlertingPredefinedEventFilter negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

   /**
   * The alert triggers when the problem of specified severity arises while the specified event **is** happening (&#x60;false&#x60;) or while the specified event is **not** happening (&#x60;true&#x60;).    For example, if you chose the Slowdown (&#x60;PERFORMANCE&#x60;) severity and Unexpected high traffic (&#x60;APPLICATION_UNEXPECTED_HIGH_LOAD&#x60;) event with **negate** set to &#x60;true&#x60;, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.   Consider the following use case as an example. The Slowdown (&#x60;PERFORMANCE&#x60;) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (&#x60;APPLICATION_UNEXPECTED_HIGH_LOAD&#x60;) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to &#x60;false&#x60;: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to &#x60;true&#x60;: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.   * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events.
   * @return negate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).    For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.   Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.   * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events.")
  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getNegate() {
    return negate;
  }


  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  /**
   * Return true if this AlertingPredefinedEventFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertingPredefinedEventFilter alertingPredefinedEventFilter = (AlertingPredefinedEventFilter) o;
    return Objects.equals(this.eventType, alertingPredefinedEventFilter.eventType) &&
        Objects.equals(this.negate, alertingPredefinedEventFilter.negate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, negate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertingPredefinedEventFilter {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

