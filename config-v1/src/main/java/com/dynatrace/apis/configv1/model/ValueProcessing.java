/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.ExtractSubstring;
import com.dynatrace.apis.configv1.model.ValueCondition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Process values as specified.
 */
@ApiModel(description = "Process values as specified.")
@JsonPropertyOrder({
  ValueProcessing.JSON_PROPERTY_VALUE_CONDITION,
  ValueProcessing.JSON_PROPERTY_VALUE_EXTRACTOR_REGEX,
  ValueProcessing.JSON_PROPERTY_SPLIT_AT,
  ValueProcessing.JSON_PROPERTY_TRIM,
  ValueProcessing.JSON_PROPERTY_EXTRACT_SUBSTRING
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ValueProcessing {
  public static final String JSON_PROPERTY_VALUE_CONDITION = "valueCondition";
  private ValueCondition valueCondition;

  public static final String JSON_PROPERTY_VALUE_EXTRACTOR_REGEX = "valueExtractorRegex";
  private String valueExtractorRegex;

  public static final String JSON_PROPERTY_SPLIT_AT = "splitAt";
  private String splitAt;

  public static final String JSON_PROPERTY_TRIM = "trim";
  private Boolean trim;

  public static final String JSON_PROPERTY_EXTRACT_SUBSTRING = "extractSubstring";
  private ExtractSubstring extractSubstring;

  public ValueProcessing() { 
  }

  public ValueProcessing valueCondition(ValueCondition valueCondition) {
    this.valueCondition = valueCondition;
    return this;
  }

   /**
   * Get valueCondition
   * @return valueCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueCondition getValueCondition() {
    return valueCondition;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueCondition(ValueCondition valueCondition) {
    this.valueCondition = valueCondition;
  }


  public ValueProcessing valueExtractorRegex(String valueExtractorRegex) {
    this.valueExtractorRegex = valueExtractorRegex;
    return this;
  }

   /**
   * Extract value from captured data per regex.
   * @return valueExtractorRegex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extract value from captured data per regex.")
  @JsonProperty(JSON_PROPERTY_VALUE_EXTRACTOR_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValueExtractorRegex() {
    return valueExtractorRegex;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_EXTRACTOR_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueExtractorRegex(String valueExtractorRegex) {
    this.valueExtractorRegex = valueExtractorRegex;
  }


  public ValueProcessing splitAt(String splitAt) {
    this.splitAt = splitAt;
    return this;
  }

   /**
   * Split (preprocessed) string values at this separator.
   * @return splitAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Split (preprocessed) string values at this separator.")
  @JsonProperty(JSON_PROPERTY_SPLIT_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSplitAt() {
    return splitAt;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitAt(String splitAt) {
    this.splitAt = splitAt;
  }


  public ValueProcessing trim(Boolean trim) {
    this.trim = trim;
    return this;
  }

   /**
   * Prune Whitespaces. Defaults to false.
   * @return trim
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Prune Whitespaces. Defaults to false.")
  @JsonProperty(JSON_PROPERTY_TRIM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTrim() {
    return trim;
  }


  @JsonProperty(JSON_PROPERTY_TRIM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrim(Boolean trim) {
    this.trim = trim;
  }


  public ValueProcessing extractSubstring(ExtractSubstring extractSubstring) {
    this.extractSubstring = extractSubstring;
    return this;
  }

   /**
   * Get extractSubstring
   * @return extractSubstring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXTRACT_SUBSTRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtractSubstring getExtractSubstring() {
    return extractSubstring;
  }


  @JsonProperty(JSON_PROPERTY_EXTRACT_SUBSTRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtractSubstring(ExtractSubstring extractSubstring) {
    this.extractSubstring = extractSubstring;
  }


  /**
   * Return true if this ValueProcessing object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueProcessing valueProcessing = (ValueProcessing) o;
    return Objects.equals(this.valueCondition, valueProcessing.valueCondition) &&
        Objects.equals(this.valueExtractorRegex, valueProcessing.valueExtractorRegex) &&
        Objects.equals(this.splitAt, valueProcessing.splitAt) &&
        Objects.equals(this.trim, valueProcessing.trim) &&
        Objects.equals(this.extractSubstring, valueProcessing.extractSubstring);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valueCondition, valueExtractorRegex, splitAt, trim, extractSubstring);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueProcessing {\n");
    sb.append("    valueCondition: ").append(toIndentedString(valueCondition)).append("\n");
    sb.append("    valueExtractorRegex: ").append(toIndentedString(valueExtractorRegex)).append("\n");
    sb.append("    splitAt: ").append(toIndentedString(splitAt)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    extractSubstring: ").append(toIndentedString(extractSubstring)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

