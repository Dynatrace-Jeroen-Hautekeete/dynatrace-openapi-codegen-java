/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.UniversalTagKey;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Use only request attributes from services that have this tag. Use either this or &#x60;managementZone&#x60;
 */
@ApiModel(description = "Use only request attributes from services that have this tag. Use either this or `managementZone`")
@JsonPropertyOrder({
  UniversalTag.JSON_PROPERTY_TAG_KEY,
  UniversalTag.JSON_PROPERTY_VALUE,
  UniversalTag.JSON_PROPERTY_KEY,
  UniversalTag.JSON_PROPERTY_CONTEXT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UniversalTag {
  public static final String JSON_PROPERTY_TAG_KEY = "tagKey";
  private UniversalTagKey tagKey;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  /**
   * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the &#x60;CONTEXTLESS&#x60; value.   The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, &#x60;CONTEXTLESS&#x60; set.
   */
  public enum ContextEnum {
    AWS("AWS"),
    
    AWS_GENERIC("AWS_GENERIC"),
    
    AZURE("AZURE"),
    
    CLOUD_FOUNDRY("CLOUD_FOUNDRY"),
    
    CONTEXTLESS("CONTEXTLESS"),
    
    ENVIRONMENT("ENVIRONMENT"),
    
    GOOGLE_COMPUTE_ENGINE("GOOGLE_COMPUTE_ENGINE"),
    
    KUBERNETES("KUBERNETES");

    private String value;

    ContextEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContextEnum fromValue(String value) {
      for (ContextEnum b : ContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTEXT = "context";
  private ContextEnum context;

  public UniversalTag() { 
  }

  public UniversalTag tagKey(UniversalTagKey tagKey) {
    this.tagKey = tagKey;
    return this;
  }

   /**
   * Get tagKey
   * @return tagKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TAG_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UniversalTagKey getTagKey() {
    return tagKey;
  }


  @JsonProperty(JSON_PROPERTY_TAG_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagKey(UniversalTagKey tagKey) {
    this.tagKey = tagKey;
  }


  public UniversalTag value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the tag. Not applicable to custom tags.   If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value of the tag. Not applicable to custom tags.   If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }


  public UniversalTag key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The key of the tag. For custom tags, put the tag value here.  The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags.
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The key of the tag. For custom tags, put the tag value here.  The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags.")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  public UniversalTag context(ContextEnum context) {
    this.context = context;
    return this;
  }

   /**
   * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the &#x60;CONTEXTLESS&#x60; value.   The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, &#x60;CONTEXTLESS&#x60; set.
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value.   The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set.")
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContextEnum getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(ContextEnum context) {
    this.context = context;
  }


  /**
   * Return true if this UniversalTag object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UniversalTag universalTag = (UniversalTag) o;
    return Objects.equals(this.tagKey, universalTag.tagKey) &&
        Objects.equals(this.value, universalTag.value) &&
        Objects.equals(this.key, universalTag.key) &&
        Objects.equals(this.context, universalTag.context);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagKey, value, key, context);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UniversalTag {\n");
    sb.append("    tagKey: ").append(toIndentedString(tagKey)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

