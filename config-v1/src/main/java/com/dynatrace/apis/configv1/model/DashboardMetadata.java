/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.DashboardFilter;
import com.dynatrace.apis.configv1.model.DynamicFilters;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameters of a dashboard.
 */
@ApiModel(description = "Parameters of a dashboard.")
@JsonPropertyOrder({
  DashboardMetadata.JSON_PROPERTY_NAME,
  DashboardMetadata.JSON_PROPERTY_SHARED,
  DashboardMetadata.JSON_PROPERTY_OWNER,
  DashboardMetadata.JSON_PROPERTY_DASHBOARD_FILTER,
  DashboardMetadata.JSON_PROPERTY_TAGS,
  DashboardMetadata.JSON_PROPERTY_PRESET,
  DashboardMetadata.JSON_PROPERTY_DYNAMIC_FILTERS,
  DashboardMetadata.JSON_PROPERTY_TILES_NAME_SIZE,
  DashboardMetadata.JSON_PROPERTY_HAS_CONSISTENT_COLORS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DashboardMetadata {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SHARED = "shared";
  private Boolean shared;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;

  public static final String JSON_PROPERTY_DASHBOARD_FILTER = "dashboardFilter";
  private DashboardFilter dashboardFilter;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Set<String> tags = null;

  public static final String JSON_PROPERTY_PRESET = "preset";
  private Boolean preset;

  public static final String JSON_PROPERTY_DYNAMIC_FILTERS = "dynamicFilters";
  private DynamicFilters dynamicFilters;

  /**
   * The general size of the tiles tile. Default value is medium
   */
  public enum TilesNameSizeEnum {
    SMALL("small"),
    
    MEDIUM("medium"),
    
    LARGE("large");

    private String value;

    TilesNameSizeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TilesNameSizeEnum fromValue(String value) {
      for (TilesNameSizeEnum b : TilesNameSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TILES_NAME_SIZE = "tilesNameSize";
  private TilesNameSizeEnum tilesNameSize;

  public static final String JSON_PROPERTY_HAS_CONSISTENT_COLORS = "hasConsistentColors";
  private Boolean hasConsistentColors;

  public DashboardMetadata() { 
  }

  public DashboardMetadata name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the dashboard.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the dashboard.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public DashboardMetadata shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

   /**
   * The dashboard is shared (&#x60;true&#x60;) or private (&#x60;false&#x60;).
   * @return shared
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dashboard is shared (`true`) or private (`false`).")
  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShared() {
    return shared;
  }


  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public DashboardMetadata owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the dashboard.
   * @return owner
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the dashboard.")
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwner() {
    return owner;
  }


  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwner(String owner) {
    this.owner = owner;
  }


  public DashboardMetadata dashboardFilter(DashboardFilter dashboardFilter) {
    this.dashboardFilter = dashboardFilter;
    return this;
  }

   /**
   * Get dashboardFilter
   * @return dashboardFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DASHBOARD_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DashboardFilter getDashboardFilter() {
    return dashboardFilter;
  }


  @JsonProperty(JSON_PROPERTY_DASHBOARD_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDashboardFilter(DashboardFilter dashboardFilter) {
    this.dashboardFilter = dashboardFilter;
  }


  public DashboardMetadata tags(Set<String> tags) {
    this.tags = tags;
    return this;
  }

  public DashboardMetadata addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new LinkedHashSet<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * A set of tags assigned to the dashboard.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of tags assigned to the dashboard.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getTags() {
    return tags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(Set<String> tags) {
    this.tags = tags;
  }


  public DashboardMetadata preset(Boolean preset) {
    this.preset = preset;
    return this;
  }

   /**
   * The dashboard is a preset (&#x60;true&#x60;) or a custom (&#x60;false&#x60;) dashboard.
   * @return preset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dashboard is a preset (`true`) or a custom (`false`) dashboard.")
  @JsonProperty(JSON_PROPERTY_PRESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreset() {
    return preset;
  }


  @JsonProperty(JSON_PROPERTY_PRESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreset(Boolean preset) {
    this.preset = preset;
  }


  public DashboardMetadata dynamicFilters(DynamicFilters dynamicFilters) {
    this.dynamicFilters = dynamicFilters;
    return this;
  }

   /**
   * Get dynamicFilters
   * @return dynamicFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DYNAMIC_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DynamicFilters getDynamicFilters() {
    return dynamicFilters;
  }


  @JsonProperty(JSON_PROPERTY_DYNAMIC_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDynamicFilters(DynamicFilters dynamicFilters) {
    this.dynamicFilters = dynamicFilters;
  }


  public DashboardMetadata tilesNameSize(TilesNameSizeEnum tilesNameSize) {
    this.tilesNameSize = tilesNameSize;
    return this;
  }

   /**
   * The general size of the tiles tile. Default value is medium
   * @return tilesNameSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The general size of the tiles tile. Default value is medium")
  @JsonProperty(JSON_PROPERTY_TILES_NAME_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TilesNameSizeEnum getTilesNameSize() {
    return tilesNameSize;
  }


  @JsonProperty(JSON_PROPERTY_TILES_NAME_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTilesNameSize(TilesNameSizeEnum tilesNameSize) {
    this.tilesNameSize = tilesNameSize;
  }


  public DashboardMetadata hasConsistentColors(Boolean hasConsistentColors) {
    this.hasConsistentColors = hasConsistentColors;
    return this;
  }

   /**
   * The tile uses consistent colors when rendering its content.
   * @return hasConsistentColors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tile uses consistent colors when rendering its content.")
  @JsonProperty(JSON_PROPERTY_HAS_CONSISTENT_COLORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasConsistentColors() {
    return hasConsistentColors;
  }


  @JsonProperty(JSON_PROPERTY_HAS_CONSISTENT_COLORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasConsistentColors(Boolean hasConsistentColors) {
    this.hasConsistentColors = hasConsistentColors;
  }


  /**
   * Return true if this DashboardMetadata object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardMetadata dashboardMetadata = (DashboardMetadata) o;
    return Objects.equals(this.name, dashboardMetadata.name) &&
        Objects.equals(this.shared, dashboardMetadata.shared) &&
        Objects.equals(this.owner, dashboardMetadata.owner) &&
        Objects.equals(this.dashboardFilter, dashboardMetadata.dashboardFilter) &&
        Objects.equals(this.tags, dashboardMetadata.tags) &&
        Objects.equals(this.preset, dashboardMetadata.preset) &&
        Objects.equals(this.dynamicFilters, dashboardMetadata.dynamicFilters) &&
        Objects.equals(this.tilesNameSize, dashboardMetadata.tilesNameSize) &&
        Objects.equals(this.hasConsistentColors, dashboardMetadata.hasConsistentColors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, shared, owner, dashboardFilter, tags, preset, dynamicFilters, tilesNameSize, hasConsistentColors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    dashboardFilter: ").append(toIndentedString(dashboardFilter)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    preset: ").append(toIndentedString(preset)).append("\n");
    sb.append("    dynamicFilters: ").append(toIndentedString(dynamicFilters)).append("\n");
    sb.append("    tilesNameSize: ").append(toIndentedString(tilesNameSize)).append("\n");
    sb.append("    hasConsistentColors: ").append(toIndentedString(hasConsistentColors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

