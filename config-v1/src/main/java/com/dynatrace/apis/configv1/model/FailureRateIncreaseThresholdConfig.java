/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Fixed thresholds for failure rate increase detection.    Required if **detectionMode** is &#x60;DETECT_USING_FIXED_THRESHOLDS&#x60;. Not applicable otherwise.
 */
@ApiModel(description = "Fixed thresholds for failure rate increase detection.    Required if **detectionMode** is `DETECT_USING_FIXED_THRESHOLDS`. Not applicable otherwise.")
@JsonPropertyOrder({
  FailureRateIncreaseThresholdConfig.JSON_PROPERTY_THRESHOLD,
  FailureRateIncreaseThresholdConfig.JSON_PROPERTY_SENSITIVITY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class FailureRateIncreaseThresholdConfig {
  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private Integer threshold;

  /**
   * Sensitivity of the threshold.   With &#x60;low&#x60; sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won&#39;t trigger alerts.   With &#x60;high&#x60; sensitivity, no statistical confidence is used. Each violation triggers alert.
   */
  public enum SensitivityEnum {
    HIGH("HIGH"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM");

    private String value;

    SensitivityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SensitivityEnum fromValue(String value) {
      for (SensitivityEnum b : SensitivityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SENSITIVITY = "sensitivity";
  private SensitivityEnum sensitivity;

  public FailureRateIncreaseThresholdConfig() { 
  }

  public FailureRateIncreaseThresholdConfig threshold(Integer threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * Failure rate during any 5-minute period to trigger an alert, %.
   * minimum: 0
   * maximum: 1000
   * @return threshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Failure rate during any 5-minute period to trigger an alert, %.")
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  public FailureRateIncreaseThresholdConfig sensitivity(SensitivityEnum sensitivity) {
    this.sensitivity = sensitivity;
    return this;
  }

   /**
   * Sensitivity of the threshold.   With &#x60;low&#x60; sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won&#39;t trigger alerts.   With &#x60;high&#x60; sensitivity, no statistical confidence is used. Each violation triggers alert.
   * @return sensitivity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Sensitivity of the threshold.   With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.   With `high` sensitivity, no statistical confidence is used. Each violation triggers alert.")
  @JsonProperty(JSON_PROPERTY_SENSITIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SensitivityEnum getSensitivity() {
    return sensitivity;
  }


  @JsonProperty(JSON_PROPERTY_SENSITIVITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSensitivity(SensitivityEnum sensitivity) {
    this.sensitivity = sensitivity;
  }


  /**
   * Return true if this FailureRateIncreaseThresholdConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailureRateIncreaseThresholdConfig failureRateIncreaseThresholdConfig = (FailureRateIncreaseThresholdConfig) o;
    return Objects.equals(this.threshold, failureRateIncreaseThresholdConfig.threshold) &&
        Objects.equals(this.sensitivity, failureRateIncreaseThresholdConfig.sensitivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(threshold, sensitivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailureRateIncreaseThresholdConfig {\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    sensitivity: ").append(toIndentedString(sensitivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

