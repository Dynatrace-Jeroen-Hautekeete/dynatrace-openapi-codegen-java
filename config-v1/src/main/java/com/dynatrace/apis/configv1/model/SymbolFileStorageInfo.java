/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SymbolFileStorageInfo
 */
@JsonPropertyOrder({
  SymbolFileStorageInfo.JSON_PROPERTY_USED_STORAGE,
  SymbolFileStorageInfo.JSON_PROPERTY_AVAILABLE_STORAGE,
  SymbolFileStorageInfo.JSON_PROPERTY_STORAGE_QUOTA,
  SymbolFileStorageInfo.JSON_PROPERTY_FILE_COUNT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class SymbolFileStorageInfo {
  public static final String JSON_PROPERTY_USED_STORAGE = "usedStorage";
  private Long usedStorage;

  public static final String JSON_PROPERTY_AVAILABLE_STORAGE = "availableStorage";
  private Long availableStorage;

  public static final String JSON_PROPERTY_STORAGE_QUOTA = "storageQuota";
  private Long storageQuota;

  public static final String JSON_PROPERTY_FILE_COUNT = "fileCount";
  private Long fileCount;

  public SymbolFileStorageInfo() { 
  }

  public SymbolFileStorageInfo usedStorage(Long usedStorage) {
    this.usedStorage = usedStorage;
    return this;
  }

   /**
   * The size of the used storage by symbolication files in KB
   * @return usedStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the used storage by symbolication files in KB")
  @JsonProperty(JSON_PROPERTY_USED_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedStorage() {
    return usedStorage;
  }


  @JsonProperty(JSON_PROPERTY_USED_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedStorage(Long usedStorage) {
    this.usedStorage = usedStorage;
  }


  public SymbolFileStorageInfo availableStorage(Long availableStorage) {
    this.availableStorage = availableStorage;
    return this;
  }

   /**
   * The storage space still empty which can be used for symbolication files in KB, -1 if quota is set to &#39;unlimited&#39;
   * @return availableStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The storage space still empty which can be used for symbolication files in KB, -1 if quota is set to 'unlimited'")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAvailableStorage() {
    return availableStorage;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableStorage(Long availableStorage) {
    this.availableStorage = availableStorage;
  }


  public SymbolFileStorageInfo storageQuota(Long storageQuota) {
    this.storageQuota = storageQuota;
    return this;
  }

   /**
   * The total storage quota available on this tenant for symbolication files in KB, -1 if quota is set to &#39;unlimited&#39;
   * @return storageQuota
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total storage quota available on this tenant for symbolication files in KB, -1 if quota is set to 'unlimited'")
  @JsonProperty(JSON_PROPERTY_STORAGE_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStorageQuota() {
    return storageQuota;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageQuota(Long storageQuota) {
    this.storageQuota = storageQuota;
  }


  public SymbolFileStorageInfo fileCount(Long fileCount) {
    this.fileCount = fileCount;
    return this;
  }

   /**
   * Get fileCount
   * @return fileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileCount() {
    return fileCount;
  }


  @JsonProperty(JSON_PROPERTY_FILE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileCount(Long fileCount) {
    this.fileCount = fileCount;
  }


  /**
   * Return true if this SymbolFileStorageInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolFileStorageInfo symbolFileStorageInfo = (SymbolFileStorageInfo) o;
    return Objects.equals(this.usedStorage, symbolFileStorageInfo.usedStorage) &&
        Objects.equals(this.availableStorage, symbolFileStorageInfo.availableStorage) &&
        Objects.equals(this.storageQuota, symbolFileStorageInfo.storageQuota) &&
        Objects.equals(this.fileCount, symbolFileStorageInfo.fileCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usedStorage, availableStorage, storageQuota, fileCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolFileStorageInfo {\n");
    sb.append("    usedStorage: ").append(toIndentedString(usedStorage)).append("\n");
    sb.append("    availableStorage: ").append(toIndentedString(availableStorage)).append("\n");
    sb.append("    storageQuota: ").append(toIndentedString(storageQuota)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

