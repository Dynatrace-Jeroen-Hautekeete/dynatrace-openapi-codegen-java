/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.Axes;
import com.dynatrace.apis.configv1.model.GraphChartSettings;
import com.dynatrace.apis.configv1.model.HeatmapSettings;
import com.dynatrace.apis.configv1.model.HoneycombSettings;
import com.dynatrace.apis.configv1.model.SingleValueSettings;
import com.dynatrace.apis.configv1.model.TableSettings;
import com.dynatrace.apis.configv1.model.VisualizationGlobalProperties;
import com.dynatrace.apis.configv1.model.VisualizationRule;
import com.dynatrace.apis.configv1.model.VisualizationThreshold;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a visualization.
 */
@ApiModel(description = "Configuration of a visualization.")
@JsonPropertyOrder({
  VisualizationConfiguration.JSON_PROPERTY_TYPE,
  VisualizationConfiguration.JSON_PROPERTY_GLOBAL,
  VisualizationConfiguration.JSON_PROPERTY_RULES,
  VisualizationConfiguration.JSON_PROPERTY_AXES,
  VisualizationConfiguration.JSON_PROPERTY_HEATMAP_SETTINGS,
  VisualizationConfiguration.JSON_PROPERTY_SINGLE_VALUE_SETTINGS,
  VisualizationConfiguration.JSON_PROPERTY_THRESHOLDS,
  VisualizationConfiguration.JSON_PROPERTY_TABLE_SETTINGS,
  VisualizationConfiguration.JSON_PROPERTY_GRAPH_CHART_SETTINGS,
  VisualizationConfiguration.JSON_PROPERTY_HONEYCOMB_SETTINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class VisualizationConfiguration {
  /**
   * The id of the query
   */
  public enum TypeEnum {
    GRAPH_CHART("GRAPH_CHART"),
    
    HEATMAP("HEATMAP"),
    
    HONEYCOMB("HONEYCOMB"),
    
    PIE_CHART("PIE_CHART"),
    
    SINGLE_VALUE("SINGLE_VALUE"),
    
    STACKED_AREA("STACKED_AREA"),
    
    STACKED_COLUMN("STACKED_COLUMN"),
    
    TABLE("TABLE"),
    
    TOP_LIST("TOP_LIST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_GLOBAL = "global";
  private VisualizationGlobalProperties global;

  public static final String JSON_PROPERTY_RULES = "rules";
  private List<VisualizationRule> rules = new ArrayList<>();

  public static final String JSON_PROPERTY_AXES = "axes";
  private Axes axes;

  public static final String JSON_PROPERTY_HEATMAP_SETTINGS = "heatmapSettings";
  private HeatmapSettings heatmapSettings;

  public static final String JSON_PROPERTY_SINGLE_VALUE_SETTINGS = "singleValueSettings";
  private SingleValueSettings singleValueSettings;

  public static final String JSON_PROPERTY_THRESHOLDS = "thresholds";
  private List<VisualizationThreshold> thresholds = null;

  public static final String JSON_PROPERTY_TABLE_SETTINGS = "tableSettings";
  private TableSettings tableSettings;

  public static final String JSON_PROPERTY_GRAPH_CHART_SETTINGS = "graphChartSettings";
  private GraphChartSettings graphChartSettings;

  public static final String JSON_PROPERTY_HONEYCOMB_SETTINGS = "honeycombSettings";
  private HoneycombSettings honeycombSettings;

  public VisualizationConfiguration() { 
  }

  public VisualizationConfiguration type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The id of the query
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the query")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public VisualizationConfiguration global(VisualizationGlobalProperties global) {
    this.global = global;
    return this;
  }

   /**
   * Get global
   * @return global
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisualizationGlobalProperties getGlobal() {
    return global;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobal(VisualizationGlobalProperties global) {
    this.global = global;
  }


  public VisualizationConfiguration rules(List<VisualizationRule> rules) {
    this.rules = rules;
    return this;
  }

  public VisualizationConfiguration addRulesItem(VisualizationRule rulesItem) {
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Rules for Visualization
   * @return rules
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Rules for Visualization")
  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<VisualizationRule> getRules() {
    return rules;
  }


  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRules(List<VisualizationRule> rules) {
    this.rules = rules;
  }


  public VisualizationConfiguration axes(Axes axes) {
    this.axes = axes;
    return this;
  }

   /**
   * Get axes
   * @return axes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Axes getAxes() {
    return axes;
  }


  @JsonProperty(JSON_PROPERTY_AXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxes(Axes axes) {
    this.axes = axes;
  }


  public VisualizationConfiguration heatmapSettings(HeatmapSettings heatmapSettings) {
    this.heatmapSettings = heatmapSettings;
    return this;
  }

   /**
   * Get heatmapSettings
   * @return heatmapSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HEATMAP_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HeatmapSettings getHeatmapSettings() {
    return heatmapSettings;
  }


  @JsonProperty(JSON_PROPERTY_HEATMAP_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeatmapSettings(HeatmapSettings heatmapSettings) {
    this.heatmapSettings = heatmapSettings;
  }


  public VisualizationConfiguration singleValueSettings(SingleValueSettings singleValueSettings) {
    this.singleValueSettings = singleValueSettings;
    return this;
  }

   /**
   * Get singleValueSettings
   * @return singleValueSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SINGLE_VALUE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SingleValueSettings getSingleValueSettings() {
    return singleValueSettings;
  }


  @JsonProperty(JSON_PROPERTY_SINGLE_VALUE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleValueSettings(SingleValueSettings singleValueSettings) {
    this.singleValueSettings = singleValueSettings;
  }


  public VisualizationConfiguration thresholds(List<VisualizationThreshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public VisualizationConfiguration addThresholdsItem(VisualizationThreshold thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

   /**
   * Thresholds for Visualization
   * @return thresholds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Thresholds for Visualization")
  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VisualizationThreshold> getThresholds() {
    return thresholds;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThresholds(List<VisualizationThreshold> thresholds) {
    this.thresholds = thresholds;
  }


  public VisualizationConfiguration tableSettings(TableSettings tableSettings) {
    this.tableSettings = tableSettings;
    return this;
  }

   /**
   * Get tableSettings
   * @return tableSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TABLE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TableSettings getTableSettings() {
    return tableSettings;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableSettings(TableSettings tableSettings) {
    this.tableSettings = tableSettings;
  }


  public VisualizationConfiguration graphChartSettings(GraphChartSettings graphChartSettings) {
    this.graphChartSettings = graphChartSettings;
    return this;
  }

   /**
   * Get graphChartSettings
   * @return graphChartSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GRAPH_CHART_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GraphChartSettings getGraphChartSettings() {
    return graphChartSettings;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_CHART_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphChartSettings(GraphChartSettings graphChartSettings) {
    this.graphChartSettings = graphChartSettings;
  }


  public VisualizationConfiguration honeycombSettings(HoneycombSettings honeycombSettings) {
    this.honeycombSettings = honeycombSettings;
    return this;
  }

   /**
   * Get honeycombSettings
   * @return honeycombSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HONEYCOMB_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HoneycombSettings getHoneycombSettings() {
    return honeycombSettings;
  }


  @JsonProperty(JSON_PROPERTY_HONEYCOMB_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoneycombSettings(HoneycombSettings honeycombSettings) {
    this.honeycombSettings = honeycombSettings;
  }


  /**
   * Return true if this VisualizationConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualizationConfiguration visualizationConfiguration = (VisualizationConfiguration) o;
    return Objects.equals(this.type, visualizationConfiguration.type) &&
        Objects.equals(this.global, visualizationConfiguration.global) &&
        Objects.equals(this.rules, visualizationConfiguration.rules) &&
        Objects.equals(this.axes, visualizationConfiguration.axes) &&
        Objects.equals(this.heatmapSettings, visualizationConfiguration.heatmapSettings) &&
        Objects.equals(this.singleValueSettings, visualizationConfiguration.singleValueSettings) &&
        Objects.equals(this.thresholds, visualizationConfiguration.thresholds) &&
        Objects.equals(this.tableSettings, visualizationConfiguration.tableSettings) &&
        Objects.equals(this.graphChartSettings, visualizationConfiguration.graphChartSettings) &&
        Objects.equals(this.honeycombSettings, visualizationConfiguration.honeycombSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, global, rules, axes, heatmapSettings, singleValueSettings, thresholds, tableSettings, graphChartSettings, honeycombSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualizationConfiguration {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    heatmapSettings: ").append(toIndentedString(heatmapSettings)).append("\n");
    sb.append("    singleValueSettings: ").append(toIndentedString(singleValueSettings)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("    tableSettings: ").append(toIndentedString(tableSettings)).append("\n");
    sb.append("    graphChartSettings: ").append(toIndentedString(graphChartSettings)).append("\n");
    sb.append("    honeycombSettings: ").append(toIndentedString(honeycombSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

