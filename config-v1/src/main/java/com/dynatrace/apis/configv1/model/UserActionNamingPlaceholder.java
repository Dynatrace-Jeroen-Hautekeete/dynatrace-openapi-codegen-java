/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.UserActionNamingPlaceholderProcessingStep;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The placeholder settings.
 */
@ApiModel(description = "The placeholder settings.")
@JsonPropertyOrder({
  UserActionNamingPlaceholder.JSON_PROPERTY_NAME,
  UserActionNamingPlaceholder.JSON_PROPERTY_INPUT,
  UserActionNamingPlaceholder.JSON_PROPERTY_PROCESSING_PART,
  UserActionNamingPlaceholder.JSON_PROPERTY_PROCESSING_STEPS,
  UserActionNamingPlaceholder.JSON_PROPERTY_METADATA_ID,
  UserActionNamingPlaceholder.JSON_PROPERTY_USE_GUESSED_ELEMENT_IDENTIFIER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class UserActionNamingPlaceholder {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Input.
   */
  public enum InputEnum {
    ELEMENT_IDENTIFIER("ELEMENT_IDENTIFIER"),
    
    INPUT_TYPE("INPUT_TYPE"),
    
    METADATA("METADATA"),
    
    PAGE_TITLE("PAGE_TITLE"),
    
    PAGE_URL("PAGE_URL"),
    
    SOURCE_URL("SOURCE_URL"),
    
    TOP_XHR_URL("TOP_XHR_URL"),
    
    XHR_URL("XHR_URL");

    private String value;

    InputEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InputEnum fromValue(String value) {
      for (InputEnum b : InputEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INPUT = "input";
  private InputEnum input;

  /**
   * Part.
   */
  public enum ProcessingPartEnum {
    ALL("ALL"),
    
    ANCHOR("ANCHOR"),
    
    PATH("PATH");

    private String value;

    ProcessingPartEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcessingPartEnum fromValue(String value) {
      for (ProcessingPartEnum b : ProcessingPartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROCESSING_PART = "processingPart";
  private ProcessingPartEnum processingPart;

  public static final String JSON_PROPERTY_PROCESSING_STEPS = "processingSteps";
  private List<UserActionNamingPlaceholderProcessingStep> processingSteps = null;

  public static final String JSON_PROPERTY_METADATA_ID = "metadataId";
  private Integer metadataId;

  public static final String JSON_PROPERTY_USE_GUESSED_ELEMENT_IDENTIFIER = "useGuessedElementIdentifier";
  private Boolean useGuessedElementIdentifier;

  public UserActionNamingPlaceholder() { 
  }

  public UserActionNamingPlaceholder name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Placeholder name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Placeholder name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public UserActionNamingPlaceholder input(InputEnum input) {
    this.input = input;
    return this;
  }

   /**
   * Input.
   * @return input
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Input.")
  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public InputEnum getInput() {
    return input;
  }


  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInput(InputEnum input) {
    this.input = input;
  }


  public UserActionNamingPlaceholder processingPart(ProcessingPartEnum processingPart) {
    this.processingPart = processingPart;
    return this;
  }

   /**
   * Part.
   * @return processingPart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Part.")
  @JsonProperty(JSON_PROPERTY_PROCESSING_PART)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProcessingPartEnum getProcessingPart() {
    return processingPart;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_PART)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcessingPart(ProcessingPartEnum processingPart) {
    this.processingPart = processingPart;
  }


  public UserActionNamingPlaceholder processingSteps(List<UserActionNamingPlaceholderProcessingStep> processingSteps) {
    this.processingSteps = processingSteps;
    return this;
  }

  public UserActionNamingPlaceholder addProcessingStepsItem(UserActionNamingPlaceholderProcessingStep processingStepsItem) {
    if (this.processingSteps == null) {
      this.processingSteps = new ArrayList<>();
    }
    this.processingSteps.add(processingStepsItem);
    return this;
  }

   /**
   * Processing actions.
   * @return processingSteps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Processing actions.")
  @JsonProperty(JSON_PROPERTY_PROCESSING_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserActionNamingPlaceholderProcessingStep> getProcessingSteps() {
    return processingSteps;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingSteps(List<UserActionNamingPlaceholderProcessingStep> processingSteps) {
    this.processingSteps = processingSteps;
  }


  public UserActionNamingPlaceholder metadataId(Integer metadataId) {
    this.metadataId = metadataId;
    return this;
  }

   /**
   * Id of the metadata.
   * @return metadataId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the metadata.")
  @JsonProperty(JSON_PROPERTY_METADATA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMetadataId() {
    return metadataId;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataId(Integer metadataId) {
    this.metadataId = metadataId;
  }


  public UserActionNamingPlaceholder useGuessedElementIdentifier(Boolean useGuessedElementIdentifier) {
    this.useGuessedElementIdentifier = useGuessedElementIdentifier;
    return this;
  }

   /**
   * Use the element identifier that was selected by Dynatrace.
   * @return useGuessedElementIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Use the element identifier that was selected by Dynatrace.")
  @JsonProperty(JSON_PROPERTY_USE_GUESSED_ELEMENT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUseGuessedElementIdentifier() {
    return useGuessedElementIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_USE_GUESSED_ELEMENT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseGuessedElementIdentifier(Boolean useGuessedElementIdentifier) {
    this.useGuessedElementIdentifier = useGuessedElementIdentifier;
  }


  /**
   * Return true if this UserActionNamingPlaceholder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActionNamingPlaceholder userActionNamingPlaceholder = (UserActionNamingPlaceholder) o;
    return Objects.equals(this.name, userActionNamingPlaceholder.name) &&
        Objects.equals(this.input, userActionNamingPlaceholder.input) &&
        Objects.equals(this.processingPart, userActionNamingPlaceholder.processingPart) &&
        Objects.equals(this.processingSteps, userActionNamingPlaceholder.processingSteps) &&
        Objects.equals(this.metadataId, userActionNamingPlaceholder.metadataId) &&
        Objects.equals(this.useGuessedElementIdentifier, userActionNamingPlaceholder.useGuessedElementIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, input, processingPart, processingSteps, metadataId, useGuessedElementIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActionNamingPlaceholder {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    processingPart: ").append(toIndentedString(processingPart)).append("\n");
    sb.append("    processingSteps: ").append(toIndentedString(processingSteps)).append("\n");
    sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
    sb.append("    useGuessedElementIdentifier: ").append(toIndentedString(useGuessedElementIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

