/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.configv1.api;

import com.dynatrace.apis.configv1.ApiClient;
import com.dynatrace.apis.configv1.ApiException;
import com.dynatrace.apis.configv1.ApiResponse;
import com.dynatrace.apis.configv1.Pair;

import com.dynatrace.apis.configv1.model.AwsCredentialsConfig;
import com.dynatrace.apis.configv1.model.AwsIamToken;
import com.dynatrace.apis.configv1.model.AwsMonitoredServicesDto;
import com.dynatrace.apis.configv1.model.CloudSupportedServicesList;
import com.dynatrace.apis.configv1.model.EntityShortRepresentation;
import com.dynatrace.apis.configv1.model.ErrorEnvelope;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class AwsCredentialsConfigurationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AwsCredentialsConfigurationApi() {
    this(new ApiClient());
  }

  public AwsCredentialsConfigurationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new AWS credentials configuration
   * The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
   * @param awsCredentialsConfig The JSON body of the request. Contains parameters of the new AWS credentials configuration. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createAwsCredentialsConfig(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createAwsCredentialsConfigWithHttpInfo(awsCredentialsConfig);
    return localVarResponse.getData();
  }

  /**
   * Creates a new AWS credentials configuration
   * The body must not provide an ID. An ID is assigned automatically by the Dynatrace server.
   * @param awsCredentialsConfig The JSON body of the request. Contains parameters of the new AWS credentials configuration. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createAwsCredentialsConfigWithHttpInfo(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAwsCredentialsConfigRequestBuilder(awsCredentialsConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAwsCredentialsConfigRequestBuilder(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsCredentialsConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified AWS credentials configuration
   * 
   * @param id The ID of AWS credentials configuration to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAwsCredentialsConfig(String id) throws ApiException {
    deleteAwsCredentialsConfigWithHttpInfo(id);
  }

  /**
   * Deletes the specified AWS credentials configuration
   * 
   * @param id The ID of AWS credentials configuration to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAwsCredentialsConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAwsCredentialsConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAwsCredentialsConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAwsCredentialsConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration of the specified AWS credentials
   * 
   * @param id The ID of the specified AWS credentials configuration. (required)
   * @return AwsCredentialsConfig
   * @throws ApiException if fails to make API call
   */
  public AwsCredentialsConfig getAwsCredentialsConfig(String id) throws ApiException {
    ApiResponse<AwsCredentialsConfig> localVarResponse = getAwsCredentialsConfigWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of the specified AWS credentials
   * 
   * @param id The ID of the specified AWS credentials configuration. (required)
   * @return ApiResponse&lt;AwsCredentialsConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AwsCredentialsConfig> getAwsCredentialsConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAwsCredentialsConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<AwsCredentialsConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AwsCredentialsConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAwsCredentialsConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAwsCredentialsConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the monitored services configuration of the specified AWS credentials
   * 
   * @param id The ID of the specified AWS credentials configuration. (required)
   * @return AwsMonitoredServicesDto
   * @throws ApiException if fails to make API call
   */
  public AwsMonitoredServicesDto getAwsServicesConfig(String id) throws ApiException {
    ApiResponse<AwsMonitoredServicesDto> localVarResponse = getAwsServicesConfigWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the monitored services configuration of the specified AWS credentials
   * 
   * @param id The ID of the specified AWS credentials configuration. (required)
   * @return ApiResponse&lt;AwsMonitoredServicesDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AwsMonitoredServicesDto> getAwsServicesConfigWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAwsServicesConfigRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAwsServicesConfig", localVarResponse);
        }
        return new ApiResponse<AwsMonitoredServicesDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AwsMonitoredServicesDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAwsServicesConfigRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAwsServicesConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}/services"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of AWS supported services
   * You can use this list for adding services to AWS credentials
   * @return CloudSupportedServicesList
   * @throws ApiException if fails to make API call
   */
  public CloudSupportedServicesList getSupportedServices() throws ApiException {
    ApiResponse<CloudSupportedServicesList> localVarResponse = getSupportedServicesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the list of AWS supported services
   * You can use this list for adding services to AWS credentials
   * @return ApiResponse&lt;CloudSupportedServicesList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CloudSupportedServicesList> getSupportedServicesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSupportedServicesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSupportedServices", localVarResponse);
        }
        return new ApiResponse<CloudSupportedServicesList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudSupportedServicesList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSupportedServicesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/supportedServices";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available AWS credentials configurations
   * 
   * @return List&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public List<EntityShortRepresentation> listAwsCredentialConfigs() throws ApiException {
    ApiResponse<List<EntityShortRepresentation>> localVarResponse = listAwsCredentialConfigsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all available AWS credentials configurations
   * 
   * @return ApiResponse&lt;List&lt;EntityShortRepresentation&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<EntityShortRepresentation>> listAwsCredentialConfigsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAwsCredentialConfigsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAwsCredentialConfigs", localVarResponse);
        }
        return new ApiResponse<List<EntityShortRepresentation>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<EntityShortRepresentation>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAwsCredentialConfigsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the external ID token for setting an IAM role
   * You&#39;ll need it for the role-based AWS authentication.
   * @return AwsIamToken
   * @throws ApiException if fails to make API call
   */
  public AwsIamToken readIamExternalIdToken() throws ApiException {
    ApiResponse<AwsIamToken> localVarResponse = readIamExternalIdTokenWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the external ID token for setting an IAM role
   * You&#39;ll need it for the role-based AWS authentication.
   * @return ApiResponse&lt;AwsIamToken&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AwsIamToken> readIamExternalIdTokenWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = readIamExternalIdTokenRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("readIamExternalIdToken", localVarResponse);
        }
        return new ApiResponse<AwsIamToken>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AwsIamToken>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder readIamExternalIdTokenRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/iamExternalId";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates an existing AWS credentials configuration
   * 
   * @param id The ID of the AWS credentials configuration to be updated. (required)
   * @param awsCredentialsConfig The JSON body of the request. Contains updated parameters of the AWS credentials configuration. (optional)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation updateAwsCredentialsConfig(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = updateAwsCredentialsConfigWithHttpInfo(id, awsCredentialsConfig);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing AWS credentials configuration
   * 
   * @param id The ID of the AWS credentials configuration to be updated. (required)
   * @param awsCredentialsConfig The JSON body of the request. Contains updated parameters of the AWS credentials configuration. (optional)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> updateAwsCredentialsConfigWithHttpInfo(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAwsCredentialsConfigRequestBuilder(id, awsCredentialsConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAwsCredentialsConfigRequestBuilder(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAwsCredentialsConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsCredentialsConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Replace an existing monitored services configuration of the specified AWS credentials
   * 
   * @param id The ID of the AWS credentials to be updated with new monitored services configuration. (required)
   * @param awsMonitoredServicesDto The JSON body of the request. Contains updated monitored services configuration for AWS credentials. (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateAwsServicesConfig(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    updateAwsServicesConfigWithHttpInfo(id, awsMonitoredServicesDto);
  }

  /**
   * Replace an existing monitored services configuration of the specified AWS credentials
   * 
   * @param id The ID of the AWS credentials to be updated with new monitored services configuration. (required)
   * @param awsMonitoredServicesDto The JSON body of the request. Contains updated monitored services configuration for AWS credentials. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateAwsServicesConfigWithHttpInfo(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAwsServicesConfigRequestBuilder(id, awsMonitoredServicesDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAwsServicesConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAwsServicesConfigRequestBuilder(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAwsServicesConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}/services"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsMonitoredServicesDto);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /aws/credentials&#x60; request
   * 
   * @param awsCredentialsConfig The JSON body of the request. Contains the AWS credentials configuration to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateCreateAwsCredentialsConfig(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    validateCreateAwsCredentialsConfigWithHttpInfo(awsCredentialsConfig);
  }

  /**
   * Validates the payload for the &#x60;POST /aws/credentials&#x60; request
   * 
   * @param awsCredentialsConfig The JSON body of the request. Contains the AWS credentials configuration to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateCreateAwsCredentialsConfigWithHttpInfo(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateCreateAwsCredentialsConfigRequestBuilder(awsCredentialsConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateCreateAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateCreateAwsCredentialsConfigRequestBuilder(AwsCredentialsConfig awsCredentialsConfig) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsCredentialsConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;PUT /aws/credentials/{id}&#x60; request
   * 
   * @param id The ID of the AWS credentials configuration to be validated. (required)
   * @param awsCredentialsConfig The JSON body of the request. Contains the AWS credentials configuration to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateAwsCredentialsConfig(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    validateUpdateAwsCredentialsConfigWithHttpInfo(id, awsCredentialsConfig);
  }

  /**
   * Validates the payload for the &#x60;PUT /aws/credentials/{id}&#x60; request
   * 
   * @param id The ID of the AWS credentials configuration to be validated. (required)
   * @param awsCredentialsConfig The JSON body of the request. Contains the AWS credentials configuration to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateAwsCredentialsConfigWithHttpInfo(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateAwsCredentialsConfigRequestBuilder(id, awsCredentialsConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateAwsCredentialsConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateAwsCredentialsConfigRequestBuilder(String id, AwsCredentialsConfig awsCredentialsConfig) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateAwsCredentialsConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsCredentialsConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;PUT /aws/credentials/{id}/services&#x60; request
   * 
   * @param id The ID of the AWS credentials for which the monitored services configuration is going to be validated. (required)
   * @param awsMonitoredServicesDto The JSON body of the request. Contains a monitored services configuration for AWS credentials to be validated. (optional)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateAwsServicesConfig(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    validateUpdateAwsServicesConfigWithHttpInfo(id, awsMonitoredServicesDto);
  }

  /**
   * Validates the payload for the &#x60;PUT /aws/credentials/{id}/services&#x60; request
   * 
   * @param id The ID of the AWS credentials for which the monitored services configuration is going to be validated. (required)
   * @param awsMonitoredServicesDto The JSON body of the request. Contains a monitored services configuration for AWS credentials to be validated. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateAwsServicesConfigWithHttpInfo(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateAwsServicesConfigRequestBuilder(id, awsMonitoredServicesDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateAwsServicesConfig", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateAwsServicesConfigRequestBuilder(String id, AwsMonitoredServicesDto awsMonitoredServicesDto) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling validateUpdateAwsServicesConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/aws/credentials/{id}/services/validator"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(awsMonitoredServicesDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
