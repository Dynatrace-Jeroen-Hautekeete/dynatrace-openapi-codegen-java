/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * IpInRangeCompareOperationAllOf
 */
@JsonPropertyOrder({
  IpInRangeCompareOperationAllOf.JSON_PROPERTY_NEGATE,
  IpInRangeCompareOperationAllOf.JSON_PROPERTY_LOWER,
  IpInRangeCompareOperationAllOf.JSON_PROPERTY_UPPER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class IpInRangeCompareOperationAllOf {
  public static final String JSON_PROPERTY_NEGATE = "negate";
  private Boolean negate;

  public static final String JSON_PROPERTY_LOWER = "lower";
  private String lower;

  public static final String JSON_PROPERTY_UPPER = "upper";
  private String upper;

  public IpInRangeCompareOperationAllOf() { 
  }

  public IpInRangeCompareOperationAllOf negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

   /**
   * Inverts the operation of the condition. Set to &#x60;true&#x60; to turn **IP is in range** into **IP is not in range**.    If not set, then &#x60;false&#x60; is used.
   * @return negate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.    If not set, then `false` is used.")
  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNegate() {
    return negate;
  }


  @JsonProperty(JSON_PROPERTY_NEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  public IpInRangeCompareOperationAllOf lower(String lower) {
    this.lower = lower;
    return this;
  }

   /**
   * The lower boundary of the IP range.
   * @return lower
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The lower boundary of the IP range.")
  @JsonProperty(JSON_PROPERTY_LOWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLower() {
    return lower;
  }


  @JsonProperty(JSON_PROPERTY_LOWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLower(String lower) {
    this.lower = lower;
  }


  public IpInRangeCompareOperationAllOf upper(String upper) {
    this.upper = upper;
    return this;
  }

   /**
   * The upper boundary of the IP range.
   * @return upper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The upper boundary of the IP range.")
  @JsonProperty(JSON_PROPERTY_UPPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpper() {
    return upper;
  }


  @JsonProperty(JSON_PROPERTY_UPPER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpper(String upper) {
    this.upper = upper;
  }


  /**
   * Return true if this IpInRangeCompareOperation_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpInRangeCompareOperationAllOf ipInRangeCompareOperationAllOf = (IpInRangeCompareOperationAllOf) o;
    return Objects.equals(this.negate, ipInRangeCompareOperationAllOf.negate) &&
        Objects.equals(this.lower, ipInRangeCompareOperationAllOf.lower) &&
        Objects.equals(this.upper, ipInRangeCompareOperationAllOf.upper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negate, lower, upper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpInRangeCompareOperationAllOf {\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    lower: ").append(toIndentedString(lower)).append("\n");
    sb.append("    upper: ").append(toIndentedString(upper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

