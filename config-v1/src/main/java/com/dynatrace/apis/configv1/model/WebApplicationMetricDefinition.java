/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Definition of the web application metric.
 */
@ApiModel(description = "Definition of the web application metric.")
@JsonPropertyOrder({
  WebApplicationMetricDefinition.JSON_PROPERTY_METRIC,
  WebApplicationMetricDefinition.JSON_PROPERTY_PROPERTY_KEY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class WebApplicationMetricDefinition {
  /**
   * The type of the web application metric.
   */
  public enum MetricEnum {
    APDEX("Apdex"),
    
    APPLICATIONCACHE("ApplicationCache"),
    
    CALLBACK("Callback"),
    
    CUMULATIVELAYOUTSHIFT("CumulativeLayoutShift"),
    
    DNSLOOKUP("DNSLookup"),
    
    DOMCOMPLETE("DOMComplete"),
    
    DOMCONTENTLOADED("DOMContentLoaded"),
    
    DOMINTERACTIVE("DOMInteractive"),
    
    DOUBLEPROPERTY("DoubleProperty"),
    
    ERRORCOUNT("ErrorCount"),
    
    FIRSTCONTENTFULPAINT("FirstContentfulPaint"),
    
    FIRSTINPUTDELAY("FirstInputDelay"),
    
    FIRSTINPUTSTART("FirstInputStart"),
    
    FIRSTPAINT("FirstPaint"),
    
    HTMLDOWNLOADED("HTMLDownloaded"),
    
    LARGESTCONTENTFULPAINT("LargestContentfulPaint"),
    
    LOADEVENTEND("LoadEventEnd"),
    
    LOADEVENTSTART("LoadEventStart"),
    
    LONGPROPERTY("LongProperty"),
    
    LONGTASKSTIME("LongTasksTime"),
    
    NAVIGATIONSTART("NavigationStart"),
    
    ONDOMCONTENTLOADED("OnDOMContentLoaded"),
    
    ONLOAD("OnLoad"),
    
    PROCESSING("Processing"),
    
    REDIRECTTIME("RedirectTime"),
    
    REQUEST("Request"),
    
    REQUESTSTART("RequestStart"),
    
    RESPONSE("Response"),
    
    SECURECONNECT("SecureConnect"),
    
    SPEEDINDEX("SpeedIndex"),
    
    TCPCONNECT("TCPConnect"),
    
    TIMETOFIRSTBYTE("TimeToFirstByte"),
    
    USERACTIONDURATION("UserActionDuration"),
    
    VISUALLYCOMPLETE("VisuallyComplete");

    private String value;

    MetricEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetricEnum fromValue(String value) {
      for (MetricEnum b : MetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METRIC = "metric";
  private MetricEnum metric;

  public static final String JSON_PROPERTY_PROPERTY_KEY = "propertyKey";
  private String propertyKey;

  public WebApplicationMetricDefinition() { 
  }

  public WebApplicationMetricDefinition metric(MetricEnum metric) {
    this.metric = metric;
    return this;
  }

   /**
   * The type of the web application metric.
   * @return metric
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the web application metric.")
  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricEnum getMetric() {
    return metric;
  }


  @JsonProperty(JSON_PROPERTY_METRIC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetric(MetricEnum metric) {
    this.metric = metric;
  }


  public WebApplicationMetricDefinition propertyKey(String propertyKey) {
    this.propertyKey = propertyKey;
    return this;
  }

   /**
   * The key of the user action property.    Only applicable for &#x60;DoubleProperty&#x60; and &#x60;LongProperty&#x60; metrics.
   * @return propertyKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the user action property.    Only applicable for `DoubleProperty` and `LongProperty` metrics.")
  @JsonProperty(JSON_PROPERTY_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPropertyKey() {
    return propertyKey;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyKey(String propertyKey) {
    this.propertyKey = propertyKey;
  }


  /**
   * Return true if this WebApplicationMetricDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebApplicationMetricDefinition webApplicationMetricDefinition = (WebApplicationMetricDefinition) o;
    return Objects.equals(this.metric, webApplicationMetricDefinition.metric) &&
        Objects.equals(this.propertyKey, webApplicationMetricDefinition.propertyKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metric, propertyKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebApplicationMetricDefinition {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    propertyKey: ").append(toIndentedString(propertyKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

