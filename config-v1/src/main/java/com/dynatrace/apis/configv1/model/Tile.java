/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.AssignedEntitiesTile;
import com.dynatrace.apis.configv1.model.AssignedEntitiesWithMetricTile;
import com.dynatrace.apis.configv1.model.CustomChartingTile;
import com.dynatrace.apis.configv1.model.DataExplorerTile;
import com.dynatrace.apis.configv1.model.FilterableEntityTile;
import com.dynatrace.apis.configv1.model.ImageTile;
import com.dynatrace.apis.configv1.model.MarkdownTile;
import com.dynatrace.apis.configv1.model.ProblemTile;
import com.dynatrace.apis.configv1.model.ScalableListTile;
import com.dynatrace.apis.configv1.model.SyntheticSingleWebcheckTile;
import com.dynatrace.apis.configv1.model.TileBounds;
import com.dynatrace.apis.configv1.model.TileFilter;
import com.dynatrace.apis.configv1.model.UserSessionQueryTile;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * Configuration of a tile.   The actual set of fields depends on the type of the tile. Find the list of actual objects in the description of the **tileType** field or see [Dashboards API - Tile JSON models](https://dt-url.net/2wc3spx).
 */
@ApiModel(description = "Configuration of a tile.   The actual set of fields depends on the type of the tile. Find the list of actual objects in the description of the **tileType** field or see [Dashboards API - Tile JSON models](https://dt-url.net/2wc3spx).")
@JsonPropertyOrder({
  Tile.JSON_PROPERTY_NAME,
  Tile.JSON_PROPERTY_NAME_SIZE,
  Tile.JSON_PROPERTY_TILE_TYPE,
  Tile.JSON_PROPERTY_CONFIGURED,
  Tile.JSON_PROPERTY_BOUNDS,
  Tile.JSON_PROPERTY_TILE_FILTER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "tileType", // ignore manually set tileType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the tileType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "tileType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AssignedEntitiesTile.class, name = "AssignedEntitiesTile"),
  @JsonSubTypes.Type(value = AssignedEntitiesWithMetricTile.class, name = "AssignedEntitiesWithMetricTile"),
  @JsonSubTypes.Type(value = CustomChartingTile.class, name = "CustomChartingTile"),
  @JsonSubTypes.Type(value = DataExplorerTile.class, name = "DataExplorerTile"),
  @JsonSubTypes.Type(value = FilterableEntityTile.class, name = "FilterableEntityTile"),
  @JsonSubTypes.Type(value = ImageTile.class, name = "ImageTile"),
  @JsonSubTypes.Type(value = MarkdownTile.class, name = "MarkdownTile"),
  @JsonSubTypes.Type(value = ProblemTile.class, name = "ProblemTile"),
  @JsonSubTypes.Type(value = ScalableListTile.class, name = "ScalableListTile"),
  @JsonSubTypes.Type(value = SyntheticSingleWebcheckTile.class, name = "SyntheticSingleWebcheckTile"),
  @JsonSubTypes.Type(value = UserSessionQueryTile.class, name = "UserSessionQueryTile"),
})

public class Tile {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The size of the tile name. Default value is null.
   */
  public enum NameSizeEnum {
    SMALL("small"),
    
    MEDIUM("medium"),
    
    LARGE("large");

    private String value;

    NameSizeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NameSizeEnum fromValue(String value) {
      for (NameSizeEnum b : NameSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NAME_SIZE = "nameSize";
  private NameSizeEnum nameSize;

  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;DATA_EXPLORER&#x60; -&gt; DataExplorerTile  * &#x60;CUSTOM_CHARTING&#x60; -&gt; CustomChartingTile  * &#x60;DTAQL&#x60; -&gt; UserSessionQueryTile  * &#x60;MARKDOWN&#x60; -&gt; MarkdownTile  * &#x60;IMAGE&#x60; -&gt; ImageTile  * &#x60;HOSTS&#x60; -&gt; FilterableEntityTile  * &#x60;APPLICATIONS&#x60; -&gt; FilterableEntityTile  * &#x60;SERVICES&#x60; -&gt; FilterableEntityTile  * &#x60;DATABASES_OVERVIEW&#x60; -&gt; FilterableEntityTile  * &#x60;SYNTHETIC_TESTS&#x60; -&gt; FilterableEntityTile  * &#x60;APPLICATION_WORLDMAP&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;RESOURCES&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;THIRD_PARTY_MOST_ACTIVE&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;UEM_CONVERSIONS_PER_GOAL&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;HOST&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;PROCESS_GROUPS_ONE&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;SYNTHETIC_SINGLE_WEBCHECK&#x60; -&gt; SyntheticSingleWebcheckTile  * &#x60;APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;VIRTUALIZATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;AWS&#x60; -&gt; AssignedEntitiesTile  * &#x60;SERVICE_VERSATILE&#x60; -&gt; AssignedEntitiesTile  * &#x60;SESSION_METRICS&#x60; -&gt; AssignedEntitiesTile  * &#x60;USERS&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_KEY_USER_ACTIONS&#x60; -&gt; AssignedEntitiesTile  * &#x60;BOUNCE_RATE&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_CONVERSIONS_OVERALL&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_JSERRORS_OVERALL&#x60; -&gt; AssignedEntitiesTile  * &#x60;MOBILE_APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;SYNTHETIC_SINGLE_EXT_TEST&#x60; -&gt; AssignedEntitiesTile  * &#x60;SYNTHETIC_HTTP_MONITOR&#x60; -&gt; AssignedEntitiesTile  * &#x60;DATABASE&#x60; -&gt; AssignedEntitiesTile  * &#x60;CUSTOM_APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;APPLICATION_METHOD&#x60; -&gt; AssignedEntitiesTile  * &#x60;LOG_ANALYTICS&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK_PROJECT&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK_AV_ZONE&#x60; -&gt; AssignedEntitiesTile  * &#x60;DEVICE_APPLICATION_METHOD&#x60; -&gt; AssignedEntitiesTile  * &#x60;DEM_KEY_USER_ACTION&#x60; -&gt; AssignedEntitiesTile  * &#x60;SLO&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;SCALABLE_LIST&#x60; -&gt; ScalableListTile  * &#x60;HEADER&#x60; -&gt; Tile  * &#x60;OPEN_PROBLEMS&#x60; -&gt; ProblemTile  * &#x60;PURE_MODEL&#x60; -&gt; Tile  * &#x60;DOCKER&#x60; -&gt; Tile  * &#x60;NETWORK_MEDIUM&#x60; -&gt; Tile  * &#x60;APPLICATIONS_MOST_ACTIVE&#x60; -&gt; Tile  * &#x60;NETWORK&#x60; -&gt; Tile  * &#x60;UEM_ACTIVE_SESSIONS&#x60; -&gt; Tile  * &#x60;DCRUM_SERVICES&#x60; -&gt; Tile  
   */
  public enum TileTypeEnum {
    APPLICATION("APPLICATION"),
    
    APPLICATIONS("APPLICATIONS"),
    
    APPLICATIONS_MOST_ACTIVE("APPLICATIONS_MOST_ACTIVE"),
    
    APPLICATION_METHOD("APPLICATION_METHOD"),
    
    APPLICATION_WORLDMAP("APPLICATION_WORLDMAP"),
    
    AWS("AWS"),
    
    BOUNCE_RATE("BOUNCE_RATE"),
    
    CUSTOM_APPLICATION("CUSTOM_APPLICATION"),
    
    CUSTOM_CHARTING("CUSTOM_CHARTING"),
    
    DATABASE("DATABASE"),
    
    DATABASES_OVERVIEW("DATABASES_OVERVIEW"),
    
    DATA_EXPLORER("DATA_EXPLORER"),
    
    DCRUM_SERVICES("DCRUM_SERVICES"),
    
    DEM_KEY_USER_ACTION("DEM_KEY_USER_ACTION"),
    
    DEVICE_APPLICATION_METHOD("DEVICE_APPLICATION_METHOD"),
    
    DOCKER("DOCKER"),
    
    DTAQL("DTAQL"),
    
    HEADER("HEADER"),
    
    HOST("HOST"),
    
    HOSTS("HOSTS"),
    
    IMAGE("IMAGE"),
    
    LOG_ANALYTICS("LOG_ANALYTICS"),
    
    MARKDOWN("MARKDOWN"),
    
    MOBILE_APPLICATION("MOBILE_APPLICATION"),
    
    NETWORK("NETWORK"),
    
    NETWORK_MEDIUM("NETWORK_MEDIUM"),
    
    OPENSTACK("OPENSTACK"),
    
    OPENSTACK_AV_ZONE("OPENSTACK_AV_ZONE"),
    
    OPENSTACK_PROJECT("OPENSTACK_PROJECT"),
    
    OPEN_PROBLEMS("OPEN_PROBLEMS"),
    
    PROCESS_GROUPS_ONE("PROCESS_GROUPS_ONE"),
    
    PURE_MODEL("PURE_MODEL"),
    
    RESOURCES("RESOURCES"),
    
    SCALABLE_LIST("SCALABLE_LIST"),
    
    SERVICES("SERVICES"),
    
    SERVICE_VERSATILE("SERVICE_VERSATILE"),
    
    SESSION_METRICS("SESSION_METRICS"),
    
    SLO("SLO"),
    
    SYNTHETIC_HTTP_MONITOR("SYNTHETIC_HTTP_MONITOR"),
    
    SYNTHETIC_SINGLE_EXT_TEST("SYNTHETIC_SINGLE_EXT_TEST"),
    
    SYNTHETIC_SINGLE_WEBCHECK("SYNTHETIC_SINGLE_WEBCHECK"),
    
    SYNTHETIC_TESTS("SYNTHETIC_TESTS"),
    
    THIRD_PARTY_MOST_ACTIVE("THIRD_PARTY_MOST_ACTIVE"),
    
    UEM_ACTIVE_SESSIONS("UEM_ACTIVE_SESSIONS"),
    
    UEM_CONVERSIONS_OVERALL("UEM_CONVERSIONS_OVERALL"),
    
    UEM_CONVERSIONS_PER_GOAL("UEM_CONVERSIONS_PER_GOAL"),
    
    UEM_JSERRORS_OVERALL("UEM_JSERRORS_OVERALL"),
    
    UEM_KEY_USER_ACTIONS("UEM_KEY_USER_ACTIONS"),
    
    USERS("USERS"),
    
    VIRTUALIZATION("VIRTUALIZATION");

    private String value;

    TileTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TileTypeEnum fromValue(String value) {
      for (TileTypeEnum b : TileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TILE_TYPE = "tileType";
  private TileTypeEnum tileType;

  public static final String JSON_PROPERTY_CONFIGURED = "configured";
  private Boolean configured;

  public static final String JSON_PROPERTY_BOUNDS = "bounds";
  private TileBounds bounds;

  public static final String JSON_PROPERTY_TILE_FILTER = "tileFilter";
  private TileFilter tileFilter;

  public Tile() { 
  }

  public Tile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the tile.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the tile.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Tile nameSize(NameSizeEnum nameSize) {
    this.nameSize = nameSize;
    return this;
  }

   /**
   * The size of the tile name. Default value is null.
   * @return nameSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the tile name. Default value is null.")
  @JsonProperty(JSON_PROPERTY_NAME_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NameSizeEnum getNameSize() {
    return nameSize;
  }


  @JsonProperty(JSON_PROPERTY_NAME_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNameSize(NameSizeEnum nameSize) {
    this.nameSize = nameSize;
  }


  public Tile tileType(TileTypeEnum tileType) {
    this.tileType = tileType;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;DATA_EXPLORER&#x60; -&gt; DataExplorerTile  * &#x60;CUSTOM_CHARTING&#x60; -&gt; CustomChartingTile  * &#x60;DTAQL&#x60; -&gt; UserSessionQueryTile  * &#x60;MARKDOWN&#x60; -&gt; MarkdownTile  * &#x60;IMAGE&#x60; -&gt; ImageTile  * &#x60;HOSTS&#x60; -&gt; FilterableEntityTile  * &#x60;APPLICATIONS&#x60; -&gt; FilterableEntityTile  * &#x60;SERVICES&#x60; -&gt; FilterableEntityTile  * &#x60;DATABASES_OVERVIEW&#x60; -&gt; FilterableEntityTile  * &#x60;SYNTHETIC_TESTS&#x60; -&gt; FilterableEntityTile  * &#x60;APPLICATION_WORLDMAP&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;RESOURCES&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;THIRD_PARTY_MOST_ACTIVE&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;UEM_CONVERSIONS_PER_GOAL&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;HOST&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;PROCESS_GROUPS_ONE&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;SYNTHETIC_SINGLE_WEBCHECK&#x60; -&gt; SyntheticSingleWebcheckTile  * &#x60;APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;VIRTUALIZATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;AWS&#x60; -&gt; AssignedEntitiesTile  * &#x60;SERVICE_VERSATILE&#x60; -&gt; AssignedEntitiesTile  * &#x60;SESSION_METRICS&#x60; -&gt; AssignedEntitiesTile  * &#x60;USERS&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_KEY_USER_ACTIONS&#x60; -&gt; AssignedEntitiesTile  * &#x60;BOUNCE_RATE&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_CONVERSIONS_OVERALL&#x60; -&gt; AssignedEntitiesTile  * &#x60;UEM_JSERRORS_OVERALL&#x60; -&gt; AssignedEntitiesTile  * &#x60;MOBILE_APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;SYNTHETIC_SINGLE_EXT_TEST&#x60; -&gt; AssignedEntitiesTile  * &#x60;SYNTHETIC_HTTP_MONITOR&#x60; -&gt; AssignedEntitiesTile  * &#x60;DATABASE&#x60; -&gt; AssignedEntitiesTile  * &#x60;CUSTOM_APPLICATION&#x60; -&gt; AssignedEntitiesTile  * &#x60;APPLICATION_METHOD&#x60; -&gt; AssignedEntitiesTile  * &#x60;LOG_ANALYTICS&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK_PROJECT&#x60; -&gt; AssignedEntitiesTile  * &#x60;OPENSTACK_AV_ZONE&#x60; -&gt; AssignedEntitiesTile  * &#x60;DEVICE_APPLICATION_METHOD&#x60; -&gt; AssignedEntitiesTile  * &#x60;DEM_KEY_USER_ACTION&#x60; -&gt; AssignedEntitiesTile  * &#x60;SLO&#x60; -&gt; AssignedEntitiesWithMetricTile  * &#x60;SCALABLE_LIST&#x60; -&gt; ScalableListTile  * &#x60;HEADER&#x60; -&gt; Tile  * &#x60;OPEN_PROBLEMS&#x60; -&gt; ProblemTile  * &#x60;PURE_MODEL&#x60; -&gt; Tile  * &#x60;DOCKER&#x60; -&gt; Tile  * &#x60;NETWORK_MEDIUM&#x60; -&gt; Tile  * &#x60;APPLICATIONS_MOST_ACTIVE&#x60; -&gt; Tile  * &#x60;NETWORK&#x60; -&gt; Tile  * &#x60;UEM_ACTIVE_SESSIONS&#x60; -&gt; Tile  * &#x60;DCRUM_SERVICES&#x60; -&gt; Tile  
   * @return tileType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `DATA_EXPLORER` -> DataExplorerTile  * `CUSTOM_CHARTING` -> CustomChartingTile  * `DTAQL` -> UserSessionQueryTile  * `MARKDOWN` -> MarkdownTile  * `IMAGE` -> ImageTile  * `HOSTS` -> FilterableEntityTile  * `APPLICATIONS` -> FilterableEntityTile  * `SERVICES` -> FilterableEntityTile  * `DATABASES_OVERVIEW` -> FilterableEntityTile  * `SYNTHETIC_TESTS` -> FilterableEntityTile  * `APPLICATION_WORLDMAP` -> AssignedEntitiesWithMetricTile  * `RESOURCES` -> AssignedEntitiesWithMetricTile  * `THIRD_PARTY_MOST_ACTIVE` -> AssignedEntitiesWithMetricTile  * `UEM_CONVERSIONS_PER_GOAL` -> AssignedEntitiesWithMetricTile  * `HOST` -> AssignedEntitiesWithMetricTile  * `PROCESS_GROUPS_ONE` -> AssignedEntitiesWithMetricTile  * `SYNTHETIC_SINGLE_WEBCHECK` -> SyntheticSingleWebcheckTile  * `APPLICATION` -> AssignedEntitiesTile  * `VIRTUALIZATION` -> AssignedEntitiesTile  * `AWS` -> AssignedEntitiesTile  * `SERVICE_VERSATILE` -> AssignedEntitiesTile  * `SESSION_METRICS` -> AssignedEntitiesTile  * `USERS` -> AssignedEntitiesTile  * `UEM_KEY_USER_ACTIONS` -> AssignedEntitiesTile  * `BOUNCE_RATE` -> AssignedEntitiesTile  * `UEM_CONVERSIONS_OVERALL` -> AssignedEntitiesTile  * `UEM_JSERRORS_OVERALL` -> AssignedEntitiesTile  * `MOBILE_APPLICATION` -> AssignedEntitiesTile  * `SYNTHETIC_SINGLE_EXT_TEST` -> AssignedEntitiesTile  * `SYNTHETIC_HTTP_MONITOR` -> AssignedEntitiesTile  * `DATABASE` -> AssignedEntitiesTile  * `CUSTOM_APPLICATION` -> AssignedEntitiesTile  * `APPLICATION_METHOD` -> AssignedEntitiesTile  * `LOG_ANALYTICS` -> AssignedEntitiesTile  * `OPENSTACK` -> AssignedEntitiesTile  * `OPENSTACK_PROJECT` -> AssignedEntitiesTile  * `OPENSTACK_AV_ZONE` -> AssignedEntitiesTile  * `DEVICE_APPLICATION_METHOD` -> AssignedEntitiesTile  * `DEM_KEY_USER_ACTION` -> AssignedEntitiesTile  * `SLO` -> AssignedEntitiesWithMetricTile  * `SCALABLE_LIST` -> ScalableListTile  * `HEADER` -> Tile  * `OPEN_PROBLEMS` -> ProblemTile  * `PURE_MODEL` -> Tile  * `DOCKER` -> Tile  * `NETWORK_MEDIUM` -> Tile  * `APPLICATIONS_MOST_ACTIVE` -> Tile  * `NETWORK` -> Tile  * `UEM_ACTIVE_SESSIONS` -> Tile  * `DCRUM_SERVICES` -> Tile  ")
  @JsonProperty(JSON_PROPERTY_TILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TileTypeEnum getTileType() {
    return tileType;
  }


  @JsonProperty(JSON_PROPERTY_TILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTileType(TileTypeEnum tileType) {
    this.tileType = tileType;
  }


  public Tile configured(Boolean configured) {
    this.configured = configured;
    return this;
  }

   /**
   * The tile is configured and ready to use (&#x60;true&#x60;) or just placed on the dashboard (&#x60;false&#x60;).
   * @return configured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`).")
  @JsonProperty(JSON_PROPERTY_CONFIGURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConfigured() {
    return configured;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigured(Boolean configured) {
    this.configured = configured;
  }


  public Tile bounds(TileBounds bounds) {
    this.bounds = bounds;
    return this;
  }

   /**
   * Get bounds
   * @return bounds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BOUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TileBounds getBounds() {
    return bounds;
  }


  @JsonProperty(JSON_PROPERTY_BOUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBounds(TileBounds bounds) {
    this.bounds = bounds;
  }


  public Tile tileFilter(TileFilter tileFilter) {
    this.tileFilter = tileFilter;
    return this;
  }

   /**
   * Get tileFilter
   * @return tileFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TILE_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TileFilter getTileFilter() {
    return tileFilter;
  }


  @JsonProperty(JSON_PROPERTY_TILE_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTileFilter(TileFilter tileFilter) {
    this.tileFilter = tileFilter;
  }


  /**
   * Return true if this Tile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tile tile = (Tile) o;
    return Objects.equals(this.name, tile.name) &&
        Objects.equals(this.nameSize, tile.nameSize) &&
        Objects.equals(this.tileType, tile.tileType) &&
        Objects.equals(this.configured, tile.configured) &&
        Objects.equals(this.bounds, tile.bounds) &&
        Objects.equals(this.tileFilter, tile.tileFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, nameSize, tileType, configured, bounds, tileFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameSize: ").append(toIndentedString(nameSize)).append("\n");
    sb.append("    tileType: ").append(toIndentedString(tileType)).append("\n");
    sb.append("    configured: ").append(toIndentedString(configured)).append("\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    tileFilter: ").append(toIndentedString(tileFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AssignedEntitiesTile", AssignedEntitiesTile.class);
  mappings.put("AssignedEntitiesWithMetricTile", AssignedEntitiesWithMetricTile.class);
  mappings.put("CustomChartingTile", CustomChartingTile.class);
  mappings.put("DataExplorerTile", DataExplorerTile.class);
  mappings.put("FilterableEntityTile", FilterableEntityTile.class);
  mappings.put("ImageTile", ImageTile.class);
  mappings.put("MarkdownTile", MarkdownTile.class);
  mappings.put("ProblemTile", ProblemTile.class);
  mappings.put("ScalableListTile", ScalableListTile.class);
  mappings.put("SyntheticSingleWebcheckTile", SyntheticSingleWebcheckTile.class);
  mappings.put("UserSessionQueryTile", UserSessionQueryTile.class);
  mappings.put("Tile", Tile.class);
  JSON.registerDiscriminator(Tile.class, "tileType", mappings);
}
}

