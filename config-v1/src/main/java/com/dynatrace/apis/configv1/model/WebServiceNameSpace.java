/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.TransformationBase;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The contribution to the service ID calculation from the detected web service name space.    You have two mutually exclusive options:  * Override the detected value with a specified static value. Specify the new value in the **valueOverride** field.  * Dynamically transform the detected value. Specify the transformation parameters in the **transformations** field.
 */
@ApiModel(description = "The contribution to the service ID calculation from the detected web service name space.    You have two mutually exclusive options:  * Override the detected value with a specified static value. Specify the new value in the **valueOverride** field.  * Dynamically transform the detected value. Specify the transformation parameters in the **transformations** field.")
@JsonPropertyOrder({
  WebServiceNameSpace.JSON_PROPERTY_TRANSFORMATIONS,
  WebServiceNameSpace.JSON_PROPERTY_VALUE_OVERRIDE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class WebServiceNameSpace {
  public static final String JSON_PROPERTY_TRANSFORMATIONS = "transformations";
  private List<TransformationBase> transformations = null;

  public static final String JSON_PROPERTY_VALUE_OVERRIDE = "valueOverride";
  private String valueOverride;

  public WebServiceNameSpace() { 
  }

  public WebServiceNameSpace transformations(List<TransformationBase> transformations) {
    this.transformations = transformations;
    return this;
  }

  public WebServiceNameSpace addTransformationsItem(TransformationBase transformationsItem) {
    if (this.transformations == null) {
      this.transformations = new ArrayList<>();
    }
    this.transformations.add(transformationsItem);
    return this;
  }

   /**
   * Transformations to be applied to the detected value.
   * @return transformations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transformations to be applied to the detected value.")
  @JsonProperty(JSON_PROPERTY_TRANSFORMATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TransformationBase> getTransformations() {
    return transformations;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFORMATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransformations(List<TransformationBase> transformations) {
    this.transformations = transformations;
  }


  public WebServiceNameSpace valueOverride(String valueOverride) {
    this.valueOverride = valueOverride;
    return this;
  }

   /**
   * The value to be used instead of the detected value.
   * @return valueOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value to be used instead of the detected value.")
  @JsonProperty(JSON_PROPERTY_VALUE_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValueOverride() {
    return valueOverride;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueOverride(String valueOverride) {
    this.valueOverride = valueOverride;
  }


  /**
   * Return true if this WebServiceNameSpace object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebServiceNameSpace webServiceNameSpace = (WebServiceNameSpace) o;
    return Objects.equals(this.transformations, webServiceNameSpace.transformations) &&
        Objects.equals(this.valueOverride, webServiceNameSpace.valueOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transformations, valueOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebServiceNameSpace {\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("    valueOverride: ").append(toIndentedString(valueOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

