/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a destination-based conversion goal.
 */
@ApiModel(description = "Configuration of a destination-based conversion goal.")
@JsonPropertyOrder({
  DestinationDetails.JSON_PROPERTY_URL_OR_PATH,
  DestinationDetails.JSON_PROPERTY_MATCH_TYPE,
  DestinationDetails.JSON_PROPERTY_CASE_SENSITIVE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class DestinationDetails {
  public static final String JSON_PROPERTY_URL_OR_PATH = "urlOrPath";
  private String urlOrPath;

  /**
   * The operator of the match.
   */
  public enum MatchTypeEnum {
    BEGINS("Begins"),
    
    CONTAINS("Contains"),
    
    ENDS("Ends");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MATCH_TYPE = "matchType";
  private MatchTypeEnum matchType;

  public static final String JSON_PROPERTY_CASE_SENSITIVE = "caseSensitive";
  private Boolean caseSensitive;

  public DestinationDetails() { 
  }

  public DestinationDetails urlOrPath(String urlOrPath) {
    this.urlOrPath = urlOrPath;
    return this;
  }

   /**
   * The path to be reached to hit the conversion goal.
   * @return urlOrPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The path to be reached to hit the conversion goal.")
  @JsonProperty(JSON_PROPERTY_URL_OR_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrlOrPath() {
    return urlOrPath;
  }


  @JsonProperty(JSON_PROPERTY_URL_OR_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrlOrPath(String urlOrPath) {
    this.urlOrPath = urlOrPath;
  }


  public DestinationDetails matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * The operator of the match.
   * @return matchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The operator of the match.")
  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MatchTypeEnum getMatchType() {
    return matchType;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  public DestinationDetails caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * The match is case-sensitive (&#x60;true&#x60;) or (&#x60;false&#x60;).
   * @return caseSensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The match is case-sensitive (`true`) or (`false`).")
  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCaseSensitive() {
    return caseSensitive;
  }


  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  /**
   * Return true if this DestinationDetails object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDetails destinationDetails = (DestinationDetails) o;
    return Objects.equals(this.urlOrPath, destinationDetails.urlOrPath) &&
        Objects.equals(this.matchType, destinationDetails.matchType) &&
        Objects.equals(this.caseSensitive, destinationDetails.caseSensitive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(urlOrPath, matchType, caseSensitive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDetails {\n");
    sb.append("    urlOrPath: ").append(toIndentedString(urlOrPath)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

