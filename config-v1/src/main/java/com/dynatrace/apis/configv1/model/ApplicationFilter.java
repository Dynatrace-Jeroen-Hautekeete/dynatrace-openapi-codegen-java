/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The condition of an application detection rule.
 */
@ApiModel(description = "The condition of an application detection rule.")
@JsonPropertyOrder({
  ApplicationFilter.JSON_PROPERTY_PATTERN,
  ApplicationFilter.JSON_PROPERTY_APPLICATION_MATCH_TYPE,
  ApplicationFilter.JSON_PROPERTY_APPLICATION_MATCH_TARGET
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
public class ApplicationFilter {
  public static final String JSON_PROPERTY_PATTERN = "pattern";
  private String pattern;

  /**
   * The operator of the matching.
   */
  public enum ApplicationMatchTypeEnum {
    BEGINS_WITH("BEGINS_WITH"),
    
    CONTAINS("CONTAINS"),
    
    ENDS_WITH("ENDS_WITH"),
    
    EQUALS("EQUALS"),
    
    MATCHES("MATCHES");

    private String value;

    ApplicationMatchTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApplicationMatchTypeEnum fromValue(String value) {
      for (ApplicationMatchTypeEnum b : ApplicationMatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_APPLICATION_MATCH_TYPE = "applicationMatchType";
  private ApplicationMatchTypeEnum applicationMatchType;

  /**
   * Where to look for the the **pattern** value.
   */
  public enum ApplicationMatchTargetEnum {
    DOMAIN("DOMAIN"),
    
    URL("URL");

    private String value;

    ApplicationMatchTargetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApplicationMatchTargetEnum fromValue(String value) {
      for (ApplicationMatchTargetEnum b : ApplicationMatchTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_APPLICATION_MATCH_TARGET = "applicationMatchTarget";
  private ApplicationMatchTargetEnum applicationMatchTarget;

  public ApplicationFilter() { 
  }

  public ApplicationFilter pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * The value to look for.
   * @return pattern
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "myapp.example.com", required = true, value = "The value to look for.")
  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPattern() {
    return pattern;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public ApplicationFilter applicationMatchType(ApplicationMatchTypeEnum applicationMatchType) {
    this.applicationMatchType = applicationMatchType;
    return this;
  }

   /**
   * The operator of the matching.
   * @return applicationMatchType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EQUALS", required = true, value = "The operator of the matching.")
  @JsonProperty(JSON_PROPERTY_APPLICATION_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ApplicationMatchTypeEnum getApplicationMatchType() {
    return applicationMatchType;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApplicationMatchType(ApplicationMatchTypeEnum applicationMatchType) {
    this.applicationMatchType = applicationMatchType;
  }


  public ApplicationFilter applicationMatchTarget(ApplicationMatchTargetEnum applicationMatchTarget) {
    this.applicationMatchTarget = applicationMatchTarget;
    return this;
  }

   /**
   * Where to look for the the **pattern** value.
   * @return applicationMatchTarget
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DOMAIN", required = true, value = "Where to look for the the **pattern** value.")
  @JsonProperty(JSON_PROPERTY_APPLICATION_MATCH_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ApplicationMatchTargetEnum getApplicationMatchTarget() {
    return applicationMatchTarget;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION_MATCH_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApplicationMatchTarget(ApplicationMatchTargetEnum applicationMatchTarget) {
    this.applicationMatchTarget = applicationMatchTarget;
  }


  /**
   * Return true if this ApplicationFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationFilter applicationFilter = (ApplicationFilter) o;
    return Objects.equals(this.pattern, applicationFilter.pattern) &&
        Objects.equals(this.applicationMatchType, applicationFilter.applicationMatchType) &&
        Objects.equals(this.applicationMatchTarget, applicationFilter.applicationMatchTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pattern, applicationMatchType, applicationMatchTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationFilter {\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    applicationMatchType: ").append(toIndentedString(applicationMatchType)).append("\n");
    sb.append("    applicationMatchTarget: ").append(toIndentedString(applicationMatchTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

