/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.NotificationConfig;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * Configuration of the email notification.
 */
@ApiModel(description = "Configuration of the email notification.")
@JsonPropertyOrder({
  EmailNotificationConfig.JSON_PROPERTY_SUBJECT,
  EmailNotificationConfig.JSON_PROPERTY_BODY,
  EmailNotificationConfig.JSON_PROPERTY_RECEIVERS,
  EmailNotificationConfig.JSON_PROPERTY_CC_RECEIVERS,
  EmailNotificationConfig.JSON_PROPERTY_BCC_RECEIVERS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class EmailNotificationConfig extends NotificationConfig {
  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_BODY = "body";
  private String body;

  public static final String JSON_PROPERTY_RECEIVERS = "receivers";
  private Set<String> receivers = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_CC_RECEIVERS = "ccReceivers";
  private Set<String> ccReceivers = null;

  public static final String JSON_PROPERTY_BCC_RECEIVERS = "bccReceivers";
  private Set<String> bccReceivers = null;

  public EmailNotificationConfig() { 
  }

  public EmailNotificationConfig subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject of the email notifications.
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The subject of the email notifications.")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public EmailNotificationConfig body(String body) {
    this.body = body;
    return this;
  }

   /**
   * The template of the email notification.   You can use the following placeholders:  * &#x60;{ImpactedEntities}&#x60;: Details about the entities impacted by the problem in form of a JSON array.  * &#x60;{ImpactedEntity}&#x60;: The entity impacted by the problem or *X* impacted entities.  * &#x60;{PID}&#x60;: The ID of the reported problem.  * &#x60;{ProblemDetailsHTML}&#x60;: All problem event details, including root cause, as an HTML-formatted string.  * &#x60;{ProblemDetailsJSON}&#x60;: All problem event details, including root cause, as a JSON object.  * &#x60;{ProblemDetailsMarkdown}&#x60;: All problem event details, including root cause, as a [Markdown-formatted](https://dt-url.net/1yk3kkq) string.  * &#x60;{ProblemDetailsText}&#x60;: All problem event details, including root cause, as a text-formatted string.  * &#x60;{ProblemID}&#x60;: The display number of the reported problem.  * &#x60;{ProblemImpact}&#x60;: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are &#x60;APPLICATION&#x60;, &#x60;SERVICE&#x60;, and &#x60;INFRASTRUCTURE&#x60;.  * &#x60;{ProblemSeverity}&#x60;: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are &#x60;AVAILABILITY&#x60;, &#x60;ERROR&#x60;, &#x60;PERFORMANCE&#x60;, &#x60;RESOURCE_CONTENTION&#x60;, and &#x60;CUSTOM_ALERT&#x60;.  * &#x60;{ProblemTitle}&#x60;: A short description of the problem.  * &#x60;{ProblemURL}&#x60;: The URL of the problem within Dynatrace.  * &#x60;{State}&#x60;: The state of the problem. Possible values are &#x60;OPEN&#x60; and &#x60;RESOLVED&#x60;.  * &#x60;{Tags}&#x60;: The list of tags that are defined for all impacted entities, separated by commas.  
   * @return body
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The template of the email notification.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://dt-url.net/1yk3kkq) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://dt-url.net/klg3k4q) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://dt-url.net/f1i3k5b) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  ")
  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBody() {
    return body;
  }


  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBody(String body) {
    this.body = body;
  }


  public EmailNotificationConfig receivers(Set<String> receivers) {
    this.receivers = receivers;
    return this;
  }

  public EmailNotificationConfig addReceiversItem(String receiversItem) {
    this.receivers.add(receiversItem);
    return this;
  }

   /**
   * The list of the email recipients.
   * @return receivers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of the email recipients.")
  @JsonProperty(JSON_PROPERTY_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getReceivers() {
    return receivers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceivers(Set<String> receivers) {
    this.receivers = receivers;
  }


  public EmailNotificationConfig ccReceivers(Set<String> ccReceivers) {
    this.ccReceivers = ccReceivers;
    return this;
  }

  public EmailNotificationConfig addCcReceiversItem(String ccReceiversItem) {
    if (this.ccReceivers == null) {
      this.ccReceivers = new LinkedHashSet<>();
    }
    this.ccReceivers.add(ccReceiversItem);
    return this;
  }

   /**
   * The list of the email CC-recipients.
   * @return ccReceivers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of the email CC-recipients.")
  @JsonProperty(JSON_PROPERTY_CC_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getCcReceivers() {
    return ccReceivers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CC_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcReceivers(Set<String> ccReceivers) {
    this.ccReceivers = ccReceivers;
  }


  public EmailNotificationConfig bccReceivers(Set<String> bccReceivers) {
    this.bccReceivers = bccReceivers;
    return this;
  }

  public EmailNotificationConfig addBccReceiversItem(String bccReceiversItem) {
    if (this.bccReceivers == null) {
      this.bccReceivers = new LinkedHashSet<>();
    }
    this.bccReceivers.add(bccReceiversItem);
    return this;
  }

   /**
   * The list of the email BCC-recipients.
   * @return bccReceivers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of the email BCC-recipients.")
  @JsonProperty(JSON_PROPERTY_BCC_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getBccReceivers() {
    return bccReceivers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_BCC_RECEIVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBccReceivers(Set<String> bccReceivers) {
    this.bccReceivers = bccReceivers;
  }


  /**
   * Return true if this EmailNotificationConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailNotificationConfig emailNotificationConfig = (EmailNotificationConfig) o;
    return Objects.equals(this.subject, emailNotificationConfig.subject) &&
        Objects.equals(this.body, emailNotificationConfig.body) &&
        Objects.equals(this.receivers, emailNotificationConfig.receivers) &&
        Objects.equals(this.ccReceivers, emailNotificationConfig.ccReceivers) &&
        Objects.equals(this.bccReceivers, emailNotificationConfig.bccReceivers) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, body, receivers, ccReceivers, bccReceivers, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailNotificationConfig {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    receivers: ").append(toIndentedString(receivers)).append("\n");
    sb.append("    ccReceivers: ").append(toIndentedString(ccReceivers)).append("\n");
    sb.append("    bccReceivers: ").append(toIndentedString(bccReceivers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("EmailNotificationConfig", EmailNotificationConfig.class);
  JSON.registerDiscriminator(EmailNotificationConfig.class, "type", mappings);
}
}

