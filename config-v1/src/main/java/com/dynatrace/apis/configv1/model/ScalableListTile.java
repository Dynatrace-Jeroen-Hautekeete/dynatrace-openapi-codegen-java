/*
 * Dynatrace Configuration API
 * Documentation of the Dynatrace Configuration API. To read about use-cases and examples, see [Dynatrace Documentation](https://dt-url.net/4u43kxw).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.configv1.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.configv1.model.Tile;
import com.dynatrace.apis.configv1.model.TileBounds;
import com.dynatrace.apis.configv1.model.TileFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.configv1.JSON;
/**
 * Configuration of a tile with the built-in custom filter id. This is only for internal usage.
 */
@ApiModel(description = "Configuration of a tile with the built-in custom filter id. This is only for internal usage.")
@JsonPropertyOrder({
  ScalableListTile.JSON_PROPERTY_CUSTOM_FILTER_ID,
  ScalableListTile.JSON_PROPERTY_ENTITY_SPECIFIC_TILE_TYPE,
  ScalableListTile.JSON_PROPERTY_CHART_VISIBLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:07:55.784964900+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "tileType", // ignore manually set tileType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the tileType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "tileType", visible = true)

public class ScalableListTile extends Tile {
  public static final String JSON_PROPERTY_CUSTOM_FILTER_ID = "customFilterId";
  private String customFilterId;

  /**
   * The type of the entity specific tile.
   */
  public enum EntitySpecificTileTypeEnum {
    APPLICATION("APPLICATION"),
    
    APPLICATIONS("APPLICATIONS"),
    
    APPLICATIONS_MOST_ACTIVE("APPLICATIONS_MOST_ACTIVE"),
    
    APPLICATION_WORLDMAP("APPLICATION_WORLDMAP"),
    
    AWS("AWS"),
    
    BOUNCE_RATE("BOUNCE_RATE"),
    
    CUSTOM_APPLICATION("CUSTOM_APPLICATION"),
    
    CUSTOM_CHARTING("CUSTOM_CHARTING"),
    
    DATABASE("DATABASE"),
    
    DATABASES_OVERVIEW("DATABASES_OVERVIEW"),
    
    DATA_EXPLORER("DATA_EXPLORER"),
    
    DCRUM_SERVICES("DCRUM_SERVICES"),
    
    DEM_KEY_USER_ACTION("DEM_KEY_USER_ACTION"),
    
    DOCKER("DOCKER"),
    
    DTAQL("DTAQL"),
    
    HEADER("HEADER"),
    
    HOST("HOST"),
    
    HOSTS("HOSTS"),
    
    IMAGE("IMAGE"),
    
    LOGS_EVENTS_QUERY("LOGS_EVENTS_QUERY"),
    
    LOG_ANALYTICS("LOG_ANALYTICS"),
    
    LOG_QUERY("LOG_QUERY"),
    
    MARKDOWN("MARKDOWN"),
    
    MOBILE_APPLICATION("MOBILE_APPLICATION"),
    
    NETWORK("NETWORK"),
    
    NETWORK_MEDIUM("NETWORK_MEDIUM"),
    
    OPEN_PROBLEMS("OPEN_PROBLEMS"),
    
    PROCESS_GROUPS_ONE("PROCESS_GROUPS_ONE"),
    
    PURE_MODEL("PURE_MODEL"),
    
    RESOURCES("RESOURCES"),
    
    SCALABLE_LIST("SCALABLE_LIST"),
    
    SERVICES("SERVICES"),
    
    SERVICE_VERSATILE("SERVICE_VERSATILE"),
    
    SESSION_METRICS("SESSION_METRICS"),
    
    SLO("SLO"),
    
    SYNTHETIC_HTTP_MONITOR("SYNTHETIC_HTTP_MONITOR"),
    
    SYNTHETIC_SINGLE_EXT_TEST("SYNTHETIC_SINGLE_EXT_TEST"),
    
    SYNTHETIC_SINGLE_WEBCHECK("SYNTHETIC_SINGLE_WEBCHECK"),
    
    SYNTHETIC_TESTS("SYNTHETIC_TESTS"),
    
    THIRD_PARTY_MOST_ACTIVE("THIRD_PARTY_MOST_ACTIVE"),
    
    UEM_ACTIVE_SESSIONS("UEM_ACTIVE_SESSIONS"),
    
    UEM_CONVERSIONS_OVERALL("UEM_CONVERSIONS_OVERALL"),
    
    UEM_CONVERSIONS_PER_GOAL("UEM_CONVERSIONS_PER_GOAL"),
    
    UEM_JSERRORS_OVERALL("UEM_JSERRORS_OVERALL"),
    
    UEM_KEY_USER_ACTIONS("UEM_KEY_USER_ACTIONS"),
    
    USERS("USERS"),
    
    VIRTUALIZATION("VIRTUALIZATION");

    private String value;

    EntitySpecificTileTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntitySpecificTileTypeEnum fromValue(String value) {
      for (EntitySpecificTileTypeEnum b : EntitySpecificTileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_SPECIFIC_TILE_TYPE = "entitySpecificTileType";
  private EntitySpecificTileTypeEnum entitySpecificTileType;

  public static final String JSON_PROPERTY_CHART_VISIBLE = "chartVisible";
  private Boolean chartVisible;

  public ScalableListTile() { 
  }

  public ScalableListTile customFilterId(String customFilterId) {
    this.customFilterId = customFilterId;
    return this;
  }

   /**
   * The ID of the custom filter.
   * @return customFilterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the custom filter.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_FILTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomFilterId() {
    return customFilterId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_FILTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomFilterId(String customFilterId) {
    this.customFilterId = customFilterId;
  }


  public ScalableListTile entitySpecificTileType(EntitySpecificTileTypeEnum entitySpecificTileType) {
    this.entitySpecificTileType = entitySpecificTileType;
    return this;
  }

   /**
   * The type of the entity specific tile.
   * @return entitySpecificTileType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the entity specific tile.")
  @JsonProperty(JSON_PROPERTY_ENTITY_SPECIFIC_TILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntitySpecificTileTypeEnum getEntitySpecificTileType() {
    return entitySpecificTileType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_SPECIFIC_TILE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntitySpecificTileType(EntitySpecificTileTypeEnum entitySpecificTileType) {
    this.entitySpecificTileType = entitySpecificTileType;
  }


  public ScalableListTile chartVisible(Boolean chartVisible) {
    this.chartVisible = chartVisible;
    return this;
  }

   /**
   * Get chartVisible
   * @return chartVisible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHART_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getChartVisible() {
    return chartVisible;
  }


  @JsonProperty(JSON_PROPERTY_CHART_VISIBLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChartVisible(Boolean chartVisible) {
    this.chartVisible = chartVisible;
  }


  /**
   * Return true if this ScalableListTile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScalableListTile scalableListTile = (ScalableListTile) o;
    return Objects.equals(this.customFilterId, scalableListTile.customFilterId) &&
        Objects.equals(this.entitySpecificTileType, scalableListTile.entitySpecificTileType) &&
        Objects.equals(this.chartVisible, scalableListTile.chartVisible) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFilterId, entitySpecificTileType, chartVisible, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScalableListTile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    customFilterId: ").append(toIndentedString(customFilterId)).append("\n");
    sb.append("    entitySpecificTileType: ").append(toIndentedString(entitySpecificTileType)).append("\n");
    sb.append("    chartVisible: ").append(toIndentedString(chartVisible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("ScalableListTile", ScalableListTile.class);
  JSON.registerDiscriminator(ScalableListTile.class, "tileType", mappings);
}
}

