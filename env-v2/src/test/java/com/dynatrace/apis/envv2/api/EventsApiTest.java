/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.Event;
import com.dynatrace.apis.envv2.model.EventIngest;
import com.dynatrace.apis.envv2.model.EventIngestResults;
import com.dynatrace.apis.envv2.model.EventList;
import com.dynatrace.apis.envv2.model.EventPropertyDetail;
import com.dynatrace.apis.envv2.model.EventPropertyDetails;
import com.dynatrace.apis.envv2.model.EventType;
import com.dynatrace.apis.envv2.model.EventTypeList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    
    /**
     * Ingests a custom event
     *
     * The ingestion of custom events consumes [Davis Data Units](https://dt-url.net/ddu) (DDUs) from the events pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventTest() throws ApiException {
        EventIngest eventIngest = null;
        EventIngestResults response = 
        api.createEvent(eventIngest);
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of an event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String eventId = null;
        Event response = 
        api.getEvent(eventId);
        
        // TODO: test validations
    }
    
    /**
     * Lists all event properties
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventPropertiesTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        EventPropertyDetails response = 
        api.getEventProperties(nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Gets the details of an event property
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventPropertyTest() throws ApiException {
        String propertyKey = null;
        EventPropertyDetail response = 
        api.getEventProperty(propertyKey);
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of an event type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTypeTest() throws ApiException {
        String eventType = null;
        EventType response = 
        api.getEventType(eventType);
        
        // TODO: test validations
    }
    
    /**
     * Lists all event types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        EventTypeList response = 
        api.getEventTypes(nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Lists events within the specified timeframe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        String from = null;
        String to = null;
        String eventSelector = null;
        String entitySelector = null;
        EventList response = 
        api.getEvents(nextPageKey, pageSize, from, to, eventSelector, entitySelector);
        
        // TODO: test validations
    }
    
}
