/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.ApiToken;
import com.dynatrace.apis.envv2.model.ApiTokenCreate;
import com.dynatrace.apis.envv2.model.ApiTokenCreated;
import com.dynatrace.apis.envv2.model.ApiTokenList;
import com.dynatrace.apis.envv2.model.ApiTokenSecret;
import com.dynatrace.apis.envv2.model.ApiTokenUpdate;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AccessTokensApiTokensApi
 */
@Ignore
public class AccessTokensApiTokensApiTest {

    private final AccessTokensApiTokensApi api = new AccessTokensApiTokensApi();

    
    /**
     * Creates a new API token
     *
     * The newly created token will be owned by the same user who owns the token used for authentication of the call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiTokenTest() throws ApiException {
        ApiTokenCreate apiTokenCreate = null;
        ApiTokenCreated response = 
        api.createApiToken(apiTokenCreate);
        
        // TODO: test validations
    }
    
    /**
     * Deletes an API token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiTokenTest() throws ApiException {
        String id = null;
        
        api.deleteApiToken(id);
        
        // TODO: test validations
    }
    
    /**
     * Gets API token metadata by token ID
     *
     * The token secret is **not** exposed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiTokenTest() throws ApiException {
        String id = null;
        ApiToken response = 
        api.getApiToken(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available API tokens
     *
     * You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiTokensTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        String apiTokenSelector = null;
        String fields = null;
        String from = null;
        String to = null;
        String sort = null;
        ApiTokenList response = 
        api.listApiTokens(nextPageKey, pageSize, apiTokenSelector, fields, from, to, sort);
        
        // TODO: test validations
    }
    
    /**
     * Gets API token metadata by token secret
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupApiTokenTest() throws ApiException {
        ApiTokenSecret apiTokenSecret = null;
        ApiToken response = 
        api.lookupApiToken(apiTokenSecret);
        
        // TODO: test validations
    }
    
    /**
     * Updates an API token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApiTokenTest() throws ApiException {
        String id = null;
        ApiTokenUpdate apiTokenUpdate = null;
        
        api.updateApiToken(id, apiTokenUpdate);
        
        // TODO: test validations
    }
    
}
