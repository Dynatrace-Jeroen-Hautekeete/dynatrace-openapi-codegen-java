/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.AbstractSloAlertDto;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.SLO;
import com.dynatrace.apis.envv2.model.SLOs;
import com.dynatrace.apis.envv2.model.SloConfigItemDtoImpl;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ServiceLevelObjectivesApi
 */
@Ignore
public class ServiceLevelObjectivesApiTest {

    private final ServiceLevelObjectivesApi api = new ServiceLevelObjectivesApi();

    
    /**
     * Creates an alert of the provided alert type for an SLO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAlertTest() throws ApiException {
        UUID id = null;
        AbstractSloAlertDto abstractSloAlertDto = null;
        String from = null;
        String to = null;
        String timeFrame = null;
        
        api.createAlert(id, abstractSloAlertDto, from, to, timeFrame);
        
        // TODO: test validations
    }
    
    /**
     * Creates a new SLO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSloTest() throws ApiException {
        SloConfigItemDtoImpl sloConfigItemDtoImpl = null;
        
        api.createSlo(sloConfigItemDtoImpl);
        
        // TODO: test validations
    }
    
    /**
     * Deletes an SLO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSloTest() throws ApiException {
        UUID id = null;
        
        api.deleteSlo(id);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available SLOs along with calculated values
     *
     * By default the values are calculated for the SLO&#39;s own timeframe. You can use a custom timeframe:   1. Set the **timeFrame** parameter to &#x60;GTF&#x60;.  2. Provide the timeframe in **from** and **to** parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSloTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        String from = null;
        String to = null;
        String sloSelector = null;
        String sort = null;
        String timeFrame = null;
        Boolean demo = null;
        String evaluate = null;
        String enabledSlos = null;
        Boolean showGlobalSlos = null;
        SLOs response = 
        api.getSlo(nextPageKey, pageSize, from, to, sloSelector, sort, timeFrame, demo, evaluate, enabledSlos, showGlobalSlos);
        
        // TODO: test validations
    }
    
    /**
     * Gets parameters and calculated values of a specific SLO
     *
     * If **from** and **to** parameters are provided, the SLO is calculated for that timeframe; otherwise the SLO&#39;s own timeframe is used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSloByIdTest() throws ApiException {
        UUID id = null;
        String from = null;
        String to = null;
        String timeFrame = null;
        SLO response = 
        api.getSloById(id, from, to, timeFrame);
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing SLO
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSloByIdTest() throws ApiException {
        UUID id = null;
        SloConfigItemDtoImpl sloConfigItemDtoImpl = null;
        
        api.updateSloById(id, sloConfigItemDtoImpl);
        
        // TODO: test validations
    }
    
}
