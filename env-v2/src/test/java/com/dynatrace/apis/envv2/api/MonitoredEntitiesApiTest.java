/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.CustomDeviceCreation;
import com.dynatrace.apis.envv2.model.CustomDeviceCreationResult;
import com.dynatrace.apis.envv2.model.EntitiesList;
import com.dynatrace.apis.envv2.model.Entity;
import com.dynatrace.apis.envv2.model.EntityType;
import com.dynatrace.apis.envv2.model.EntityTypeList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for MonitoredEntitiesApi
 */
@Ignore
public class MonitoredEntitiesApiTest {

    private final MonitoredEntitiesApi api = new MonitoredEntitiesApi();

    
    /**
     * Gets the information about monitored entities
     *
     * Lists entities observed within the specified timeframe along with their properties.   When you query entities of the &#x60;SERVICE_METHOD&#x60; type, only the following requests are returned:   * [Key requests](https://dt-url.net/a903u9s)  * Top X requests that are used for [baselining](https://dt-url.net/0j23uqb)  * Requests that have caused a [problem](https://dt-url.net/pf43uqg)   You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        String entitySelector = null;
        String from = null;
        String to = null;
        String fields = null;
        String sort = null;
        EntitiesList response = 
        api.getEntities(nextPageKey, pageSize, entitySelector, from, to, fields, sort);
        
        // TODO: test validations
    }
    
    /**
     * Gets the properties of the specified monitored entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntityTest() throws ApiException {
        String entityId = null;
        String from = null;
        String to = null;
        String fields = null;
        Entity response = 
        api.getEntity(entityId, from, to, fields);
        
        // TODO: test validations
    }
    
    /**
     * Gets a list of properties for the specified entity type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntityTypeTest() throws ApiException {
        String type = null;
        EntityType response = 
        api.getEntityType(type);
        
        // TODO: test validations
    }
    
    /**
     * Gets a list of properties for all entity types
     *
     * You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntityTypesTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        EntityTypeList response = 
        api.getEntityTypes(nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Creates or updates a custom device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pushCustomDeviceTest() throws ApiException {
        CustomDeviceCreation customDeviceCreation = null;
        CustomDeviceCreationResult response = 
        api.pushCustomDevice(customDeviceCreation);
        
        // TODO: test validations
    }
    
}
