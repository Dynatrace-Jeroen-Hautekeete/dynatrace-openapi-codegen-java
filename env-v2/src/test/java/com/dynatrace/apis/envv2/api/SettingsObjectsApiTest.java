/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.EffectiveSettingsValuesList;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.ObjectsList;
import com.dynatrace.apis.envv2.model.SettingsObject;
import com.dynatrace.apis.envv2.model.SettingsObjectCreate;
import com.dynatrace.apis.envv2.model.SettingsObjectResponse;
import com.dynatrace.apis.envv2.model.SettingsObjectUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for SettingsObjectsApi
 */
@Ignore
public class SettingsObjectsApiTest {

    private final SettingsObjectsApi api = new SettingsObjectsApi();

    
    /**
     * Deletes the specified settings object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsObjectByObjectIdTest() throws ApiException {
        String objectId = null;
        String updateToken = null;
        
        api.deleteSettingsObjectByObjectId(objectId, updateToken);
        
        // TODO: test validations
    }
    
    /**
     * Lists effective settings values
     *
     * Lists effective settings values for selected schemas at a selected scope (or entity). This operation evaluates the hierarchy of persisted objects (see [/settings/objects](#/Settings%20-%20Objects/getSettingsObjects))  It will always return a result for a schema/scope combination, even if the schema would not be relevant to the given scope/entity.  If no object along the hierarchy is persisted, the default value as defined in the schema will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEffectiveSettingsValuesTest() throws ApiException {
        String schemaIds = null;
        String scope = null;
        String fields = null;
        String nextPageKey = null;
        Long pageSize = null;
        EffectiveSettingsValuesList response = 
        api.getEffectiveSettingsValues(schemaIds, scope, fields, nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Gets the specified settings object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsObjectByObjectIdTest() throws ApiException {
        String objectId = null;
        SettingsObject response = 
        api.getSettingsObjectByObjectId(objectId);
        
        // TODO: test validations
    }
    
    /**
     * Lists persisted settings objects
     *
     * Lists persisted settings objects for selected schemas at selected scopes (or entities).  If nothing is persisted or if all persisted settings objects are not accessible due to missing permissions, no items will be returned.  To query the effective values (including schema defaults) please see [/settings/effectiveValues](#/Settings%20-%20Objects/getEffectiveSettingsValues).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsObjectsTest() throws ApiException {
        String schemaIds = null;
        String scopes = null;
        String fields = null;
        String nextPageKey = null;
        Long pageSize = null;
        ObjectsList response = 
        api.getSettingsObjects(schemaIds, scopes, fields, nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Creates a new settings object
     *
     * You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSettingsObjectsTest() throws ApiException {
        Boolean validateOnly = null;
        List<SettingsObjectCreate> settingsObjectCreate = null;
        List<SettingsObjectResponse> response = 
        api.postSettingsObjects(validateOnly, settingsObjectCreate);
        
        // TODO: test validations
    }
    
    /**
     * Updates an existing settings object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSettingsObjectByObjectIdTest() throws ApiException {
        String objectId = null;
        SettingsObjectUpdate settingsObjectUpdate = null;
        SettingsObjectResponse response = 
        api.putSettingsObjectByObjectId(objectId, settingsObjectUpdate);
        
        // TODO: test validations
    }
    
}
