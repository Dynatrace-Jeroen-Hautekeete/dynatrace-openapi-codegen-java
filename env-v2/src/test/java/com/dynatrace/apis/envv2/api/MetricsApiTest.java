/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.MetricData;
import com.dynatrace.apis.envv2.model.MetricDescriptor;
import com.dynatrace.apis.envv2.model.MetricDescriptorCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for MetricsApi
 */
@Ignore
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    
    /**
     * Lists all available metrics
     *
     * You can narrow down the output by selecting metrics in the **metricSelector** field.   You can additionally limit the output by using pagination:   1. Specify the number of results per page in the **pageSize** query parameter.   2. Then use the cursor from the **nextPageKey** field of the response in the **nextPageKey** query parameter to obtain subsequent pages. All other query parameters must be omitted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allMetricsTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        String metricSelector = null;
        String text = null;
        String fields = null;
        String writtenSince = null;
        String metadataSelector = null;
        MetricDescriptorCollection response = 
        api.allMetrics(nextPageKey, pageSize, metricSelector, text, fields, writtenSince, metadataSelector);
        
        // TODO: test validations
    }
    
    /**
     * Deletes the specified metric
     *
     * Deletion cannot be undone! You can&#39;t delete a metric if it has data points ingested within the last two hours.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String metricKey = null;
        
        api.delete(metricKey);
        
        // TODO: test validations
    }
    
    /**
     * Pushes metric data points to Dynatrace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ingestTest() throws ApiException {
        String body = null;
        
        api.ingest(body);
        
        // TODO: test validations
    }
    
    /**
     * Gets the descriptor of the specified metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metricTest() throws ApiException {
        String metricKey = null;
        MetricDescriptor response = 
        api.metric(metricKey);
        
        // TODO: test validations
    }
    
    /**
     * Gets data points of the specified metrics
     *
     * The following limits apply:  * The amount of aggregated data points in the response is limited to 1,000  * The amount of series in the response is limited to 1,000     * The amount of data points per series is limited to 10,080 (minutes of one week)     * The overall amount of data points is limited to 100,000   The **dataPointCountRatio** specifies the ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query. The **dimensionCountRatio** specifies the ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        String metricSelector = null;
        String resolution = null;
        String from = null;
        String to = null;
        String entitySelector = null;
        String mzSelector = null;
        MetricData response = 
        api.query(metricSelector, resolution, from, to, entitySelector, mzSelector);
        
        // TODO: test validations
    }
    
}
