/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.model.ActiveGateToken;
import com.dynatrace.apis.envv2.model.ActiveGateTokenCreate;
import com.dynatrace.apis.envv2.model.ActiveGateTokenCreated;
import com.dynatrace.apis.envv2.model.ActiveGateTokenList;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for AccessTokensActiveGateTokensApi
 */
@Ignore
public class AccessTokensActiveGateTokensApiTest {

    private final AccessTokensActiveGateTokensApi api = new AccessTokensActiveGateTokensApi();

    
    /**
     * Creates a new ActiveGate token | maturity&#x3D;EARLY_ADOPTER
     *
     * The newly created token will be owned by the same user who owns the token used for authentication of the call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        ActiveGateTokenCreate activeGateTokenCreate = null;
        ActiveGateTokenCreated response = 
        api.createToken(activeGateTokenCreate);
        
        // TODO: test validations
    }
    
    /**
     * Gets metadata of an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
     *
     * The token secret is **not** exposed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenTest() throws ApiException {
        String activeGateTokenIdentifier = null;
        ActiveGateToken response = 
        api.getToken(activeGateTokenIdentifier);
        
        // TODO: test validations
    }
    
    /**
     * Lists all available ActiveGate tokens | maturity&#x3D;EARLY_ADOPTER
     *
     * You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTokensTest() throws ApiException {
        String nextPageKey = null;
        Long pageSize = null;
        ActiveGateTokenList response = 
        api.listTokens(nextPageKey, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Deletes an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String activeGateTokenIdentifier = null;
        
        api.revokeToken(activeGateTokenIdentifier);
        
        // TODO: test validations
    }
    
}
