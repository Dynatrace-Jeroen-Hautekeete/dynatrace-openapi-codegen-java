/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AvailabilityEvidence;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.Event;
import com.dynatrace.apis.envv2.model.EventEvidence;
import com.dynatrace.apis.envv2.model.Evidence;
import com.dynatrace.apis.envv2.model.MaintenanceWindowEvidence;
import com.dynatrace.apis.envv2.model.MetricEvidence;
import com.dynatrace.apis.envv2.model.TransactionalEvidence;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * The event evidence of the problem.   An event that occurred during the problem lifespan that might be related to the root cause.
 */
@ApiModel(description = "The event evidence of the problem.   An event that occurred during the problem lifespan that might be related to the root cause.")
@JsonPropertyOrder({
  EventEvidence.JSON_PROPERTY_EVENT_ID,
  EventEvidence.JSON_PROPERTY_DATA,
  EventEvidence.JSON_PROPERTY_EVENT_TYPE,
  EventEvidence.JSON_PROPERTY_END_TIME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "evidenceType", // ignore manually set evidenceType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the evidenceType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "evidenceType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AvailabilityEvidence.class, name = "AVAILABILITY_EVIDENCE"),
  @JsonSubTypes.Type(value = EventEvidence.class, name = "EVENT"),
  @JsonSubTypes.Type(value = MaintenanceWindowEvidence.class, name = "MAINTENANCE_WINDOW"),
  @JsonSubTypes.Type(value = MetricEvidence.class, name = "METRIC"),
  @JsonSubTypes.Type(value = TransactionalEvidence.class, name = "TRANSACTIONAL"),
})

public class EventEvidence extends Evidence {
  public static final String JSON_PROPERTY_EVENT_ID = "eventId";
  private String eventId;

  public static final String JSON_PROPERTY_DATA = "data";
  private Event data;

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private String eventType;

  public static final String JSON_PROPERTY_END_TIME = "endTime";
  private Long endTime;

  public EventEvidence() { 
  }

  public EventEvidence eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * The ID of the event.
   * @return eventId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the event.")
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventId() {
    return eventId;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventEvidence data(Event data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Event getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setData(Event data) {
    this.data = data;
  }


  public EventEvidence eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of the event.
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the event.")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventEvidence endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The end timestamp of the event, in UTC milliseconds.    Has &#x60;-1&#x60; value, if the event is still active.
   * @return endTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end timestamp of the event, in UTC milliseconds.    Has `-1` value, if the event is still active.")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  /**
   * Return true if this EventEvidence object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventEvidence eventEvidence = (EventEvidence) o;
    return Objects.equals(this.eventId, eventEvidence.eventId) &&
        Objects.equals(this.data, eventEvidence.data) &&
        Objects.equals(this.eventType, eventEvidence.eventType) &&
        Objects.equals(this.endTime, eventEvidence.endTime) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, data, eventType, endTime, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventEvidence {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AVAILABILITY_EVIDENCE", AvailabilityEvidence.class);
  mappings.put("EVENT", EventEvidence.class);
  mappings.put("MAINTENANCE_WINDOW", MaintenanceWindowEvidence.class);
  mappings.put("METRIC", MetricEvidence.class);
  mappings.put("TRANSACTIONAL", TransactionalEvidence.class);
  mappings.put("EventEvidence", EventEvidence.class);
  JSON.registerDiscriminator(EventEvidence.class, "evidenceType", mappings);
}
}

