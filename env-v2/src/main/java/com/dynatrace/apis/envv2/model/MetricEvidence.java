/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AvailabilityEvidence;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.EventEvidence;
import com.dynatrace.apis.envv2.model.Evidence;
import com.dynatrace.apis.envv2.model.MaintenanceWindowEvidence;
import com.dynatrace.apis.envv2.model.MetricEvidence;
import com.dynatrace.apis.envv2.model.TransactionalEvidence;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * The metric evidence of the problem.   A change of metric behavior that indicates the problem and/or is its root cause.
 */
@ApiModel(description = "The metric evidence of the problem.   A change of metric behavior that indicates the problem and/or is its root cause.")
@JsonPropertyOrder({
  MetricEvidence.JSON_PROPERTY_VALUE_BEFORE_CHANGE_POINT,
  MetricEvidence.JSON_PROPERTY_VALUE_AFTER_CHANGE_POINT,
  MetricEvidence.JSON_PROPERTY_METRIC_ID,
  MetricEvidence.JSON_PROPERTY_END_TIME,
  MetricEvidence.JSON_PROPERTY_UNIT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "evidenceType", // ignore manually set evidenceType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the evidenceType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "evidenceType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AvailabilityEvidence.class, name = "AVAILABILITY_EVIDENCE"),
  @JsonSubTypes.Type(value = EventEvidence.class, name = "EVENT"),
  @JsonSubTypes.Type(value = MaintenanceWindowEvidence.class, name = "MAINTENANCE_WINDOW"),
  @JsonSubTypes.Type(value = MetricEvidence.class, name = "METRIC"),
  @JsonSubTypes.Type(value = TransactionalEvidence.class, name = "TRANSACTIONAL"),
})

public class MetricEvidence extends Evidence {
  public static final String JSON_PROPERTY_VALUE_BEFORE_CHANGE_POINT = "valueBeforeChangePoint";
  private Float valueBeforeChangePoint;

  public static final String JSON_PROPERTY_VALUE_AFTER_CHANGE_POINT = "valueAfterChangePoint";
  private Float valueAfterChangePoint;

  public static final String JSON_PROPERTY_METRIC_ID = "metricId";
  private String metricId;

  public static final String JSON_PROPERTY_END_TIME = "endTime";
  private Long endTime;

  /**
   * The unit of the metric.
   */
  public enum UnitEnum {
    BILLION("Billion"),
    
    BIT("Bit"),
    
    BITPERHOUR("BitPerHour"),
    
    BITPERMINUTE("BitPerMinute"),
    
    BITPERSECOND("BitPerSecond"),
    
    BYTE("Byte"),
    
    BYTEPERHOUR("BytePerHour"),
    
    BYTEPERMINUTE("BytePerMinute"),
    
    BYTEPERSECOND("BytePerSecond"),
    
    CORES("Cores"),
    
    COUNT("Count"),
    
    DAY("Day"),
    
    DECIBELMILLIWATT("DecibelMilliWatt"),
    
    GIBIBYTE("GibiByte"),
    
    GIGA("Giga"),
    
    GIGABYTE("GigaByte"),
    
    HOUR("Hour"),
    
    KIBIBYTE("KibiByte"),
    
    KIBIBYTEPERHOUR("KibiBytePerHour"),
    
    KIBIBYTEPERMINUTE("KibiBytePerMinute"),
    
    KIBIBYTEPERSECOND("KibiBytePerSecond"),
    
    KILO("Kilo"),
    
    KILOBYTE("KiloByte"),
    
    KILOBYTEPERHOUR("KiloBytePerHour"),
    
    KILOBYTEPERMINUTE("KiloBytePerMinute"),
    
    KILOBYTEPERSECOND("KiloBytePerSecond"),
    
    KILOMETREPERHOUR("KiloMetrePerHour"),
    
    MSU("MSU"),
    
    MEBIBYTE("MebiByte"),
    
    MEBIBYTEPERHOUR("MebiBytePerHour"),
    
    MEBIBYTEPERMINUTE("MebiBytePerMinute"),
    
    MEBIBYTEPERSECOND("MebiBytePerSecond"),
    
    MEGA("Mega"),
    
    MEGABYTE("MegaByte"),
    
    MEGABYTEPERHOUR("MegaBytePerHour"),
    
    MEGABYTEPERMINUTE("MegaBytePerMinute"),
    
    MEGABYTEPERSECOND("MegaBytePerSecond"),
    
    METREPERHOUR("MetrePerHour"),
    
    METREPERSECOND("MetrePerSecond"),
    
    MICROSECOND("MicroSecond"),
    
    MILLICORES("MilliCores"),
    
    MILLISECOND("MilliSecond"),
    
    MILLISECONDPERMINUTE("MilliSecondPerMinute"),
    
    MILLION("Million"),
    
    MINUTE("Minute"),
    
    MONTH("Month"),
    
    NANOSECOND("NanoSecond"),
    
    NANOSECONDPERMINUTE("NanoSecondPerMinute"),
    
    NOTAPPLICABLE("NotApplicable"),
    
    PERHOUR("PerHour"),
    
    PERMINUTE("PerMinute"),
    
    PERSECOND("PerSecond"),
    
    PERCENT("Percent"),
    
    PIXEL("Pixel"),
    
    PROMILLE("Promille"),
    
    RATIO("Ratio"),
    
    SECOND("Second"),
    
    STATE("State"),
    
    UNSPECIFIED("Unspecified"),
    
    WEEK("Week"),
    
    YEAR("Year");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT = "unit";
  private UnitEnum unit;

  public MetricEvidence() { 
  }

  public MetricEvidence valueBeforeChangePoint(Float valueBeforeChangePoint) {
    this.valueBeforeChangePoint = valueBeforeChangePoint;
    return this;
  }

   /**
   * The metric&#39;s value before the problem start.
   * @return valueBeforeChangePoint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The metric's value before the problem start.")
  @JsonProperty(JSON_PROPERTY_VALUE_BEFORE_CHANGE_POINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getValueBeforeChangePoint() {
    return valueBeforeChangePoint;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_BEFORE_CHANGE_POINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValueBeforeChangePoint(Float valueBeforeChangePoint) {
    this.valueBeforeChangePoint = valueBeforeChangePoint;
  }


  public MetricEvidence valueAfterChangePoint(Float valueAfterChangePoint) {
    this.valueAfterChangePoint = valueAfterChangePoint;
    return this;
  }

   /**
   * The metric&#39;s value after the problem start.
   * @return valueAfterChangePoint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The metric's value after the problem start.")
  @JsonProperty(JSON_PROPERTY_VALUE_AFTER_CHANGE_POINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getValueAfterChangePoint() {
    return valueAfterChangePoint;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_AFTER_CHANGE_POINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValueAfterChangePoint(Float valueAfterChangePoint) {
    this.valueAfterChangePoint = valueAfterChangePoint;
  }


  public MetricEvidence metricId(String metricId) {
    this.metricId = metricId;
    return this;
  }

   /**
   * The ID of the metric.
   * @return metricId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the metric.")
  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetricId() {
    return metricId;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricId(String metricId) {
    this.metricId = metricId;
  }


  public MetricEvidence endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The end time of the evidence, in UTC milliseconds.  The value &#x60;null&#x60; indicates that the evidence is still open.
   * @return endTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the evidence, in UTC milliseconds.  The value `null` indicates that the evidence is still open.")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public MetricEvidence unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The unit of the metric.
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unit of the metric.")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UnitEnum getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  /**
   * Return true if this MetricEvidence object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricEvidence metricEvidence = (MetricEvidence) o;
    return Objects.equals(this.valueBeforeChangePoint, metricEvidence.valueBeforeChangePoint) &&
        Objects.equals(this.valueAfterChangePoint, metricEvidence.valueAfterChangePoint) &&
        Objects.equals(this.metricId, metricEvidence.metricId) &&
        Objects.equals(this.endTime, metricEvidence.endTime) &&
        Objects.equals(this.unit, metricEvidence.unit) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valueBeforeChangePoint, valueAfterChangePoint, metricId, endTime, unit, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricEvidence {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    valueBeforeChangePoint: ").append(toIndentedString(valueBeforeChangePoint)).append("\n");
    sb.append("    valueAfterChangePoint: ").append(toIndentedString(valueAfterChangePoint)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AVAILABILITY_EVIDENCE", AvailabilityEvidence.class);
  mappings.put("EVENT", EventEvidence.class);
  mappings.put("MAINTENANCE_WINDOW", MaintenanceWindowEvidence.class);
  mappings.put("METRIC", MetricEvidence.class);
  mappings.put("TRANSACTIONAL", TransactionalEvidence.class);
  mappings.put("MetricEvidence", MetricEvidence.class);
  JSON.registerDiscriminator(MetricEvidence.class, "evidenceType", mappings);
}
}

