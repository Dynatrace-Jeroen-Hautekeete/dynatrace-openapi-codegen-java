/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.CertificateCredentials;
import com.dynatrace.apis.envv2.model.Credentials;
import com.dynatrace.apis.envv2.model.ExternalVault;
import com.dynatrace.apis.envv2.model.PublicCertificateCredentials;
import com.dynatrace.apis.envv2.model.TokenCredentials;
import com.dynatrace.apis.envv2.model.UserPasswordCredentials;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * A credentials set of the &#x60;USERNAME_PASSWORD&#x60; type.
 */
@ApiModel(description = "A credentials set of the `USERNAME_PASSWORD` type.")
@JsonPropertyOrder({
  UserPasswordCredentials.JSON_PROPERTY_USER,
  UserPasswordCredentials.JSON_PROPERTY_PASSWORD,
  UserPasswordCredentials.JSON_PROPERTY_EXTERNAL_VAULT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CertificateCredentials.class, name = "CERTIFICATE"),
  @JsonSubTypes.Type(value = PublicCertificateCredentials.class, name = "PUBLIC_CERTIFICATE"),
  @JsonSubTypes.Type(value = TokenCredentials.class, name = "TOKEN"),
  @JsonSubTypes.Type(value = UserPasswordCredentials.class, name = "USERNAME_PASSWORD"),
})

public class UserPasswordCredentials extends Credentials {
  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_EXTERNAL_VAULT = "externalVault";
  private ExternalVault externalVault;

  public UserPasswordCredentials() { 
  }

  public UserPasswordCredentials user(String user) {
    this.user = user;
    return this;
  }

   /**
   * The username of the credentials set.
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username of the credentials set.")
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public UserPasswordCredentials password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password of the credential.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password of the credential.")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public UserPasswordCredentials externalVault(ExternalVault externalVault) {
    this.externalVault = externalVault;
    return this;
  }

   /**
   * Get externalVault
   * @return externalVault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_VAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExternalVault getExternalVault() {
    return externalVault;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_VAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalVault(ExternalVault externalVault) {
    this.externalVault = externalVault;
  }


  /**
   * Return true if this UserPasswordCredentials object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPasswordCredentials userPasswordCredentials = (UserPasswordCredentials) o;
    return Objects.equals(this.user, userPasswordCredentials.user) &&
        Objects.equals(this.password, userPasswordCredentials.password) &&
        Objects.equals(this.externalVault, userPasswordCredentials.externalVault) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, password, externalVault, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPasswordCredentials {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    externalVault: ").append(toIndentedString(externalVault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("CERTIFICATE", CertificateCredentials.class);
  mappings.put("PUBLIC_CERTIFICATE", PublicCertificateCredentials.class);
  mappings.put("TOKEN", TokenCredentials.class);
  mappings.put("USERNAME_PASSWORD", UserPasswordCredentials.class);
  mappings.put("UserPasswordCredentials", UserPasswordCredentials.class);
  JSON.registerDiscriminator(UserPasswordCredentials.class, "type", mappings);
}
}

