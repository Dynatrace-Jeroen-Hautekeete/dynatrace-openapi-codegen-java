/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Risk assessment of a security problem.
 */
@ApiModel(description = "Risk assessment of a security problem.")
@JsonPropertyOrder({
  RiskAssessment.JSON_PROPERTY_RISK_LEVEL,
  RiskAssessment.JSON_PROPERTY_RISK_SCORE,
  RiskAssessment.JSON_PROPERTY_RISK_VECTOR,
  RiskAssessment.JSON_PROPERTY_BASE_RISK_LEVEL,
  RiskAssessment.JSON_PROPERTY_BASE_RISK_SCORE,
  RiskAssessment.JSON_PROPERTY_BASE_RISK_VECTOR,
  RiskAssessment.JSON_PROPERTY_EXPOSURE,
  RiskAssessment.JSON_PROPERTY_DATA_ASSETS,
  RiskAssessment.JSON_PROPERTY_PUBLIC_EXPLOIT,
  RiskAssessment.JSON_PROPERTY_VULNERABLE_FUNCTION_USAGE,
  RiskAssessment.JSON_PROPERTY_ASSESSMENT_ACCURACY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class RiskAssessment {
  /**
   * The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
   */
  public enum RiskLevelEnum {
    CRITICAL("CRITICAL"),
    
    HIGH("HIGH"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    NONE("NONE");

    private String value;

    RiskLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RiskLevelEnum fromValue(String value) {
      for (RiskLevelEnum b : RiskLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RISK_LEVEL = "riskLevel";
  private RiskLevelEnum riskLevel;

  public static final String JSON_PROPERTY_RISK_SCORE = "riskScore";
  private Float riskScore;

  public static final String JSON_PROPERTY_RISK_VECTOR = "riskVector";
  private String riskVector;

  /**
   * The risk level from the CVSS score.
   */
  public enum BaseRiskLevelEnum {
    CRITICAL("CRITICAL"),
    
    HIGH("HIGH"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    NONE("NONE");

    private String value;

    BaseRiskLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BaseRiskLevelEnum fromValue(String value) {
      for (BaseRiskLevelEnum b : BaseRiskLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BASE_RISK_LEVEL = "baseRiskLevel";
  private BaseRiskLevelEnum baseRiskLevel;

  public static final String JSON_PROPERTY_BASE_RISK_SCORE = "baseRiskScore";
  private Float baseRiskScore;

  public static final String JSON_PROPERTY_BASE_RISK_VECTOR = "baseRiskVector";
  private String baseRiskVector;

  /**
   * The level of exposure of affected entities.
   */
  public enum ExposureEnum {
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    NOT_DETECTED("NOT_DETECTED"),
    
    PUBLIC_NETWORK("PUBLIC_NETWORK");

    private String value;

    ExposureEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExposureEnum fromValue(String value) {
      for (ExposureEnum b : ExposureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXPOSURE = "exposure";
  private ExposureEnum exposure;

  /**
   * The reachability of related data assets by affected entities.
   */
  public enum DataAssetsEnum {
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    NOT_DETECTED("NOT_DETECTED"),
    
    REACHABLE("REACHABLE");

    private String value;

    DataAssetsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataAssetsEnum fromValue(String value) {
      for (DataAssetsEnum b : DataAssetsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA_ASSETS = "dataAssets";
  private DataAssetsEnum dataAssets;

  /**
   * The availability status of public exploits.
   */
  public enum PublicExploitEnum {
    AVAILABLE("AVAILABLE"),
    
    NOT_AVAILABLE("NOT_AVAILABLE");

    private String value;

    PublicExploitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PublicExploitEnum fromValue(String value) {
      for (PublicExploitEnum b : PublicExploitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PUBLIC_EXPLOIT = "publicExploit";
  private PublicExploitEnum publicExploit;

  /**
   * The state of vulnerable code execution.
   */
  public enum VulnerableFunctionUsageEnum {
    IN_USE("IN_USE"),
    
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    NOT_IN_USE("NOT_IN_USE");

    private String value;

    VulnerableFunctionUsageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VulnerableFunctionUsageEnum fromValue(String value) {
      for (VulnerableFunctionUsageEnum b : VulnerableFunctionUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VULNERABLE_FUNCTION_USAGE = "vulnerableFunctionUsage";
  private VulnerableFunctionUsageEnum vulnerableFunctionUsage;

  /**
   * The level of available information on which this assessment has been done.
   */
  public enum AssessmentAccuracyEnum {
    FULL("FULL"),
    
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    REDUCED("REDUCED");

    private String value;

    AssessmentAccuracyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AssessmentAccuracyEnum fromValue(String value) {
      for (AssessmentAccuracyEnum b : AssessmentAccuracyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ASSESSMENT_ACCURACY = "assessmentAccuracy";
  private AssessmentAccuracyEnum assessmentAccuracy;

  public RiskAssessment() { 
  }

  @JsonCreator
  public RiskAssessment(
    @JsonProperty(JSON_PROPERTY_RISK_LEVEL) RiskLevelEnum riskLevel, 
    @JsonProperty(JSON_PROPERTY_RISK_SCORE) Float riskScore, 
    @JsonProperty(JSON_PROPERTY_RISK_VECTOR) String riskVector, 
    @JsonProperty(JSON_PROPERTY_BASE_RISK_LEVEL) BaseRiskLevelEnum baseRiskLevel, 
    @JsonProperty(JSON_PROPERTY_BASE_RISK_SCORE) Float baseRiskScore, 
    @JsonProperty(JSON_PROPERTY_BASE_RISK_VECTOR) String baseRiskVector, 
    @JsonProperty(JSON_PROPERTY_EXPOSURE) ExposureEnum exposure, 
    @JsonProperty(JSON_PROPERTY_DATA_ASSETS) DataAssetsEnum dataAssets, 
    @JsonProperty(JSON_PROPERTY_PUBLIC_EXPLOIT) PublicExploitEnum publicExploit, 
    @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTION_USAGE) VulnerableFunctionUsageEnum vulnerableFunctionUsage, 
    @JsonProperty(JSON_PROPERTY_ASSESSMENT_ACCURACY) AssessmentAccuracyEnum assessmentAccuracy
  ) {
  this();
    this.riskLevel = riskLevel;
    this.riskScore = riskScore;
    this.riskVector = riskVector;
    this.baseRiskLevel = baseRiskLevel;
    this.baseRiskScore = baseRiskScore;
    this.baseRiskVector = baseRiskVector;
    this.exposure = exposure;
    this.dataAssets = dataAssets;
    this.publicExploit = publicExploit;
    this.vulnerableFunctionUsage = vulnerableFunctionUsage;
    this.assessmentAccuracy = assessmentAccuracy;
  }

   /**
   * The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
   * @return riskLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.")
  @JsonProperty(JSON_PROPERTY_RISK_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RiskLevelEnum getRiskLevel() {
    return riskLevel;
  }




   /**
   * The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.
   * @return riskScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.")
  @JsonProperty(JSON_PROPERTY_RISK_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getRiskScore() {
    return riskScore;
  }




   /**
   * The attack vector calculated by Dynatrace based on the CVSS attack vector.
   * @return riskVector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The attack vector calculated by Dynatrace based on the CVSS attack vector.")
  @JsonProperty(JSON_PROPERTY_RISK_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRiskVector() {
    return riskVector;
  }




   /**
   * The risk level from the CVSS score.
   * @return baseRiskLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The risk level from the CVSS score.")
  @JsonProperty(JSON_PROPERTY_BASE_RISK_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BaseRiskLevelEnum getBaseRiskLevel() {
    return baseRiskLevel;
  }




   /**
   * The risk score (1-10) from the CVSS score.
   * @return baseRiskScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The risk score (1-10) from the CVSS score.")
  @JsonProperty(JSON_PROPERTY_BASE_RISK_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getBaseRiskScore() {
    return baseRiskScore;
  }




   /**
   * The original attack vector of the CVSS assessment.
   * @return baseRiskVector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original attack vector of the CVSS assessment.")
  @JsonProperty(JSON_PROPERTY_BASE_RISK_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaseRiskVector() {
    return baseRiskVector;
  }




   /**
   * The level of exposure of affected entities.
   * @return exposure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The level of exposure of affected entities.")
  @JsonProperty(JSON_PROPERTY_EXPOSURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExposureEnum getExposure() {
    return exposure;
  }




   /**
   * The reachability of related data assets by affected entities.
   * @return dataAssets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reachability of related data assets by affected entities.")
  @JsonProperty(JSON_PROPERTY_DATA_ASSETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataAssetsEnum getDataAssets() {
    return dataAssets;
  }




   /**
   * The availability status of public exploits.
   * @return publicExploit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The availability status of public exploits.")
  @JsonProperty(JSON_PROPERTY_PUBLIC_EXPLOIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PublicExploitEnum getPublicExploit() {
    return publicExploit;
  }




   /**
   * The state of vulnerable code execution.
   * @return vulnerableFunctionUsage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of vulnerable code execution.")
  @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTION_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VulnerableFunctionUsageEnum getVulnerableFunctionUsage() {
    return vulnerableFunctionUsage;
  }




   /**
   * The level of available information on which this assessment has been done.
   * @return assessmentAccuracy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The level of available information on which this assessment has been done.")
  @JsonProperty(JSON_PROPERTY_ASSESSMENT_ACCURACY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AssessmentAccuracyEnum getAssessmentAccuracy() {
    return assessmentAccuracy;
  }




  /**
   * Return true if this RiskAssessment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskAssessment riskAssessment = (RiskAssessment) o;
    return Objects.equals(this.riskLevel, riskAssessment.riskLevel) &&
        Objects.equals(this.riskScore, riskAssessment.riskScore) &&
        Objects.equals(this.riskVector, riskAssessment.riskVector) &&
        Objects.equals(this.baseRiskLevel, riskAssessment.baseRiskLevel) &&
        Objects.equals(this.baseRiskScore, riskAssessment.baseRiskScore) &&
        Objects.equals(this.baseRiskVector, riskAssessment.baseRiskVector) &&
        Objects.equals(this.exposure, riskAssessment.exposure) &&
        Objects.equals(this.dataAssets, riskAssessment.dataAssets) &&
        Objects.equals(this.publicExploit, riskAssessment.publicExploit) &&
        Objects.equals(this.vulnerableFunctionUsage, riskAssessment.vulnerableFunctionUsage) &&
        Objects.equals(this.assessmentAccuracy, riskAssessment.assessmentAccuracy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(riskLevel, riskScore, riskVector, baseRiskLevel, baseRiskScore, baseRiskVector, exposure, dataAssets, publicExploit, vulnerableFunctionUsage, assessmentAccuracy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskAssessment {\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    riskVector: ").append(toIndentedString(riskVector)).append("\n");
    sb.append("    baseRiskLevel: ").append(toIndentedString(baseRiskLevel)).append("\n");
    sb.append("    baseRiskScore: ").append(toIndentedString(baseRiskScore)).append("\n");
    sb.append("    baseRiskVector: ").append(toIndentedString(baseRiskVector)).append("\n");
    sb.append("    exposure: ").append(toIndentedString(exposure)).append("\n");
    sb.append("    dataAssets: ").append(toIndentedString(dataAssets)).append("\n");
    sb.append("    publicExploit: ").append(toIndentedString(publicExploit)).append("\n");
    sb.append("    vulnerableFunctionUsage: ").append(toIndentedString(vulnerableFunctionUsage)).append("\n");
    sb.append("    assessmentAccuracy: ").append(toIndentedString(assessmentAccuracy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

