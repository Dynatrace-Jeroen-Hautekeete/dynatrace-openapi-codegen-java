/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.ApplicationImpact;
import com.dynatrace.apis.envv2.model.CustomApplicationImpact;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.MobileImpact;
import com.dynatrace.apis.envv2.model.ServiceImpact;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * The impact analysis of the problem on other entities/users.    The actual set of fields depends on the type of the impact. Find the list of actual objects in the description of the **impactType** field or see [Problems API v2 - JSON models](https://dt-url.net/we03sp2).
 */
@ApiModel(description = "The impact analysis of the problem on other entities/users.    The actual set of fields depends on the type of the impact. Find the list of actual objects in the description of the **impactType** field or see [Problems API v2 - JSON models](https://dt-url.net/we03sp2).")
@JsonPropertyOrder({
  Impact.JSON_PROPERTY_IMPACT_TYPE,
  Impact.JSON_PROPERTY_IMPACTED_ENTITY,
  Impact.JSON_PROPERTY_ESTIMATED_AFFECTED_USERS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "impactType", // ignore manually set impactType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the impactType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "impactType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ApplicationImpact.class, name = "APPLICATION"),
  @JsonSubTypes.Type(value = ApplicationImpact.class, name = "ApplicationImpact"),
  @JsonSubTypes.Type(value = CustomApplicationImpact.class, name = "CUSTOM_APPLICATION"),
  @JsonSubTypes.Type(value = CustomApplicationImpact.class, name = "CustomApplicationImpact"),
  @JsonSubTypes.Type(value = MobileImpact.class, name = "MOBILE"),
  @JsonSubTypes.Type(value = MobileImpact.class, name = "MobileImpact"),
  @JsonSubTypes.Type(value = ServiceImpact.class, name = "SERVICE"),
  @JsonSubTypes.Type(value = ServiceImpact.class, name = "ServiceImpact"),
})

public class Impact {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;SERVICE&#x60; -&gt; ServiceImpact  * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact  * &#x60;MOBILE&#x60; -&gt; MobileImpact  * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact  
   */
  public enum ImpactTypeEnum {
    APPLICATION("APPLICATION"),
    
    CUSTOM_APPLICATION("CUSTOM_APPLICATION"),
    
    MOBILE("MOBILE"),
    
    SERVICE("SERVICE");

    private String value;

    ImpactTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImpactTypeEnum fromValue(String value) {
      for (ImpactTypeEnum b : ImpactTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IMPACT_TYPE = "impactType";
  private ImpactTypeEnum impactType;

  public static final String JSON_PROPERTY_IMPACTED_ENTITY = "impactedEntity";
  private EntityStub impactedEntity;

  public static final String JSON_PROPERTY_ESTIMATED_AFFECTED_USERS = "estimatedAffectedUsers";
  private Long estimatedAffectedUsers;

  public Impact() { 
  }

  public Impact impactType(ImpactTypeEnum impactType) {
    this.impactType = impactType;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;SERVICE&#x60; -&gt; ServiceImpact  * &#x60;APPLICATION&#x60; -&gt; ApplicationImpact  * &#x60;MOBILE&#x60; -&gt; MobileImpact  * &#x60;CUSTOM_APPLICATION&#x60; -&gt; CustomApplicationImpact  
   * @return impactType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `SERVICE` -> ServiceImpact  * `APPLICATION` -> ApplicationImpact  * `MOBILE` -> MobileImpact  * `CUSTOM_APPLICATION` -> CustomApplicationImpact  ")
  @JsonProperty(JSON_PROPERTY_IMPACT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ImpactTypeEnum getImpactType() {
    return impactType;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpactType(ImpactTypeEnum impactType) {
    this.impactType = impactType;
  }


  public Impact impactedEntity(EntityStub impactedEntity) {
    this.impactedEntity = impactedEntity;
    return this;
  }

   /**
   * Get impactedEntity
   * @return impactedEntity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IMPACTED_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityStub getImpactedEntity() {
    return impactedEntity;
  }


  @JsonProperty(JSON_PROPERTY_IMPACTED_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpactedEntity(EntityStub impactedEntity) {
    this.impactedEntity = impactedEntity;
  }


  public Impact estimatedAffectedUsers(Long estimatedAffectedUsers) {
    this.estimatedAffectedUsers = estimatedAffectedUsers;
    return this;
  }

   /**
   * The estimated number of affected users.
   * @return estimatedAffectedUsers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The estimated number of affected users.")
  @JsonProperty(JSON_PROPERTY_ESTIMATED_AFFECTED_USERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEstimatedAffectedUsers() {
    return estimatedAffectedUsers;
  }


  @JsonProperty(JSON_PROPERTY_ESTIMATED_AFFECTED_USERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEstimatedAffectedUsers(Long estimatedAffectedUsers) {
    this.estimatedAffectedUsers = estimatedAffectedUsers;
  }


  /**
   * Return true if this Impact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Impact impact = (Impact) o;
    return Objects.equals(this.impactType, impact.impactType) &&
        Objects.equals(this.impactedEntity, impact.impactedEntity) &&
        Objects.equals(this.estimatedAffectedUsers, impact.estimatedAffectedUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(impactType, impactedEntity, estimatedAffectedUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Impact {\n");
    sb.append("    impactType: ").append(toIndentedString(impactType)).append("\n");
    sb.append("    impactedEntity: ").append(toIndentedString(impactedEntity)).append("\n");
    sb.append("    estimatedAffectedUsers: ").append(toIndentedString(estimatedAffectedUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("APPLICATION", ApplicationImpact.class);
  mappings.put("ApplicationImpact", ApplicationImpact.class);
  mappings.put("CUSTOM_APPLICATION", CustomApplicationImpact.class);
  mappings.put("CustomApplicationImpact", CustomApplicationImpact.class);
  mappings.put("MOBILE", MobileImpact.class);
  mappings.put("MobileImpact", MobileImpact.class);
  mappings.put("SERVICE", ServiceImpact.class);
  mappings.put("ServiceImpact", ServiceImpact.class);
  mappings.put("Impact", Impact.class);
  JSON.registerDiscriminator(Impact.class, "impactType", mappings);
}
}

