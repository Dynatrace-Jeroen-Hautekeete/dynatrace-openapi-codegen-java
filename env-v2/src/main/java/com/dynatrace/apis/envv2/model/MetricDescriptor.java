/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.MetricDefaultAggregation;
import com.dynatrace.apis.envv2.model.MetricDimensionCardinality;
import com.dynatrace.apis.envv2.model.MetricDimensionDefinition;
import com.dynatrace.apis.envv2.model.MetricValueType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The descriptor of a metric.
 */
@ApiModel(description = "The descriptor of a metric.")
@JsonPropertyOrder({
  MetricDescriptor.JSON_PROPERTY_DEFAULT_AGGREGATION,
  MetricDescriptor.JSON_PROPERTY_DIMENSION_DEFINITIONS,
  MetricDescriptor.JSON_PROPERTY_ROOT_CAUSE_RELEVANT,
  MetricDescriptor.JSON_PROPERTY_UNIT_DISPLAY_FORMAT,
  MetricDescriptor.JSON_PROPERTY_DDU_BILLABLE,
  MetricDescriptor.JSON_PROPERTY_LAST_WRITTEN,
  MetricDescriptor.JSON_PROPERTY_IMPACT_RELEVANT,
  MetricDescriptor.JSON_PROPERTY_MINIMUM_VALUE,
  MetricDescriptor.JSON_PROPERTY_MAXIMUM_VALUE,
  MetricDescriptor.JSON_PROPERTY_LATENCY,
  MetricDescriptor.JSON_PROPERTY_RESOLUTION_INF_SUPPORTED,
  MetricDescriptor.JSON_PROPERTY_DIMENSION_CARDINALITIES,
  MetricDescriptor.JSON_PROPERTY_METRIC_VALUE_TYPE,
  MetricDescriptor.JSON_PROPERTY_TAGS,
  MetricDescriptor.JSON_PROPERTY_ENTITY_TYPE,
  MetricDescriptor.JSON_PROPERTY_METRIC_ID,
  MetricDescriptor.JSON_PROPERTY_METRIC_SELECTOR,
  MetricDescriptor.JSON_PROPERTY_SCALAR,
  MetricDescriptor.JSON_PROPERTY_AGGREGATION_TYPES,
  MetricDescriptor.JSON_PROPERTY_DISPLAY_NAME,
  MetricDescriptor.JSON_PROPERTY_DESCRIPTION,
  MetricDescriptor.JSON_PROPERTY_CREATED,
  MetricDescriptor.JSON_PROPERTY_TRANSFORMATIONS,
  MetricDescriptor.JSON_PROPERTY_UNIT,
  MetricDescriptor.JSON_PROPERTY_WARNINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class MetricDescriptor {
  public static final String JSON_PROPERTY_DEFAULT_AGGREGATION = "defaultAggregation";
  private MetricDefaultAggregation defaultAggregation;

  public static final String JSON_PROPERTY_DIMENSION_DEFINITIONS = "dimensionDefinitions";
  private List<MetricDimensionDefinition> dimensionDefinitions = null;

  public static final String JSON_PROPERTY_ROOT_CAUSE_RELEVANT = "rootCauseRelevant";
  private Boolean rootCauseRelevant;

  /**
   * The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:  Binary: 1 MiB &#x3D; 1024 KiB &#x3D; 1,048,576 bytes  Decimal: 1 MB &#x3D; 1000 kB &#x3D; 1,000,000 bytes  If not set, the decimal system is used.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   */
  public enum UnitDisplayFormatEnum {
    BINARY("binary"),
    
    DECIMAL("decimal");

    private String value;

    UnitDisplayFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitDisplayFormatEnum fromValue(String value) {
      for (UnitDisplayFormatEnum b : UnitDisplayFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT_DISPLAY_FORMAT = "unitDisplayFormat";
  private UnitDisplayFormatEnum unitDisplayFormat;

  public static final String JSON_PROPERTY_DDU_BILLABLE = "dduBillable";
  private Boolean dduBillable;

  public static final String JSON_PROPERTY_LAST_WRITTEN = "lastWritten";
  private Long lastWritten;

  public static final String JSON_PROPERTY_IMPACT_RELEVANT = "impactRelevant";
  private Boolean impactRelevant;

  public static final String JSON_PROPERTY_MINIMUM_VALUE = "minimumValue";
  private Double minimumValue;

  public static final String JSON_PROPERTY_MAXIMUM_VALUE = "maximumValue";
  private Double maximumValue;

  public static final String JSON_PROPERTY_LATENCY = "latency";
  private Long latency;

  public static final String JSON_PROPERTY_RESOLUTION_INF_SUPPORTED = "resolutionInfSupported";
  private Boolean resolutionInfSupported;

  public static final String JSON_PROPERTY_DIMENSION_CARDINALITIES = "dimensionCardinalities";
  private List<MetricDimensionCardinality> dimensionCardinalities = null;

  public static final String JSON_PROPERTY_METRIC_VALUE_TYPE = "metricValueType";
  private MetricValueType metricValueType;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Set<String> tags = null;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private Set<String> entityType = null;

  public static final String JSON_PROPERTY_METRIC_ID = "metricId";
  private String metricId;

  public static final String JSON_PROPERTY_METRIC_SELECTOR = "metricSelector";
  private String metricSelector;

  public static final String JSON_PROPERTY_SCALAR = "scalar";
  private Boolean scalar;

  /**
   * Gets or Sets aggregationTypes
   */
  public enum AggregationTypesEnum {
    AUTO("auto"),
    
    AVG("avg"),
    
    COUNT("count"),
    
    MAX("max"),
    
    MEDIAN("median"),
    
    MIN("min"),
    
    PERCENTILE("percentile"),
    
    SUM("sum"),
    
    VALUE("value");

    private String value;

    AggregationTypesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AggregationTypesEnum fromValue(String value) {
      for (AggregationTypesEnum b : AggregationTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AGGREGATION_TYPES = "aggregationTypes";
  private Set<AggregationTypesEnum> aggregationTypes = null;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CREATED = "created";
  private Long created;

  /**
   * Gets or Sets transformations
   */
  public enum TransformationsEnum {
    ASGAUGE("asGauge"),
    
    DEFAULT("default"),
    
    DELTA("delta"),
    
    EVALUATEMODEL("evaluateModel"),
    
    FILTER("filter"),
    
    FOLD("fold"),
    
    LAST("last"),
    
    LASTREAL("lastReal"),
    
    LIMIT("limit"),
    
    MERGE("merge"),
    
    NAMES("names"),
    
    PARENTS("parents"),
    
    PARTITION("partition"),
    
    RATE("rate"),
    
    ROLLUP("rollup"),
    
    SETUNIT("setUnit"),
    
    SMOOTH("smooth"),
    
    SORT("sort"),
    
    SPLITBY("splitBy"),
    
    TIMESHIFT("timeshift"),
    
    TOUNIT("toUnit");

    private String value;

    TransformationsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransformationsEnum fromValue(String value) {
      for (TransformationsEnum b : TransformationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSFORMATIONS = "transformations";
  private Set<TransformationsEnum> transformations = null;

  public static final String JSON_PROPERTY_UNIT = "unit";
  private String unit;

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<String> warnings = null;

  public MetricDescriptor() { 
  }

  public MetricDescriptor defaultAggregation(MetricDefaultAggregation defaultAggregation) {
    this.defaultAggregation = defaultAggregation;
    return this;
  }

   /**
   * Get defaultAggregation
   * @return defaultAggregation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MetricDefaultAggregation getDefaultAggregation() {
    return defaultAggregation;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultAggregation(MetricDefaultAggregation defaultAggregation) {
    this.defaultAggregation = defaultAggregation;
  }


  public MetricDescriptor dimensionDefinitions(List<MetricDimensionDefinition> dimensionDefinitions) {
    this.dimensionDefinitions = dimensionDefinitions;
    return this;
  }

  public MetricDescriptor addDimensionDefinitionsItem(MetricDimensionDefinition dimensionDefinitionsItem) {
    if (this.dimensionDefinitions == null) {
      this.dimensionDefinitions = new ArrayList<>();
    }
    this.dimensionDefinitions.add(dimensionDefinitionsItem);
    return this;
  }

   /**
   * The fine metric division (for example, process group and process ID for some process-related metric).   For [ingested metrics](https://dt-url.net/5d63ic1), dimensions that doesn&#39;t have have any data within the last 15 days are omitted. 
   * @return dimensionDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fine metric division (for example, process group and process ID for some process-related metric).   For [ingested metrics](https://dt-url.net/5d63ic1), dimensions that doesn't have have any data within the last 15 days are omitted. ")
  @JsonProperty(JSON_PROPERTY_DIMENSION_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MetricDimensionDefinition> getDimensionDefinitions() {
    return dimensionDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimensionDefinitions(List<MetricDimensionDefinition> dimensionDefinitions) {
    this.dimensionDefinitions = dimensionDefinitions;
  }


  public MetricDescriptor rootCauseRelevant(Boolean rootCauseRelevant) {
    this.rootCauseRelevant = rootCauseRelevant;
    return this;
  }

   /**
   * The metric is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) root cause relevant.    A root-cause relevant metric represents a strong indicator for a faulty component.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return rootCauseRelevant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric is (`true`) or is not (`false`) root cause relevant.    A root-cause relevant metric represents a strong indicator for a faulty component.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRootCauseRelevant() {
    return rootCauseRelevant;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootCauseRelevant(Boolean rootCauseRelevant) {
    this.rootCauseRelevant = rootCauseRelevant;
  }


  public MetricDescriptor unitDisplayFormat(UnitDisplayFormatEnum unitDisplayFormat) {
    this.unitDisplayFormat = unitDisplayFormat;
    return this;
  }

   /**
   * The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:  Binary: 1 MiB &#x3D; 1024 KiB &#x3D; 1,048,576 bytes  Decimal: 1 MB &#x3D; 1000 kB &#x3D; 1,000,000 bytes  If not set, the decimal system is used.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return unitDisplayFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:  Binary: 1 MiB = 1024 KiB = 1,048,576 bytes  Decimal: 1 MB = 1000 kB = 1,000,000 bytes  If not set, the decimal system is used.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_UNIT_DISPLAY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitDisplayFormatEnum getUnitDisplayFormat() {
    return unitDisplayFormat;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_DISPLAY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitDisplayFormat(UnitDisplayFormatEnum unitDisplayFormat) {
    this.unitDisplayFormat = unitDisplayFormat;
  }


  public MetricDescriptor dduBillable(Boolean dduBillable) {
    this.dduBillable = dduBillable;
    return this;
  }

   /**
   * If &#x60;true&#x60; the usage of metric consumes [Davis data units](https://dt-url.net/ddu).    [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return dduBillable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true` the usage of metric consumes [Davis data units](https://dt-url.net/ddu).    [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_DDU_BILLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDduBillable() {
    return dduBillable;
  }


  @JsonProperty(JSON_PROPERTY_DDU_BILLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDduBillable(Boolean dduBillable) {
    this.dduBillable = dduBillable;
  }


  public MetricDescriptor lastWritten(Long lastWritten) {
    this.lastWritten = lastWritten;
    return this;
  }

   /**
   * The timestamp when the metric was last written.   Has the value of &#x60;null&#x60; for metric expressions or if the data has never been written.
   * @return lastWritten
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp when the metric was last written.   Has the value of `null` for metric expressions or if the data has never been written.")
  @JsonProperty(JSON_PROPERTY_LAST_WRITTEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastWritten() {
    return lastWritten;
  }


  @JsonProperty(JSON_PROPERTY_LAST_WRITTEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastWritten(Long lastWritten) {
    this.lastWritten = lastWritten;
  }


  public MetricDescriptor impactRelevant(Boolean impactRelevant) {
    this.impactRelevant = impactRelevant;
    return this;
  }

   /**
   * The metric is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) impact relevant.    An impact-relevant metric is highly dependent on other metrics and changes because an underlying root-cause metric has changed.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return impactRelevant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric is (`true`) or is not (`false`) impact relevant.    An impact-relevant metric is highly dependent on other metrics and changes because an underlying root-cause metric has changed.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_IMPACT_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getImpactRelevant() {
    return impactRelevant;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImpactRelevant(Boolean impactRelevant) {
    this.impactRelevant = impactRelevant;
  }


  public MetricDescriptor minimumValue(Double minimumValue) {
    this.minimumValue = minimumValue;
    return this;
  }

   /**
   * The minimum allowed value of the metric.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return minimumValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum allowed value of the metric.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMinimumValue() {
    return minimumValue;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumValue(Double minimumValue) {
    this.minimumValue = minimumValue;
  }


  public MetricDescriptor maximumValue(Double maximumValue) {
    this.maximumValue = maximumValue;
    return this;
  }

   /**
   * The maximum allowed value of the metric.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return maximumValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum allowed value of the metric.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_MAXIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMaximumValue() {
    return maximumValue;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumValue(Double maximumValue) {
    this.maximumValue = maximumValue;
  }


  public MetricDescriptor latency(Long latency) {
    this.latency = latency;
    return this;
  }

   /**
   * The latency of the metric, in minutes.    The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace.   The allowed value range is from 1 to 60 minutes.   [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return latency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The latency of the metric, in minutes.    The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace.   The allowed value range is from 1 to 60 minutes.   [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_LATENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLatency() {
    return latency;
  }


  @JsonProperty(JSON_PROPERTY_LATENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatency(Long latency) {
    this.latency = latency;
  }


  public MetricDescriptor resolutionInfSupported(Boolean resolutionInfSupported) {
    this.resolutionInfSupported = resolutionInfSupported;
    return this;
  }

   /**
   * If &#39;true&#39;, resolution&#x3D;Inf can be applied to the metric query.
   * @return resolutionInfSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If 'true', resolution=Inf can be applied to the metric query.")
  @JsonProperty(JSON_PROPERTY_RESOLUTION_INF_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getResolutionInfSupported() {
    return resolutionInfSupported;
  }


  @JsonProperty(JSON_PROPERTY_RESOLUTION_INF_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResolutionInfSupported(Boolean resolutionInfSupported) {
    this.resolutionInfSupported = resolutionInfSupported;
  }


  public MetricDescriptor dimensionCardinalities(List<MetricDimensionCardinality> dimensionCardinalities) {
    this.dimensionCardinalities = dimensionCardinalities;
    return this;
  }

  public MetricDescriptor addDimensionCardinalitiesItem(MetricDimensionCardinality dimensionCardinalitiesItem) {
    if (this.dimensionCardinalities == null) {
      this.dimensionCardinalities = new ArrayList<>();
    }
    this.dimensionCardinalities.add(dimensionCardinalitiesItem);
    return this;
  }

   /**
   * The cardinalities of MINT metric dimensions.
   * @return dimensionCardinalities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cardinalities of MINT metric dimensions.")
  @JsonProperty(JSON_PROPERTY_DIMENSION_CARDINALITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MetricDimensionCardinality> getDimensionCardinalities() {
    return dimensionCardinalities;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION_CARDINALITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimensionCardinalities(List<MetricDimensionCardinality> dimensionCardinalities) {
    this.dimensionCardinalities = dimensionCardinalities;
  }


  public MetricDescriptor metricValueType(MetricValueType metricValueType) {
    this.metricValueType = metricValueType;
    return this;
  }

   /**
   * Get metricValueType
   * @return metricValueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METRIC_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MetricValueType getMetricValueType() {
    return metricValueType;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricValueType(MetricValueType metricValueType) {
    this.metricValueType = metricValueType;
  }


  public MetricDescriptor tags(Set<String> tags) {
    this.tags = tags;
    return this;
  }

  public MetricDescriptor addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new LinkedHashSet<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags applied to the metric.    [Metric expressions](https://dt-url.net/metricExpression) don&#39;t return this field.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tags applied to the metric.    [Metric expressions](https://dt-url.net/metricExpression) don't return this field.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getTags() {
    return tags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(Set<String> tags) {
    this.tags = tags;
  }


  public MetricDescriptor entityType(Set<String> entityType) {
    this.entityType = entityType;
    return this;
  }

  public MetricDescriptor addEntityTypeItem(String entityTypeItem) {
    if (this.entityType == null) {
      this.entityType = new LinkedHashSet<>();
    }
    this.entityType.add(entityTypeItem);
    return this;
  }

   /**
   * List of admissible primary entity types for this metric. Can be used for the &#x60;type&#x60; predicate in the &#x60;entitySelector&#x60;.
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of admissible primary entity types for this metric. Can be used for the `type` predicate in the `entitySelector`.")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getEntityType() {
    return entityType;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(Set<String> entityType) {
    this.entityType = entityType;
  }


  public MetricDescriptor metricId(String metricId) {
    this.metricId = metricId;
    return this;
  }

   /**
   * The fully qualified key of the metric.   If a transformation has been used it is reflected in the metric key.
   * @return metricId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The fully qualified key of the metric.   If a transformation has been used it is reflected in the metric key.")
  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetricId() {
    return metricId;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricId(String metricId) {
    this.metricId = metricId;
  }


  public MetricDescriptor metricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
    return this;
  }

   /**
   * The metric selector that is used when querying a func: metric.
   * @return metricSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metric selector that is used when querying a func: metric.")
  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetricSelector() {
    return metricSelector;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricSelector(String metricSelector) {
    this.metricSelector = metricSelector;
  }


  public MetricDescriptor scalar(Boolean scalar) {
    this.scalar = scalar;
    return this;
  }

   /**
   * Indicates whether the metric expression resolves to a scalar (&#x60;true&#x60;) or to a series (&#x60;false&#x60;).  A scalar result always contains one data point. The amount of data points in a series result depends on the resolution you&#39;re using.
   * @return scalar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the metric expression resolves to a scalar (`true`) or to a series (`false`).  A scalar result always contains one data point. The amount of data points in a series result depends on the resolution you're using.")
  @JsonProperty(JSON_PROPERTY_SCALAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getScalar() {
    return scalar;
  }


  @JsonProperty(JSON_PROPERTY_SCALAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScalar(Boolean scalar) {
    this.scalar = scalar;
  }


  public MetricDescriptor aggregationTypes(Set<AggregationTypesEnum> aggregationTypes) {
    this.aggregationTypes = aggregationTypes;
    return this;
  }

  public MetricDescriptor addAggregationTypesItem(AggregationTypesEnum aggregationTypesItem) {
    if (this.aggregationTypes == null) {
      this.aggregationTypes = new LinkedHashSet<>();
    }
    this.aggregationTypes.add(aggregationTypesItem);
    return this;
  }

   /**
   * The list of allowed aggregations for this metric.
   * @return aggregationTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of allowed aggregations for this metric.")
  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<AggregationTypesEnum> getAggregationTypes() {
    return aggregationTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_AGGREGATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAggregationTypes(Set<AggregationTypesEnum> aggregationTypes) {
    this.aggregationTypes = aggregationTypes;
  }


  public MetricDescriptor displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the metric in the user interface.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the metric in the user interface.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetricDescriptor description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the metric.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A short description of the metric.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public MetricDescriptor created(Long created) {
    this.created = created;
    return this;
  }

   /**
   * The timestamp of metric creation.   Built-in metrics and metric expressions have the value of &#x60;null&#x60;.
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of metric creation.   Built-in metrics and metric expressions have the value of `null`.")
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(Long created) {
    this.created = created;
  }


  public MetricDescriptor transformations(Set<TransformationsEnum> transformations) {
    this.transformations = transformations;
    return this;
  }

  public MetricDescriptor addTransformationsItem(TransformationsEnum transformationsItem) {
    if (this.transformations == null) {
      this.transformations = new LinkedHashSet<>();
    }
    this.transformations.add(transformationsItem);
    return this;
  }

   /**
   * Transform operators that could be appended to the current transformation list.
   * @return transformations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transform operators that could be appended to the current transformation list.")
  @JsonProperty(JSON_PROPERTY_TRANSFORMATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<TransformationsEnum> getTransformations() {
    return transformations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TRANSFORMATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransformations(Set<TransformationsEnum> transformations) {
    this.transformations = transformations;
  }


  public MetricDescriptor unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * The unit of the metric.
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of the metric.")
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnit(String unit) {
    this.unit = unit;
  }


  public MetricDescriptor warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public MetricDescriptor addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * A list of potential warnings that affect this ID. For example deprecated feature usage etc.
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of potential warnings that affect this ID. For example deprecated feature usage etc.")
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this MetricDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDescriptor metricDescriptor = (MetricDescriptor) o;
    return Objects.equals(this.defaultAggregation, metricDescriptor.defaultAggregation) &&
        Objects.equals(this.dimensionDefinitions, metricDescriptor.dimensionDefinitions) &&
        Objects.equals(this.rootCauseRelevant, metricDescriptor.rootCauseRelevant) &&
        Objects.equals(this.unitDisplayFormat, metricDescriptor.unitDisplayFormat) &&
        Objects.equals(this.dduBillable, metricDescriptor.dduBillable) &&
        Objects.equals(this.lastWritten, metricDescriptor.lastWritten) &&
        Objects.equals(this.impactRelevant, metricDescriptor.impactRelevant) &&
        Objects.equals(this.minimumValue, metricDescriptor.minimumValue) &&
        Objects.equals(this.maximumValue, metricDescriptor.maximumValue) &&
        Objects.equals(this.latency, metricDescriptor.latency) &&
        Objects.equals(this.resolutionInfSupported, metricDescriptor.resolutionInfSupported) &&
        Objects.equals(this.dimensionCardinalities, metricDescriptor.dimensionCardinalities) &&
        Objects.equals(this.metricValueType, metricDescriptor.metricValueType) &&
        Objects.equals(this.tags, metricDescriptor.tags) &&
        Objects.equals(this.entityType, metricDescriptor.entityType) &&
        Objects.equals(this.metricId, metricDescriptor.metricId) &&
        Objects.equals(this.metricSelector, metricDescriptor.metricSelector) &&
        Objects.equals(this.scalar, metricDescriptor.scalar) &&
        Objects.equals(this.aggregationTypes, metricDescriptor.aggregationTypes) &&
        Objects.equals(this.displayName, metricDescriptor.displayName) &&
        Objects.equals(this.description, metricDescriptor.description) &&
        Objects.equals(this.created, metricDescriptor.created) &&
        Objects.equals(this.transformations, metricDescriptor.transformations) &&
        Objects.equals(this.unit, metricDescriptor.unit) &&
        Objects.equals(this.warnings, metricDescriptor.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultAggregation, dimensionDefinitions, rootCauseRelevant, unitDisplayFormat, dduBillable, lastWritten, impactRelevant, minimumValue, maximumValue, latency, resolutionInfSupported, dimensionCardinalities, metricValueType, tags, entityType, metricId, metricSelector, scalar, aggregationTypes, displayName, description, created, transformations, unit, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDescriptor {\n");
    sb.append("    defaultAggregation: ").append(toIndentedString(defaultAggregation)).append("\n");
    sb.append("    dimensionDefinitions: ").append(toIndentedString(dimensionDefinitions)).append("\n");
    sb.append("    rootCauseRelevant: ").append(toIndentedString(rootCauseRelevant)).append("\n");
    sb.append("    unitDisplayFormat: ").append(toIndentedString(unitDisplayFormat)).append("\n");
    sb.append("    dduBillable: ").append(toIndentedString(dduBillable)).append("\n");
    sb.append("    lastWritten: ").append(toIndentedString(lastWritten)).append("\n");
    sb.append("    impactRelevant: ").append(toIndentedString(impactRelevant)).append("\n");
    sb.append("    minimumValue: ").append(toIndentedString(minimumValue)).append("\n");
    sb.append("    maximumValue: ").append(toIndentedString(maximumValue)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("    resolutionInfSupported: ").append(toIndentedString(resolutionInfSupported)).append("\n");
    sb.append("    dimensionCardinalities: ").append(toIndentedString(dimensionCardinalities)).append("\n");
    sb.append("    metricValueType: ").append(toIndentedString(metricValueType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    metricSelector: ").append(toIndentedString(metricSelector)).append("\n");
    sb.append("    scalar: ").append(toIndentedString(scalar)).append("\n");
    sb.append("    aggregationTypes: ").append(toIndentedString(aggregationTypes)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

