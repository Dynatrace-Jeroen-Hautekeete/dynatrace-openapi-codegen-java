/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.ComplexConstraint;
import com.dynatrace.apis.envv2.model.PropertyDefinition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A list of definitions of types.    A type is a complex property that contains its own set of subproperties.
 */
@ApiModel(description = "A list of definitions of types.    A type is a complex property that contains its own set of subproperties.")
@JsonPropertyOrder({
  SchemaType.JSON_PROPERTY_SUMMARY_PATTERN,
  SchemaType.JSON_PROPERTY_SEARCH_PATTERN,
  SchemaType.JSON_PROPERTY_VERSION_INFO,
  SchemaType.JSON_PROPERTY_PROPERTIES,
  SchemaType.JSON_PROPERTY_VERSION,
  SchemaType.JSON_PROPERTY_CONSTRAINTS,
  SchemaType.JSON_PROPERTY_DOCUMENTATION,
  SchemaType.JSON_PROPERTY_DISPLAY_NAME,
  SchemaType.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SchemaType {
  public static final String JSON_PROPERTY_SUMMARY_PATTERN = "summaryPattern";
  private String summaryPattern;

  public static final String JSON_PROPERTY_SEARCH_PATTERN = "searchPattern";
  private String searchPattern;

  public static final String JSON_PROPERTY_VERSION_INFO = "versionInfo";
  private String versionInfo;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Map<String, PropertyDefinition> properties = new HashMap<>();

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private List<ComplexConstraint> constraints = null;

  public static final String JSON_PROPERTY_DOCUMENTATION = "documentation";
  private String documentation;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public SchemaType() { 
  }

  public SchemaType summaryPattern(String summaryPattern) {
    this.summaryPattern = summaryPattern;
    return this;
  }

   /**
   * The pattern for the summary (for example, \&quot;Alert after *X* minutes.\&quot;) of the configuration in the UI.
   * @return summaryPattern
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "summaryPatternOfType", required = true, value = "The pattern for the summary (for example, \"Alert after *X* minutes.\") of the configuration in the UI.")
  @JsonProperty(JSON_PROPERTY_SUMMARY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSummaryPattern() {
    return summaryPattern;
  }


  @JsonProperty(JSON_PROPERTY_SUMMARY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSummaryPattern(String summaryPattern) {
    this.summaryPattern = summaryPattern;
  }


  public SchemaType searchPattern(String searchPattern) {
    this.searchPattern = searchPattern;
    return this;
  }

   /**
   * The pattern for the summary search(for example, \&quot;Alert after *X* minutes.\&quot;) of the configuration in the UI.
   * @return searchPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "searchPatternOfType", value = "The pattern for the summary search(for example, \"Alert after *X* minutes.\") of the configuration in the UI.")
  @JsonProperty(JSON_PROPERTY_SEARCH_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchPattern() {
    return searchPattern;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchPattern(String searchPattern) {
    this.searchPattern = searchPattern;
  }


  public SchemaType versionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

   /**
   * A short description of the version.
   * @return versionInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Added new property", value = "A short description of the version.")
  @JsonProperty(JSON_PROPERTY_VERSION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersionInfo() {
    return versionInfo;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
  }


  public SchemaType properties(Map<String, PropertyDefinition> properties) {
    this.properties = properties;
    return this;
  }

  public SchemaType putPropertiesItem(String key, PropertyDefinition propertiesItem) {
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Definition of properties that can be persisted.
   * @return properties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Definition of properties that can be persisted.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, PropertyDefinition> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperties(Map<String, PropertyDefinition> properties) {
    this.properties = properties;
  }


  public SchemaType version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the type.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The version of the type.")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public SchemaType constraints(List<ComplexConstraint> constraints) {
    this.constraints = constraints;
    return this;
  }

  public SchemaType addConstraintsItem(ComplexConstraint constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * A list of constraints limiting the values to be accepted.
   * @return constraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of constraints limiting the values to be accepted.")
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ComplexConstraint> getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraints(List<ComplexConstraint> constraints) {
    this.constraints = constraints;
  }


  public SchemaType documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

   /**
   * An extended description and/or links to documentation.
   * @return documentation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "typeDocumentation", required = true, value = "An extended description and/or links to documentation.")
  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDocumentation() {
    return documentation;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public SchemaType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the property.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "typeDisplayName", value = "The display name of the property.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SchemaType description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the property.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "typeDescription", required = true, value = "A short description of the property.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this SchemaType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaType schemaType = (SchemaType) o;
    return Objects.equals(this.summaryPattern, schemaType.summaryPattern) &&
        Objects.equals(this.searchPattern, schemaType.searchPattern) &&
        Objects.equals(this.versionInfo, schemaType.versionInfo) &&
        Objects.equals(this.properties, schemaType.properties) &&
        Objects.equals(this.version, schemaType.version) &&
        Objects.equals(this.constraints, schemaType.constraints) &&
        Objects.equals(this.documentation, schemaType.documentation) &&
        Objects.equals(this.displayName, schemaType.displayName) &&
        Objects.equals(this.description, schemaType.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summaryPattern, searchPattern, versionInfo, properties, version, constraints, documentation, displayName, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaType {\n");
    sb.append("    summaryPattern: ").append(toIndentedString(summaryPattern)).append("\n");
    sb.append("    searchPattern: ").append(toIndentedString(searchPattern)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

