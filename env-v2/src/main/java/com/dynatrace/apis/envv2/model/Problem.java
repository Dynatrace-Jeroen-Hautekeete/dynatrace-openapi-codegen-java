/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AlertingProfileStub;
import com.dynatrace.apis.envv2.model.CommentsList;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.EvidenceDetails;
import com.dynatrace.apis.envv2.model.ImpactAnalysis;
import com.dynatrace.apis.envv2.model.LinkedProblem;
import com.dynatrace.apis.envv2.model.METag;
import com.dynatrace.apis.envv2.model.ManagementZone;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The properties of a problem.
 */
@ApiModel(description = "The properties of a problem.")
@JsonPropertyOrder({
  Problem.JSON_PROPERTY_AFFECTED_ENTITIES,
  Problem.JSON_PROPERTY_EVIDENCE_DETAILS,
  Problem.JSON_PROPERTY_RECENT_COMMENTS,
  Problem.JSON_PROPERTY_IMPACT_ANALYSIS,
  Problem.JSON_PROPERTY_LINKED_PROBLEM_INFO,
  Problem.JSON_PROPERTY_ROOT_CAUSE_ENTITY,
  Problem.JSON_PROPERTY_IMPACTED_ENTITIES,
  Problem.JSON_PROPERTY_PROBLEM_FILTERS,
  Problem.JSON_PROPERTY_DISPLAY_ID,
  Problem.JSON_PROPERTY_MANAGEMENT_ZONES,
  Problem.JSON_PROPERTY_IMPACT_LEVEL,
  Problem.JSON_PROPERTY_SEVERITY_LEVEL,
  Problem.JSON_PROPERTY_ENTITY_TAGS,
  Problem.JSON_PROPERTY_PROBLEM_ID,
  Problem.JSON_PROPERTY_STATUS,
  Problem.JSON_PROPERTY_START_TIME,
  Problem.JSON_PROPERTY_END_TIME,
  Problem.JSON_PROPERTY_TITLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class Problem {
  public static final String JSON_PROPERTY_AFFECTED_ENTITIES = "affectedEntities";
  private Set<EntityStub> affectedEntities = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_EVIDENCE_DETAILS = "evidenceDetails";
  private EvidenceDetails evidenceDetails;

  public static final String JSON_PROPERTY_RECENT_COMMENTS = "recentComments";
  private CommentsList recentComments;

  public static final String JSON_PROPERTY_IMPACT_ANALYSIS = "impactAnalysis";
  private ImpactAnalysis impactAnalysis;

  public static final String JSON_PROPERTY_LINKED_PROBLEM_INFO = "linkedProblemInfo";
  private LinkedProblem linkedProblemInfo;

  public static final String JSON_PROPERTY_ROOT_CAUSE_ENTITY = "rootCauseEntity";
  private EntityStub rootCauseEntity;

  public static final String JSON_PROPERTY_IMPACTED_ENTITIES = "impactedEntities";
  private Set<EntityStub> impactedEntities = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_PROBLEM_FILTERS = "problemFilters";
  private Set<AlertingProfileStub> problemFilters = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_DISPLAY_ID = "displayId";
  private String displayId;

  public static final String JSON_PROPERTY_MANAGEMENT_ZONES = "managementZones";
  private Set<ManagementZone> managementZones = new LinkedHashSet<>();

  /**
   * The impact level of the problem. It shows what is affected by the problem.
   */
  public enum ImpactLevelEnum {
    APPLICATION("APPLICATION"),
    
    ENVIRONMENT("ENVIRONMENT"),
    
    INFRASTRUCTURE("INFRASTRUCTURE"),
    
    SERVICES("SERVICES");

    private String value;

    ImpactLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImpactLevelEnum fromValue(String value) {
      for (ImpactLevelEnum b : ImpactLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IMPACT_LEVEL = "impactLevel";
  private ImpactLevelEnum impactLevel;

  /**
   * The severity of the problem.
   */
  public enum SeverityLevelEnum {
    AVAILABILITY("AVAILABILITY"),
    
    CUSTOM_ALERT("CUSTOM_ALERT"),
    
    ERROR("ERROR"),
    
    INFO("INFO"),
    
    MONITORING_UNAVAILABLE("MONITORING_UNAVAILABLE"),
    
    PERFORMANCE("PERFORMANCE"),
    
    RESOURCE_CONTENTION("RESOURCE_CONTENTION");

    private String value;

    SeverityLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeverityLevelEnum fromValue(String value) {
      for (SeverityLevelEnum b : SeverityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEVERITY_LEVEL = "severityLevel";
  private SeverityLevelEnum severityLevel;

  public static final String JSON_PROPERTY_ENTITY_TAGS = "entityTags";
  private Set<METag> entityTags = null;

  public static final String JSON_PROPERTY_PROBLEM_ID = "problemId";
  private String problemId;

  /**
   * The status of the problem.
   */
  public enum StatusEnum {
    CLOSED("CLOSED"),
    
    OPEN("OPEN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private Long startTime;

  public static final String JSON_PROPERTY_END_TIME = "endTime";
  private Long endTime;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public Problem() { 
  }

  public Problem affectedEntities(Set<EntityStub> affectedEntities) {
    this.affectedEntities = affectedEntities;
    return this;
  }

  public Problem addAffectedEntitiesItem(EntityStub affectedEntitiesItem) {
    this.affectedEntities.add(affectedEntitiesItem);
    return this;
  }

   /**
   * A list of all entities that are affected by the problem.
   * @return affectedEntities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of all entities that are affected by the problem.")
  @JsonProperty(JSON_PROPERTY_AFFECTED_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<EntityStub> getAffectedEntities() {
    return affectedEntities;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_AFFECTED_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAffectedEntities(Set<EntityStub> affectedEntities) {
    this.affectedEntities = affectedEntities;
  }


  public Problem evidenceDetails(EvidenceDetails evidenceDetails) {
    this.evidenceDetails = evidenceDetails;
    return this;
  }

   /**
   * Get evidenceDetails
   * @return evidenceDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EVIDENCE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EvidenceDetails getEvidenceDetails() {
    return evidenceDetails;
  }


  @JsonProperty(JSON_PROPERTY_EVIDENCE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEvidenceDetails(EvidenceDetails evidenceDetails) {
    this.evidenceDetails = evidenceDetails;
  }


  public Problem recentComments(CommentsList recentComments) {
    this.recentComments = recentComments;
    return this;
  }

   /**
   * Get recentComments
   * @return recentComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RECENT_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommentsList getRecentComments() {
    return recentComments;
  }


  @JsonProperty(JSON_PROPERTY_RECENT_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecentComments(CommentsList recentComments) {
    this.recentComments = recentComments;
  }


  public Problem impactAnalysis(ImpactAnalysis impactAnalysis) {
    this.impactAnalysis = impactAnalysis;
    return this;
  }

   /**
   * Get impactAnalysis
   * @return impactAnalysis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IMPACT_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImpactAnalysis getImpactAnalysis() {
    return impactAnalysis;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_ANALYSIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImpactAnalysis(ImpactAnalysis impactAnalysis) {
    this.impactAnalysis = impactAnalysis;
  }


  public Problem linkedProblemInfo(LinkedProblem linkedProblemInfo) {
    this.linkedProblemInfo = linkedProblemInfo;
    return this;
  }

   /**
   * Get linkedProblemInfo
   * @return linkedProblemInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LINKED_PROBLEM_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LinkedProblem getLinkedProblemInfo() {
    return linkedProblemInfo;
  }


  @JsonProperty(JSON_PROPERTY_LINKED_PROBLEM_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkedProblemInfo(LinkedProblem linkedProblemInfo) {
    this.linkedProblemInfo = linkedProblemInfo;
  }


  public Problem rootCauseEntity(EntityStub rootCauseEntity) {
    this.rootCauseEntity = rootCauseEntity;
    return this;
  }

   /**
   * Get rootCauseEntity
   * @return rootCauseEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityStub getRootCauseEntity() {
    return rootCauseEntity;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootCauseEntity(EntityStub rootCauseEntity) {
    this.rootCauseEntity = rootCauseEntity;
  }


  public Problem impactedEntities(Set<EntityStub> impactedEntities) {
    this.impactedEntities = impactedEntities;
    return this;
  }

  public Problem addImpactedEntitiesItem(EntityStub impactedEntitiesItem) {
    this.impactedEntities.add(impactedEntitiesItem);
    return this;
  }

   /**
   * A list of all entities that are impacted by the problem.
   * @return impactedEntities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of all entities that are impacted by the problem.")
  @JsonProperty(JSON_PROPERTY_IMPACTED_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<EntityStub> getImpactedEntities() {
    return impactedEntities;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_IMPACTED_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpactedEntities(Set<EntityStub> impactedEntities) {
    this.impactedEntities = impactedEntities;
  }


  public Problem problemFilters(Set<AlertingProfileStub> problemFilters) {
    this.problemFilters = problemFilters;
    return this;
  }

  public Problem addProblemFiltersItem(AlertingProfileStub problemFiltersItem) {
    this.problemFilters.add(problemFiltersItem);
    return this;
  }

   /**
   * A list of alerting profiles that match the problem.
   * @return problemFilters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of alerting profiles that match the problem.")
  @JsonProperty(JSON_PROPERTY_PROBLEM_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<AlertingProfileStub> getProblemFilters() {
    return problemFilters;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PROBLEM_FILTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProblemFilters(Set<AlertingProfileStub> problemFilters) {
    this.problemFilters = problemFilters;
  }


  public Problem displayId(String displayId) {
    this.displayId = displayId;
    return this;
  }

   /**
   * The display ID of the problem.
   * @return displayId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The display ID of the problem.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayId() {
    return displayId;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }


  public Problem managementZones(Set<ManagementZone> managementZones) {
    this.managementZones = managementZones;
    return this;
  }

  public Problem addManagementZonesItem(ManagementZone managementZonesItem) {
    this.managementZones.add(managementZonesItem);
    return this;
  }

   /**
   * A list of all management zones that the problem belongs to.
   * @return managementZones
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of all management zones that the problem belongs to.")
  @JsonProperty(JSON_PROPERTY_MANAGEMENT_ZONES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<ManagementZone> getManagementZones() {
    return managementZones;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MANAGEMENT_ZONES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManagementZones(Set<ManagementZone> managementZones) {
    this.managementZones = managementZones;
  }


  public Problem impactLevel(ImpactLevelEnum impactLevel) {
    this.impactLevel = impactLevel;
    return this;
  }

   /**
   * The impact level of the problem. It shows what is affected by the problem.
   * @return impactLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The impact level of the problem. It shows what is affected by the problem.")
  @JsonProperty(JSON_PROPERTY_IMPACT_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ImpactLevelEnum getImpactLevel() {
    return impactLevel;
  }


  @JsonProperty(JSON_PROPERTY_IMPACT_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImpactLevel(ImpactLevelEnum impactLevel) {
    this.impactLevel = impactLevel;
  }


  public Problem severityLevel(SeverityLevelEnum severityLevel) {
    this.severityLevel = severityLevel;
    return this;
  }

   /**
   * The severity of the problem.
   * @return severityLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The severity of the problem.")
  @JsonProperty(JSON_PROPERTY_SEVERITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SeverityLevelEnum getSeverityLevel() {
    return severityLevel;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeverityLevel(SeverityLevelEnum severityLevel) {
    this.severityLevel = severityLevel;
  }


  public Problem entityTags(Set<METag> entityTags) {
    this.entityTags = entityTags;
    return this;
  }

  public Problem addEntityTagsItem(METag entityTagsItem) {
    if (this.entityTags == null) {
      this.entityTags = new LinkedHashSet<>();
    }
    this.entityTags.add(entityTagsItem);
    return this;
  }

   /**
   * A list of all entity tags of the problem.
   * @return entityTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of all entity tags of the problem.")
  @JsonProperty(JSON_PROPERTY_ENTITY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<METag> getEntityTags() {
    return entityTags;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ENTITY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityTags(Set<METag> entityTags) {
    this.entityTags = entityTags;
  }


  public Problem problemId(String problemId) {
    this.problemId = problemId;
    return this;
  }

   /**
   * The ID of the problem.
   * @return problemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the problem.")
  @JsonProperty(JSON_PROPERTY_PROBLEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProblemId() {
    return problemId;
  }


  @JsonProperty(JSON_PROPERTY_PROBLEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProblemId(String problemId) {
    this.problemId = problemId;
  }


  public Problem status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the problem.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the problem.")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Problem startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The start timestamp of the problem, in UTC milliseconds.
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start timestamp of the problem, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public Problem endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The end timestamp of the problem, in UTC milliseconds.    Has &#x60;-1&#x60; value, if the problem is still open.
   * @return endTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end timestamp of the problem, in UTC milliseconds.    Has `-1` value, if the problem is still open.")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public Problem title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The name of the problem, displayed in the UI.
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the problem, displayed in the UI.")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * Return true if this Problem object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Problem problem = (Problem) o;
    return Objects.equals(this.affectedEntities, problem.affectedEntities) &&
        Objects.equals(this.evidenceDetails, problem.evidenceDetails) &&
        Objects.equals(this.recentComments, problem.recentComments) &&
        Objects.equals(this.impactAnalysis, problem.impactAnalysis) &&
        Objects.equals(this.linkedProblemInfo, problem.linkedProblemInfo) &&
        Objects.equals(this.rootCauseEntity, problem.rootCauseEntity) &&
        Objects.equals(this.impactedEntities, problem.impactedEntities) &&
        Objects.equals(this.problemFilters, problem.problemFilters) &&
        Objects.equals(this.displayId, problem.displayId) &&
        Objects.equals(this.managementZones, problem.managementZones) &&
        Objects.equals(this.impactLevel, problem.impactLevel) &&
        Objects.equals(this.severityLevel, problem.severityLevel) &&
        Objects.equals(this.entityTags, problem.entityTags) &&
        Objects.equals(this.problemId, problem.problemId) &&
        Objects.equals(this.status, problem.status) &&
        Objects.equals(this.startTime, problem.startTime) &&
        Objects.equals(this.endTime, problem.endTime) &&
        Objects.equals(this.title, problem.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedEntities, evidenceDetails, recentComments, impactAnalysis, linkedProblemInfo, rootCauseEntity, impactedEntities, problemFilters, displayId, managementZones, impactLevel, severityLevel, entityTags, problemId, status, startTime, endTime, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Problem {\n");
    sb.append("    affectedEntities: ").append(toIndentedString(affectedEntities)).append("\n");
    sb.append("    evidenceDetails: ").append(toIndentedString(evidenceDetails)).append("\n");
    sb.append("    recentComments: ").append(toIndentedString(recentComments)).append("\n");
    sb.append("    impactAnalysis: ").append(toIndentedString(impactAnalysis)).append("\n");
    sb.append("    linkedProblemInfo: ").append(toIndentedString(linkedProblemInfo)).append("\n");
    sb.append("    rootCauseEntity: ").append(toIndentedString(rootCauseEntity)).append("\n");
    sb.append("    impactedEntities: ").append(toIndentedString(impactedEntities)).append("\n");
    sb.append("    problemFilters: ").append(toIndentedString(problemFilters)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    managementZones: ").append(toIndentedString(managementZones)).append("\n");
    sb.append("    impactLevel: ").append(toIndentedString(impactLevel)).append("\n");
    sb.append("    severityLevel: ").append(toIndentedString(severityLevel)).append("\n");
    sb.append("    entityTags: ").append(toIndentedString(entityTags)).append("\n");
    sb.append("    problemId: ").append(toIndentedString(problemId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

