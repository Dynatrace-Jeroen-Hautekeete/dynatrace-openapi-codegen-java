/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.MuteState;
import com.dynatrace.apis.envv2.model.RiskAssessmentSnapshot;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The event of a security problem.
 */
@ApiModel(description = "The event of a security problem.")
@JsonPropertyOrder({
  SecurityProblemEvent.JSON_PROPERTY_TIMESTAMP,
  SecurityProblemEvent.JSON_PROPERTY_REASON,
  SecurityProblemEvent.JSON_PROPERTY_RISK_ASSESSMENT_SNAPSHOT,
  SecurityProblemEvent.JSON_PROPERTY_MUTE_STATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SecurityProblemEvent {
  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Long timestamp;

  /**
   * The reason of the event creation.
   */
  public enum ReasonEnum {
    CREATED("SECURITY_PROBLEM_CREATED"),
    
    MUTED("SECURITY_PROBLEM_MUTED"),
    
    REOPENED("SECURITY_PROBLEM_REOPENED"),
    
    RESOLVED("SECURITY_PROBLEM_RESOLVED"),
    
    UNMUTED("SECURITY_PROBLEM_UNMUTED");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REASON = "reason";
  private ReasonEnum reason;

  public static final String JSON_PROPERTY_RISK_ASSESSMENT_SNAPSHOT = "riskAssessmentSnapshot";
  private RiskAssessmentSnapshot riskAssessmentSnapshot;

  public static final String JSON_PROPERTY_MUTE_STATE = "muteState";
  private MuteState muteState;

  public SecurityProblemEvent() { 
  }

  @JsonCreator
  public SecurityProblemEvent(
    @JsonProperty(JSON_PROPERTY_TIMESTAMP) Long timestamp, 
    @JsonProperty(JSON_PROPERTY_REASON) ReasonEnum reason
  ) {
  this();
    this.timestamp = timestamp;
    this.reason = reason;
  }

   /**
   * The timestamp when the event occurred.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp when the event occurred.")
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTimestamp() {
    return timestamp;
  }




   /**
   * The reason of the event creation.
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason of the event creation.")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReasonEnum getReason() {
    return reason;
  }




  public SecurityProblemEvent riskAssessmentSnapshot(RiskAssessmentSnapshot riskAssessmentSnapshot) {
    this.riskAssessmentSnapshot = riskAssessmentSnapshot;
    return this;
  }

   /**
   * Get riskAssessmentSnapshot
   * @return riskAssessmentSnapshot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RISK_ASSESSMENT_SNAPSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RiskAssessmentSnapshot getRiskAssessmentSnapshot() {
    return riskAssessmentSnapshot;
  }


  @JsonProperty(JSON_PROPERTY_RISK_ASSESSMENT_SNAPSHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskAssessmentSnapshot(RiskAssessmentSnapshot riskAssessmentSnapshot) {
    this.riskAssessmentSnapshot = riskAssessmentSnapshot;
  }


  public SecurityProblemEvent muteState(MuteState muteState) {
    this.muteState = muteState;
    return this;
  }

   /**
   * Get muteState
   * @return muteState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MUTE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MuteState getMuteState() {
    return muteState;
  }


  @JsonProperty(JSON_PROPERTY_MUTE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMuteState(MuteState muteState) {
    this.muteState = muteState;
  }


  /**
   * Return true if this SecurityProblemEvent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityProblemEvent securityProblemEvent = (SecurityProblemEvent) o;
    return Objects.equals(this.timestamp, securityProblemEvent.timestamp) &&
        Objects.equals(this.reason, securityProblemEvent.reason) &&
        Objects.equals(this.riskAssessmentSnapshot, securityProblemEvent.riskAssessmentSnapshot) &&
        Objects.equals(this.muteState, securityProblemEvent.muteState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, reason, riskAssessmentSnapshot, muteState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityProblemEvent {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    riskAssessmentSnapshot: ").append(toIndentedString(riskAssessmentSnapshot)).append("\n");
    sb.append("    muteState: ").append(toIndentedString(muteState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

