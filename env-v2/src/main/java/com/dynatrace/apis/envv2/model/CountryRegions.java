/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.Region;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Information about a country.
 */
@ApiModel(description = "Information about a country.")
@JsonPropertyOrder({
  CountryRegions.JSON_PROPERTY_NAME,
  CountryRegions.JSON_PROPERTY_CODE,
  CountryRegions.JSON_PROPERTY_REGION_COUNT,
  CountryRegions.JSON_PROPERTY_REGIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class CountryRegions {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_REGION_COUNT = "regionCount";
  private Integer regionCount;

  public static final String JSON_PROPERTY_REGIONS = "regions";
  private List<Region> regions = null;

  public CountryRegions() { 
  }

  public CountryRegions name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the country.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the country.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CountryRegions code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The ISO code of the country.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO code of the country.")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public CountryRegions regionCount(Integer regionCount) {
    this.regionCount = regionCount;
    return this;
  }

   /**
   * The number of regions in the country.
   * @return regionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of regions in the country.")
  @JsonProperty(JSON_PROPERTY_REGION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRegionCount() {
    return regionCount;
  }


  @JsonProperty(JSON_PROPERTY_REGION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegionCount(Integer regionCount) {
    this.regionCount = regionCount;
  }


  public CountryRegions regions(List<Region> regions) {
    this.regions = regions;
    return this;
  }

  public CountryRegions addRegionsItem(Region regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * The list of regions in the country.
   * @return regions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of regions in the country.")
  @JsonProperty(JSON_PROPERTY_REGIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Region> getRegions() {
    return regions;
  }


  @JsonProperty(JSON_PROPERTY_REGIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegions(List<Region> regions) {
    this.regions = regions;
  }


  /**
   * Return true if this CountryRegions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryRegions countryRegions = (CountryRegions) o;
    return Objects.equals(this.name, countryRegions.name) &&
        Objects.equals(this.code, countryRegions.code) &&
        Objects.equals(this.regionCount, countryRegions.regionCount) &&
        Objects.equals(this.regions, countryRegions.regions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, regionCount, regions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryRegions {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    regionCount: ").append(toIndentedString(regionCount)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

