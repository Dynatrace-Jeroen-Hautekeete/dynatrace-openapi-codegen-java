/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.SyntheticOnDemandFailedExecutionStatus;
import com.dynatrace.apis.envv2.model.SyntheticOnDemandTriggeringProblemDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contains information about on-demand executions triggered within the batch.
 */
@ApiModel(description = "Contains information about on-demand executions triggered within the batch.")
@JsonPropertyOrder({
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_BATCH_ID,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_USER_ID,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_BATCH_STATUS,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_TRIGGERED_COUNT,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_EXECUTED_COUNT,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_FAILED_COUNT,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_FAILED_EXECUTIONS,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_FAILED_TO_EXECUTE_COUNT,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_FAILED_TO_EXECUTE,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_METADATA,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_TRIGGERING_PROBLEMS_COUNT,
  SyntheticOnDemandBatchStatus.JSON_PROPERTY_TRIGGERING_PROBLEMS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SyntheticOnDemandBatchStatus {
  public static final String JSON_PROPERTY_BATCH_ID = "batchId";
  private Long batchId;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  /**
   * The status of the batch.
   */
  public enum BatchStatusEnum {
    FAILED("FAILED"),
    
    FAILED_TO_EXECUTE("FAILED_TO_EXECUTE"),
    
    NOT_TRIGGERED("NOT_TRIGGERED"),
    
    RUNNING("RUNNING"),
    
    SUCCESS("SUCCESS");

    private String value;

    BatchStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BatchStatusEnum fromValue(String value) {
      for (BatchStatusEnum b : BatchStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BATCH_STATUS = "batchStatus";
  private BatchStatusEnum batchStatus;

  public static final String JSON_PROPERTY_TRIGGERED_COUNT = "triggeredCount";
  private Integer triggeredCount;

  public static final String JSON_PROPERTY_EXECUTED_COUNT = "executedCount";
  private Integer executedCount;

  public static final String JSON_PROPERTY_FAILED_COUNT = "failedCount";
  private Integer failedCount;

  public static final String JSON_PROPERTY_FAILED_EXECUTIONS = "failedExecutions";
  private List<SyntheticOnDemandFailedExecutionStatus> failedExecutions = null;

  public static final String JSON_PROPERTY_FAILED_TO_EXECUTE_COUNT = "failedToExecuteCount";
  private Integer failedToExecuteCount;

  public static final String JSON_PROPERTY_FAILED_TO_EXECUTE = "failedToExecute";
  private List<SyntheticOnDemandFailedExecutionStatus> failedToExecute = null;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = null;

  public static final String JSON_PROPERTY_TRIGGERING_PROBLEMS_COUNT = "triggeringProblemsCount";
  private Integer triggeringProblemsCount;

  public static final String JSON_PROPERTY_TRIGGERING_PROBLEMS = "triggeringProblems";
  private List<SyntheticOnDemandTriggeringProblemDetails> triggeringProblems = null;

  public SyntheticOnDemandBatchStatus() { 
  }

  public SyntheticOnDemandBatchStatus batchId(Long batchId) {
    this.batchId = batchId;
    return this;
  }

   /**
   * The identifier of the batch.
   * @return batchId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The identifier of the batch.")
  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getBatchId() {
    return batchId;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBatchId(Long batchId) {
    this.batchId = batchId;
  }


  public SyntheticOnDemandBatchStatus userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The name of the user who triggered execution of the batch.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the user who triggered execution of the batch.")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(String userId) {
    this.userId = userId;
  }


  public SyntheticOnDemandBatchStatus batchStatus(BatchStatusEnum batchStatus) {
    this.batchStatus = batchStatus;
    return this;
  }

   /**
   * The status of the batch.
   * @return batchStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the batch.")
  @JsonProperty(JSON_PROPERTY_BATCH_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BatchStatusEnum getBatchStatus() {
    return batchStatus;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBatchStatus(BatchStatusEnum batchStatus) {
    this.batchStatus = batchStatus;
  }


  public SyntheticOnDemandBatchStatus triggeredCount(Integer triggeredCount) {
    this.triggeredCount = triggeredCount;
    return this;
  }

   /**
   * The number of triggered executions within the batch.
   * @return triggeredCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of triggered executions within the batch.")
  @JsonProperty(JSON_PROPERTY_TRIGGERED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTriggeredCount() {
    return triggeredCount;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGERED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTriggeredCount(Integer triggeredCount) {
    this.triggeredCount = triggeredCount;
  }


  public SyntheticOnDemandBatchStatus executedCount(Integer executedCount) {
    this.executedCount = executedCount;
    return this;
  }

   /**
   * The number of triggered executions with the result SUCCESS or FAILED.
   * @return executedCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of triggered executions with the result SUCCESS or FAILED.")
  @JsonProperty(JSON_PROPERTY_EXECUTED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExecutedCount() {
    return executedCount;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutedCount(Integer executedCount) {
    this.executedCount = executedCount;
  }


  public SyntheticOnDemandBatchStatus failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

   /**
   * The number of triggered executions with the result FAILED.
   * @return failedCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of triggered executions with the result FAILED.")
  @JsonProperty(JSON_PROPERTY_FAILED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFailedCount() {
    return failedCount;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }


  public SyntheticOnDemandBatchStatus failedExecutions(List<SyntheticOnDemandFailedExecutionStatus> failedExecutions) {
    this.failedExecutions = failedExecutions;
    return this;
  }

  public SyntheticOnDemandBatchStatus addFailedExecutionsItem(SyntheticOnDemandFailedExecutionStatus failedExecutionsItem) {
    if (this.failedExecutions == null) {
      this.failedExecutions = new ArrayList<>();
    }
    this.failedExecutions.add(failedExecutionsItem);
    return this;
  }

   /**
   * Get failedExecutions
   * @return failedExecutions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FAILED_EXECUTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SyntheticOnDemandFailedExecutionStatus> getFailedExecutions() {
    return failedExecutions;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_EXECUTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailedExecutions(List<SyntheticOnDemandFailedExecutionStatus> failedExecutions) {
    this.failedExecutions = failedExecutions;
  }


  public SyntheticOnDemandBatchStatus failedToExecuteCount(Integer failedToExecuteCount) {
    this.failedToExecuteCount = failedToExecuteCount;
    return this;
  }

   /**
   * The number of executions that were triggered and timed out because of a problem with the Synthetic engine.
   * @return failedToExecuteCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of executions that were triggered and timed out because of a problem with the Synthetic engine.")
  @JsonProperty(JSON_PROPERTY_FAILED_TO_EXECUTE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFailedToExecuteCount() {
    return failedToExecuteCount;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_TO_EXECUTE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFailedToExecuteCount(Integer failedToExecuteCount) {
    this.failedToExecuteCount = failedToExecuteCount;
  }


  public SyntheticOnDemandBatchStatus failedToExecute(List<SyntheticOnDemandFailedExecutionStatus> failedToExecute) {
    this.failedToExecute = failedToExecute;
    return this;
  }

  public SyntheticOnDemandBatchStatus addFailedToExecuteItem(SyntheticOnDemandFailedExecutionStatus failedToExecuteItem) {
    if (this.failedToExecute == null) {
      this.failedToExecute = new ArrayList<>();
    }
    this.failedToExecute.add(failedToExecuteItem);
    return this;
  }

   /**
   * Get failedToExecute
   * @return failedToExecute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FAILED_TO_EXECUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SyntheticOnDemandFailedExecutionStatus> getFailedToExecute() {
    return failedToExecute;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_TO_EXECUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailedToExecute(List<SyntheticOnDemandFailedExecutionStatus> failedToExecute) {
    this.failedToExecute = failedToExecute;
  }


  public SyntheticOnDemandBatchStatus metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public SyntheticOnDemandBatchStatus putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * String to string map of metadata properties for batch
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String to string map of metadata properties for batch")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public SyntheticOnDemandBatchStatus triggeringProblemsCount(Integer triggeringProblemsCount) {
    this.triggeringProblemsCount = triggeringProblemsCount;
    return this;
  }

   /**
   * The number of executions that were not triggered due to some problems.
   * @return triggeringProblemsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of executions that were not triggered due to some problems.")
  @JsonProperty(JSON_PROPERTY_TRIGGERING_PROBLEMS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTriggeringProblemsCount() {
    return triggeringProblemsCount;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGERING_PROBLEMS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggeringProblemsCount(Integer triggeringProblemsCount) {
    this.triggeringProblemsCount = triggeringProblemsCount;
  }


  public SyntheticOnDemandBatchStatus triggeringProblems(List<SyntheticOnDemandTriggeringProblemDetails> triggeringProblems) {
    this.triggeringProblems = triggeringProblems;
    return this;
  }

  public SyntheticOnDemandBatchStatus addTriggeringProblemsItem(SyntheticOnDemandTriggeringProblemDetails triggeringProblemsItem) {
    if (this.triggeringProblems == null) {
      this.triggeringProblems = new ArrayList<>();
    }
    this.triggeringProblems.add(triggeringProblemsItem);
    return this;
  }

   /**
   * Get triggeringProblems
   * @return triggeringProblems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRIGGERING_PROBLEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SyntheticOnDemandTriggeringProblemDetails> getTriggeringProblems() {
    return triggeringProblems;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGERING_PROBLEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggeringProblems(List<SyntheticOnDemandTriggeringProblemDetails> triggeringProblems) {
    this.triggeringProblems = triggeringProblems;
  }


  /**
   * Return true if this SyntheticOnDemandBatchStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyntheticOnDemandBatchStatus syntheticOnDemandBatchStatus = (SyntheticOnDemandBatchStatus) o;
    return Objects.equals(this.batchId, syntheticOnDemandBatchStatus.batchId) &&
        Objects.equals(this.userId, syntheticOnDemandBatchStatus.userId) &&
        Objects.equals(this.batchStatus, syntheticOnDemandBatchStatus.batchStatus) &&
        Objects.equals(this.triggeredCount, syntheticOnDemandBatchStatus.triggeredCount) &&
        Objects.equals(this.executedCount, syntheticOnDemandBatchStatus.executedCount) &&
        Objects.equals(this.failedCount, syntheticOnDemandBatchStatus.failedCount) &&
        Objects.equals(this.failedExecutions, syntheticOnDemandBatchStatus.failedExecutions) &&
        Objects.equals(this.failedToExecuteCount, syntheticOnDemandBatchStatus.failedToExecuteCount) &&
        Objects.equals(this.failedToExecute, syntheticOnDemandBatchStatus.failedToExecute) &&
        Objects.equals(this.metadata, syntheticOnDemandBatchStatus.metadata) &&
        Objects.equals(this.triggeringProblemsCount, syntheticOnDemandBatchStatus.triggeringProblemsCount) &&
        Objects.equals(this.triggeringProblems, syntheticOnDemandBatchStatus.triggeringProblems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, userId, batchStatus, triggeredCount, executedCount, failedCount, failedExecutions, failedToExecuteCount, failedToExecute, metadata, triggeringProblemsCount, triggeringProblems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyntheticOnDemandBatchStatus {\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    batchStatus: ").append(toIndentedString(batchStatus)).append("\n");
    sb.append("    triggeredCount: ").append(toIndentedString(triggeredCount)).append("\n");
    sb.append("    executedCount: ").append(toIndentedString(executedCount)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    failedExecutions: ").append(toIndentedString(failedExecutions)).append("\n");
    sb.append("    failedToExecuteCount: ").append(toIndentedString(failedToExecuteCount)).append("\n");
    sb.append("    failedToExecute: ").append(toIndentedString(failedToExecute)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    triggeringProblemsCount: ").append(toIndentedString(triggeringProblemsCount)).append("\n");
    sb.append("    triggeringProblems: ").append(toIndentedString(triggeringProblems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

