/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.SyntheticOnDemandExecutionRequestGroup;
import com.dynatrace.apis.envv2.model.SyntheticOnDemandExecutionRequestMonitor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contains parameters for the on-demand execution of monitors identified by tags, applications, or services.
 */
@ApiModel(description = "Contains parameters for the on-demand execution of monitors identified by tags, applications, or services.")
@JsonPropertyOrder({
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_PROCESSING_MODE,
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_FAIL_ON_PERFORMANCE_ISSUE,
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_STOP_ON_PROBLEM,
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_MONITORS,
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_GROUP,
  SyntheticOnDemandExecutionRequest.JSON_PROPERTY_METADATA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SyntheticOnDemandExecutionRequest {
  /**
   * The execution&#39;s processing mode
   */
  public enum ProcessingModeEnum {
    STANDARD("STANDARD"),
    
    DISABLE_PROBLEM_DETECTION("DISABLE_PROBLEM_DETECTION"),
    
    EXECUTIONS_DETAILS_ONLY("EXECUTIONS_DETAILS_ONLY");

    private String value;

    ProcessingModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcessingModeEnum fromValue(String value) {
      for (ProcessingModeEnum b : ProcessingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROCESSING_MODE = "processingMode";
  private ProcessingModeEnum processingMode = ProcessingModeEnum.STANDARD;

  public static final String JSON_PROPERTY_FAIL_ON_PERFORMANCE_ISSUE = "failOnPerformanceIssue";
  private Boolean failOnPerformanceIssue = true;

  public static final String JSON_PROPERTY_STOP_ON_PROBLEM = "stopOnProblem";
  private Boolean stopOnProblem = false;

  public static final String JSON_PROPERTY_MONITORS = "monitors";
  private List<SyntheticOnDemandExecutionRequestMonitor> monitors = null;

  public static final String JSON_PROPERTY_GROUP = "group";
  private SyntheticOnDemandExecutionRequestGroup group;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = null;

  public SyntheticOnDemandExecutionRequest() { 
  }

  public SyntheticOnDemandExecutionRequest processingMode(ProcessingModeEnum processingMode) {
    this.processingMode = processingMode;
    return this;
  }

   /**
   * The execution&#39;s processing mode
   * @return processingMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The execution's processing mode")
  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProcessingModeEnum getProcessingMode() {
    return processingMode;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingMode(ProcessingModeEnum processingMode) {
    this.processingMode = processingMode;
  }


  public SyntheticOnDemandExecutionRequest failOnPerformanceIssue(Boolean failOnPerformanceIssue) {
    this.failOnPerformanceIssue = failOnPerformanceIssue;
    return this;
  }

   /**
   * If true, the status will be FAILED in case of performance issue.
   * @return failOnPerformanceIssue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the status will be FAILED in case of performance issue.")
  @JsonProperty(JSON_PROPERTY_FAIL_ON_PERFORMANCE_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFailOnPerformanceIssue() {
    return failOnPerformanceIssue;
  }


  @JsonProperty(JSON_PROPERTY_FAIL_ON_PERFORMANCE_ISSUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailOnPerformanceIssue(Boolean failOnPerformanceIssue) {
    this.failOnPerformanceIssue = failOnPerformanceIssue;
  }


  public SyntheticOnDemandExecutionRequest stopOnProblem(Boolean stopOnProblem) {
    this.stopOnProblem = stopOnProblem;
    return this;
  }

   /**
   * If true, no executions will be scheduled if a problem occurs.
   * @return stopOnProblem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, no executions will be scheduled if a problem occurs.")
  @JsonProperty(JSON_PROPERTY_STOP_ON_PROBLEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStopOnProblem() {
    return stopOnProblem;
  }


  @JsonProperty(JSON_PROPERTY_STOP_ON_PROBLEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopOnProblem(Boolean stopOnProblem) {
    this.stopOnProblem = stopOnProblem;
  }


  public SyntheticOnDemandExecutionRequest monitors(List<SyntheticOnDemandExecutionRequestMonitor> monitors) {
    this.monitors = monitors;
    return this;
  }

  public SyntheticOnDemandExecutionRequest addMonitorsItem(SyntheticOnDemandExecutionRequestMonitor monitorsItem) {
    if (this.monitors == null) {
      this.monitors = new ArrayList<>();
    }
    this.monitors.add(monitorsItem);
    return this;
  }

   /**
   * List of monitors to be triggered.
   * @return monitors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of monitors to be triggered.")
  @JsonProperty(JSON_PROPERTY_MONITORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SyntheticOnDemandExecutionRequestMonitor> getMonitors() {
    return monitors;
  }


  @JsonProperty(JSON_PROPERTY_MONITORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonitors(List<SyntheticOnDemandExecutionRequestMonitor> monitors) {
    this.monitors = monitors;
  }


  public SyntheticOnDemandExecutionRequest group(SyntheticOnDemandExecutionRequestGroup group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SyntheticOnDemandExecutionRequestGroup getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroup(SyntheticOnDemandExecutionRequestGroup group) {
    this.group = group;
  }


  public SyntheticOnDemandExecutionRequest metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public SyntheticOnDemandExecutionRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * String to string map of metadata properties for execution
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String to string map of metadata properties for execution")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  /**
   * Return true if this SyntheticOnDemandExecutionRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyntheticOnDemandExecutionRequest syntheticOnDemandExecutionRequest = (SyntheticOnDemandExecutionRequest) o;
    return Objects.equals(this.processingMode, syntheticOnDemandExecutionRequest.processingMode) &&
        Objects.equals(this.failOnPerformanceIssue, syntheticOnDemandExecutionRequest.failOnPerformanceIssue) &&
        Objects.equals(this.stopOnProblem, syntheticOnDemandExecutionRequest.stopOnProblem) &&
        Objects.equals(this.monitors, syntheticOnDemandExecutionRequest.monitors) &&
        Objects.equals(this.group, syntheticOnDemandExecutionRequest.group) &&
        Objects.equals(this.metadata, syntheticOnDemandExecutionRequest.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processingMode, failOnPerformanceIssue, stopOnProblem, monitors, group, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyntheticOnDemandExecutionRequest {\n");
    sb.append("    processingMode: ").append(toIndentedString(processingMode)).append("\n");
    sb.append("    failOnPerformanceIssue: ").append(toIndentedString(failOnPerformanceIssue)).append("\n");
    sb.append("    stopOnProblem: ").append(toIndentedString(stopOnProblem)).append("\n");
    sb.append("    monitors: ").append(toIndentedString(monitors)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

