/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.CreateMonitoringConfiguration207ResponseInner;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.Extension;
import com.dynatrace.apis.envv2.model.ExtensionEnvironmentConfigurationVersion;
import com.dynatrace.apis.envv2.model.ExtensionEventsList;
import com.dynatrace.apis.envv2.model.ExtensionList;
import com.dynatrace.apis.envv2.model.ExtensionMonitoringConfiguration;
import com.dynatrace.apis.envv2.model.ExtensionMonitoringConfigurationsList;
import com.dynatrace.apis.envv2.model.ExtensionStatusDto;
import com.dynatrace.apis.envv2.model.ExtensionUploadResponseDto;
import java.io.File;
import com.dynatrace.apis.envv2.model.MonitoringConfigurationDto;
import com.dynatrace.apis.envv2.model.MonitoringConfigurationResponse;
import com.dynatrace.apis.envv2.model.MonitoringConfigurationUpdateDto;
import com.dynatrace.apis.envv2.model.SchemaDefinitionRestDto;
import com.dynatrace.apis.envv2.model.SchemaFiles;
import com.dynatrace.apis.envv2.model.SchemasList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class Extensions20Api {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public Extensions20Api() {
    this(new ApiClient());
  }

  public Extensions20Api(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Activates the environment configuration from the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionEnvironmentConfigurationVersion The version of the requested environment configuration. (required)
   * @return ExtensionEnvironmentConfigurationVersion
   * @throws ApiException if fails to make API call
   */
  public ExtensionEnvironmentConfigurationVersion activateExtensionEnvironmentConfiguration(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = activateExtensionEnvironmentConfigurationWithHttpInfo(extensionName, extensionEnvironmentConfigurationVersion);
    return localVarResponse.getData();
  }

  /**
   * Activates the environment configuration from the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionEnvironmentConfigurationVersion The version of the requested environment configuration. (required)
   * @return ApiResponse&lt;ExtensionEnvironmentConfigurationVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEnvironmentConfigurationVersion> activateExtensionEnvironmentConfigurationWithHttpInfo(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = activateExtensionEnvironmentConfigurationRequestBuilder(extensionName, extensionEnvironmentConfigurationVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("activateExtensionEnvironmentConfiguration", localVarResponse);
        }
        return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEnvironmentConfigurationVersion>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder activateExtensionEnvironmentConfigurationRequestBuilder(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling activateExtensionEnvironmentConfiguration");
    }
    // verify the required parameter 'extensionEnvironmentConfigurationVersion' is set
    if (extensionEnvironmentConfigurationVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionEnvironmentConfigurationVersion' when calling activateExtensionEnvironmentConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/environmentConfiguration"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extensionEnvironmentConfigurationVersion);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates new monitoring configuration for the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param monitoringConfigurationDto JSON body of the request, containing monitoring configuration parameters. (required)
   * @return List&lt;MonitoringConfigurationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MonitoringConfigurationResponse> createMonitoringConfiguration(String extensionName, List<MonitoringConfigurationDto> monitoringConfigurationDto) throws ApiException {
    ApiResponse<List<MonitoringConfigurationResponse>> localVarResponse = createMonitoringConfigurationWithHttpInfo(extensionName, monitoringConfigurationDto);
    return localVarResponse.getData();
  }

  /**
   * Creates new monitoring configuration for the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param monitoringConfigurationDto JSON body of the request, containing monitoring configuration parameters. (required)
   * @return ApiResponse&lt;List&lt;MonitoringConfigurationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<MonitoringConfigurationResponse>> createMonitoringConfigurationWithHttpInfo(String extensionName, List<MonitoringConfigurationDto> monitoringConfigurationDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createMonitoringConfigurationRequestBuilder(extensionName, monitoringConfigurationDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createMonitoringConfiguration", localVarResponse);
        }
        return new ApiResponse<List<MonitoringConfigurationResponse>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<MonitoringConfigurationResponse>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createMonitoringConfigurationRequestBuilder(String extensionName, List<MonitoringConfigurationDto> monitoringConfigurationDto) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling createMonitoringConfiguration");
    }
    // verify the required parameter 'monitoringConfigurationDto' is set
    if (monitoringConfigurationDto == null) {
      throw new ApiException(400, "Missing the required parameter 'monitoringConfigurationDto' when calling createMonitoringConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(monitoringConfigurationDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deactivates the environment configuration of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @return ExtensionEnvironmentConfigurationVersion
   * @throws ApiException if fails to make API call
   */
  public ExtensionEnvironmentConfigurationVersion deleteEnvironmentConfiguration(String extensionName) throws ApiException {
    ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = deleteEnvironmentConfigurationWithHttpInfo(extensionName);
    return localVarResponse.getData();
  }

  /**
   * Deactivates the environment configuration of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @return ApiResponse&lt;ExtensionEnvironmentConfigurationVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEnvironmentConfigurationVersion> deleteEnvironmentConfigurationWithHttpInfo(String extensionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteEnvironmentConfigurationRequestBuilder(extensionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteEnvironmentConfiguration", localVarResponse);
        }
        return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEnvironmentConfigurationVersion>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteEnvironmentConfigurationRequestBuilder(String extensionName) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling deleteEnvironmentConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/environmentConfiguration"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the configuration schema of the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @return SchemaDefinitionRestDto
   * @throws ApiException if fails to make API call
   */
  public SchemaDefinitionRestDto extensionConfigurationSchema(String extensionName, String extensionVersion) throws ApiException {
    ApiResponse<SchemaDefinitionRestDto> localVarResponse = extensionConfigurationSchemaWithHttpInfo(extensionName, extensionVersion);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration schema of the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @return ApiResponse&lt;SchemaDefinitionRestDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SchemaDefinitionRestDto> extensionConfigurationSchemaWithHttpInfo(String extensionName, String extensionVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extensionConfigurationSchemaRequestBuilder(extensionName, extensionVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extensionConfigurationSchema", localVarResponse);
        }
        return new ApiResponse<SchemaDefinitionRestDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SchemaDefinitionRestDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extensionConfigurationSchemaRequestBuilder(String extensionName, String extensionVersion) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling extensionConfigurationSchema");
    }
    // verify the required parameter 'extensionVersion' is set
    if (extensionVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionVersion' when calling extensionConfigurationSchema");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/{extensionVersion}/schema"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{extensionVersion}", ApiClient.urlEncode(extensionVersion.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets details of the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @param accept Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)
   * @return Extension
   * @throws ApiException if fails to make API call
   */
  public Extension extensionDetails(String extensionName, String extensionVersion, String accept) throws ApiException {
    ApiResponse<Extension> localVarResponse = extensionDetailsWithHttpInfo(extensionName, extensionVersion, accept);
    return localVarResponse.getData();
  }

  /**
   * Gets details of the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @param accept Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)
   * @return ApiResponse&lt;Extension&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Extension> extensionDetailsWithHttpInfo(String extensionName, String extensionVersion, String accept) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extensionDetailsRequestBuilder(extensionName, extensionVersion, accept);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extensionDetails", localVarResponse);
        }
        return new ApiResponse<Extension>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Extension>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extensionDetailsRequestBuilder(String extensionName, String extensionVersion, String accept) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling extensionDetails");
    }
    // verify the required parameter 'extensionVersion' is set
    if (extensionVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionVersion' when calling extensionDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/{extensionVersion}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{extensionVersion}", ApiClient.urlEncode(extensionVersion.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (accept != null) {
      localVarRequestBuilder.header("Accept", accept.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8, application/octet-stream");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the monitoring configurations of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @param version Filters the resulting set of configurations by extension 2.0 version. (optional)
   * @param active Filters the resulting set of configurations by the active state. (optional)
   * @return ExtensionMonitoringConfigurationsList
   * @throws ApiException if fails to make API call
   */
  public ExtensionMonitoringConfigurationsList extensionMonitoringConfigurations(String extensionName, String nextPageKey, Long pageSize, String version, Boolean active) throws ApiException {
    ApiResponse<ExtensionMonitoringConfigurationsList> localVarResponse = extensionMonitoringConfigurationsWithHttpInfo(extensionName, nextPageKey, pageSize, version, active);
    return localVarResponse.getData();
  }

  /**
   * Lists all the monitoring configurations of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @param version Filters the resulting set of configurations by extension 2.0 version. (optional)
   * @param active Filters the resulting set of configurations by the active state. (optional)
   * @return ApiResponse&lt;ExtensionMonitoringConfigurationsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionMonitoringConfigurationsList> extensionMonitoringConfigurationsWithHttpInfo(String extensionName, String nextPageKey, Long pageSize, String version, Boolean active) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = extensionMonitoringConfigurationsRequestBuilder(extensionName, nextPageKey, pageSize, version, active);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("extensionMonitoringConfigurations", localVarResponse);
        }
        return new ApiResponse<ExtensionMonitoringConfigurationsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionMonitoringConfigurationsList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder extensionMonitoringConfigurationsRequestBuilder(String extensionName, String nextPageKey, Long pageSize, String version, Boolean active) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling extensionMonitoringConfigurations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("version", version));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("active", active));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the active environment configuration version of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @return ExtensionEnvironmentConfigurationVersion
   * @throws ApiException if fails to make API call
   */
  public ExtensionEnvironmentConfigurationVersion getActiveEnvironmentConfiguration(String extensionName) throws ApiException {
    ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = getActiveEnvironmentConfigurationWithHttpInfo(extensionName);
    return localVarResponse.getData();
  }

  /**
   * Gets the active environment configuration version of the specified extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @return ApiResponse&lt;ExtensionEnvironmentConfigurationVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEnvironmentConfigurationVersion> getActiveEnvironmentConfigurationWithHttpInfo(String extensionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getActiveEnvironmentConfigurationRequestBuilder(extensionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getActiveEnvironmentConfiguration", localVarResponse);
        }
        return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEnvironmentConfigurationVersion>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getActiveEnvironmentConfigurationRequestBuilder(String extensionName) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling getActiveEnvironmentConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/environmentConfiguration"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List of the latest extension environment configuration events
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param content Content of the event (optional)
   * @param status Status of the event (optional)
   * @return ExtensionEventsList
   * @throws ApiException if fails to make API call
   */
  public ExtensionEventsList getEnvironmentConfigurationEvents(String extensionName, String from, String to, String content, String status) throws ApiException {
    ApiResponse<ExtensionEventsList> localVarResponse = getEnvironmentConfigurationEventsWithHttpInfo(extensionName, from, to, content, status);
    return localVarResponse.getData();
  }

  /**
   * List of the latest extension environment configuration events
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param content Content of the event (optional)
   * @param status Status of the event (optional)
   * @return ApiResponse&lt;ExtensionEventsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEventsList> getEnvironmentConfigurationEventsWithHttpInfo(String extensionName, String from, String to, String content, String status) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentConfigurationEventsRequestBuilder(extensionName, from, to, content, status);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentConfigurationEvents", localVarResponse);
        }
        return new ApiResponse<ExtensionEventsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEventsList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentConfigurationEventsRequestBuilder(String extensionName, String from, String to, String content, String status) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling getEnvironmentConfigurationEvents");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/environmentConfiguration/events"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the list of the events linked to specific monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param dtEntityHost Host that uses this monitoring configuration.  Example: &#x60;HOST-ABCDEF0123456789&#x60; (optional)
   * @param dtActiveGateId Hexadecimal ID of Active Gate that uses this monitoring configuration.  Example: &#x60;0x1a2b3c4d&#x60; (optional)
   * @param dtExtensionDs Data source that uses this monitoring configuration.  Example: &#x60;snmp&#x60; (optional)
   * @param content Content of the event (optional)
   * @param status Status of the event (optional)
   * @return ExtensionEventsList
   * @throws ApiException if fails to make API call
   */
  public ExtensionEventsList getExtensionMonitoringConfigurationEvents(String extensionName, String configurationId, String from, String to, String dtEntityHost, String dtActiveGateId, String dtExtensionDs, String content, String status) throws ApiException {
    ApiResponse<ExtensionEventsList> localVarResponse = getExtensionMonitoringConfigurationEventsWithHttpInfo(extensionName, configurationId, from, to, dtEntityHost, dtActiveGateId, dtExtensionDs, content, status);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of the events linked to specific monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param dtEntityHost Host that uses this monitoring configuration.  Example: &#x60;HOST-ABCDEF0123456789&#x60; (optional)
   * @param dtActiveGateId Hexadecimal ID of Active Gate that uses this monitoring configuration.  Example: &#x60;0x1a2b3c4d&#x60; (optional)
   * @param dtExtensionDs Data source that uses this monitoring configuration.  Example: &#x60;snmp&#x60; (optional)
   * @param content Content of the event (optional)
   * @param status Status of the event (optional)
   * @return ApiResponse&lt;ExtensionEventsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEventsList> getExtensionMonitoringConfigurationEventsWithHttpInfo(String extensionName, String configurationId, String from, String to, String dtEntityHost, String dtActiveGateId, String dtExtensionDs, String content, String status) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionMonitoringConfigurationEventsRequestBuilder(extensionName, configurationId, from, to, dtEntityHost, dtActiveGateId, dtExtensionDs, content, status);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionMonitoringConfigurationEvents", localVarResponse);
        }
        return new ApiResponse<ExtensionEventsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEventsList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionMonitoringConfigurationEventsRequestBuilder(String extensionName, String configurationId, String from, String to, String dtEntityHost, String dtActiveGateId, String dtExtensionDs, String content, String status) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling getExtensionMonitoringConfigurationEvents");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getExtensionMonitoringConfigurationEvents");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}/events"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dt.entity.host", dtEntityHost));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dt.active_gate.id", dtActiveGateId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dt.extension.ds", dtExtensionDs));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content", content));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the most recent status of the execution of given monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @return ExtensionStatusDto
   * @throws ApiException if fails to make API call
   */
  public ExtensionStatusDto getExtensionMonitoringConfigurationStatus(String extensionName, String configurationId) throws ApiException {
    ApiResponse<ExtensionStatusDto> localVarResponse = getExtensionMonitoringConfigurationStatusWithHttpInfo(extensionName, configurationId);
    return localVarResponse.getData();
  }

  /**
   * Gets the most recent status of the execution of given monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @return ApiResponse&lt;ExtensionStatusDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionStatusDto> getExtensionMonitoringConfigurationStatusWithHttpInfo(String extensionName, String configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getExtensionMonitoringConfigurationStatusRequestBuilder(extensionName, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getExtensionMonitoringConfigurationStatus", localVarResponse);
        }
        return new ApiResponse<ExtensionStatusDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionStatusDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getExtensionMonitoringConfigurationStatusRequestBuilder(String extensionName, String configurationId) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling getExtensionMonitoringConfigurationStatus");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getExtensionMonitoringConfigurationStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}/status"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the extension 2.0 schema file in the specified version
   * 
   * @param schemaVersion The version of the schema. (required)
   * @param fileName The name of the schema file. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getSchemaFile(String schemaVersion, String fileName) throws ApiException {
    ApiResponse<Object> localVarResponse = getSchemaFileWithHttpInfo(schemaVersion, fileName);
    return localVarResponse.getData();
  }

  /**
   * Gets the extension 2.0 schema file in the specified version
   * 
   * @param schemaVersion The version of the schema. (required)
   * @param fileName The name of the schema file. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> getSchemaFileWithHttpInfo(String schemaVersion, String fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSchemaFileRequestBuilder(schemaVersion, fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSchemaFile", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSchemaFileRequestBuilder(String schemaVersion, String fileName) throws ApiException {
    // verify the required parameter 'schemaVersion' is set
    if (schemaVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'schemaVersion' when calling getSchemaFile");
    }
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling getSchemaFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/schemas/{schemaVersion}/{fileName}"
        .replace("{schemaVersion}", ApiClient.urlEncode(schemaVersion.toString()))
        .replace("{fileName}", ApiClient.urlEncode(fileName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all versions of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @return ExtensionList
   * @throws ApiException if fails to make API call
   */
  public ExtensionList listExtensionVersions(String extensionName, String nextPageKey, Long pageSize) throws ApiException {
    ApiResponse<ExtensionList> localVarResponse = listExtensionVersionsWithHttpInfo(extensionName, nextPageKey, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists all versions of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @return ApiResponse&lt;ExtensionList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionList> listExtensionVersionsWithHttpInfo(String extensionName, String nextPageKey, Long pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listExtensionVersionsRequestBuilder(extensionName, nextPageKey, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listExtensionVersions", localVarResponse);
        }
        return new ApiResponse<ExtensionList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listExtensionVersionsRequestBuilder(String extensionName, String nextPageKey, Long pageSize) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling listExtensionVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the extensions 2.0 available in your environment
   * 
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @param name Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)
   * @return ExtensionList
   * @throws ApiException if fails to make API call
   */
  public ExtensionList listExtensions(String nextPageKey, Long pageSize, String name) throws ApiException {
    ApiResponse<ExtensionList> localVarResponse = listExtensionsWithHttpInfo(nextPageKey, pageSize, name);
    return localVarResponse.getData();
  }

  /**
   * Lists all the extensions 2.0 available in your environment
   * 
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of extensions in a single response payload.   The maximal allowed page size is 100.   If not set, 20 is used. (optional)
   * @param name Filters the resulting set of extensions 2.0 by name. You can specify a partial name. In that case, the CONTAINS operator is used. (optional)
   * @return ApiResponse&lt;ExtensionList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionList> listExtensionsWithHttpInfo(String nextPageKey, Long pageSize, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listExtensionsRequestBuilder(nextPageKey, pageSize, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listExtensions", localVarResponse);
        }
        return new ApiResponse<ExtensionList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listExtensionsRequestBuilder(String nextPageKey, Long pageSize, String name) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the files available for the specified extension 2.0 schema version
   * 
   * @param schemaVersion The version of the schema. (required)
   * @param accept Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)
   * @return SchemaFiles
   * @throws ApiException if fails to make API call
   */
  public SchemaFiles listSchemaFiles(String schemaVersion, String accept) throws ApiException {
    ApiResponse<SchemaFiles> localVarResponse = listSchemaFilesWithHttpInfo(schemaVersion, accept);
    return localVarResponse.getData();
  }

  /**
   * Lists all the files available for the specified extension 2.0 schema version
   * 
   * @param schemaVersion The version of the schema. (required)
   * @param accept Accept header. Specifies part of the extension 2.0 that will be returned:  * application/json; charset&#x3D;utf-8 - returns extension 2.0 metadata in JSON  * application/octet-stream - returns extension 2.0 zip package stored on the server. (optional)
   * @return ApiResponse&lt;SchemaFiles&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SchemaFiles> listSchemaFilesWithHttpInfo(String schemaVersion, String accept) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSchemaFilesRequestBuilder(schemaVersion, accept);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSchemaFiles", localVarResponse);
        }
        return new ApiResponse<SchemaFiles>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SchemaFiles>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSchemaFilesRequestBuilder(String schemaVersion, String accept) throws ApiException {
    // verify the required parameter 'schemaVersion' is set
    if (schemaVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'schemaVersion' when calling listSchemaFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/schemas/{schemaVersion}"
        .replace("{schemaVersion}", ApiClient.urlEncode(schemaVersion.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (accept != null) {
      localVarRequestBuilder.header("Accept", accept.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8, application/octet-stream");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all the extension 2.0 schemas versions available in your environment
   * 
   * @return SchemasList
   * @throws ApiException if fails to make API call
   */
  public SchemasList listSchemas() throws ApiException {
    ApiResponse<SchemasList> localVarResponse = listSchemasWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all the extension 2.0 schemas versions available in your environment
   * 
   * @return ApiResponse&lt;SchemasList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SchemasList> listSchemasWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSchemasRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSchemas", localVarResponse);
        }
        return new ApiResponse<SchemasList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SchemasList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSchemasRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/schemas";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the details of the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @return ExtensionMonitoringConfiguration
   * @throws ApiException if fails to make API call
   */
  public ExtensionMonitoringConfiguration monitoringConfigurationDetails(String extensionName, String configurationId) throws ApiException {
    ApiResponse<ExtensionMonitoringConfiguration> localVarResponse = monitoringConfigurationDetailsWithHttpInfo(extensionName, configurationId);
    return localVarResponse.getData();
  }

  /**
   * Gets the details of the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @return ApiResponse&lt;ExtensionMonitoringConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionMonitoringConfiguration> monitoringConfigurationDetailsWithHttpInfo(String extensionName, String configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = monitoringConfigurationDetailsRequestBuilder(extensionName, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("monitoringConfigurationDetails", localVarResponse);
        }
        return new ApiResponse<ExtensionMonitoringConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionMonitoringConfiguration>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder monitoringConfigurationDetailsRequestBuilder(String extensionName, String configurationId) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling monitoringConfigurationDetails");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling monitoringConfigurationDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @return Extension
   * @throws ApiException if fails to make API call
   */
  public Extension removeExtension(String extensionName, String extensionVersion) throws ApiException {
    ApiResponse<Extension> localVarResponse = removeExtensionWithHttpInfo(extensionName, extensionVersion);
    return localVarResponse.getData();
  }

  /**
   * Deletes the specified version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionVersion The version of the requested extension 2.0 (required)
   * @return ApiResponse&lt;Extension&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Extension> removeExtensionWithHttpInfo(String extensionName, String extensionVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeExtensionRequestBuilder(extensionName, extensionVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeExtension", localVarResponse);
        }
        return new ApiResponse<Extension>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Extension>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeExtensionRequestBuilder(String extensionName, String extensionVersion) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling removeExtension");
    }
    // verify the required parameter 'extensionVersion' is set
    if (extensionVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionVersion' when calling removeExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/{extensionVersion}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{extensionVersion}", ApiClient.urlEncode(extensionVersion.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @throws ApiException if fails to make API call
   */
  public void removeMonitoringConfiguration(String extensionName, String configurationId) throws ApiException {
    removeMonitoringConfigurationWithHttpInfo(extensionName, configurationId);
  }

  /**
   * Deletes the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeMonitoringConfigurationWithHttpInfo(String extensionName, String configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeMonitoringConfigurationRequestBuilder(extensionName, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeMonitoringConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeMonitoringConfigurationRequestBuilder(String extensionName, String configurationId) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling removeMonitoringConfiguration");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling removeMonitoringConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the active environment configuration version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionEnvironmentConfigurationVersion The version of the requested environment configuration. (required)
   * @return ExtensionEnvironmentConfigurationVersion
   * @throws ApiException if fails to make API call
   */
  public ExtensionEnvironmentConfigurationVersion updateExtensionEnvironmentConfiguration(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    ApiResponse<ExtensionEnvironmentConfigurationVersion> localVarResponse = updateExtensionEnvironmentConfigurationWithHttpInfo(extensionName, extensionEnvironmentConfigurationVersion);
    return localVarResponse.getData();
  }

  /**
   * Updates the active environment configuration version of the extension 2.0
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param extensionEnvironmentConfigurationVersion The version of the requested environment configuration. (required)
   * @return ApiResponse&lt;ExtensionEnvironmentConfigurationVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionEnvironmentConfigurationVersion> updateExtensionEnvironmentConfigurationWithHttpInfo(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateExtensionEnvironmentConfigurationRequestBuilder(extensionName, extensionEnvironmentConfigurationVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateExtensionEnvironmentConfiguration", localVarResponse);
        }
        return new ApiResponse<ExtensionEnvironmentConfigurationVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionEnvironmentConfigurationVersion>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateExtensionEnvironmentConfigurationRequestBuilder(String extensionName, ExtensionEnvironmentConfigurationVersion extensionEnvironmentConfigurationVersion) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling updateExtensionEnvironmentConfiguration");
    }
    // verify the required parameter 'extensionEnvironmentConfigurationVersion' is set
    if (extensionEnvironmentConfigurationVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionEnvironmentConfigurationVersion' when calling updateExtensionEnvironmentConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/environmentConfiguration"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(extensionEnvironmentConfigurationVersion);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @param monitoringConfigurationUpdateDto JSON body of the request, containing monitoring configuration parameters. (required)
   * @return MonitoringConfigurationResponse
   * @throws ApiException if fails to make API call
   */
  public MonitoringConfigurationResponse updateMonitoringConfiguration(String extensionName, String configurationId, MonitoringConfigurationUpdateDto monitoringConfigurationUpdateDto) throws ApiException {
    ApiResponse<MonitoringConfigurationResponse> localVarResponse = updateMonitoringConfigurationWithHttpInfo(extensionName, configurationId, monitoringConfigurationUpdateDto);
    return localVarResponse.getData();
  }

  /**
   * Updates the specified monitoring configuration
   * 
   * @param extensionName The name of the requested extension 2.0. (required)
   * @param configurationId The ID of the requested monitoring configuration. (required)
   * @param monitoringConfigurationUpdateDto JSON body of the request, containing monitoring configuration parameters. (required)
   * @return ApiResponse&lt;MonitoringConfigurationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MonitoringConfigurationResponse> updateMonitoringConfigurationWithHttpInfo(String extensionName, String configurationId, MonitoringConfigurationUpdateDto monitoringConfigurationUpdateDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateMonitoringConfigurationRequestBuilder(extensionName, configurationId, monitoringConfigurationUpdateDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateMonitoringConfiguration", localVarResponse);
        }
        return new ApiResponse<MonitoringConfigurationResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MonitoringConfigurationResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateMonitoringConfigurationRequestBuilder(String extensionName, String configurationId, MonitoringConfigurationUpdateDto monitoringConfigurationUpdateDto) throws ApiException {
    // verify the required parameter 'extensionName' is set
    if (extensionName == null) {
      throw new ApiException(400, "Missing the required parameter 'extensionName' when calling updateMonitoringConfiguration");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateMonitoringConfiguration");
    }
    // verify the required parameter 'monitoringConfigurationUpdateDto' is set
    if (monitoringConfigurationUpdateDto == null) {
      throw new ApiException(400, "Missing the required parameter 'monitoringConfigurationUpdateDto' when calling updateMonitoringConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions/{extensionName}/monitoringConfigurations/{configurationId}"
        .replace("{extensionName}", ApiClient.urlEncode(extensionName.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(monitoringConfigurationUpdateDto);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Uploads or verifies a new extension 2.0
   * 
   * @param _file Extension 2.0 zip file to upload. (required)
   * @param validateOnly Only run validation but do not persist the extension even if validation was successful. (optional, default to false)
   * @return ExtensionUploadResponseDto
   * @throws ApiException if fails to make API call
   */
  public ExtensionUploadResponseDto uploadExtension(File _file, Boolean validateOnly) throws ApiException {
    ApiResponse<ExtensionUploadResponseDto> localVarResponse = uploadExtensionWithHttpInfo(_file, validateOnly);
    return localVarResponse.getData();
  }

  /**
   * Uploads or verifies a new extension 2.0
   * 
   * @param _file Extension 2.0 zip file to upload. (required)
   * @param validateOnly Only run validation but do not persist the extension even if validation was successful. (optional, default to false)
   * @return ApiResponse&lt;ExtensionUploadResponseDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExtensionUploadResponseDto> uploadExtensionWithHttpInfo(File _file, Boolean validateOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadExtensionRequestBuilder(_file, validateOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("uploadExtension", localVarResponse);
        }
        return new ApiResponse<ExtensionUploadResponseDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExtensionUploadResponseDto>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadExtensionRequestBuilder(File _file, Boolean validateOnly) throws ApiException {
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling uploadExtension");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/extensions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("validateOnly", validateOnly));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
