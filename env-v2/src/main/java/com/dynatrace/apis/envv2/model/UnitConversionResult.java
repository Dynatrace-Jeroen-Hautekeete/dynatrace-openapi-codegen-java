/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The result of a unit conversion.
 */
@ApiModel(description = "The result of a unit conversion.")
@JsonPropertyOrder({
  UnitConversionResult.JSON_PROPERTY_UNIT_ID,
  UnitConversionResult.JSON_PROPERTY_RESULT_VALUE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class UnitConversionResult {
  public static final String JSON_PROPERTY_UNIT_ID = "unitId";
  private String unitId;

  public static final String JSON_PROPERTY_RESULT_VALUE = "resultValue";
  private Double resultValue;

  public UnitConversionResult() { 
  }

  public UnitConversionResult unitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

   /**
   * The ID of the unit of this conversion result.
   * @return unitId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the unit of this conversion result.")
  @JsonProperty(JSON_PROPERTY_UNIT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUnitId() {
    return unitId;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public UnitConversionResult resultValue(Double resultValue) {
    this.resultValue = resultValue;
    return this;
  }

   /**
   * The result of the unit conversion.
   * @return resultValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The result of the unit conversion.")
  @JsonProperty(JSON_PROPERTY_RESULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getResultValue() {
    return resultValue;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultValue(Double resultValue) {
    this.resultValue = resultValue;
  }


  /**
   * Return true if this UnitConversionResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitConversionResult unitConversionResult = (UnitConversionResult) o;
    return Objects.equals(this.unitId, unitConversionResult.unitId) &&
        Objects.equals(this.resultValue, unitConversionResult.resultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitId, resultValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitConversionResult {\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    resultValue: ").append(toIndentedString(resultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

