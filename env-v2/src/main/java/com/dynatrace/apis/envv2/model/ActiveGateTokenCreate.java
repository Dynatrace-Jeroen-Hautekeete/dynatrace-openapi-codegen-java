/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameters of a new ActiveGate token.
 */
@ApiModel(description = "Parameters of a new ActiveGate token.")
@JsonPropertyOrder({
  ActiveGateTokenCreate.JSON_PROPERTY_NAME,
  ActiveGateTokenCreate.JSON_PROPERTY_EXPIRATION_DATE,
  ActiveGateTokenCreate.JSON_PROPERTY_SEED_TOKEN,
  ActiveGateTokenCreate.JSON_PROPERTY_ACTIVE_GATE_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class ActiveGateTokenCreate {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  private String expirationDate;

  public static final String JSON_PROPERTY_SEED_TOKEN = "seedToken";
  private Boolean seedToken;

  /**
   * The type of the ActiveGate for which the token is valid.
   */
  public enum ActiveGateTypeEnum {
    ENVIRONMENT("ENVIRONMENT"),
    
    CLUSTER("CLUSTER");

    private String value;

    ActiveGateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActiveGateTypeEnum fromValue(String value) {
      for (ActiveGateTypeEnum b : ActiveGateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTIVE_GATE_TYPE = "activeGateType";
  private ActiveGateTypeEnum activeGateType;

  public ActiveGateTokenCreate() { 
  }

  public ActiveGateTokenCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the token.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "myToken", required = true, value = "The name of the token.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ActiveGateTokenCreate expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * The expiration date of the token.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the token never expires.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "now+14d", value = "The expiration date of the token.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of `2021-01-25T05:57:01.123+01:00`. If no time zone is specified, UTC is used. You can use a space character instead of the `T`. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is `now-NU/A`, where `N` is the amount of time, `U` is the unit of time, and `A` is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, `now-1y/w` is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: `now-NU`.  Supported time units for the relative timeframe are:     * `m`: minutes     * `h`: hours     * `d`: days     * `w`: weeks     * `M`: months     * `y`: years   If not set, the token never expires.")
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ActiveGateTokenCreate seedToken(Boolean seedToken) {
    this.seedToken = seedToken;
    return this;
  }

   /**
   * The token is a seed token (&#x60;true&#x60;) or an individual token (&#x60;false&#x60;).    We recommend the individual token option (false).
   * @return seedToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "The token is a seed token (`true`) or an individual token (`false`).    We recommend the individual token option (false).")
  @JsonProperty(JSON_PROPERTY_SEED_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSeedToken() {
    return seedToken;
  }


  @JsonProperty(JSON_PROPERTY_SEED_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeedToken(Boolean seedToken) {
    this.seedToken = seedToken;
  }


  public ActiveGateTokenCreate activeGateType(ActiveGateTypeEnum activeGateType) {
    this.activeGateType = activeGateType;
    return this;
  }

   /**
   * The type of the ActiveGate for which the token is valid.
   * @return activeGateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the ActiveGate for which the token is valid.")
  @JsonProperty(JSON_PROPERTY_ACTIVE_GATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActiveGateTypeEnum getActiveGateType() {
    return activeGateType;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_GATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActiveGateType(ActiveGateTypeEnum activeGateType) {
    this.activeGateType = activeGateType;
  }


  /**
   * Return true if this ActiveGateTokenCreate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveGateTokenCreate activeGateTokenCreate = (ActiveGateTokenCreate) o;
    return Objects.equals(this.name, activeGateTokenCreate.name) &&
        Objects.equals(this.expirationDate, activeGateTokenCreate.expirationDate) &&
        Objects.equals(this.seedToken, activeGateTokenCreate.seedToken) &&
        Objects.equals(this.activeGateType, activeGateTokenCreate.activeGateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, expirationDate, seedToken, activeGateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveGateTokenCreate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    seedToken: ").append(toIndentedString(seedToken)).append("\n");
    sb.append("    activeGateType: ").append(toIndentedString(activeGateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

