/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Error budget burn rate configuration of a service-level objective (SLO).
 */
@ApiModel(description = "Error budget burn rate configuration of a service-level objective (SLO).")
@JsonPropertyOrder({
  SloBurnRateConfig.JSON_PROPERTY_BURN_RATE_VISUALIZATION_ENABLED,
  SloBurnRateConfig.JSON_PROPERTY_FAST_BURN_THRESHOLD
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SloBurnRateConfig {
  public static final String JSON_PROPERTY_BURN_RATE_VISUALIZATION_ENABLED = "burnRateVisualizationEnabled";
  private Boolean burnRateVisualizationEnabled;

  public static final String JSON_PROPERTY_FAST_BURN_THRESHOLD = "fastBurnThreshold";
  private Double fastBurnThreshold;

  public SloBurnRateConfig() { 
  }

  public SloBurnRateConfig burnRateVisualizationEnabled(Boolean burnRateVisualizationEnabled) {
    this.burnRateVisualizationEnabled = burnRateVisualizationEnabled;
    return this;
  }

   /**
   * The error budget burn rate visualization is enabled (&#x60;true&#x60;) or disabled (&#x60;false&#x60;).   In case of &#x60;false&#x60;, no calculated values will be present here.
   * @return burnRateVisualizationEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "The error budget burn rate visualization is enabled (`true`) or disabled (`false`).   In case of `false`, no calculated values will be present here.")
  @JsonProperty(JSON_PROPERTY_BURN_RATE_VISUALIZATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBurnRateVisualizationEnabled() {
    return burnRateVisualizationEnabled;
  }


  @JsonProperty(JSON_PROPERTY_BURN_RATE_VISUALIZATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBurnRateVisualizationEnabled(Boolean burnRateVisualizationEnabled) {
    this.burnRateVisualizationEnabled = burnRateVisualizationEnabled;
  }


  public SloBurnRateConfig fastBurnThreshold(Double fastBurnThreshold) {
    this.fastBurnThreshold = fastBurnThreshold;
    return this;
  }

   /**
   * The threshold between a slow and a fast burn rate.
   * @return fastBurnThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.5", value = "The threshold between a slow and a fast burn rate.")
  @JsonProperty(JSON_PROPERTY_FAST_BURN_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFastBurnThreshold() {
    return fastBurnThreshold;
  }


  @JsonProperty(JSON_PROPERTY_FAST_BURN_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFastBurnThreshold(Double fastBurnThreshold) {
    this.fastBurnThreshold = fastBurnThreshold;
  }


  /**
   * Return true if this SloBurnRateConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SloBurnRateConfig sloBurnRateConfig = (SloBurnRateConfig) o;
    return Objects.equals(this.burnRateVisualizationEnabled, sloBurnRateConfig.burnRateVisualizationEnabled) &&
        Objects.equals(this.fastBurnThreshold, sloBurnRateConfig.fastBurnThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(burnRateVisualizationEnabled, fastBurnThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SloBurnRateConfig {\n");
    sb.append("    burnRateVisualizationEnabled: ").append(toIndentedString(burnRateVisualizationEnabled)).append("\n");
    sb.append("    fastBurnThreshold: ").append(toIndentedString(fastBurnThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

