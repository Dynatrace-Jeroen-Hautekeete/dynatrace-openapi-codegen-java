/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.EntityTypePropertyDto;
import com.dynatrace.apis.envv2.model.FromPosition;
import com.dynatrace.apis.envv2.model.ToPosition;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A list of properties of the monitored entity type.
 */
@ApiModel(description = "A list of properties of the monitored entity type.")
@JsonPropertyOrder({
  EntityType.JSON_PROPERTY_ENTITY_LIMIT_EXCEEDED,
  EntityType.JSON_PROPERTY_TAGS,
  EntityType.JSON_PROPERTY_MANAGEMENT_ZONES,
  EntityType.JSON_PROPERTY_FROM_RELATIONSHIPS,
  EntityType.JSON_PROPERTY_TO_RELATIONSHIPS,
  EntityType.JSON_PROPERTY_DIMENSION_KEY,
  EntityType.JSON_PROPERTY_DISPLAY_NAME,
  EntityType.JSON_PROPERTY_PROPERTIES,
  EntityType.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class EntityType {
  public static final String JSON_PROPERTY_ENTITY_LIMIT_EXCEEDED = "entityLimitExceeded";
  private Boolean entityLimitExceeded;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private String tags;

  public static final String JSON_PROPERTY_MANAGEMENT_ZONES = "managementZones";
  private String managementZones;

  public static final String JSON_PROPERTY_FROM_RELATIONSHIPS = "fromRelationships";
  private List<ToPosition> fromRelationships = null;

  public static final String JSON_PROPERTY_TO_RELATIONSHIPS = "toRelationships";
  private List<FromPosition> toRelationships = null;

  public static final String JSON_PROPERTY_DIMENSION_KEY = "dimensionKey";
  private String dimensionKey;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private List<EntityTypePropertyDto> properties = null;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public EntityType() { 
  }

  public EntityType entityLimitExceeded(Boolean entityLimitExceeded) {
    this.entityLimitExceeded = entityLimitExceeded;
    return this;
  }

   /**
   * Whether the entity creation limit for the given type has been exceeded
   * @return entityLimitExceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the entity creation limit for the given type has been exceeded")
  @JsonProperty(JSON_PROPERTY_ENTITY_LIMIT_EXCEEDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEntityLimitExceeded() {
    return entityLimitExceeded;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_LIMIT_EXCEEDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityLimitExceeded(Boolean entityLimitExceeded) {
    this.entityLimitExceeded = entityLimitExceeded;
  }


  public EntityType tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * The placeholder for the list of tags of an actual entity.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The placeholder for the list of tags of an actual entity.")
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(String tags) {
    this.tags = tags;
  }


  public EntityType managementZones(String managementZones) {
    this.managementZones = managementZones;
    return this;
  }

   /**
   * The placeholder for the list of management zones of an actual entity.
   * @return managementZones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The placeholder for the list of management zones of an actual entity.")
  @JsonProperty(JSON_PROPERTY_MANAGEMENT_ZONES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getManagementZones() {
    return managementZones;
  }


  @JsonProperty(JSON_PROPERTY_MANAGEMENT_ZONES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManagementZones(String managementZones) {
    this.managementZones = managementZones;
  }


  public EntityType fromRelationships(List<ToPosition> fromRelationships) {
    this.fromRelationships = fromRelationships;
    return this;
  }

  public EntityType addFromRelationshipsItem(ToPosition fromRelationshipsItem) {
    if (this.fromRelationships == null) {
      this.fromRelationships = new ArrayList<>();
    }
    this.fromRelationships.add(fromRelationshipsItem);
    return this;
  }

   /**
   * A list of possible relationships where the monitored entity type occupies the FROM position
   * @return fromRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible relationships where the monitored entity type occupies the FROM position")
  @JsonProperty(JSON_PROPERTY_FROM_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ToPosition> getFromRelationships() {
    return fromRelationships;
  }


  @JsonProperty(JSON_PROPERTY_FROM_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromRelationships(List<ToPosition> fromRelationships) {
    this.fromRelationships = fromRelationships;
  }


  public EntityType toRelationships(List<FromPosition> toRelationships) {
    this.toRelationships = toRelationships;
    return this;
  }

  public EntityType addToRelationshipsItem(FromPosition toRelationshipsItem) {
    if (this.toRelationships == null) {
      this.toRelationships = new ArrayList<>();
    }
    this.toRelationships.add(toRelationshipsItem);
    return this;
  }

   /**
   * A list of possible relationships where the monitored entity type occupies the TO position.
   * @return toRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible relationships where the monitored entity type occupies the TO position.")
  @JsonProperty(JSON_PROPERTY_TO_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FromPosition> getToRelationships() {
    return toRelationships;
  }


  @JsonProperty(JSON_PROPERTY_TO_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToRelationships(List<FromPosition> toRelationships) {
    this.toRelationships = toRelationships;
  }


  public EntityType dimensionKey(String dimensionKey) {
    this.dimensionKey = dimensionKey;
    return this;
  }

   /**
   * The dimension key used within metrics for this monitored entity.
   * @return dimensionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dimension key used within metrics for this monitored entity.")
  @JsonProperty(JSON_PROPERTY_DIMENSION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDimensionKey() {
    return dimensionKey;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDimensionKey(String dimensionKey) {
    this.dimensionKey = dimensionKey;
  }


  public EntityType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the monitored entity.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name of the monitored entity.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EntityType properties(List<EntityTypePropertyDto> properties) {
    this.properties = properties;
    return this;
  }

  public EntityType addPropertiesItem(EntityTypePropertyDto propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * A list of additional properties of the monitored entity type.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of additional properties of the monitored entity type.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntityTypePropertyDto> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(List<EntityTypePropertyDto> properties) {
    this.properties = properties;
  }


  public EntityType type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the monitored entity.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the monitored entity.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this EntityType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityType entityType = (EntityType) o;
    return Objects.equals(this.entityLimitExceeded, entityType.entityLimitExceeded) &&
        Objects.equals(this.tags, entityType.tags) &&
        Objects.equals(this.managementZones, entityType.managementZones) &&
        Objects.equals(this.fromRelationships, entityType.fromRelationships) &&
        Objects.equals(this.toRelationships, entityType.toRelationships) &&
        Objects.equals(this.dimensionKey, entityType.dimensionKey) &&
        Objects.equals(this.displayName, entityType.displayName) &&
        Objects.equals(this.properties, entityType.properties) &&
        Objects.equals(this.type, entityType.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityLimitExceeded, tags, managementZones, fromRelationships, toRelationships, dimensionKey, displayName, properties, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityType {\n");
    sb.append("    entityLimitExceeded: ").append(toIndentedString(entityLimitExceeded)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    managementZones: ").append(toIndentedString(managementZones)).append("\n");
    sb.append("    fromRelationships: ").append(toIndentedString(fromRelationships)).append("\n");
    sb.append("    toRelationships: ").append(toIndentedString(toRelationships)).append("\n");
    sb.append("    dimensionKey: ").append(toIndentedString(dimensionKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

