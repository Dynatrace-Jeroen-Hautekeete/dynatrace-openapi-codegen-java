/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.ApplicationImpact;
import com.dynatrace.apis.envv2.model.CustomApplicationImpact;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.Impact;
import com.dynatrace.apis.envv2.model.MobileImpact;
import com.dynatrace.apis.envv2.model.ServiceImpact;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * Analysis of problem impact to a mobile application.
 */
@ApiModel(description = "Analysis of problem impact to a mobile application.")
@JsonPropertyOrder({
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "impactType", // ignore manually set impactType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the impactType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "impactType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ApplicationImpact.class, name = "APPLICATION"),
  @JsonSubTypes.Type(value = CustomApplicationImpact.class, name = "CUSTOM_APPLICATION"),
  @JsonSubTypes.Type(value = MobileImpact.class, name = "MOBILE"),
  @JsonSubTypes.Type(value = ServiceImpact.class, name = "SERVICE"),
})

public class MobileImpact extends Impact {
  public MobileImpact() { 
  }

  /**
   * Return true if this MobileImpact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileImpact {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("APPLICATION", ApplicationImpact.class);
  mappings.put("CUSTOM_APPLICATION", CustomApplicationImpact.class);
  mappings.put("MOBILE", MobileImpact.class);
  mappings.put("SERVICE", ServiceImpact.class);
  mappings.put("MobileImpact", MobileImpact.class);
  JSON.registerDiscriminator(MobileImpact.class, "impactType", mappings);
}
}

