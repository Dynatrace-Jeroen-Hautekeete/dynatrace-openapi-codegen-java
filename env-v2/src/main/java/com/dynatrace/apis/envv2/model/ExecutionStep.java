/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.BMAction;
import com.dynatrace.apis.envv2.model.MonitorRequestExecutionResult;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * Contains detailed information about the monitor&#39;s step execution.
 */
@ApiModel(description = "Contains detailed information about the monitor's step execution.")
@JsonPropertyOrder({
  ExecutionStep.JSON_PROPERTY_MONITOR_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "monitorType", // ignore manually set monitorType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the monitorType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "monitorType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BMAction.class, name = "BMAction"),
  @JsonSubTypes.Type(value = BMAction.class, name = "BROWSER"),
  @JsonSubTypes.Type(value = MonitorRequestExecutionResult.class, name = "HTTP"),
  @JsonSubTypes.Type(value = MonitorRequestExecutionResult.class, name = "MonitorRequestExecutionResult"),
})

public class ExecutionStep {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;BROWSER&#x60; -&gt; BMAction  * &#x60;HTTP&#x60; -&gt; MonitorRequestExecutionResult  
   */
  public enum MonitorTypeEnum {
    BROWSER("BROWSER"),
    
    HTTP("HTTP");

    private String value;

    MonitorTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MonitorTypeEnum fromValue(String value) {
      for (MonitorTypeEnum b : MonitorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MONITOR_TYPE = "monitorType";
  private MonitorTypeEnum monitorType;

  public ExecutionStep() { 
  }

  public ExecutionStep monitorType(MonitorTypeEnum monitorType) {
    this.monitorType = monitorType;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;BROWSER&#x60; -&gt; BMAction  * &#x60;HTTP&#x60; -&gt; MonitorRequestExecutionResult  
   * @return monitorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `BROWSER` -> BMAction  * `HTTP` -> MonitorRequestExecutionResult  ")
  @JsonProperty(JSON_PROPERTY_MONITOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MonitorTypeEnum getMonitorType() {
    return monitorType;
  }


  @JsonProperty(JSON_PROPERTY_MONITOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonitorType(MonitorTypeEnum monitorType) {
    this.monitorType = monitorType;
  }


  /**
   * Return true if this ExecutionStep object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionStep executionStep = (ExecutionStep) o;
    return Objects.equals(this.monitorType, executionStep.monitorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionStep {\n");
    sb.append("    monitorType: ").append(toIndentedString(monitorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("BMAction", BMAction.class);
  mappings.put("BROWSER", BMAction.class);
  mappings.put("HTTP", MonitorRequestExecutionResult.class);
  mappings.put("MonitorRequestExecutionResult", MonitorRequestExecutionResult.class);
  mappings.put("ExecutionStep", ExecutionStep.class);
  JSON.registerDiscriminator(ExecutionStep.class, "monitorType", mappings);
}
}

