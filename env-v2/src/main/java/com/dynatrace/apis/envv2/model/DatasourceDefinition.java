/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Configuration of a datasource for a property.
 */
@ApiModel(description = "Configuration of a datasource for a property.")
@JsonPropertyOrder({
  DatasourceDefinition.JSON_PROPERTY_FULL_CONTEXT,
  DatasourceDefinition.JSON_PROPERTY_USE_API_SEARCH,
  DatasourceDefinition.JSON_PROPERTY_RESET_VALUE,
  DatasourceDefinition.JSON_PROPERTY_VALIDATE,
  DatasourceDefinition.JSON_PROPERTY_FILTER_PROPERTIES,
  DatasourceDefinition.JSON_PROPERTY_IDENTIFIER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class DatasourceDefinition {
  public static final String JSON_PROPERTY_FULL_CONTEXT = "fullContext";
  private Boolean fullContext;

  public static final String JSON_PROPERTY_USE_API_SEARCH = "useApiSearch";
  private Boolean useApiSearch;

  /**
   * When to reset datasource value in the UI on filter change.
   */
  public enum ResetValueEnum {
    ALWAYS("ALWAYS"),
    
    INVALID_ONLY("INVALID_ONLY"),
    
    NEVER("NEVER");

    private String value;

    ResetValueEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResetValueEnum fromValue(String value) {
      for (ResetValueEnum b : ResetValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESET_VALUE = "resetValue";
  private ResetValueEnum resetValue;

  public static final String JSON_PROPERTY_VALIDATE = "validate";
  private Boolean validate;

  public static final String JSON_PROPERTY_FILTER_PROPERTIES = "filterProperties";
  private Set<String> filterProperties = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_IDENTIFIER = "identifier";
  private String identifier;

  public DatasourceDefinition() { 
  }

  public DatasourceDefinition fullContext(Boolean fullContext) {
    this.fullContext = fullContext;
    return this;
  }

   /**
   * Whether this datasource expects full setting payload as the context.
   * @return fullContext
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether this datasource expects full setting payload as the context.")
  @JsonProperty(JSON_PROPERTY_FULL_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getFullContext() {
    return fullContext;
  }


  @JsonProperty(JSON_PROPERTY_FULL_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFullContext(Boolean fullContext) {
    this.fullContext = fullContext;
  }


  public DatasourceDefinition useApiSearch(Boolean useApiSearch) {
    this.useApiSearch = useApiSearch;
    return this;
  }

   /**
   * If true, the datasource should use the api to filter the results instead of client-side filtering.
   * @return useApiSearch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, the datasource should use the api to filter the results instead of client-side filtering.")
  @JsonProperty(JSON_PROPERTY_USE_API_SEARCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUseApiSearch() {
    return useApiSearch;
  }


  @JsonProperty(JSON_PROPERTY_USE_API_SEARCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseApiSearch(Boolean useApiSearch) {
    this.useApiSearch = useApiSearch;
  }


  public DatasourceDefinition resetValue(ResetValueEnum resetValue) {
    this.resetValue = resetValue;
    return this;
  }

   /**
   * When to reset datasource value in the UI on filter change.
   * @return resetValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When to reset datasource value in the UI on filter change.")
  @JsonProperty(JSON_PROPERTY_RESET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResetValueEnum getResetValue() {
    return resetValue;
  }


  @JsonProperty(JSON_PROPERTY_RESET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResetValue(ResetValueEnum resetValue) {
    this.resetValue = resetValue;
  }


  public DatasourceDefinition validate(Boolean validate) {
    this.validate = validate;
    return this;
  }

   /**
   * Whether to validate input to only allow values returned by the datasource.
   * @return validate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether to validate input to only allow values returned by the datasource.")
  @JsonProperty(JSON_PROPERTY_VALIDATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getValidate() {
    return validate;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValidate(Boolean validate) {
    this.validate = validate;
  }


  public DatasourceDefinition filterProperties(Set<String> filterProperties) {
    this.filterProperties = filterProperties;
    return this;
  }

  public DatasourceDefinition addFilterPropertiesItem(String filterPropertiesItem) {
    this.filterProperties.add(filterPropertiesItem);
    return this;
  }

   /**
   * The properties to filter the datasource options on.
   * @return filterProperties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The properties to filter the datasource options on.")
  @JsonProperty(JSON_PROPERTY_FILTER_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getFilterProperties() {
    return filterProperties;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_FILTER_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilterProperties(Set<String> filterProperties) {
    this.filterProperties = filterProperties;
  }


  public DatasourceDefinition identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The identifier of a custom data source of the property&#39;s value.
   * @return identifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The identifier of a custom data source of the property's value.")
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentifier() {
    return identifier;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  /**
   * Return true if this DatasourceDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasourceDefinition datasourceDefinition = (DatasourceDefinition) o;
    return Objects.equals(this.fullContext, datasourceDefinition.fullContext) &&
        Objects.equals(this.useApiSearch, datasourceDefinition.useApiSearch) &&
        Objects.equals(this.resetValue, datasourceDefinition.resetValue) &&
        Objects.equals(this.validate, datasourceDefinition.validate) &&
        Objects.equals(this.filterProperties, datasourceDefinition.filterProperties) &&
        Objects.equals(this.identifier, datasourceDefinition.identifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullContext, useApiSearch, resetValue, validate, filterProperties, identifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasourceDefinition {\n");
    sb.append("    fullContext: ").append(toIndentedString(fullContext)).append("\n");
    sb.append("    useApiSearch: ").append(toIndentedString(useApiSearch)).append("\n");
    sb.append("    resetValue: ").append(toIndentedString(resetValue)).append("\n");
    sb.append("    validate: ").append(toIndentedString(validate)).append("\n");
    sb.append("    filterProperties: ").append(toIndentedString(filterProperties)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

