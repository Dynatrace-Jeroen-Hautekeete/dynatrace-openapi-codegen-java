/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.ActiveGateAutoUpdateConfig;
import com.dynatrace.apis.envv2.model.ActiveGateGlobalAutoUpdateConfig;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class ActiveGatesAutoUpdateConfigurationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ActiveGatesAutoUpdateConfigurationApi() {
    this(new ApiClient());
  }

  public ActiveGatesAutoUpdateConfigurationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets the configuration of auto-update for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @return ActiveGateAutoUpdateConfig
   * @throws ApiException if fails to make API call
   */
  public ActiveGateAutoUpdateConfig getAutoUpdateConfigById(String agId) throws ApiException {
    ApiResponse<ActiveGateAutoUpdateConfig> localVarResponse = getAutoUpdateConfigByIdWithHttpInfo(agId);
    return localVarResponse.getData();
  }

  /**
   * Gets the configuration of auto-update for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @return ApiResponse&lt;ActiveGateAutoUpdateConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateAutoUpdateConfig> getAutoUpdateConfigByIdWithHttpInfo(String agId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAutoUpdateConfigByIdRequestBuilder(agId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAutoUpdateConfigById", localVarResponse);
        }
        return new ApiResponse<ActiveGateAutoUpdateConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateAutoUpdateConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAutoUpdateConfigByIdRequestBuilder(String agId) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling getAutoUpdateConfigById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/autoUpdate"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the global auto-update configuration of environment ActiveGates.
   * 
   * @return ActiveGateGlobalAutoUpdateConfig
   * @throws ApiException if fails to make API call
   */
  public ActiveGateGlobalAutoUpdateConfig getGlobalAutoUpdateConfigForTenant() throws ApiException {
    ApiResponse<ActiveGateGlobalAutoUpdateConfig> localVarResponse = getGlobalAutoUpdateConfigForTenantWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the global auto-update configuration of environment ActiveGates.
   * 
   * @return ApiResponse&lt;ActiveGateGlobalAutoUpdateConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateGlobalAutoUpdateConfig> getGlobalAutoUpdateConfigForTenantWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalAutoUpdateConfigForTenantRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGlobalAutoUpdateConfigForTenant", localVarResponse);
        }
        return new ApiResponse<ActiveGateGlobalAutoUpdateConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateGlobalAutoUpdateConfig>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalAutoUpdateConfigForTenantRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/autoUpdate";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the configuration of auto-update for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param activeGateAutoUpdateConfig JSON body of the request, containing auto update parameters. (required)
   * @throws ApiException if fails to make API call
   */
  public void putAutoUpdateConfigById(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    putAutoUpdateConfigByIdWithHttpInfo(agId, activeGateAutoUpdateConfig);
  }

  /**
   * Updates the configuration of auto-update for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param activeGateAutoUpdateConfig JSON body of the request, containing auto update parameters. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> putAutoUpdateConfigByIdWithHttpInfo(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putAutoUpdateConfigByIdRequestBuilder(agId, activeGateAutoUpdateConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("putAutoUpdateConfigById", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putAutoUpdateConfigByIdRequestBuilder(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling putAutoUpdateConfigById");
    }
    // verify the required parameter 'activeGateAutoUpdateConfig' is set
    if (activeGateAutoUpdateConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateAutoUpdateConfig' when calling putAutoUpdateConfigById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/autoUpdate"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(activeGateAutoUpdateConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Puts the global auto-update configuration of environment ActiveGates.
   * 
   * @param activeGateGlobalAutoUpdateConfig JSON body of the request, containing global auto update parameters. (required)
   * @throws ApiException if fails to make API call
   */
  public void putGlobalAutoUpdateConfigForTenant(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    putGlobalAutoUpdateConfigForTenantWithHttpInfo(activeGateGlobalAutoUpdateConfig);
  }

  /**
   * Puts the global auto-update configuration of environment ActiveGates.
   * 
   * @param activeGateGlobalAutoUpdateConfig JSON body of the request, containing global auto update parameters. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> putGlobalAutoUpdateConfigForTenantWithHttpInfo(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putGlobalAutoUpdateConfigForTenantRequestBuilder(activeGateGlobalAutoUpdateConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("putGlobalAutoUpdateConfigForTenant", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putGlobalAutoUpdateConfigForTenantRequestBuilder(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    // verify the required parameter 'activeGateGlobalAutoUpdateConfig' is set
    if (activeGateGlobalAutoUpdateConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateGlobalAutoUpdateConfig' when calling putGlobalAutoUpdateConfigForTenant");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/autoUpdate";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(activeGateGlobalAutoUpdateConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param activeGateAutoUpdateConfig JSON body of the request, containing auto update parameters. (required)
   * @throws ApiException if fails to make API call
   */
  public void validateAutoUpdateConfigById(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    validateAutoUpdateConfigByIdWithHttpInfo(agId, activeGateAutoUpdateConfig);
  }

  /**
   * Validates the payload for the &#x60;POST /activeGates/{agId}/autoUpdate&#x60; request.
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param activeGateAutoUpdateConfig JSON body of the request, containing auto update parameters. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateAutoUpdateConfigByIdWithHttpInfo(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateAutoUpdateConfigByIdRequestBuilder(agId, activeGateAutoUpdateConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateAutoUpdateConfigById", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateAutoUpdateConfigByIdRequestBuilder(String agId, ActiveGateAutoUpdateConfig activeGateAutoUpdateConfig) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling validateAutoUpdateConfigById");
    }
    // verify the required parameter 'activeGateAutoUpdateConfig' is set
    if (activeGateAutoUpdateConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateAutoUpdateConfig' when calling validateAutoUpdateConfigById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/autoUpdate/validator"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(activeGateAutoUpdateConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
   * 
   * @param activeGateGlobalAutoUpdateConfig JSON body of the request, containing global auto update parameters. (required)
   * @throws ApiException if fails to make API call
   */
  public void validateGlobalAutoUpdateConfigForTenant(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    validateGlobalAutoUpdateConfigForTenantWithHttpInfo(activeGateGlobalAutoUpdateConfig);
  }

  /**
   * Validates the payload for the &#x60;POST /activeGates/autoUpdate&#x60; request.
   * 
   * @param activeGateGlobalAutoUpdateConfig JSON body of the request, containing global auto update parameters. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateGlobalAutoUpdateConfigForTenantWithHttpInfo(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateGlobalAutoUpdateConfigForTenantRequestBuilder(activeGateGlobalAutoUpdateConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateGlobalAutoUpdateConfigForTenant", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateGlobalAutoUpdateConfigForTenantRequestBuilder(ActiveGateGlobalAutoUpdateConfig activeGateGlobalAutoUpdateConfig) throws ApiException {
    // verify the required parameter 'activeGateGlobalAutoUpdateConfig' is set
    if (activeGateGlobalAutoUpdateConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateGlobalAutoUpdateConfig' when calling validateGlobalAutoUpdateConfigForTenant");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/autoUpdate/validator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(activeGateGlobalAutoUpdateConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
