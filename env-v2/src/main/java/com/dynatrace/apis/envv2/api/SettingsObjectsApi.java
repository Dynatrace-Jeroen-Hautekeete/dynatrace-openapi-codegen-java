/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.EffectiveSettingsValuesList;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.ObjectsList;
import com.dynatrace.apis.envv2.model.SettingsObject;
import com.dynatrace.apis.envv2.model.SettingsObjectCreate;
import com.dynatrace.apis.envv2.model.SettingsObjectResponse;
import com.dynatrace.apis.envv2.model.SettingsObjectUpdate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SettingsObjectsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SettingsObjectsApi() {
    this(new ApiClient());
  }

  public SettingsObjectsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Deletes the specified settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @param updateToken The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#39;t any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)
   * @throws ApiException if fails to make API call
   */
  public void deleteSettingsObjectByObjectId(String objectId, String updateToken) throws ApiException {
    deleteSettingsObjectByObjectIdWithHttpInfo(objectId, updateToken);
  }

  /**
   * Deletes the specified settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @param updateToken The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#39;t any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSettingsObjectByObjectIdWithHttpInfo(String objectId, String updateToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSettingsObjectByObjectIdRequestBuilder(objectId, updateToken);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSettingsObjectByObjectId", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSettingsObjectByObjectIdRequestBuilder(String objectId, String updateToken) throws ApiException {
    // verify the required parameter 'objectId' is set
    if (objectId == null) {
      throw new ApiException(400, "Missing the required parameter 'objectId' when calling deleteSettingsObjectByObjectId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/objects/{objectId}"
        .replace("{objectId}", ApiClient.urlEncode(objectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateToken", updateToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists effective settings values
   * Lists effective settings values for selected schemas at a selected scope (or entity). This operation evaluates the hierarchy of persisted objects (see [/settings/objects](#/Settings%20-%20Objects/getSettingsObjects))  It will always return a result for a schema/scope combination, even if the schema would not be relevant to the given scope/entity.  If no object along the hierarchy is persisted, the default value as defined in the schema will be returned.
   * @param schemaIds A list of comma-separated schema IDs to which the requested objects belong.   Only considered on load of the first page, when the **nextPageKey** is not set. (optional)
   * @param scope The scope that the requested objects target.   The selection only matches objects directly targeting the specified scope. For example, &#x60;environment&#x60; will not match objects that target a host within environment.   To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)
   * @param fields A list of fields to be included to the response. The provided set of fields replaces the default set.    Specify the required top-level fields, separated by commas (for example, &#x60;origin,value&#x60;). (optional, default to origin,value)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of settings objects in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used. (optional)
   * @return EffectiveSettingsValuesList
   * @throws ApiException if fails to make API call
   */
  public EffectiveSettingsValuesList getEffectiveSettingsValues(String schemaIds, String scope, String fields, String nextPageKey, Long pageSize) throws ApiException {
    ApiResponse<EffectiveSettingsValuesList> localVarResponse = getEffectiveSettingsValuesWithHttpInfo(schemaIds, scope, fields, nextPageKey, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists effective settings values
   * Lists effective settings values for selected schemas at a selected scope (or entity). This operation evaluates the hierarchy of persisted objects (see [/settings/objects](#/Settings%20-%20Objects/getSettingsObjects))  It will always return a result for a schema/scope combination, even if the schema would not be relevant to the given scope/entity.  If no object along the hierarchy is persisted, the default value as defined in the schema will be returned.
   * @param schemaIds A list of comma-separated schema IDs to which the requested objects belong.   Only considered on load of the first page, when the **nextPageKey** is not set. (optional)
   * @param scope The scope that the requested objects target.   The selection only matches objects directly targeting the specified scope. For example, &#x60;environment&#x60; will not match objects that target a host within environment.   To load the first page, when the **nextPageKey** is not set, this parameter is required.  (optional)
   * @param fields A list of fields to be included to the response. The provided set of fields replaces the default set.    Specify the required top-level fields, separated by commas (for example, &#x60;origin,value&#x60;). (optional, default to origin,value)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of settings objects in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used. (optional)
   * @return ApiResponse&lt;EffectiveSettingsValuesList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EffectiveSettingsValuesList> getEffectiveSettingsValuesWithHttpInfo(String schemaIds, String scope, String fields, String nextPageKey, Long pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEffectiveSettingsValuesRequestBuilder(schemaIds, scope, fields, nextPageKey, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEffectiveSettingsValues", localVarResponse);
        }
        return new ApiResponse<EffectiveSettingsValuesList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EffectiveSettingsValuesList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEffectiveSettingsValuesRequestBuilder(String schemaIds, String scope, String fields, String nextPageKey, Long pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/effectiveValues";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schemaIds", schemaIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scope", scope));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the specified settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @return SettingsObject
   * @throws ApiException if fails to make API call
   */
  public SettingsObject getSettingsObjectByObjectId(String objectId) throws ApiException {
    ApiResponse<SettingsObject> localVarResponse = getSettingsObjectByObjectIdWithHttpInfo(objectId);
    return localVarResponse.getData();
  }

  /**
   * Gets the specified settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @return ApiResponse&lt;SettingsObject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SettingsObject> getSettingsObjectByObjectIdWithHttpInfo(String objectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSettingsObjectByObjectIdRequestBuilder(objectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSettingsObjectByObjectId", localVarResponse);
        }
        return new ApiResponse<SettingsObject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SettingsObject>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSettingsObjectByObjectIdRequestBuilder(String objectId) throws ApiException {
    // verify the required parameter 'objectId' is set
    if (objectId == null) {
      throw new ApiException(400, "Missing the required parameter 'objectId' when calling getSettingsObjectByObjectId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/objects/{objectId}"
        .replace("{objectId}", ApiClient.urlEncode(objectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists persisted settings objects
   * Lists persisted settings objects for selected schemas at selected scopes (or entities).  If nothing is persisted or if all persisted settings objects are not accessible due to missing permissions, no items will be returned.  To query the effective values (including schema defaults) please see [/settings/effectiveValues](#/Settings%20-%20Objects/getEffectiveSettingsValues).
   * @param schemaIds A list of comma-separated schema IDs to which the requested objects belong.   To load the first page, when the **nextPageKey** is not set, either this parameter or **scopes** is required.   To load all objects belonging to the given schema IDs leave the **scopes** parameter empty. (optional)
   * @param scopes A list of comma-separated scopes, that the requested objects target.   The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment.   To load the first page, when the **nextPageKey** is not set, either this parameter or **schemaIds** is required.   To load all objects belonging to the given scopes leave the **schemaIds** parameter empty. (optional)
   * @param fields A list of fields to be included to the response. The provided set of fields replaces the default set.    Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of settings objects in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used. (optional)
   * @return ObjectsList
   * @throws ApiException if fails to make API call
   */
  public ObjectsList getSettingsObjects(String schemaIds, String scopes, String fields, String nextPageKey, Long pageSize) throws ApiException {
    ApiResponse<ObjectsList> localVarResponse = getSettingsObjectsWithHttpInfo(schemaIds, scopes, fields, nextPageKey, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists persisted settings objects
   * Lists persisted settings objects for selected schemas at selected scopes (or entities).  If nothing is persisted or if all persisted settings objects are not accessible due to missing permissions, no items will be returned.  To query the effective values (including schema defaults) please see [/settings/effectiveValues](#/Settings%20-%20Objects/getEffectiveSettingsValues).
   * @param schemaIds A list of comma-separated schema IDs to which the requested objects belong.   To load the first page, when the **nextPageKey** is not set, either this parameter or **scopes** is required.   To load all objects belonging to the given schema IDs leave the **scopes** parameter empty. (optional)
   * @param scopes A list of comma-separated scopes, that the requested objects target.   The selection only matches objects directly targeting the specified scopes. For example, &#x60;environment&#x60; will not match objects that target a host within environment.   To load the first page, when the **nextPageKey** is not set, either this parameter or **schemaIds** is required.   To load all objects belonging to the given scopes leave the **schemaIds** parameter empty. (optional)
   * @param fields A list of fields to be included to the response. The provided set of fields replaces the default set.    Specify the required top-level fields, separated by commas (for example, &#x60;objectId,value&#x60;). (optional, default to objectId,value)
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of settings objects in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used. (optional)
   * @return ApiResponse&lt;ObjectsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectsList> getSettingsObjectsWithHttpInfo(String schemaIds, String scopes, String fields, String nextPageKey, Long pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSettingsObjectsRequestBuilder(schemaIds, scopes, fields, nextPageKey, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSettingsObjects", localVarResponse);
        }
        return new ApiResponse<ObjectsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectsList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSettingsObjectsRequestBuilder(String schemaIds, String scopes, String fields, String nextPageKey, Long pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/objects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schemaIds", schemaIds));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scopes", scopes));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates a new settings object
   * You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
   * @param validateOnly If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)
   * @param settingsObjectCreate The JSON body of the request. Contains the settings objects. (optional
   * @return List&lt;SettingsObjectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<SettingsObjectResponse> postSettingsObjects(Boolean validateOnly, List<SettingsObjectCreate> settingsObjectCreate) throws ApiException {
    ApiResponse<List<SettingsObjectResponse>> localVarResponse = postSettingsObjectsWithHttpInfo(validateOnly, settingsObjectCreate);
    return localVarResponse.getData();
  }

  /**
   * Creates a new settings object
   * You can upload several objects at once. In that case each object returns its own response code. Check the response body for details.
   * @param validateOnly If &#x60;true&#x60;, the request runs only validation of the submitted settings objects, without saving them. (optional, default to false)
   * @param settingsObjectCreate The JSON body of the request. Contains the settings objects. (optional
   * @return ApiResponse&lt;List&lt;SettingsObjectResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<SettingsObjectResponse>> postSettingsObjectsWithHttpInfo(Boolean validateOnly, List<SettingsObjectCreate> settingsObjectCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = postSettingsObjectsRequestBuilder(validateOnly, settingsObjectCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("postSettingsObjects", localVarResponse);
        }
        return new ApiResponse<List<SettingsObjectResponse>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<SettingsObjectResponse>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder postSettingsObjectsRequestBuilder(Boolean validateOnly, List<SettingsObjectCreate> settingsObjectCreate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/objects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("validateOnly", validateOnly));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(settingsObjectCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates an existing settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @param settingsObjectUpdate The JSON body of the request. Contains updated parameters of the settings object. (optional)
   * @return SettingsObjectResponse
   * @throws ApiException if fails to make API call
   */
  public SettingsObjectResponse putSettingsObjectByObjectId(String objectId, SettingsObjectUpdate settingsObjectUpdate) throws ApiException {
    ApiResponse<SettingsObjectResponse> localVarResponse = putSettingsObjectByObjectIdWithHttpInfo(objectId, settingsObjectUpdate);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing settings object
   * 
   * @param objectId The ID of the required settings object. (required)
   * @param settingsObjectUpdate The JSON body of the request. Contains updated parameters of the settings object. (optional)
   * @return ApiResponse&lt;SettingsObjectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SettingsObjectResponse> putSettingsObjectByObjectIdWithHttpInfo(String objectId, SettingsObjectUpdate settingsObjectUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putSettingsObjectByObjectIdRequestBuilder(objectId, settingsObjectUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("putSettingsObjectByObjectId", localVarResponse);
        }
        return new ApiResponse<SettingsObjectResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SettingsObjectResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putSettingsObjectByObjectIdRequestBuilder(String objectId, SettingsObjectUpdate settingsObjectUpdate) throws ApiException {
    // verify the required parameter 'objectId' is set
    if (objectId == null) {
      throw new ApiException(400, "Missing the required parameter 'objectId' when calling putSettingsObjectByObjectId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/settings/objects/{objectId}"
        .replace("{objectId}", ApiClient.urlEncode(objectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(settingsObjectUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
