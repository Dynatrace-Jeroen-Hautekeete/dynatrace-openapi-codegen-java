/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The icon of a monitored entity.
 */
@ApiModel(description = "The icon of a monitored entity.")
@JsonPropertyOrder({
  EntityIcon.JSON_PROPERTY_SECONDARY_ICON_TYPE,
  EntityIcon.JSON_PROPERTY_PRIMARY_ICON_TYPE,
  EntityIcon.JSON_PROPERTY_CUSTOM_ICON_PATH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class EntityIcon {
  public static final String JSON_PROPERTY_SECONDARY_ICON_TYPE = "secondaryIconType";
  private String secondaryIconType;

  public static final String JSON_PROPERTY_PRIMARY_ICON_TYPE = "primaryIconType";
  private String primaryIconType;

  public static final String JSON_PROPERTY_CUSTOM_ICON_PATH = "customIconPath";
  private String customIconPath;

  public EntityIcon() { 
  }

  @JsonCreator
  public EntityIcon(
    @JsonProperty(JSON_PROPERTY_SECONDARY_ICON_TYPE) String secondaryIconType, 
    @JsonProperty(JSON_PROPERTY_PRIMARY_ICON_TYPE) String primaryIconType
  ) {
  this();
    this.secondaryIconType = secondaryIconType;
    this.primaryIconType = primaryIconType;
  }

   /**
   * The secondary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
   * @return secondaryIconType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The secondary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.")
  @JsonProperty(JSON_PROPERTY_SECONDARY_ICON_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecondaryIconType() {
    return secondaryIconType;
  }




   /**
   * The primary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
   * @return primaryIconType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The primary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.")
  @JsonProperty(JSON_PROPERTY_PRIMARY_ICON_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrimaryIconType() {
    return primaryIconType;
  }




  public EntityIcon customIconPath(String customIconPath) {
    this.customIconPath = customIconPath;
    return this;
  }

   /**
   * The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon.
   * @return customIconPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_ICON_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomIconPath() {
    return customIconPath;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_ICON_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomIconPath(String customIconPath) {
    this.customIconPath = customIconPath;
  }


  /**
   * Return true if this EntityIcon object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityIcon entityIcon = (EntityIcon) o;
    return Objects.equals(this.secondaryIconType, entityIcon.secondaryIconType) &&
        Objects.equals(this.primaryIconType, entityIcon.primaryIconType) &&
        Objects.equals(this.customIconPath, entityIcon.customIconPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secondaryIconType, primaryIconType, customIconPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityIcon {\n");
    sb.append("    secondaryIconType: ").append(toIndentedString(secondaryIconType)).append("\n");
    sb.append("    primaryIconType: ").append(toIndentedString(primaryIconType)).append("\n");
    sb.append("    customIconPath: ").append(toIndentedString(customIconPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

