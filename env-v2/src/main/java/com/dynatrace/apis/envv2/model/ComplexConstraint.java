/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A constraint on the values accepted for a complex settings property.
 */
@ApiModel(description = "A constraint on the values accepted for a complex settings property.")
@JsonPropertyOrder({
  ComplexConstraint.JSON_PROPERTY_CUSTOM_MESSAGE,
  ComplexConstraint.JSON_PROPERTY_CUSTOM_VALIDATOR_ID,
  ComplexConstraint.JSON_PROPERTY_MINIMUM_PROPERTY_COUNT,
  ComplexConstraint.JSON_PROPERTY_MAXIMUM_PROPERTY_COUNT,
  ComplexConstraint.JSON_PROPERTY_PROPERTIES,
  ComplexConstraint.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class ComplexConstraint {
  public static final String JSON_PROPERTY_CUSTOM_MESSAGE = "customMessage";
  private String customMessage;

  public static final String JSON_PROPERTY_CUSTOM_VALIDATOR_ID = "customValidatorId";
  private String customValidatorId;

  public static final String JSON_PROPERTY_MINIMUM_PROPERTY_COUNT = "minimumPropertyCount";
  private Integer minimumPropertyCount;

  public static final String JSON_PROPERTY_MAXIMUM_PROPERTY_COUNT = "maximumPropertyCount";
  private Integer maximumPropertyCount;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private List<String> properties = null;

  /**
   * The type of the constraint.
   */
  public enum TypeEnum {
    CUSTOM_VALIDATOR_REF("CUSTOM_VALIDATOR_REF"),
    
    GREATER_THAN("GREATER_THAN"),
    
    GREATER_THAN_OR_EQUAL("GREATER_THAN_OR_EQUAL"),
    
    LESS_THAN("LESS_THAN"),
    
    LESS_THAN_OR_EQUAL("LESS_THAN_OR_EQUAL"),
    
    PROPERTY_COUNT_RANGE("PROPERTY_COUNT_RANGE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public ComplexConstraint() { 
  }

  public ComplexConstraint customMessage(String customMessage) {
    this.customMessage = customMessage;
    return this;
  }

   /**
   * A custom message for invalid values.
   * @return customMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A custom message for invalid values.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomMessage() {
    return customMessage;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }


  public ComplexConstraint customValidatorId(String customValidatorId) {
    this.customValidatorId = customValidatorId;
    return this;
  }

   /**
   * The ID of a custom validator.
   * @return customValidatorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-min-max", value = "The ID of a custom validator.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_VALIDATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomValidatorId() {
    return customValidatorId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_VALIDATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomValidatorId(String customValidatorId) {
    this.customValidatorId = customValidatorId;
  }


  public ComplexConstraint minimumPropertyCount(Integer minimumPropertyCount) {
    this.minimumPropertyCount = minimumPropertyCount;
    return this;
  }

   /**
   * The minimum number of properties that must be set.
   * @return minimumPropertyCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The minimum number of properties that must be set.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinimumPropertyCount() {
    return minimumPropertyCount;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumPropertyCount(Integer minimumPropertyCount) {
    this.minimumPropertyCount = minimumPropertyCount;
  }


  public ComplexConstraint maximumPropertyCount(Integer maximumPropertyCount) {
    this.maximumPropertyCount = maximumPropertyCount;
    return this;
  }

   /**
   * The maximum number of properties that can be set.
   * @return maximumPropertyCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The maximum number of properties that can be set.")
  @JsonProperty(JSON_PROPERTY_MAXIMUM_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaximumPropertyCount() {
    return maximumPropertyCount;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumPropertyCount(Integer maximumPropertyCount) {
    this.maximumPropertyCount = maximumPropertyCount;
  }


  public ComplexConstraint properties(List<String> properties) {
    this.properties = properties;
    return this;
  }

  public ComplexConstraint addPropertiesItem(String propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * A list of properties (defined by IDs) that are used to check the constraint.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of properties (defined by IDs) that are used to check the constraint.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(List<String> properties) {
    this.properties = properties;
  }


  public ComplexConstraint type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the constraint.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the constraint.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this ComplexConstraint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplexConstraint complexConstraint = (ComplexConstraint) o;
    return Objects.equals(this.customMessage, complexConstraint.customMessage) &&
        Objects.equals(this.customValidatorId, complexConstraint.customValidatorId) &&
        Objects.equals(this.minimumPropertyCount, complexConstraint.minimumPropertyCount) &&
        Objects.equals(this.maximumPropertyCount, complexConstraint.maximumPropertyCount) &&
        Objects.equals(this.properties, complexConstraint.properties) &&
        Objects.equals(this.type, complexConstraint.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customMessage, customValidatorId, minimumPropertyCount, maximumPropertyCount, properties, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplexConstraint {\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    customValidatorId: ").append(toIndentedString(customValidatorId)).append("\n");
    sb.append("    minimumPropertyCount: ").append(toIndentedString(minimumPropertyCount)).append("\n");
    sb.append("    maximumPropertyCount: ").append(toIndentedString(maximumPropertyCount)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

