/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An entry of the audit log.
 */
@ApiModel(description = "An entry of the audit log.")
@JsonPropertyOrder({
  AuditLogEntry.JSON_PROPERTY_LOG_ID,
  AuditLogEntry.JSON_PROPERTY_EVENT_TYPE,
  AuditLogEntry.JSON_PROPERTY_CATEGORY,
  AuditLogEntry.JSON_PROPERTY_ENTITY_ID,
  AuditLogEntry.JSON_PROPERTY_ENVIRONMENT_ID,
  AuditLogEntry.JSON_PROPERTY_USER,
  AuditLogEntry.JSON_PROPERTY_USER_TYPE,
  AuditLogEntry.JSON_PROPERTY_USER_ORIGIN,
  AuditLogEntry.JSON_PROPERTY_TIMESTAMP,
  AuditLogEntry.JSON_PROPERTY_SUCCESS,
  AuditLogEntry.JSON_PROPERTY_MESSAGE,
  AuditLogEntry.JSON_PROPERTY_PATCH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class AuditLogEntry {
  public static final String JSON_PROPERTY_LOG_ID = "logId";
  private String logId;

  /**
   * The type of the recorded operation.
   */
  public enum EventTypeEnum {
    CREATE("CREATE"),
    
    DELETE("DELETE"),
    
    GENERAL("GENERAL"),
    
    GET("GET"),
    
    LOGIN("LOGIN"),
    
    LOGOUT("LOGOUT"),
    
    PATCH("PATCH"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    READ("READ"),
    
    REVOKE("REVOKE"),
    
    TAG_ADD("TAG_ADD"),
    
    TAG_REMOVE("TAG_REMOVE"),
    
    TAG_UPDATE("TAG_UPDATE"),
    
    UPDATE("UPDATE");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private EventTypeEnum eventType;

  /**
   * The category of the recorded operation.
   */
  public enum CategoryEnum {
    CONFIG("CONFIG"),
    
    DEBUG_UI("DEBUG_UI"),
    
    MANUAL_TAGGING_SERVICE("MANUAL_TAGGING_SERVICE"),
    
    TOKEN("TOKEN"),
    
    WEB_UI("WEB_UI");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private CategoryEnum category;

  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  public static final String JSON_PROPERTY_ENVIRONMENT_ID = "environmentId";
  private String environmentId;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  /**
   * The type of the authentication of the **user**.
   */
  public enum UserTypeEnum {
    PUBLIC_TOKEN_IDENTIFIER("PUBLIC_TOKEN_IDENTIFIER"),
    
    REQUEST_ID("REQUEST_ID"),
    
    SERVICE_NAME("SERVICE_NAME"),
    
    TOKEN_HASH("TOKEN_HASH"),
    
    USER_NAME("USER_NAME");

    private String value;

    UserTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UserTypeEnum fromValue(String value) {
      for (UserTypeEnum b : UserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_USER_TYPE = "userType";
  private UserTypeEnum userType;

  public static final String JSON_PROPERTY_USER_ORIGIN = "userOrigin";
  private String userOrigin;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Long timestamp;

  public static final String JSON_PROPERTY_SUCCESS = "success";
  private Boolean success;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_PATCH = "patch";
  private Object patch;

  public AuditLogEntry() { 
  }

  @JsonCreator
  public AuditLogEntry(
    @JsonProperty(JSON_PROPERTY_LOG_ID) String logId, 
    @JsonProperty(JSON_PROPERTY_EVENT_TYPE) EventTypeEnum eventType, 
    @JsonProperty(JSON_PROPERTY_CATEGORY) CategoryEnum category, 
    @JsonProperty(JSON_PROPERTY_ENTITY_ID) String entityId, 
    @JsonProperty(JSON_PROPERTY_ENVIRONMENT_ID) String environmentId, 
    @JsonProperty(JSON_PROPERTY_USER) String user, 
    @JsonProperty(JSON_PROPERTY_USER_TYPE) UserTypeEnum userType, 
    @JsonProperty(JSON_PROPERTY_USER_ORIGIN) String userOrigin, 
    @JsonProperty(JSON_PROPERTY_TIMESTAMP) Long timestamp, 
    @JsonProperty(JSON_PROPERTY_SUCCESS) Boolean success, 
    @JsonProperty(JSON_PROPERTY_MESSAGE) String message, 
    @JsonProperty(JSON_PROPERTY_PATCH) Object patch
  ) {
  this();
    this.logId = logId;
    this.eventType = eventType;
    this.category = category;
    this.entityId = entityId;
    this.environmentId = environmentId;
    this.user = user;
    this.userType = userType;
    this.userOrigin = userOrigin;
    this.timestamp = timestamp;
    this.success = success;
    this.message = message;
    this.patch = patch;
  }

   /**
   * The ID of the log entry.
   * @return logId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the log entry.")
  @JsonProperty(JSON_PROPERTY_LOG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLogId() {
    return logId;
  }




   /**
   * The type of the recorded operation.
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the recorded operation.")
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventTypeEnum getEventType() {
    return eventType;
  }




   /**
   * The category of the recorded operation.
   * @return category
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The category of the recorded operation.")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CategoryEnum getCategory() {
    return category;
  }




   /**
   * The ID of an entity from the **category**.   For example, it can be config ID for the &#x60;CONFIG&#x60; category or token ID for the &#x60;TOKEN&#x60; category.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of an entity from the **category**.   For example, it can be config ID for the `CONFIG` category or token ID for the `TOKEN` category.")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEntityId() {
    return entityId;
  }




   /**
   * The ID of the Dynatrace environment where the recorded operation occurred.
   * @return environmentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the Dynatrace environment where the recorded operation occurred.")
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEnvironmentId() {
    return environmentId;
  }




   /**
   * The ID of the user who performed the recorded operation.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the user who performed the recorded operation.")
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUser() {
    return user;
  }




   /**
   * The type of the authentication of the **user**.
   * @return userType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the authentication of the **user**.")
  @JsonProperty(JSON_PROPERTY_USER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UserTypeEnum getUserType() {
    return userType;
  }




   /**
   * The origin and the IP address of the **user**.
   * @return userOrigin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The origin and the IP address of the **user**.")
  @JsonProperty(JSON_PROPERTY_USER_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserOrigin() {
    return userOrigin;
  }




   /**
   * The timestamp of the record creation, in UTC milliseconds.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The timestamp of the record creation, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTimestamp() {
    return timestamp;
  }




   /**
   * The recorded operation is successful (&#x60;true&#x60;) or failed (&#x60;false&#x60;).
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The recorded operation is successful (`true`) or failed (`false`).")
  @JsonProperty(JSON_PROPERTY_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSuccess() {
    return success;
  }




   /**
   * The logged message.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The logged message.")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }




   /**
   * The patch of the recorded operation as the JSON representation.   The format is an enhanced RFC 6902. The patch also carries the previous value in the **oldValue** field.
   * @return patch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The patch of the recorded operation as the JSON representation.   The format is an enhanced RFC 6902. The patch also carries the previous value in the **oldValue** field.")
  @JsonProperty(JSON_PROPERTY_PATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getPatch() {
    return patch;
  }




  /**
   * Return true if this AuditLogEntry object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLogEntry auditLogEntry = (AuditLogEntry) o;
    return Objects.equals(this.logId, auditLogEntry.logId) &&
        Objects.equals(this.eventType, auditLogEntry.eventType) &&
        Objects.equals(this.category, auditLogEntry.category) &&
        Objects.equals(this.entityId, auditLogEntry.entityId) &&
        Objects.equals(this.environmentId, auditLogEntry.environmentId) &&
        Objects.equals(this.user, auditLogEntry.user) &&
        Objects.equals(this.userType, auditLogEntry.userType) &&
        Objects.equals(this.userOrigin, auditLogEntry.userOrigin) &&
        Objects.equals(this.timestamp, auditLogEntry.timestamp) &&
        Objects.equals(this.success, auditLogEntry.success) &&
        Objects.equals(this.message, auditLogEntry.message) &&
        Objects.equals(this.patch, auditLogEntry.patch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logId, eventType, category, entityId, environmentId, user, userType, userOrigin, timestamp, success, message, patch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLogEntry {\n");
    sb.append("    logId: ").append(toIndentedString(logId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    userOrigin: ").append(toIndentedString(userOrigin)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

