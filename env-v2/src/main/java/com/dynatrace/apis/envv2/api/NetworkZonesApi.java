/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.EntityShortRepresentation;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.NetworkZone;
import com.dynatrace.apis.envv2.model.NetworkZoneConnectionStatistics;
import com.dynatrace.apis.envv2.model.NetworkZoneList;
import com.dynatrace.apis.envv2.model.NetworkZoneSettings;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class NetworkZonesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public NetworkZonesApi() {
    this(new ApiClient());
  }

  public NetworkZonesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Updates an existing network zone or creates a new one
   * If the network zone with the specified ID does not exist, a new network zone is created.    The ID is not case sensitive. Dynatrace stores the ID in lowercase.
   * @param id The ID of the network zone to be updated.    If you set the ID in the body as well, it must match this ID.    The ID is not case sensitive. Dynatrace stores the ID in lowercase. (required)
   * @param networkZone The JSON body of the request. Contains parameters of the network zone. (required)
   * @return EntityShortRepresentation
   * @throws ApiException if fails to make API call
   */
  public EntityShortRepresentation createOrUpdateNetworkZone(String id, NetworkZone networkZone) throws ApiException {
    ApiResponse<EntityShortRepresentation> localVarResponse = createOrUpdateNetworkZoneWithHttpInfo(id, networkZone);
    return localVarResponse.getData();
  }

  /**
   * Updates an existing network zone or creates a new one
   * If the network zone with the specified ID does not exist, a new network zone is created.    The ID is not case sensitive. Dynatrace stores the ID in lowercase.
   * @param id The ID of the network zone to be updated.    If you set the ID in the body as well, it must match this ID.    The ID is not case sensitive. Dynatrace stores the ID in lowercase. (required)
   * @param networkZone The JSON body of the request. Contains parameters of the network zone. (required)
   * @return ApiResponse&lt;EntityShortRepresentation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EntityShortRepresentation> createOrUpdateNetworkZoneWithHttpInfo(String id, NetworkZone networkZone) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateNetworkZoneRequestBuilder(id, networkZone);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrUpdateNetworkZone", localVarResponse);
        }
        return new ApiResponse<EntityShortRepresentation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EntityShortRepresentation>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateNetworkZoneRequestBuilder(String id, NetworkZone networkZone) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createOrUpdateNetworkZone");
    }
    // verify the required parameter 'networkZone' is set
    if (networkZone == null) {
      throw new ApiException(400, "Missing the required parameter 'networkZone' when calling createOrUpdateNetworkZone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZones/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(networkZone);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified network zone
   * You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).    If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
   * @param id The ID of the network zone to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteNetworkZone(String id) throws ApiException {
    deleteNetworkZoneWithHttpInfo(id);
  }

  /**
   * Deletes the specified network zone
   * You can only delete an empty network zone (a zone that no ActiveGate or OneAgent is using).    If the network zone is used as an alternative zone for any OneAgent, it will be automatically removed from the list of possible alternatives.
   * @param id The ID of the network zone to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteNetworkZoneWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteNetworkZoneRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteNetworkZone", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteNetworkZoneRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteNetworkZone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZones/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "*/*");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all existing network zones
   * 
   * @return NetworkZoneList
   * @throws ApiException if fails to make API call
   */
  public NetworkZoneList getAllNetworkZones() throws ApiException {
    ApiResponse<NetworkZoneList> localVarResponse = getAllNetworkZonesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Lists all existing network zones
   * 
   * @return ApiResponse&lt;NetworkZoneList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NetworkZoneList> getAllNetworkZonesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllNetworkZonesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllNetworkZones", localVarResponse);
        }
        return new ApiResponse<NetworkZoneList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NetworkZoneList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllNetworkZonesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZones";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the statistics about hosts using the network zone
   * 
   * @param id The ID of the required network zone. (required)
   * @param filter Filters the resulting set of hosts:   * &#x60;all&#x60;: All hosts using the zone.  * &#x60;configuredButNotConnectedOnly&#x60;: Hosts from the network zone that use other zones.  * &#x60;connectedAsAlternativeOnly&#x60;: Hosts that use the network zone as an alternative.  * &#x60;connectedAsFailoverOnly&#x60;: Hosts from other zones that use the zone (not configured as an alternative) even though ActiveGates of higher priority are available.  * &#x60;connectedAsFailoverWithoutOwnActiveGatesOnly&#x60;: Hosts from other zones that use the zone (not configured as an alternative) and **no** ActiveGates of higher priority are available.   If not set, &#x60;all&#x60; is used. (optional, default to all)
   * @return NetworkZoneConnectionStatistics
   * @throws ApiException if fails to make API call
   */
  public NetworkZoneConnectionStatistics getHostStats(String id, String filter) throws ApiException {
    ApiResponse<NetworkZoneConnectionStatistics> localVarResponse = getHostStatsWithHttpInfo(id, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the statistics about hosts using the network zone
   * 
   * @param id The ID of the required network zone. (required)
   * @param filter Filters the resulting set of hosts:   * &#x60;all&#x60;: All hosts using the zone.  * &#x60;configuredButNotConnectedOnly&#x60;: Hosts from the network zone that use other zones.  * &#x60;connectedAsAlternativeOnly&#x60;: Hosts that use the network zone as an alternative.  * &#x60;connectedAsFailoverOnly&#x60;: Hosts from other zones that use the zone (not configured as an alternative) even though ActiveGates of higher priority are available.  * &#x60;connectedAsFailoverWithoutOwnActiveGatesOnly&#x60;: Hosts from other zones that use the zone (not configured as an alternative) and **no** ActiveGates of higher priority are available.   If not set, &#x60;all&#x60; is used. (optional, default to all)
   * @return ApiResponse&lt;NetworkZoneConnectionStatistics&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NetworkZoneConnectionStatistics> getHostStatsWithHttpInfo(String id, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getHostStatsRequestBuilder(id, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getHostStats", localVarResponse);
        }
        return new ApiResponse<NetworkZoneConnectionStatistics>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NetworkZoneConnectionStatistics>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getHostStatsRequestBuilder(String id, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getHostStats");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZones/{id}/hostConnectionStatistics"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the global configuration of network zones
   * 
   * @return NetworkZoneSettings
   * @throws ApiException if fails to make API call
   */
  public NetworkZoneSettings getNetworkZoneSettings() throws ApiException {
    ApiResponse<NetworkZoneSettings> localVarResponse = getNetworkZoneSettingsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the global configuration of network zones
   * 
   * @return ApiResponse&lt;NetworkZoneSettings&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NetworkZoneSettings> getNetworkZoneSettingsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNetworkZoneSettingsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getNetworkZoneSettings", localVarResponse);
        }
        return new ApiResponse<NetworkZoneSettings>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NetworkZoneSettings>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNetworkZoneSettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZoneSettings";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets parameters of the specified network zone
   * 
   * @param id The ID of the required network zone. (required)
   * @return NetworkZone
   * @throws ApiException if fails to make API call
   */
  public NetworkZone getSingleNetworkZone(String id) throws ApiException {
    ApiResponse<NetworkZone> localVarResponse = getSingleNetworkZoneWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets parameters of the specified network zone
   * 
   * @param id The ID of the required network zone. (required)
   * @return ApiResponse&lt;NetworkZone&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NetworkZone> getSingleNetworkZoneWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSingleNetworkZoneRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSingleNetworkZone", localVarResponse);
        }
        return new ApiResponse<NetworkZone>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NetworkZone>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSingleNetworkZoneRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getSingleNetworkZone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZones/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates the global configuration of network zones
   * 
   * @param networkZoneSettings The JSON body of the request. Contains global configuration of network zones. (required)
   * @throws ApiException if fails to make API call
   */
  public void updateNetworkZoneSettings(NetworkZoneSettings networkZoneSettings) throws ApiException {
    updateNetworkZoneSettingsWithHttpInfo(networkZoneSettings);
  }

  /**
   * Updates the global configuration of network zones
   * 
   * @param networkZoneSettings The JSON body of the request. Contains global configuration of network zones. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateNetworkZoneSettingsWithHttpInfo(NetworkZoneSettings networkZoneSettings) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateNetworkZoneSettingsRequestBuilder(networkZoneSettings);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateNetworkZoneSettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateNetworkZoneSettingsRequestBuilder(NetworkZoneSettings networkZoneSettings) throws ApiException {
    // verify the required parameter 'networkZoneSettings' is set
    if (networkZoneSettings == null) {
      throw new ApiException(400, "Missing the required parameter 'networkZoneSettings' when calling updateNetworkZoneSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/networkZoneSettings";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(networkZoneSettings);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
