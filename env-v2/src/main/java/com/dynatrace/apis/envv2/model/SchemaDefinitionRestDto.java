/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.ComplexConstraint;
import com.dynatrace.apis.envv2.model.EnumType;
import com.dynatrace.apis.envv2.model.PropertyDefinition;
import com.dynatrace.apis.envv2.model.SchemaType;
import com.dynatrace.apis.envv2.model.UiCustomization;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SchemaDefinitionRestDto
 */
@JsonPropertyOrder({
  SchemaDefinitionRestDto.JSON_PROPERTY_DYNATRACE,
  SchemaDefinitionRestDto.JSON_PROPERTY_SCHEMA_ID,
  SchemaDefinitionRestDto.JSON_PROPERTY_DISPLAY_NAME,
  SchemaDefinitionRestDto.JSON_PROPERTY_DESCRIPTION,
  SchemaDefinitionRestDto.JSON_PROPERTY_DOCUMENTATION,
  SchemaDefinitionRestDto.JSON_PROPERTY_SCHEMA_GROUPS,
  SchemaDefinitionRestDto.JSON_PROPERTY_VERSION,
  SchemaDefinitionRestDto.JSON_PROPERTY_MULTI_OBJECT,
  SchemaDefinitionRestDto.JSON_PROPERTY_ORDERED,
  SchemaDefinitionRestDto.JSON_PROPERTY_MAX_OBJECTS,
  SchemaDefinitionRestDto.JSON_PROPERTY_ALLOWED_SCOPES,
  SchemaDefinitionRestDto.JSON_PROPERTY_ENUMS,
  SchemaDefinitionRestDto.JSON_PROPERTY_TYPES,
  SchemaDefinitionRestDto.JSON_PROPERTY_PROPERTIES,
  SchemaDefinitionRestDto.JSON_PROPERTY_CONSTRAINTS,
  SchemaDefinitionRestDto.JSON_PROPERTY_METADATA,
  SchemaDefinitionRestDto.JSON_PROPERTY_UI_CUSTOMIZATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SchemaDefinitionRestDto {
  public static final String JSON_PROPERTY_DYNATRACE = "dynatrace";
  private String dynatrace;

  public static final String JSON_PROPERTY_SCHEMA_ID = "schemaId";
  private String schemaId;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_DOCUMENTATION = "documentation";
  private String documentation;

  public static final String JSON_PROPERTY_SCHEMA_GROUPS = "schemaGroups";
  private Set<String> schemaGroups = null;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_MULTI_OBJECT = "multiObject";
  private Boolean multiObject;

  public static final String JSON_PROPERTY_ORDERED = "ordered";
  private Boolean ordered;

  public static final String JSON_PROPERTY_MAX_OBJECTS = "maxObjects";
  private Integer maxObjects;

  public static final String JSON_PROPERTY_ALLOWED_SCOPES = "allowedScopes";
  private List<String> allowedScopes = new ArrayList<>();

  public static final String JSON_PROPERTY_ENUMS = "enums";
  private Map<String, EnumType> enums = new HashMap<>();

  public static final String JSON_PROPERTY_TYPES = "types";
  private Map<String, SchemaType> types = new HashMap<>();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Map<String, PropertyDefinition> properties = new HashMap<>();

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private List<ComplexConstraint> constraints = null;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = null;

  public static final String JSON_PROPERTY_UI_CUSTOMIZATION = "uiCustomization";
  private UiCustomization uiCustomization;

  public SchemaDefinitionRestDto() { 
  }

  public SchemaDefinitionRestDto dynatrace(String dynatrace) {
    this.dynatrace = dynatrace;
    return this;
  }

   /**
   * The version of the data format.
   * @return dynatrace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The version of the data format.")
  @JsonProperty(JSON_PROPERTY_DYNATRACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDynatrace() {
    return dynatrace;
  }


  @JsonProperty(JSON_PROPERTY_DYNATRACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDynatrace(String dynatrace) {
    this.dynatrace = dynatrace;
  }


  public SchemaDefinitionRestDto schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

   /**
   * The ID of the schema.
   * @return schemaId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "builtin:container.built-in-monitoring-rule", required = true, value = "The ID of the schema.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSchemaId() {
    return schemaId;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public SchemaDefinitionRestDto displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the schema.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Built-in container monitoring rules", required = true, value = "The display name of the schema.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SchemaDefinitionRestDto description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the schema.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Dynatrace disables monitoring of containers that do not run any applications", required = true, value = "A short description of the schema.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public SchemaDefinitionRestDto documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

   /**
   * An extended description of the schema and/or links to documentation.
   * @return documentation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An extended description of the schema and/or links to documentation.")
  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentation() {
    return documentation;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public SchemaDefinitionRestDto schemaGroups(Set<String> schemaGroups) {
    this.schemaGroups = schemaGroups;
    return this;
  }

  public SchemaDefinitionRestDto addSchemaGroupsItem(String schemaGroupsItem) {
    if (this.schemaGroups == null) {
      this.schemaGroups = new LinkedHashSet<>();
    }
    this.schemaGroups.add(schemaGroupsItem);
    return this;
  }

   /**
   * Names of the groups, which the schema belongs to.
   * @return schemaGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"group:some.1\",\"group:some.2\"]", value = "Names of the groups, which the schema belongs to.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getSchemaGroups() {
    return schemaGroups;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SCHEMA_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemaGroups(Set<String> schemaGroups) {
    this.schemaGroups = schemaGroups;
  }


  public SchemaDefinitionRestDto version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the schema.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.4.2", required = true, value = "The version of the schema.")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public SchemaDefinitionRestDto multiObject(Boolean multiObject) {
    this.multiObject = multiObject;
    return this;
  }

   /**
   * Multiple (&#x60;true&#x60;) objects per scope are permitted or a single (&#x60;false&#x60;) object per scope is permitted.
   * @return multiObject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Multiple (`true`) objects per scope are permitted or a single (`false`) object per scope is permitted.")
  @JsonProperty(JSON_PROPERTY_MULTI_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMultiObject() {
    return multiObject;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMultiObject(Boolean multiObject) {
    this.multiObject = multiObject;
  }


  public SchemaDefinitionRestDto ordered(Boolean ordered) {
    this.ordered = ordered;
    return this;
  }

   /**
   * If &#x60;true&#x60; the order of objects has semantic significance.   Only applicable when **multiObject** is set to &#x60;true&#x60;.
   * @return ordered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true` the order of objects has semantic significance.   Only applicable when **multiObject** is set to `true`.")
  @JsonProperty(JSON_PROPERTY_ORDERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOrdered() {
    return ordered;
  }


  @JsonProperty(JSON_PROPERTY_ORDERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrdered(Boolean ordered) {
    this.ordered = ordered;
  }


  public SchemaDefinitionRestDto maxObjects(Integer maxObjects) {
    this.maxObjects = maxObjects;
    return this;
  }

   /**
   * The maximum amount of objects per scope.   Only applicable when **multiObject** is set to &#x60;true&#x60;.
   * @return maxObjects
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The maximum amount of objects per scope.   Only applicable when **multiObject** is set to `true`.")
  @JsonProperty(JSON_PROPERTY_MAX_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxObjects() {
    return maxObjects;
  }


  @JsonProperty(JSON_PROPERTY_MAX_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxObjects(Integer maxObjects) {
    this.maxObjects = maxObjects;
  }


  public SchemaDefinitionRestDto allowedScopes(List<String> allowedScopes) {
    this.allowedScopes = allowedScopes;
    return this;
  }

  public SchemaDefinitionRestDto addAllowedScopesItem(String allowedScopesItem) {
    this.allowedScopes.add(allowedScopesItem);
    return this;
  }

   /**
   * A list of scopes where the schema can be used.
   * @return allowedScopes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"host\",\"application\"]", required = true, value = "A list of scopes where the schema can be used.")
  @JsonProperty(JSON_PROPERTY_ALLOWED_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getAllowedScopes() {
    return allowedScopes;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_SCOPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowedScopes(List<String> allowedScopes) {
    this.allowedScopes = allowedScopes;
  }


  public SchemaDefinitionRestDto enums(Map<String, EnumType> enums) {
    this.enums = enums;
    return this;
  }

  public SchemaDefinitionRestDto putEnumsItem(String key, EnumType enumsItem) {
    this.enums.put(key, enumsItem);
    return this;
  }

   /**
   * A list of definitions of enum properties.
   * @return enums
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of definitions of enum properties.")
  @JsonProperty(JSON_PROPERTY_ENUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, EnumType> getEnums() {
    return enums;
  }


  @JsonProperty(JSON_PROPERTY_ENUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnums(Map<String, EnumType> enums) {
    this.enums = enums;
  }


  public SchemaDefinitionRestDto types(Map<String, SchemaType> types) {
    this.types = types;
    return this;
  }

  public SchemaDefinitionRestDto putTypesItem(String key, SchemaType typesItem) {
    this.types.put(key, typesItem);
    return this;
  }

   /**
   * A list of definitions of types.    A type is a complex property that contains its own set of subproperties.
   * @return types
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of definitions of types.    A type is a complex property that contains its own set of subproperties.")
  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, SchemaType> getTypes() {
    return types;
  }


  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTypes(Map<String, SchemaType> types) {
    this.types = types;
  }


  public SchemaDefinitionRestDto properties(Map<String, PropertyDefinition> properties) {
    this.properties = properties;
    return this;
  }

  public SchemaDefinitionRestDto putPropertiesItem(String key, PropertyDefinition propertiesItem) {
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A list of schema&#39;s properties.
   * @return properties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of schema's properties.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, PropertyDefinition> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperties(Map<String, PropertyDefinition> properties) {
    this.properties = properties;
  }


  public SchemaDefinitionRestDto constraints(List<ComplexConstraint> constraints) {
    this.constraints = constraints;
    return this;
  }

  public SchemaDefinitionRestDto addConstraintsItem(ComplexConstraint constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * A list of constrains limiting the values to be accepted by the schema.
   * @return constraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of constrains limiting the values to be accepted by the schema.")
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ComplexConstraint> getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraints(List<ComplexConstraint> constraints) {
    this.constraints = constraints;
  }


  public SchemaDefinitionRestDto metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public SchemaDefinitionRestDto putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Metadata of the setting.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata of the setting.")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public SchemaDefinitionRestDto uiCustomization(UiCustomization uiCustomization) {
    this.uiCustomization = uiCustomization;
    return this;
  }

   /**
   * Get uiCustomization
   * @return uiCustomization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UI_CUSTOMIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UiCustomization getUiCustomization() {
    return uiCustomization;
  }


  @JsonProperty(JSON_PROPERTY_UI_CUSTOMIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUiCustomization(UiCustomization uiCustomization) {
    this.uiCustomization = uiCustomization;
  }


  /**
   * Return true if this SchemaDefinitionRestDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaDefinitionRestDto schemaDefinitionRestDto = (SchemaDefinitionRestDto) o;
    return Objects.equals(this.dynatrace, schemaDefinitionRestDto.dynatrace) &&
        Objects.equals(this.schemaId, schemaDefinitionRestDto.schemaId) &&
        Objects.equals(this.displayName, schemaDefinitionRestDto.displayName) &&
        Objects.equals(this.description, schemaDefinitionRestDto.description) &&
        Objects.equals(this.documentation, schemaDefinitionRestDto.documentation) &&
        Objects.equals(this.schemaGroups, schemaDefinitionRestDto.schemaGroups) &&
        Objects.equals(this.version, schemaDefinitionRestDto.version) &&
        Objects.equals(this.multiObject, schemaDefinitionRestDto.multiObject) &&
        Objects.equals(this.ordered, schemaDefinitionRestDto.ordered) &&
        Objects.equals(this.maxObjects, schemaDefinitionRestDto.maxObjects) &&
        Objects.equals(this.allowedScopes, schemaDefinitionRestDto.allowedScopes) &&
        Objects.equals(this.enums, schemaDefinitionRestDto.enums) &&
        Objects.equals(this.types, schemaDefinitionRestDto.types) &&
        Objects.equals(this.properties, schemaDefinitionRestDto.properties) &&
        Objects.equals(this.constraints, schemaDefinitionRestDto.constraints) &&
        Objects.equals(this.metadata, schemaDefinitionRestDto.metadata) &&
        Objects.equals(this.uiCustomization, schemaDefinitionRestDto.uiCustomization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynatrace, schemaId, displayName, description, documentation, schemaGroups, version, multiObject, ordered, maxObjects, allowedScopes, enums, types, properties, constraints, metadata, uiCustomization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaDefinitionRestDto {\n");
    sb.append("    dynatrace: ").append(toIndentedString(dynatrace)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    schemaGroups: ").append(toIndentedString(schemaGroups)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    multiObject: ").append(toIndentedString(multiObject)).append("\n");
    sb.append("    ordered: ").append(toIndentedString(ordered)).append("\n");
    sb.append("    maxObjects: ").append(toIndentedString(maxObjects)).append("\n");
    sb.append("    allowedScopes: ").append(toIndentedString(allowedScopes)).append("\n");
    sb.append("    enums: ").append(toIndentedString(enums)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    uiCustomization: ").append(toIndentedString(uiCustomization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

