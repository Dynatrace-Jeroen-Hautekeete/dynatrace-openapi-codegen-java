/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AppliedFilter;
import com.dynatrace.apis.envv2.model.MetricSeries;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Data points of a metric.
 */
@ApiModel(description = "Data points of a metric.")
@JsonPropertyOrder({
  MetricSeriesCollection.JSON_PROPERTY_APPLIED_OPTIONAL_FILTERS,
  MetricSeriesCollection.JSON_PROPERTY_DATA_POINT_COUNT_RATIO,
  MetricSeriesCollection.JSON_PROPERTY_DIMENSION_COUNT_RATIO,
  MetricSeriesCollection.JSON_PROPERTY_METRIC_ID,
  MetricSeriesCollection.JSON_PROPERTY_DATA,
  MetricSeriesCollection.JSON_PROPERTY_WARNINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class MetricSeriesCollection {
  public static final String JSON_PROPERTY_APPLIED_OPTIONAL_FILTERS = "appliedOptionalFilters";
  private List<AppliedFilter> appliedOptionalFilters = null;

  public static final String JSON_PROPERTY_DATA_POINT_COUNT_RATIO = "dataPointCountRatio";
  private Float dataPointCountRatio;

  public static final String JSON_PROPERTY_DIMENSION_COUNT_RATIO = "dimensionCountRatio";
  private Float dimensionCountRatio;

  public static final String JSON_PROPERTY_METRIC_ID = "metricId";
  private String metricId;

  public static final String JSON_PROPERTY_DATA = "data";
  private List<MetricSeries> data = new ArrayList<>();

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<String> warnings = null;

  public MetricSeriesCollection() { 
  }

  public MetricSeriesCollection appliedOptionalFilters(List<AppliedFilter> appliedOptionalFilters) {
    this.appliedOptionalFilters = appliedOptionalFilters;
    return this;
  }

  public MetricSeriesCollection addAppliedOptionalFiltersItem(AppliedFilter appliedOptionalFiltersItem) {
    if (this.appliedOptionalFilters == null) {
      this.appliedOptionalFilters = new ArrayList<>();
    }
    this.appliedOptionalFilters.add(appliedOptionalFiltersItem);
    return this;
  }

   /**
   * A list of filtered metric keys along with filters that have been applied to these keys, from the &#x60;optionalFilter&#x60; parameter.
   * @return appliedOptionalFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of filtered metric keys along with filters that have been applied to these keys, from the `optionalFilter` parameter.")
  @JsonProperty(JSON_PROPERTY_APPLIED_OPTIONAL_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AppliedFilter> getAppliedOptionalFilters() {
    return appliedOptionalFilters;
  }


  @JsonProperty(JSON_PROPERTY_APPLIED_OPTIONAL_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppliedOptionalFilters(List<AppliedFilter> appliedOptionalFilters) {
    this.appliedOptionalFilters = appliedOptionalFilters;
  }


  public MetricSeriesCollection dataPointCountRatio(Float dataPointCountRatio) {
    this.dataPointCountRatio = dataPointCountRatio;
    return this;
  }

   /**
   * The ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query.
   * @return dataPointCountRatio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query.")
  @JsonProperty(JSON_PROPERTY_DATA_POINT_COUNT_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getDataPointCountRatio() {
    return dataPointCountRatio;
  }


  @JsonProperty(JSON_PROPERTY_DATA_POINT_COUNT_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataPointCountRatio(Float dataPointCountRatio) {
    this.dataPointCountRatio = dataPointCountRatio;
  }


  public MetricSeriesCollection dimensionCountRatio(Float dimensionCountRatio) {
    this.dimensionCountRatio = dimensionCountRatio;
    return this;
  }

   /**
   * The ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.
   * @return dimensionCountRatio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.")
  @JsonProperty(JSON_PROPERTY_DIMENSION_COUNT_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getDimensionCountRatio() {
    return dimensionCountRatio;
  }


  @JsonProperty(JSON_PROPERTY_DIMENSION_COUNT_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDimensionCountRatio(Float dimensionCountRatio) {
    this.dimensionCountRatio = dimensionCountRatio;
  }


  public MetricSeriesCollection metricId(String metricId) {
    this.metricId = metricId;
    return this;
  }

   /**
   * The key of the metric.   If any transformation is applied, it is included here.
   * @return metricId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The key of the metric.   If any transformation is applied, it is included here.")
  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMetricId() {
    return metricId;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricId(String metricId) {
    this.metricId = metricId;
  }


  public MetricSeriesCollection data(List<MetricSeries> data) {
    this.data = data;
    return this;
  }

  public MetricSeriesCollection addDataItem(MetricSeries dataItem) {
    this.data.add(dataItem);
    return this;
  }

   /**
   * Data points of the metric.
   * @return data
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Data points of the metric.")
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MetricSeries> getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(List<MetricSeries> data) {
    this.data = data;
  }


  public MetricSeriesCollection warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public MetricSeriesCollection addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * A list of potential warnings that affect this ID. For example deprecated feature usage etc.
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of potential warnings that affect this ID. For example deprecated feature usage etc.")
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this MetricSeriesCollection object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricSeriesCollection metricSeriesCollection = (MetricSeriesCollection) o;
    return Objects.equals(this.appliedOptionalFilters, metricSeriesCollection.appliedOptionalFilters) &&
        Objects.equals(this.dataPointCountRatio, metricSeriesCollection.dataPointCountRatio) &&
        Objects.equals(this.dimensionCountRatio, metricSeriesCollection.dimensionCountRatio) &&
        Objects.equals(this.metricId, metricSeriesCollection.metricId) &&
        Objects.equals(this.data, metricSeriesCollection.data) &&
        Objects.equals(this.warnings, metricSeriesCollection.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedOptionalFilters, dataPointCountRatio, dimensionCountRatio, metricId, data, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricSeriesCollection {\n");
    sb.append("    appliedOptionalFilters: ").append(toIndentedString(appliedOptionalFilters)).append("\n");
    sb.append("    dataPointCountRatio: ").append(toIndentedString(dataPointCountRatio)).append("\n");
    sb.append("    dimensionCountRatio: ").append(toIndentedString(dimensionCountRatio)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

