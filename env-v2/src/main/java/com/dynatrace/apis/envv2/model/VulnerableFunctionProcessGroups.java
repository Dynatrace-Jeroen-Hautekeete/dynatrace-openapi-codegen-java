/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.VulnerableFunction;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A vulnerable function including its usage by specific process groups in context of the security problem.
 */
@ApiModel(description = "A vulnerable function including its usage by specific process groups in context of the security problem.")
@JsonPropertyOrder({
  VulnerableFunctionProcessGroups.JSON_PROPERTY_FUNCTION,
  VulnerableFunctionProcessGroups.JSON_PROPERTY_USAGE,
  VulnerableFunctionProcessGroups.JSON_PROPERTY_PROCESS_GROUPS_IN_USE,
  VulnerableFunctionProcessGroups.JSON_PROPERTY_PROCESS_GROUPS_NOT_IN_USE,
  VulnerableFunctionProcessGroups.JSON_PROPERTY_PROCESS_GROUPS_NOT_AVAILABLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class VulnerableFunctionProcessGroups {
  public static final String JSON_PROPERTY_FUNCTION = "function";
  private VulnerableFunction function;

  /**
   * The vulnerable function usage based on the given process groups: * IN_USE if at least one process group calls this vulnerable function. * NOT_IN_USE if all process groups do not call this vulnerable function. * NOT_AVAILABLE if vulnerable function usage could not be calculated for at least one process group and no process group calls this vulnerable function.
   */
  public enum UsageEnum {
    IN_USE("IN_USE"),
    
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    NOT_IN_USE("NOT_IN_USE");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UsageEnum fromValue(String value) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_USAGE = "usage";
  private UsageEnum usage;

  public static final String JSON_PROPERTY_PROCESS_GROUPS_IN_USE = "processGroupsInUse";
  private Set<String> processGroupsInUse = null;

  public static final String JSON_PROPERTY_PROCESS_GROUPS_NOT_IN_USE = "processGroupsNotInUse";
  private Set<String> processGroupsNotInUse = null;

  public static final String JSON_PROPERTY_PROCESS_GROUPS_NOT_AVAILABLE = "processGroupsNotAvailable";
  private Set<String> processGroupsNotAvailable = null;

  public VulnerableFunctionProcessGroups() { 
  }

  @JsonCreator
  public VulnerableFunctionProcessGroups(
    @JsonProperty(JSON_PROPERTY_USAGE) UsageEnum usage, 
    @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_IN_USE) Set<String> processGroupsInUse, 
    @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_NOT_IN_USE) Set<String> processGroupsNotInUse, 
    @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_NOT_AVAILABLE) Set<String> processGroupsNotAvailable
  ) {
  this();
    this.usage = usage;
    this.processGroupsInUse = processGroupsInUse;
    this.processGroupsNotInUse = processGroupsNotInUse;
    this.processGroupsNotAvailable = processGroupsNotAvailable;
  }

  public VulnerableFunctionProcessGroups function(VulnerableFunction function) {
    this.function = function;
    return this;
  }

   /**
   * Get function
   * @return function
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VulnerableFunction getFunction() {
    return function;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunction(VulnerableFunction function) {
    this.function = function;
  }


   /**
   * The vulnerable function usage based on the given process groups: * IN_USE if at least one process group calls this vulnerable function. * NOT_IN_USE if all process groups do not call this vulnerable function. * NOT_AVAILABLE if vulnerable function usage could not be calculated for at least one process group and no process group calls this vulnerable function.
   * @return usage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The vulnerable function usage based on the given process groups: * IN_USE if at least one process group calls this vulnerable function. * NOT_IN_USE if all process groups do not call this vulnerable function. * NOT_AVAILABLE if vulnerable function usage could not be calculated for at least one process group and no process group calls this vulnerable function.")
  @JsonProperty(JSON_PROPERTY_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UsageEnum getUsage() {
    return usage;
  }




   /**
   * The process group identifiers, where this vulnerable function is in use.
   * @return processGroupsInUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The process group identifiers, where this vulnerable function is in use.")
  @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_IN_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getProcessGroupsInUse() {
    return processGroupsInUse;
  }




   /**
   * The process group identifiers, where this vulnerable function is not in use.
   * @return processGroupsNotInUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The process group identifiers, where this vulnerable function is not in use.")
  @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_NOT_IN_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getProcessGroupsNotInUse() {
    return processGroupsNotInUse;
  }




   /**
   * The process group identifiers, where information about the usage of this function not available.
   * @return processGroupsNotAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The process group identifiers, where information about the usage of this function not available.")
  @JsonProperty(JSON_PROPERTY_PROCESS_GROUPS_NOT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getProcessGroupsNotAvailable() {
    return processGroupsNotAvailable;
  }




  /**
   * Return true if this VulnerableFunctionProcessGroups object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerableFunctionProcessGroups vulnerableFunctionProcessGroups = (VulnerableFunctionProcessGroups) o;
    return Objects.equals(this.function, vulnerableFunctionProcessGroups.function) &&
        Objects.equals(this.usage, vulnerableFunctionProcessGroups.usage) &&
        Objects.equals(this.processGroupsInUse, vulnerableFunctionProcessGroups.processGroupsInUse) &&
        Objects.equals(this.processGroupsNotInUse, vulnerableFunctionProcessGroups.processGroupsNotInUse) &&
        Objects.equals(this.processGroupsNotAvailable, vulnerableFunctionProcessGroups.processGroupsNotAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(function, usage, processGroupsInUse, processGroupsNotInUse, processGroupsNotAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerableFunctionProcessGroups {\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    processGroupsInUse: ").append(toIndentedString(processGroupsInUse)).append("\n");
    sb.append("    processGroupsNotInUse: ").append(toIndentedString(processGroupsNotInUse)).append("\n");
    sb.append("    processGroupsNotAvailable: ").append(toIndentedString(processGroupsNotAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

