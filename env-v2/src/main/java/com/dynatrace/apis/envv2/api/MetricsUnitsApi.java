/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.Unit;
import com.dynatrace.apis.envv2.model.UnitConversionResult;
import com.dynatrace.apis.envv2.model.UnitList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class MetricsUnitsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MetricsUnitsApi() {
    this(new ApiClient());
  }

  public MetricsUnitsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Lists all available units
   * You can narrow down the output by providing filter criteria in the **unitSelector** field.  
   * @param unitSelector Selects units to be included to the response. Available criteria:  * Compatibility: &#x60;compatibleTo(\&quot;unit\&quot;,\&quot;display-format\&quot;)&#x60;. Returns units that can be converted to the specified unit. The optional display format (&#x60;binary&#x60; or &#x60;decimal&#x60;) argument is supported by bit- and byte-based units and returns only units for the specified format. (optional)
   * @param fields Defines the list of properties to be included in the response. The ID of the unit is **always** included. The following additional properties are available:   * &#x60;displayName&#x60;: The display name of the unit.  * &#x60;symbol&#x60;: The symbol of the unit.  * &#x60;description&#x60;: A short description of the unit.  By default, the ID, the display name, and the symbol are included.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+description,-symbol&#x60;).  If you specify just one property, the response contains the unitId and the specified property. To return unit IDs only, specify &#x60;unitId&#x60; here. (optional)
   * @return UnitList
   * @throws ApiException if fails to make API call
   */
  public UnitList allUnits(String unitSelector, String fields) throws ApiException {
    ApiResponse<UnitList> localVarResponse = allUnitsWithHttpInfo(unitSelector, fields);
    return localVarResponse.getData();
  }

  /**
   * Lists all available units
   * You can narrow down the output by providing filter criteria in the **unitSelector** field.  
   * @param unitSelector Selects units to be included to the response. Available criteria:  * Compatibility: &#x60;compatibleTo(\&quot;unit\&quot;,\&quot;display-format\&quot;)&#x60;. Returns units that can be converted to the specified unit. The optional display format (&#x60;binary&#x60; or &#x60;decimal&#x60;) argument is supported by bit- and byte-based units and returns only units for the specified format. (optional)
   * @param fields Defines the list of properties to be included in the response. The ID of the unit is **always** included. The following additional properties are available:   * &#x60;displayName&#x60;: The display name of the unit.  * &#x60;symbol&#x60;: The symbol of the unit.  * &#x60;description&#x60;: A short description of the unit.  By default, the ID, the display name, and the symbol are included.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+description,-symbol&#x60;).  If you specify just one property, the response contains the unitId and the specified property. To return unit IDs only, specify &#x60;unitId&#x60; here. (optional)
   * @return ApiResponse&lt;UnitList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UnitList> allUnitsWithHttpInfo(String unitSelector, String fields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = allUnitsRequestBuilder(unitSelector, fields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("allUnits", localVarResponse);
        }
        return new ApiResponse<UnitList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UnitList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder allUnitsRequestBuilder(String unitSelector, String fields) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/units";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unitSelector", unitSelector));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Converts a value of the given source unit into a given target unit if specified, or finds an appropriate unit if no target is specified, respecting the preferred number format if specified.
   * 
   * @param unitId The ID of the source unit. (required)
   * @param value The value to be converted. (required)
   * @param targetUnit The ID of the target unit. (optional)
   * @param numberFormat The preferred number format. Only taken into account if no target unit is specified. (optional)
   * @return UnitConversionResult
   * @throws ApiException if fails to make API call
   */
  public UnitConversionResult convert(String unitId, Double value, String targetUnit, String numberFormat) throws ApiException {
    ApiResponse<UnitConversionResult> localVarResponse = convertWithHttpInfo(unitId, value, targetUnit, numberFormat);
    return localVarResponse.getData();
  }

  /**
   * Converts a value of the given source unit into a given target unit if specified, or finds an appropriate unit if no target is specified, respecting the preferred number format if specified.
   * 
   * @param unitId The ID of the source unit. (required)
   * @param value The value to be converted. (required)
   * @param targetUnit The ID of the target unit. (optional)
   * @param numberFormat The preferred number format. Only taken into account if no target unit is specified. (optional)
   * @return ApiResponse&lt;UnitConversionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UnitConversionResult> convertWithHttpInfo(String unitId, Double value, String targetUnit, String numberFormat) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = convertRequestBuilder(unitId, value, targetUnit, numberFormat);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("convert", localVarResponse);
        }
        return new ApiResponse<UnitConversionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UnitConversionResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder convertRequestBuilder(String unitId, Double value, String targetUnit, String numberFormat) throws ApiException {
    // verify the required parameter 'unitId' is set
    if (unitId == null) {
      throw new ApiException(400, "Missing the required parameter 'unitId' when calling convert");
    }
    // verify the required parameter 'value' is set
    if (value == null) {
      throw new ApiException(400, "Missing the required parameter 'value' when calling convert");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/units/{unitId}/convert"
        .replace("{unitId}", ApiClient.urlEncode(unitId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("value", value));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetUnit", targetUnit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("numberFormat", numberFormat));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the properties of the specified unit
   * 
   * @param unitId The ID of the required unit. (required)
   * @return Unit
   * @throws ApiException if fails to make API call
   */
  public Unit unit(String unitId) throws ApiException {
    ApiResponse<Unit> localVarResponse = unitWithHttpInfo(unitId);
    return localVarResponse.getData();
  }

  /**
   * Gets the properties of the specified unit
   * 
   * @param unitId The ID of the required unit. (required)
   * @return ApiResponse&lt;Unit&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Unit> unitWithHttpInfo(String unitId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unitRequestBuilder(unitId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unit", localVarResponse);
        }
        return new ApiResponse<Unit>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Unit>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unitRequestBuilder(String unitId) throws ApiException {
    // verify the required parameter 'unitId' is set
    if (unitId == null) {
      throw new ApiException(400, "Missing the required parameter 'unitId' when calling unit");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/units/{unitId}"
        .replace("{unitId}", ApiClient.urlEncode(unitId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
