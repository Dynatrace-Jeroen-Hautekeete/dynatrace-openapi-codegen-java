/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.BurnRateAlert;
import com.dynatrace.apis.envv2.model.StatusAlert;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * AbstractSloAlertDto
 */
@JsonPropertyOrder({
  AbstractSloAlertDto.JSON_PROPERTY_ALERT_NAME,
  AbstractSloAlertDto.JSON_PROPERTY_ALERT_THRESHOLD,
  AbstractSloAlertDto.JSON_PROPERTY_ALERT_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "alertType", // ignore manually set alertType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the alertType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "alertType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BurnRateAlert.class, name = "BURN_RATE"),
  @JsonSubTypes.Type(value = BurnRateAlert.class, name = "BurnRateAlert"),
  @JsonSubTypes.Type(value = StatusAlert.class, name = "STATUS"),
  @JsonSubTypes.Type(value = StatusAlert.class, name = "StatusAlert"),
})

public class AbstractSloAlertDto {
  public static final String JSON_PROPERTY_ALERT_NAME = "alertName";
  private String alertName;

  public static final String JSON_PROPERTY_ALERT_THRESHOLD = "alertThreshold";
  private Double alertThreshold;

  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;BURN_RATE&#x60; -&gt; BurnRateAlert  * &#x60;STATUS&#x60; -&gt; StatusAlert  
   */
  public enum AlertTypeEnum {
    BURN_RATE("BURN_RATE"),
    
    STATUS("STATUS");

    private String value;

    AlertTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AlertTypeEnum fromValue(String value) {
      for (AlertTypeEnum b : AlertTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ALERT_TYPE = "alertType";
  private AlertTypeEnum alertType;

  public AbstractSloAlertDto() { 
  }

  public AbstractSloAlertDto alertName(String alertName) {
    this.alertName = alertName;
    return this;
  }

   /**
   * Name of the alert.
   * @return alertName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Payment service availability burn rate alert", required = true, value = "Name of the alert.")
  @JsonProperty(JSON_PROPERTY_ALERT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAlertName() {
    return alertName;
  }


  @JsonProperty(JSON_PROPERTY_ALERT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAlertName(String alertName) {
    this.alertName = alertName;
  }


  public AbstractSloAlertDto alertThreshold(Double alertThreshold) {
    this.alertThreshold = alertThreshold;
    return this;
  }

   /**
   * Threshold of the alert. Status alerts trigger if they fall below this value, burn rate alerts trigger if they exceed the value.
   * @return alertThreshold
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10.0", required = true, value = "Threshold of the alert. Status alerts trigger if they fall below this value, burn rate alerts trigger if they exceed the value.")
  @JsonProperty(JSON_PROPERTY_ALERT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getAlertThreshold() {
    return alertThreshold;
  }


  @JsonProperty(JSON_PROPERTY_ALERT_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAlertThreshold(Double alertThreshold) {
    this.alertThreshold = alertThreshold;
  }


  public AbstractSloAlertDto alertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;BURN_RATE&#x60; -&gt; BurnRateAlert  * &#x60;STATUS&#x60; -&gt; StatusAlert  
   * @return alertType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `BURN_RATE` -> BurnRateAlert  * `STATUS` -> StatusAlert  ")
  @JsonProperty(JSON_PROPERTY_ALERT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AlertTypeEnum getAlertType() {
    return alertType;
  }


  @JsonProperty(JSON_PROPERTY_ALERT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAlertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
  }


  /**
   * Return true if this AbstractSloAlertDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractSloAlertDto abstractSloAlertDto = (AbstractSloAlertDto) o;
    return Objects.equals(this.alertName, abstractSloAlertDto.alertName) &&
        Objects.equals(this.alertThreshold, abstractSloAlertDto.alertThreshold) &&
        Objects.equals(this.alertType, abstractSloAlertDto.alertType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertName, alertThreshold, alertType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractSloAlertDto {\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    alertThreshold: ").append(toIndentedString(alertThreshold)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("BURN_RATE", BurnRateAlert.class);
  mappings.put("BurnRateAlert", BurnRateAlert.class);
  mappings.put("STATUS", StatusAlert.class);
  mappings.put("StatusAlert", StatusAlert.class);
  mappings.put("AbstractSloAlertDto", AbstractSloAlertDto.class);
  JSON.registerDiscriminator(AbstractSloAlertDto.class, "alertType", mappings);
}
}

