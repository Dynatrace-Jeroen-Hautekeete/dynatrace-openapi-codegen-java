/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.ActiveGateToken;
import com.dynatrace.apis.envv2.model.ActiveGateTokenCreate;
import com.dynatrace.apis.envv2.model.ActiveGateTokenCreated;
import com.dynatrace.apis.envv2.model.ActiveGateTokenList;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class AccessTokensActiveGateTokensApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AccessTokensActiveGateTokensApi() {
    this(new ApiClient());
  }

  public AccessTokensActiveGateTokensApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * The newly created token will be owned by the same user who owns the token used for authentication of the call.
   * @param activeGateTokenCreate The JSON body of the request. Contains parameters of the new ActiveGate token. (required)
   * @return ActiveGateTokenCreated
   * @throws ApiException if fails to make API call
   */
  public ActiveGateTokenCreated createToken(ActiveGateTokenCreate activeGateTokenCreate) throws ApiException {
    ApiResponse<ActiveGateTokenCreated> localVarResponse = createTokenWithHttpInfo(activeGateTokenCreate);
    return localVarResponse.getData();
  }

  /**
   * Creates a new ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * The newly created token will be owned by the same user who owns the token used for authentication of the call.
   * @param activeGateTokenCreate The JSON body of the request. Contains parameters of the new ActiveGate token. (required)
   * @return ApiResponse&lt;ActiveGateTokenCreated&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateTokenCreated> createTokenWithHttpInfo(ActiveGateTokenCreate activeGateTokenCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTokenRequestBuilder(activeGateTokenCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createToken", localVarResponse);
        }
        return new ApiResponse<ActiveGateTokenCreated>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateTokenCreated>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTokenRequestBuilder(ActiveGateTokenCreate activeGateTokenCreate) throws ApiException {
    // verify the required parameter 'activeGateTokenCreate' is set
    if (activeGateTokenCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateTokenCreate' when calling createToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGateTokens";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(activeGateTokenCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets metadata of an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * The token secret is **not** exposed.
   * @param activeGateTokenIdentifier The ActiveGate token identifier, consisting of [prefix and public part](https://dt-url.net/2903ss4) of the token. (required)
   * @return ActiveGateToken
   * @throws ApiException if fails to make API call
   */
  public ActiveGateToken getToken(String activeGateTokenIdentifier) throws ApiException {
    ApiResponse<ActiveGateToken> localVarResponse = getTokenWithHttpInfo(activeGateTokenIdentifier);
    return localVarResponse.getData();
  }

  /**
   * Gets metadata of an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * The token secret is **not** exposed.
   * @param activeGateTokenIdentifier The ActiveGate token identifier, consisting of [prefix and public part](https://dt-url.net/2903ss4) of the token. (required)
   * @return ApiResponse&lt;ActiveGateToken&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateToken> getTokenWithHttpInfo(String activeGateTokenIdentifier) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTokenRequestBuilder(activeGateTokenIdentifier);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getToken", localVarResponse);
        }
        return new ApiResponse<ActiveGateToken>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateToken>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTokenRequestBuilder(String activeGateTokenIdentifier) throws ApiException {
    // verify the required parameter 'activeGateTokenIdentifier' is set
    if (activeGateTokenIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateTokenIdentifier' when calling getToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGateTokens/{activeGateTokenIdentifier}"
        .replace("{activeGateTokenIdentifier}", ApiClient.urlEncode(activeGateTokenIdentifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists all available ActiveGate tokens | maturity&#x3D;EARLY_ADOPTER
   * You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of ActiveGate tokens in a single response payload.   The maximal allowed page size is 3000 and the minimal size is 100.   If not set, 100 is used. (optional)
   * @return ActiveGateTokenList
   * @throws ApiException if fails to make API call
   */
  public ActiveGateTokenList listTokens(String nextPageKey, Long pageSize) throws ApiException {
    ApiResponse<ActiveGateTokenList> localVarResponse = listTokensWithHttpInfo(nextPageKey, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Lists all available ActiveGate tokens | maturity&#x3D;EARLY_ADOPTER
   * You can limit the output by using pagination:  1. Specify the number of results per page in the **pageSize** query parameter.  2. Use the cursor from the **nextPageKey** field of the previous response in the **nextPageKey** query parameter to obtain subsequent pages.
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of ActiveGate tokens in a single response payload.   The maximal allowed page size is 3000 and the minimal size is 100.   If not set, 100 is used. (optional)
   * @return ApiResponse&lt;ActiveGateTokenList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActiveGateTokenList> listTokensWithHttpInfo(String nextPageKey, Long pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listTokensRequestBuilder(nextPageKey, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listTokens", localVarResponse);
        }
        return new ApiResponse<ActiveGateTokenList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActiveGateTokenList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listTokensRequestBuilder(String nextPageKey, Long pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGateTokens";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param activeGateTokenIdentifier The ActiveGate token identifier, consisting of [prefix and public part](https://dt-url.net/2903ss4) of the token to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  public void revokeToken(String activeGateTokenIdentifier) throws ApiException {
    revokeTokenWithHttpInfo(activeGateTokenIdentifier);
  }

  /**
   * Deletes an ActiveGate token | maturity&#x3D;EARLY_ADOPTER
   * 
   * @param activeGateTokenIdentifier The ActiveGate token identifier, consisting of [prefix and public part](https://dt-url.net/2903ss4) of the token to be deleted. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> revokeTokenWithHttpInfo(String activeGateTokenIdentifier) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeTokenRequestBuilder(activeGateTokenIdentifier);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeToken", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeTokenRequestBuilder(String activeGateTokenIdentifier) throws ApiException {
    // verify the required parameter 'activeGateTokenIdentifier' is set
    if (activeGateTokenIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'activeGateTokenIdentifier' when calling revokeToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGateTokens/{activeGateTokenIdentifier}"
        .replace("{activeGateTokenIdentifier}", ApiClient.urlEncode(activeGateTokenIdentifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
