/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.CredentialUsageHandler;
import com.dynatrace.apis.envv2.model.ExternalVaultConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Metadata of the credentials set.
 */
@ApiModel(description = "Metadata of the credentials set.")
@JsonPropertyOrder({
  CredentialsResponseElement.JSON_PROPERTY_NAME,
  CredentialsResponseElement.JSON_PROPERTY_ID,
  CredentialsResponseElement.JSON_PROPERTY_DESCRIPTION,
  CredentialsResponseElement.JSON_PROPERTY_OWNER,
  CredentialsResponseElement.JSON_PROPERTY_OWNER_ACCESS_ONLY,
  CredentialsResponseElement.JSON_PROPERTY_SCOPE,
  CredentialsResponseElement.JSON_PROPERTY_EXTERNAL_VAULT,
  CredentialsResponseElement.JSON_PROPERTY_CREDENTIAL_USAGE_SUMMARY,
  CredentialsResponseElement.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class CredentialsResponseElement {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;

  public static final String JSON_PROPERTY_OWNER_ACCESS_ONLY = "ownerAccessOnly";
  private Boolean ownerAccessOnly;

  /**
   * The scope of the credentials set.
   */
  public enum ScopeEnum {
    ALL("ALL"),
    
    EXTENSION("EXTENSION"),
    
    SYNTHETIC("SYNTHETIC"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private ScopeEnum scope;

  public static final String JSON_PROPERTY_EXTERNAL_VAULT = "externalVault";
  private ExternalVaultConfig externalVault;

  public static final String JSON_PROPERTY_CREDENTIAL_USAGE_SUMMARY = "credentialUsageSummary";
  private List<CredentialUsageHandler> credentialUsageSummary = new ArrayList<>();

  /**
   * The type of the credentials set.
   */
  public enum TypeEnum {
    CERTIFICATE("CERTIFICATE"),
    
    PUBLIC_CERTIFICATE("PUBLIC_CERTIFICATE"),
    
    TOKEN("TOKEN"),
    
    UNKNOWN("UNKNOWN"),
    
    USERNAME_PASSWORD("USERNAME_PASSWORD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public CredentialsResponseElement() { 
  }

  public CredentialsResponseElement name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the credentials set.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the credentials set.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CredentialsResponseElement id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the credentials set.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the credentials set.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public CredentialsResponseElement description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the credentials set.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A short description of the credentials set.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CredentialsResponseElement owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the credential (user for which used API token was created).
   * @return owner
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the credential (user for which used API token was created).")
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwner() {
    return owner;
  }


  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwner(String owner) {
    this.owner = owner;
  }


  public CredentialsResponseElement ownerAccessOnly(Boolean ownerAccessOnly) {
    this.ownerAccessOnly = ownerAccessOnly;
    return this;
  }

   /**
   * Flag indicating that this credential is visible only to the owner.
   * @return ownerAccessOnly
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Flag indicating that this credential is visible only to the owner.")
  @JsonProperty(JSON_PROPERTY_OWNER_ACCESS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getOwnerAccessOnly() {
    return ownerAccessOnly;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ACCESS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerAccessOnly(Boolean ownerAccessOnly) {
    this.ownerAccessOnly = ownerAccessOnly;
  }


  public CredentialsResponseElement scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the credentials set.
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The scope of the credentials set.")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScopeEnum getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public CredentialsResponseElement externalVault(ExternalVaultConfig externalVault) {
    this.externalVault = externalVault;
    return this;
  }

   /**
   * Get externalVault
   * @return externalVault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_VAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExternalVaultConfig getExternalVault() {
    return externalVault;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_VAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalVault(ExternalVaultConfig externalVault) {
    this.externalVault = externalVault;
  }


  public CredentialsResponseElement credentialUsageSummary(List<CredentialUsageHandler> credentialUsageSummary) {
    this.credentialUsageSummary = credentialUsageSummary;
    return this;
  }

  public CredentialsResponseElement addCredentialUsageSummaryItem(CredentialUsageHandler credentialUsageSummaryItem) {
    this.credentialUsageSummary.add(credentialUsageSummaryItem);
    return this;
  }

   /**
   * The list contains summary data related to the use of credentials.
   * @return credentialUsageSummary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list contains summary data related to the use of credentials.")
  @JsonProperty(JSON_PROPERTY_CREDENTIAL_USAGE_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CredentialUsageHandler> getCredentialUsageSummary() {
    return credentialUsageSummary;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIAL_USAGE_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCredentialUsageSummary(List<CredentialUsageHandler> credentialUsageSummary) {
    this.credentialUsageSummary = credentialUsageSummary;
  }


  public CredentialsResponseElement type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the credentials set.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the credentials set.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this CredentialsResponseElement object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialsResponseElement credentialsResponseElement = (CredentialsResponseElement) o;
    return Objects.equals(this.name, credentialsResponseElement.name) &&
        Objects.equals(this.id, credentialsResponseElement.id) &&
        Objects.equals(this.description, credentialsResponseElement.description) &&
        Objects.equals(this.owner, credentialsResponseElement.owner) &&
        Objects.equals(this.ownerAccessOnly, credentialsResponseElement.ownerAccessOnly) &&
        Objects.equals(this.scope, credentialsResponseElement.scope) &&
        Objects.equals(this.externalVault, credentialsResponseElement.externalVault) &&
        Objects.equals(this.credentialUsageSummary, credentialsResponseElement.credentialUsageSummary) &&
        Objects.equals(this.type, credentialsResponseElement.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, description, owner, ownerAccessOnly, scope, externalVault, credentialUsageSummary, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialsResponseElement {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownerAccessOnly: ").append(toIndentedString(ownerAccessOnly)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    externalVault: ").append(toIndentedString(externalVault)).append("\n");
    sb.append("    credentialUsageSummary: ").append(toIndentedString(credentialUsageSummary)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

