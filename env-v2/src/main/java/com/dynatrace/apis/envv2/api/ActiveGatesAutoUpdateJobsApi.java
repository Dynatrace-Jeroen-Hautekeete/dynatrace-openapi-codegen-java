/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.UpdateJob;
import com.dynatrace.apis.envv2.model.UpdateJobList;
import com.dynatrace.apis.envv2.model.UpdateJobsAll;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class ActiveGatesAutoUpdateJobsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ActiveGatesAutoUpdateJobsApi() {
    this(new ApiClient());
  }

  public ActiveGatesAutoUpdateJobsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new update job for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param updateJob JSON body of the request, containing update-job parameters. (required)
   * @return UpdateJob
   * @throws ApiException if fails to make API call
   */
  public UpdateJob createUpdateJobForAg(String agId, UpdateJob updateJob) throws ApiException {
    ApiResponse<UpdateJob> localVarResponse = createUpdateJobForAgWithHttpInfo(agId, updateJob);
    return localVarResponse.getData();
  }

  /**
   * Creates a new update job for the specified ActiveGate
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param updateJob JSON body of the request, containing update-job parameters. (required)
   * @return ApiResponse&lt;UpdateJob&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateJob> createUpdateJobForAgWithHttpInfo(String agId, UpdateJob updateJob) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUpdateJobForAgRequestBuilder(agId, updateJob);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createUpdateJobForAg", localVarResponse);
        }
        return new ApiResponse<UpdateJob>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateJob>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUpdateJobForAgRequestBuilder(String agId, UpdateJob updateJob) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling createUpdateJobForAg");
    }
    // verify the required parameter 'updateJob' is set
    if (updateJob == null) {
      throw new ApiException(400, "Missing the required parameter 'updateJob' when calling createUpdateJobForAg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/updateJobs"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateJob);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified update job
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param jobId A unique identifier for a update-job of ActiveGate. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteUpdateJobByJobIdForAg(String agId, String jobId) throws ApiException {
    deleteUpdateJobByJobIdForAgWithHttpInfo(agId, jobId);
  }

  /**
   * Deletes the specified update job
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param jobId A unique identifier for a update-job of ActiveGate. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteUpdateJobByJobIdForAgWithHttpInfo(String agId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUpdateJobByJobIdForAgRequestBuilder(agId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteUpdateJobByJobIdForAg", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUpdateJobByJobIdForAgRequestBuilder(String agId, String jobId) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling deleteUpdateJobByJobIdForAg");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling deleteUpdateJobByJobIdForAg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/updateJobs/{jobId}"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List ActiveGates with update jobs
   * The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
   * @param from The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)
   * @param to The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param startVersionCompareType Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param startVersion Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param updateType Filters the resulting set of update-jobs by the update type. (optional)
   * @param targetVersionCompareType Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param targetVersion Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param lastUpdates If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type. (optional, default to false)
   * @return UpdateJobsAll
   * @throws ApiException if fails to make API call
   */
  public UpdateJobsAll getAllUpdateJobList(String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {
    ApiResponse<UpdateJobsAll> localVarResponse = getAllUpdateJobListWithHttpInfo(from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion, lastUpdates);
    return localVarResponse.getData();
  }

  /**
   * List ActiveGates with update jobs
   * The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
   * @param from The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one day is used (&#x60;now-1d&#x60;).   Maximum timeframe is 31 days. (optional)
   * @param to The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param startVersionCompareType Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param startVersion Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param updateType Filters the resulting set of update-jobs by the update type. (optional)
   * @param targetVersionCompareType Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param targetVersion Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param lastUpdates If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type. (optional, default to false)
   * @return ApiResponse&lt;UpdateJobsAll&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateJobsAll> getAllUpdateJobListWithHttpInfo(String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllUpdateJobListRequestBuilder(from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion, lastUpdates);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllUpdateJobList", localVarResponse);
        }
        return new ApiResponse<UpdateJobsAll>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateJobsAll>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllUpdateJobListRequestBuilder(String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/updateJobs";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startVersionCompareType", startVersionCompareType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startVersion", startVersion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateType", updateType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetVersionCompareType", targetVersionCompareType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetVersion", targetVersion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastUpdates", lastUpdates));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the parameters of the specified update job
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param jobId A unique identifier for a update-job of ActiveGate. (required)
   * @return UpdateJob
   * @throws ApiException if fails to make API call
   */
  public UpdateJob getUpdateJobByJobIdForAg(String agId, String jobId) throws ApiException {
    ApiResponse<UpdateJob> localVarResponse = getUpdateJobByJobIdForAgWithHttpInfo(agId, jobId);
    return localVarResponse.getData();
  }

  /**
   * Gets the parameters of the specified update job
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param jobId A unique identifier for a update-job of ActiveGate. (required)
   * @return ApiResponse&lt;UpdateJob&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateJob> getUpdateJobByJobIdForAgWithHttpInfo(String agId, String jobId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUpdateJobByJobIdForAgRequestBuilder(agId, jobId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUpdateJobByJobIdForAg", localVarResponse);
        }
        return new ApiResponse<UpdateJob>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateJob>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUpdateJobByJobIdForAgRequestBuilder(String agId, String jobId) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling getUpdateJobByJobIdForAg");
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      throw new ApiException(400, "Missing the required parameter 'jobId' when calling getUpdateJobByJobIdForAg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/updateJobs/{jobId}"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()))
        .replace("{jobId}", ApiClient.urlEncode(jobId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Lists update jobs for the specified ActiveGate
   * The job can update the ActiveGate to the specified version or the latest available one.
   * @param agId The ID of the required ActiveGate. (required)
   * @param from The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)
   * @param to The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param startVersionCompareType Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param startVersion Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param updateType Filters the resulting set of update-jobs by the update type. (optional)
   * @param targetVersionCompareType Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param targetVersion Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param lastUpdates If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type. (optional, default to false)
   * @return UpdateJobList
   * @throws ApiException if fails to make API call
   */
  public UpdateJobList getUpdateJobListByAgId(String agId, String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {
    ApiResponse<UpdateJobList> localVarResponse = getUpdateJobListByAgIdWithHttpInfo(agId, from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion, lastUpdates);
    return localVarResponse.getData();
  }

  /**
   * Lists update jobs for the specified ActiveGate
   * The job can update the ActiveGate to the specified version or the latest available one.
   * @param agId The ID of the required ActiveGate. (required)
   * @param from The start of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of one week is used (&#x60;now-1w&#x60;).   Maximum timeframe is 31 days. (optional)
   * @param to The end of the requested timeframe for update jobs.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param startVersionCompareType Filters the resulting set of update jobs by the specified initial version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param startVersion Filters the resulting set of update-jobs by the initial version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param updateType Filters the resulting set of update-jobs by the update type. (optional)
   * @param targetVersionCompareType Filters the resulting set of update jobs by the specified target version.    Specify the comparison operator here. (optional, default to EQUAL)
   * @param targetVersion Filters the resulting set of update-jobs by the target version (required format &#x60;&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;&#x60;). (optional)
   * @param lastUpdates If &#x60;true&#x60;, filters the resulting set of update jobs to the most recent update of each type. (optional, default to false)
   * @return ApiResponse&lt;UpdateJobList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateJobList> getUpdateJobListByAgIdWithHttpInfo(String agId, String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUpdateJobListByAgIdRequestBuilder(agId, from, to, startVersionCompareType, startVersion, updateType, targetVersionCompareType, targetVersion, lastUpdates);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUpdateJobListByAgId", localVarResponse);
        }
        return new ApiResponse<UpdateJobList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateJobList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUpdateJobListByAgIdRequestBuilder(String agId, String from, String to, String startVersionCompareType, String startVersion, String updateType, String targetVersionCompareType, String targetVersion, Boolean lastUpdates) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling getUpdateJobListByAgId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/updateJobs"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startVersionCompareType", startVersionCompareType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startVersion", startVersion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateType", updateType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetVersionCompareType", targetVersionCompareType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetVersion", targetVersion));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastUpdates", lastUpdates));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param updateJob JSON body of the request, containing update-job parameters. (required)
   * @throws ApiException if fails to make API call
   */
  public void validateUpdateJobForAg(String agId, UpdateJob updateJob) throws ApiException {
    validateUpdateJobForAgWithHttpInfo(agId, updateJob);
  }

  /**
   * Validates the payload for the &#x60;POST /activeGates/{agId}/updateJobs&#x60; request.
   * 
   * @param agId The ID of the required ActiveGate. (required)
   * @param updateJob JSON body of the request, containing update-job parameters. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> validateUpdateJobForAgWithHttpInfo(String agId, UpdateJob updateJob) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = validateUpdateJobForAgRequestBuilder(agId, updateJob);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("validateUpdateJobForAg", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder validateUpdateJobForAgRequestBuilder(String agId, UpdateJob updateJob) throws ApiException {
    // verify the required parameter 'agId' is set
    if (agId == null) {
      throw new ApiException(400, "Missing the required parameter 'agId' when calling validateUpdateJobForAg");
    }
    // verify the required parameter 'updateJob' is set
    if (updateJob == null) {
      throw new ApiException(400, "Missing the required parameter 'updateJob' when calling validateUpdateJobForAg");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/activeGates/{agId}/updateJobs/validator"
        .replace("{agId}", ApiClient.urlEncode(agId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateJob);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
