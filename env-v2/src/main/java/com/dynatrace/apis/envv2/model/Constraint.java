/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A constraint on the values accepted for a settings property.
 */
@ApiModel(description = "A constraint on the values accepted for a settings property.")
@JsonPropertyOrder({
  Constraint.JSON_PROPERTY_MAX_LENGTH,
  Constraint.JSON_PROPERTY_MIN_LENGTH,
  Constraint.JSON_PROPERTY_CUSTOM_MESSAGE,
  Constraint.JSON_PROPERTY_CUSTOM_VALIDATOR_ID,
  Constraint.JSON_PROPERTY_UNIQUE_PROPERTIES,
  Constraint.JSON_PROPERTY_MAXIMUM,
  Constraint.JSON_PROPERTY_MINIMUM,
  Constraint.JSON_PROPERTY_TYPE,
  Constraint.JSON_PROPERTY_PATTERN
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class Constraint {
  public static final String JSON_PROPERTY_MAX_LENGTH = "maxLength";
  private Integer maxLength;

  public static final String JSON_PROPERTY_MIN_LENGTH = "minLength";
  private Integer minLength;

  public static final String JSON_PROPERTY_CUSTOM_MESSAGE = "customMessage";
  private String customMessage;

  public static final String JSON_PROPERTY_CUSTOM_VALIDATOR_ID = "customValidatorId";
  private String customValidatorId;

  public static final String JSON_PROPERTY_UNIQUE_PROPERTIES = "uniqueProperties";
  private List<String> uniqueProperties = null;

  public static final String JSON_PROPERTY_MAXIMUM = "maximum";
  private BigDecimal maximum;

  public static final String JSON_PROPERTY_MINIMUM = "minimum";
  private BigDecimal minimum;

  /**
   * The type of the constraint.
   */
  public enum TypeEnum {
    CUSTOM_VALIDATOR_REF("CUSTOM_VALIDATOR_REF"),
    
    LENGTH("LENGTH"),
    
    NOT_BLANK("NOT_BLANK"),
    
    NOT_EMPTY("NOT_EMPTY"),
    
    NO_WHITESPACE("NO_WHITESPACE"),
    
    PATTERN("PATTERN"),
    
    RANGE("RANGE"),
    
    REGEX("REGEX"),
    
    TRIMMED("TRIMMED"),
    
    UNIQUE("UNIQUE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_PATTERN = "pattern";
  private String pattern;

  public Constraint() { 
  }

  public Constraint maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

   /**
   * The maximum allowed length of string values.
   * @return maxLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The maximum allowed length of string values.")
  @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxLength() {
    return maxLength;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public Constraint minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

   /**
   * The minimum required length of string values.
   * @return minLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7", value = "The minimum required length of string values.")
  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinLength() {
    return minLength;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public Constraint customMessage(String customMessage) {
    this.customMessage = customMessage;
    return this;
  }

   /**
   * A custom message for invalid values.
   * @return customMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "customConstraintMessage", value = "A custom message for invalid values.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomMessage() {
    return customMessage;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }


  public Constraint customValidatorId(String customValidatorId) {
    this.customValidatorId = customValidatorId;
    return this;
  }

   /**
   * The ID of a custom validator.
   * @return customValidatorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-min-max", value = "The ID of a custom validator.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_VALIDATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomValidatorId() {
    return customValidatorId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_VALIDATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomValidatorId(String customValidatorId) {
    this.customValidatorId = customValidatorId;
  }


  public Constraint uniqueProperties(List<String> uniqueProperties) {
    this.uniqueProperties = uniqueProperties;
    return this;
  }

  public Constraint addUniquePropertiesItem(String uniquePropertiesItem) {
    if (this.uniqueProperties == null) {
      this.uniqueProperties = new ArrayList<>();
    }
    this.uniqueProperties.add(uniquePropertiesItem);
    return this;
  }

   /**
   * A list of properties for which the combination of values must be unique.
   * @return uniqueProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"my-prop-1\",\"my-prop-2\"]", value = "A list of properties for which the combination of values must be unique.")
  @JsonProperty(JSON_PROPERTY_UNIQUE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUniqueProperties() {
    return uniqueProperties;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueProperties(List<String> uniqueProperties) {
    this.uniqueProperties = uniqueProperties;
  }


  public Constraint maximum(BigDecimal maximum) {
    this.maximum = maximum;
    return this;
  }

   /**
   * The maximum allowed value.
   * @return maximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "The maximum allowed value.")
  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaximum() {
    return maximum;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximum(BigDecimal maximum) {
    this.maximum = maximum;
  }


  public Constraint minimum(BigDecimal minimum) {
    this.minimum = minimum;
    return this;
  }

   /**
   * The minimum allowed value.
   * @return minimum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The minimum allowed value.")
  @JsonProperty(JSON_PROPERTY_MINIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimum() {
    return minimum;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimum(BigDecimal minimum) {
    this.minimum = minimum;
  }


  public Constraint type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the constraint.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "UNKNOWN", required = true, value = "The type of the constraint.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Constraint pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * The regular expression pattern for valid string values.
   * @return pattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "^([a-z]|[0-9]|\\-|\\_|\\+|\\.)+\\@([a-z]|[0-9]|-){2,}\\.([a-z]|[0-9]|-){2,}(\\.[a-z]{2,})?$", value = "The regular expression pattern for valid string values.")
  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPattern() {
    return pattern;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  /**
   * Return true if this Constraint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Constraint constraint = (Constraint) o;
    return Objects.equals(this.maxLength, constraint.maxLength) &&
        Objects.equals(this.minLength, constraint.minLength) &&
        Objects.equals(this.customMessage, constraint.customMessage) &&
        Objects.equals(this.customValidatorId, constraint.customValidatorId) &&
        Objects.equals(this.uniqueProperties, constraint.uniqueProperties) &&
        Objects.equals(this.maximum, constraint.maximum) &&
        Objects.equals(this.minimum, constraint.minimum) &&
        Objects.equals(this.type, constraint.type) &&
        Objects.equals(this.pattern, constraint.pattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxLength, minLength, customMessage, customValidatorId, uniqueProperties, maximum, minimum, type, pattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Constraint {\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    customValidatorId: ").append(toIndentedString(customValidatorId)).append("\n");
    sb.append("    uniqueProperties: ").append(toIndentedString(uniqueProperties)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

