/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.VulnerableFunction;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The vulnerable functions of a process group including their usage.
 */
@ApiModel(description = "The vulnerable functions of a process group including their usage.")
@JsonPropertyOrder({
  ProcessGroupVulnerableFunctions.JSON_PROPERTY_PROCESS_GROUP,
  ProcessGroupVulnerableFunctions.JSON_PROPERTY_FUNCTIONS_IN_USE,
  ProcessGroupVulnerableFunctions.JSON_PROPERTY_FUNCTIONS_NOT_IN_USE,
  ProcessGroupVulnerableFunctions.JSON_PROPERTY_FUNCTIONS_NOT_AVAILABLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class ProcessGroupVulnerableFunctions {
  public static final String JSON_PROPERTY_PROCESS_GROUP = "processGroup";
  private String processGroup;

  public static final String JSON_PROPERTY_FUNCTIONS_IN_USE = "functionsInUse";
  private List<VulnerableFunction> functionsInUse = null;

  public static final String JSON_PROPERTY_FUNCTIONS_NOT_IN_USE = "functionsNotInUse";
  private List<VulnerableFunction> functionsNotInUse = null;

  public static final String JSON_PROPERTY_FUNCTIONS_NOT_AVAILABLE = "functionsNotAvailable";
  private List<VulnerableFunction> functionsNotAvailable = null;

  public ProcessGroupVulnerableFunctions() { 
  }

  @JsonCreator
  public ProcessGroupVulnerableFunctions(
    @JsonProperty(JSON_PROPERTY_PROCESS_GROUP) String processGroup, 
    @JsonProperty(JSON_PROPERTY_FUNCTIONS_IN_USE) List<VulnerableFunction> functionsInUse, 
    @JsonProperty(JSON_PROPERTY_FUNCTIONS_NOT_IN_USE) List<VulnerableFunction> functionsNotInUse, 
    @JsonProperty(JSON_PROPERTY_FUNCTIONS_NOT_AVAILABLE) List<VulnerableFunction> functionsNotAvailable
  ) {
  this();
    this.processGroup = processGroup;
    this.functionsInUse = functionsInUse;
    this.functionsNotInUse = functionsNotInUse;
    this.functionsNotAvailable = functionsNotAvailable;
  }

   /**
   * The process group identifier.
   * @return processGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The process group identifier.")
  @JsonProperty(JSON_PROPERTY_PROCESS_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessGroup() {
    return processGroup;
  }




   /**
   * A list of vulnerable functions in use.
   * @return functionsInUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of vulnerable functions in use.")
  @JsonProperty(JSON_PROPERTY_FUNCTIONS_IN_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VulnerableFunction> getFunctionsInUse() {
    return functionsInUse;
  }




   /**
   * A list of vulnerable functions not in use.
   * @return functionsNotInUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of vulnerable functions not in use.")
  @JsonProperty(JSON_PROPERTY_FUNCTIONS_NOT_IN_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VulnerableFunction> getFunctionsNotInUse() {
    return functionsNotInUse;
  }




   /**
   * A list of vulnerable functions with unknown state.
   * @return functionsNotAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of vulnerable functions with unknown state.")
  @JsonProperty(JSON_PROPERTY_FUNCTIONS_NOT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VulnerableFunction> getFunctionsNotAvailable() {
    return functionsNotAvailable;
  }




  /**
   * Return true if this ProcessGroupVulnerableFunctions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessGroupVulnerableFunctions processGroupVulnerableFunctions = (ProcessGroupVulnerableFunctions) o;
    return Objects.equals(this.processGroup, processGroupVulnerableFunctions.processGroup) &&
        Objects.equals(this.functionsInUse, processGroupVulnerableFunctions.functionsInUse) &&
        Objects.equals(this.functionsNotInUse, processGroupVulnerableFunctions.functionsNotInUse) &&
        Objects.equals(this.functionsNotAvailable, processGroupVulnerableFunctions.functionsNotAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processGroup, functionsInUse, functionsNotInUse, functionsNotAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessGroupVulnerableFunctions {\n");
    sb.append("    processGroup: ").append(toIndentedString(processGroup)).append("\n");
    sb.append("    functionsInUse: ").append(toIndentedString(functionsInUse)).append("\n");
    sb.append("    functionsNotInUse: ").append(toIndentedString(functionsNotInUse)).append("\n");
    sb.append("    functionsNotAvailable: ").append(toIndentedString(functionsNotAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

