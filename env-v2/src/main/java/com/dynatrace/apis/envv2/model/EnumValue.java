/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An allowed value for an enum property.
 */
@ApiModel(description = "An allowed value for an enum property.")
@JsonPropertyOrder({
  EnumValue.JSON_PROPERTY_ENUM_INSTANCE,
  EnumValue.JSON_PROPERTY_DISPLAY_NAME,
  EnumValue.JSON_PROPERTY_ICON,
  EnumValue.JSON_PROPERTY_VALUE,
  EnumValue.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class EnumValue {
  public static final String JSON_PROPERTY_ENUM_INSTANCE = "enumInstance";
  private String enumInstance;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_ICON = "icon";
  private String icon;

  public static final String JSON_PROPERTY_VALUE = "value";
  private Object value;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public EnumValue() { 
  }

  public EnumValue enumInstance(String enumInstance) {
    this.enumInstance = enumInstance;
    return this;
  }

   /**
   * The name of the value in an existing Java enum class.
   * @return enumInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "exampleJavaEnumValue", value = "The name of the value in an existing Java enum class.")
  @JsonProperty(JSON_PROPERTY_ENUM_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnumInstance() {
    return enumInstance;
  }


  @JsonProperty(JSON_PROPERTY_ENUM_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnumInstance(String enumInstance) {
    this.enumInstance = enumInstance;
  }


  public EnumValue displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the value.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "exampleDisplayName", required = true, value = "The display name of the value.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EnumValue icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * The icon of the value.
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "checkmark", value = "The icon of the value.")
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(String icon) {
    this.icon = icon;
  }


  public EnumValue value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * The allowed value of the enum.
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "exampleValue", required = true, value = "The allowed value of the enum.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(Object value) {
    this.value = value;
  }


  public EnumValue description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A short description of the value.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "exampleDescription", value = "A short description of the value.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Return true if this EnumValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumValue enumValue = (EnumValue) o;
    return Objects.equals(this.enumInstance, enumValue.enumInstance) &&
        Objects.equals(this.displayName, enumValue.displayName) &&
        Objects.equals(this.icon, enumValue.icon) &&
        Objects.equals(this.value, enumValue.value) &&
        Objects.equals(this.description, enumValue.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enumInstance, displayName, icon, value, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumValue {\n");
    sb.append("    enumInstance: ").append(toIndentedString(enumInstance)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

