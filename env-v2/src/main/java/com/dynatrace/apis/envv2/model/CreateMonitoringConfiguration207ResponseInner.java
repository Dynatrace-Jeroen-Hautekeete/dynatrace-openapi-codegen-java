/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.Error;
import com.dynatrace.apis.envv2.model.ErrorEnvelope;
import com.dynatrace.apis.envv2.model.MonitoringConfigurationResponse;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.dynatrace.apis.envv2.JSON;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonDeserialize(using=CreateMonitoringConfiguration207ResponseInner.CreateMonitoringConfiguration207ResponseInnerDeserializer.class)
@JsonSerialize(using = CreateMonitoringConfiguration207ResponseInner.CreateMonitoringConfiguration207ResponseInnerSerializer.class)
public class CreateMonitoringConfiguration207ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateMonitoringConfiguration207ResponseInner.class.getName());

    public static class CreateMonitoringConfiguration207ResponseInnerSerializer extends StdSerializer<CreateMonitoringConfiguration207ResponseInner> {
        public CreateMonitoringConfiguration207ResponseInnerSerializer(Class<CreateMonitoringConfiguration207ResponseInner> t) {
            super(t);
        }

        public CreateMonitoringConfiguration207ResponseInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(CreateMonitoringConfiguration207ResponseInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class CreateMonitoringConfiguration207ResponseInnerDeserializer extends StdDeserializer<CreateMonitoringConfiguration207ResponseInner> {
        public CreateMonitoringConfiguration207ResponseInnerDeserializer() {
            this(CreateMonitoringConfiguration207ResponseInner.class);
        }

        public CreateMonitoringConfiguration207ResponseInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public CreateMonitoringConfiguration207ResponseInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize ErrorEnvelope
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ErrorEnvelope.class);
                CreateMonitoringConfiguration207ResponseInner ret = new CreateMonitoringConfiguration207ResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'CreateMonitoringConfiguration207ResponseInner'", e);
            }

            // deserialize MonitoringConfigurationResponse
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(MonitoringConfigurationResponse.class);
                CreateMonitoringConfiguration207ResponseInner ret = new CreateMonitoringConfiguration207ResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'CreateMonitoringConfiguration207ResponseInner'", e);
            }

            throw new IOException(String.format("Failed deserialization for CreateMonitoringConfiguration207ResponseInner: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public CreateMonitoringConfiguration207ResponseInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "CreateMonitoringConfiguration207ResponseInner cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateMonitoringConfiguration207ResponseInner() {
        super("anyOf", Boolean.FALSE);
    }

    public CreateMonitoringConfiguration207ResponseInner(ErrorEnvelope o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateMonitoringConfiguration207ResponseInner(MonitoringConfigurationResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ErrorEnvelope", ErrorEnvelope.class);
        schemas.put("MonitoringConfigurationResponse", MonitoringConfigurationResponse.class);
        JSON.registerDescendants(CreateMonitoringConfiguration207ResponseInner.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateMonitoringConfiguration207ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ErrorEnvelope, MonitoringConfigurationResponse
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ErrorEnvelope.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(MonitoringConfigurationResponse.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ErrorEnvelope, MonitoringConfigurationResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * ErrorEnvelope, MonitoringConfigurationResponse
     *
     * @return The actual instance (ErrorEnvelope, MonitoringConfigurationResponse)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ErrorEnvelope`. If the actual instance is not `ErrorEnvelope`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorEnvelope`
     * @throws ClassCastException if the instance is not `ErrorEnvelope`
     */
    public ErrorEnvelope getErrorEnvelope() throws ClassCastException {
        return (ErrorEnvelope)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MonitoringConfigurationResponse`. If the actual instance is not `MonitoringConfigurationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MonitoringConfigurationResponse`
     * @throws ClassCastException if the instance is not `MonitoringConfigurationResponse`
     */
    public MonitoringConfigurationResponse getMonitoringConfigurationResponse() throws ClassCastException {
        return (MonitoringConfigurationResponse)super.getActualInstance();
    }

}

