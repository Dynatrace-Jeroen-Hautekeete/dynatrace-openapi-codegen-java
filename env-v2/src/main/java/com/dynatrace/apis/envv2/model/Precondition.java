/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A precondition for visibility of a property.
 */
@ApiModel(description = "A precondition for visibility of a property.")
@JsonPropertyOrder({
  Precondition.JSON_PROPERTY_EXPECTED_VALUE,
  Precondition.JSON_PROPERTY_EXPECTED_VALUES,
  Precondition.JSON_PROPERTY_PRECONDITION,
  Precondition.JSON_PROPERTY_PRECONDITIONS,
  Precondition.JSON_PROPERTY_PROPERTY,
  Precondition.JSON_PROPERTY_TYPE,
  Precondition.JSON_PROPERTY_PATTERN
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class Precondition {
  public static final String JSON_PROPERTY_EXPECTED_VALUE = "expectedValue";
  private Object expectedValue;

  public static final String JSON_PROPERTY_EXPECTED_VALUES = "expectedValues";
  private List<Object> expectedValues = null;

  public static final String JSON_PROPERTY_PRECONDITION = "precondition";
  private Precondition precondition;

  public static final String JSON_PROPERTY_PRECONDITIONS = "preconditions";
  private List<Precondition> preconditions = null;

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private String property;

  /**
   * The type of the precondition.
   */
  public enum TypeEnum {
    AND("AND"),
    
    EQUALS("EQUALS"),
    
    IN("IN"),
    
    NOT("NOT"),
    
    NULL("NULL"),
    
    OR("OR"),
    
    REGEX_MATCH("REGEX_MATCH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_PATTERN = "pattern";
  private String pattern;

  public Precondition() { 
  }

  public Precondition expectedValue(Object expectedValue) {
    this.expectedValue = expectedValue;
    return this;
  }

   /**
   * The expected value of the property.   Only applicable to properties of the &#x60;EQUALS&#x60; type.
   * @return expectedValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "expectedValue", value = "The expected value of the property.   Only applicable to properties of the `EQUALS` type.")
  @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getExpectedValue() {
    return expectedValue;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedValue(Object expectedValue) {
    this.expectedValue = expectedValue;
  }


  public Precondition expectedValues(List<Object> expectedValues) {
    this.expectedValues = expectedValues;
    return this;
  }

  public Precondition addExpectedValuesItem(Object expectedValuesItem) {
    if (this.expectedValues == null) {
      this.expectedValues = new ArrayList<>();
    }
    this.expectedValues.add(expectedValuesItem);
    return this;
  }

   /**
   * A list of valid values of the property.   Only applicable to properties of the &#x60;IN&#x60; type.
   * @return expectedValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "expectedValues", value = "A list of valid values of the property.   Only applicable to properties of the `IN` type.")
  @JsonProperty(JSON_PROPERTY_EXPECTED_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getExpectedValues() {
    return expectedValues;
  }


  @JsonProperty(JSON_PROPERTY_EXPECTED_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpectedValues(List<Object> expectedValues) {
    this.expectedValues = expectedValues;
  }


  public Precondition precondition(Precondition precondition) {
    this.precondition = precondition;
    return this;
  }

   /**
   * Get precondition
   * @return precondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRECONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Precondition getPrecondition() {
    return precondition;
  }


  @JsonProperty(JSON_PROPERTY_PRECONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrecondition(Precondition precondition) {
    this.precondition = precondition;
  }


  public Precondition preconditions(List<Precondition> preconditions) {
    this.preconditions = preconditions;
    return this;
  }

  public Precondition addPreconditionsItem(Precondition preconditionsItem) {
    if (this.preconditions == null) {
      this.preconditions = new ArrayList<>();
    }
    this.preconditions.add(preconditionsItem);
    return this;
  }

   /**
   * A list of child preconditions to be evaluated.   Only applicable to properties of the &#x60;AND&#x60; and &#x60;OR&#x60; types.
   * @return preconditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of child preconditions to be evaluated.   Only applicable to properties of the `AND` and `OR` types.")
  @JsonProperty(JSON_PROPERTY_PRECONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Precondition> getPreconditions() {
    return preconditions;
  }


  @JsonProperty(JSON_PROPERTY_PRECONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreconditions(List<Precondition> preconditions) {
    this.preconditions = preconditions;
  }


  public Precondition property(String property) {
    this.property = property;
    return this;
  }

   /**
   * The property to be evaluated.
   * @return property
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "propertyToEvaluate", value = "The property to be evaluated.")
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperty(String property) {
    this.property = property;
  }


  public Precondition type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the precondition.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NULL", required = true, value = "The type of the precondition.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Precondition pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * The Regular expression which is matched against the property.   Only applicable to properties of the &#x60;REGEX_MATCH&#x60; type.
   * @return pattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example Regex", value = "The Regular expression which is matched against the property.   Only applicable to properties of the `REGEX_MATCH` type.")
  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPattern() {
    return pattern;
  }


  @JsonProperty(JSON_PROPERTY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  /**
   * Return true if this Precondition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Precondition precondition = (Precondition) o;
    return Objects.equals(this.expectedValue, precondition.expectedValue) &&
        Objects.equals(this.expectedValues, precondition.expectedValues) &&
        Objects.equals(this.precondition, precondition.precondition) &&
        Objects.equals(this.preconditions, precondition.preconditions) &&
        Objects.equals(this.property, precondition.property) &&
        Objects.equals(this.type, precondition.type) &&
        Objects.equals(this.pattern, precondition.pattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedValue, expectedValues, precondition, preconditions, property, type, pattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Precondition {\n");
    sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
    sb.append("    expectedValues: ").append(toIndentedString(expectedValues)).append("\n");
    sb.append("    precondition: ").append(toIndentedString(precondition)).append("\n");
    sb.append("    preconditions: ").append(toIndentedString(preconditions)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

