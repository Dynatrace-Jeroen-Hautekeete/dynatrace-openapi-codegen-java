/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.City;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Information about a country&#39;s region and its cities.
 */
@ApiModel(description = "Information about a country's region and its cities.")
@JsonPropertyOrder({
  RegionWithCities.JSON_PROPERTY_NAME,
  RegionWithCities.JSON_PROPERTY_CODE,
  RegionWithCities.JSON_PROPERTY_CITY_COUNT,
  RegionWithCities.JSON_PROPERTY_CITIES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class RegionWithCities {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_CITY_COUNT = "cityCount";
  private Integer cityCount;

  public static final String JSON_PROPERTY_CITIES = "cities";
  private List<City> cities = null;

  public RegionWithCities() { 
  }

  public RegionWithCities name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the region.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the region.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RegionWithCities code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code of the region.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The code of the region.")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public RegionWithCities cityCount(Integer cityCount) {
    this.cityCount = cityCount;
    return this;
  }

   /**
   * The number of cities in a region of a country.
   * @return cityCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of cities in a region of a country.")
  @JsonProperty(JSON_PROPERTY_CITY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCityCount() {
    return cityCount;
  }


  @JsonProperty(JSON_PROPERTY_CITY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCityCount(Integer cityCount) {
    this.cityCount = cityCount;
  }


  public RegionWithCities cities(List<City> cities) {
    this.cities = cities;
    return this;
  }

  public RegionWithCities addCitiesItem(City citiesItem) {
    if (this.cities == null) {
      this.cities = new ArrayList<>();
    }
    this.cities.add(citiesItem);
    return this;
  }

   /**
   * The list of cities in the region.
   * @return cities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of cities in the region.")
  @JsonProperty(JSON_PROPERTY_CITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<City> getCities() {
    return cities;
  }


  @JsonProperty(JSON_PROPERTY_CITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCities(List<City> cities) {
    this.cities = cities;
  }


  /**
   * Return true if this RegionWithCities object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionWithCities regionWithCities = (RegionWithCities) o;
    return Objects.equals(this.name, regionWithCities.name) &&
        Objects.equals(this.code, regionWithCities.code) &&
        Objects.equals(this.cityCount, regionWithCities.cityCount) &&
        Objects.equals(this.cities, regionWithCities.cities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, cityCount, cities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionWithCities {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    cityCount: ").append(toIndentedString(cityCount)).append("\n");
    sb.append("    cities: ").append(toIndentedString(cities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

