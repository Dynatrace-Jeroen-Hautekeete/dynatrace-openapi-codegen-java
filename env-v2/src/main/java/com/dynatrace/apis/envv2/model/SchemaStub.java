/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The short representation of the settings schema.
 */
@ApiModel(description = "The short representation of the settings schema.")
@JsonPropertyOrder({
  SchemaStub.JSON_PROPERTY_SCHEMA_ID,
  SchemaStub.JSON_PROPERTY_LATEST_SCHEMA_VERSION,
  SchemaStub.JSON_PROPERTY_DISPLAY_NAME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SchemaStub {
  public static final String JSON_PROPERTY_SCHEMA_ID = "schemaId";
  private String schemaId;

  public static final String JSON_PROPERTY_LATEST_SCHEMA_VERSION = "latestSchemaVersion";
  private String latestSchemaVersion;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public SchemaStub() { 
  }

  public SchemaStub schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

   /**
   * The ID of the schema.
   * @return schemaId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "builtin:container.built-in-monitoring-rule", required = true, value = "The ID of the schema.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSchemaId() {
    return schemaId;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public SchemaStub latestSchemaVersion(String latestSchemaVersion) {
    this.latestSchemaVersion = latestSchemaVersion;
    return this;
  }

   /**
   * The most recent version of the schema.
   * @return latestSchemaVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.4.2", required = true, value = "The most recent version of the schema.")
  @JsonProperty(JSON_PROPERTY_LATEST_SCHEMA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLatestSchemaVersion() {
    return latestSchemaVersion;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_SCHEMA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLatestSchemaVersion(String latestSchemaVersion) {
    this.latestSchemaVersion = latestSchemaVersion;
  }


  public SchemaStub displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the schema.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Built-in container monitoring rules", required = true, value = "The name of the schema.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Return true if this SchemaStub object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaStub schemaStub = (SchemaStub) o;
    return Objects.equals(this.schemaId, schemaStub.schemaId) &&
        Objects.equals(this.latestSchemaVersion, schemaStub.latestSchemaVersion) &&
        Objects.equals(this.displayName, schemaStub.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaId, latestSchemaVersion, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaStub {\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    latestSchemaVersion: ").append(toIndentedString(latestSchemaVersion)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

