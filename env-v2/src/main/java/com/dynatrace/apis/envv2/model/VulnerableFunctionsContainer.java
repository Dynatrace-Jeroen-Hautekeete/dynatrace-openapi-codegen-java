/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.ProcessGroupVulnerableFunctions;
import com.dynatrace.apis.envv2.model.VulnerableFunctionProcessGroups;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A list of vulnerable functions, their security problem wide usages and their usages per process group. Optional: A list of vulnerable function usages per process group for a security problem.
 */
@ApiModel(description = "A list of vulnerable functions, their security problem wide usages and their usages per process group. Optional: A list of vulnerable function usages per process group for a security problem.")
@JsonPropertyOrder({
  VulnerableFunctionsContainer.JSON_PROPERTY_VULNERABLE_FUNCTIONS,
  VulnerableFunctionsContainer.JSON_PROPERTY_VULNERABLE_FUNCTIONS_BY_PROCESS_GROUP
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class VulnerableFunctionsContainer {
  public static final String JSON_PROPERTY_VULNERABLE_FUNCTIONS = "vulnerableFunctions";
  private List<VulnerableFunctionProcessGroups> vulnerableFunctions = null;

  public static final String JSON_PROPERTY_VULNERABLE_FUNCTIONS_BY_PROCESS_GROUP = "vulnerableFunctionsByProcessGroup";
  private List<ProcessGroupVulnerableFunctions> vulnerableFunctionsByProcessGroup = null;

  public VulnerableFunctionsContainer() { 
  }

  @JsonCreator
  public VulnerableFunctionsContainer(
    @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTIONS) List<VulnerableFunctionProcessGroups> vulnerableFunctions, 
    @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTIONS_BY_PROCESS_GROUP) List<ProcessGroupVulnerableFunctions> vulnerableFunctionsByProcessGroup
  ) {
  this();
    this.vulnerableFunctions = vulnerableFunctions;
    this.vulnerableFunctionsByProcessGroup = vulnerableFunctionsByProcessGroup;
  }

   /**
   * A list of vulnerable functions, their security problem wide usages and their usages per process group.
   * @return vulnerableFunctions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of vulnerable functions, their security problem wide usages and their usages per process group.")
  @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VulnerableFunctionProcessGroups> getVulnerableFunctions() {
    return vulnerableFunctions;
  }




   /**
   * A list of vulnerable function usages per process group for a security problem. The result is sorted based on the following criteria:  * the number of vulnerable functions in use (descending). * the number of vulnerable functions not in use (descending). * the number of vulnerable functions not available (descending). * the process group identifier (ascending)
   * @return vulnerableFunctionsByProcessGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of vulnerable function usages per process group for a security problem. The result is sorted based on the following criteria:  * the number of vulnerable functions in use (descending). * the number of vulnerable functions not in use (descending). * the number of vulnerable functions not available (descending). * the process group identifier (ascending)")
  @JsonProperty(JSON_PROPERTY_VULNERABLE_FUNCTIONS_BY_PROCESS_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProcessGroupVulnerableFunctions> getVulnerableFunctionsByProcessGroup() {
    return vulnerableFunctionsByProcessGroup;
  }




  /**
   * Return true if this VulnerableFunctionsContainer object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerableFunctionsContainer vulnerableFunctionsContainer = (VulnerableFunctionsContainer) o;
    return Objects.equals(this.vulnerableFunctions, vulnerableFunctionsContainer.vulnerableFunctions) &&
        Objects.equals(this.vulnerableFunctionsByProcessGroup, vulnerableFunctionsContainer.vulnerableFunctionsByProcessGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vulnerableFunctions, vulnerableFunctionsByProcessGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerableFunctionsContainer {\n");
    sb.append("    vulnerableFunctions: ").append(toIndentedString(vulnerableFunctions)).append("\n");
    sb.append("    vulnerableFunctionsByProcessGroup: ").append(toIndentedString(vulnerableFunctionsByProcessGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

