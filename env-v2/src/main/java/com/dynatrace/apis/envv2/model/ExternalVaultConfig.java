/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AzureClientSecretConfig;
import com.dynatrace.apis.envv2.model.HashicorpApproleConfig;
import com.dynatrace.apis.envv2.model.HashicorpCertificateConfig;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * Configuration for external vault synchronization for username and password credentials.
 */
@ApiModel(description = "Configuration for external vault synchronization for username and password credentials.")
@JsonPropertyOrder({
  ExternalVaultConfig.JSON_PROPERTY_SOURCE_AUTH_METHOD,
  ExternalVaultConfig.JSON_PROPERTY_VAULT_URL,
  ExternalVaultConfig.JSON_PROPERTY_USERNAME_SECRET_NAME,
  ExternalVaultConfig.JSON_PROPERTY_PASSWORD_SECRET_NAME,
  ExternalVaultConfig.JSON_PROPERTY_TOKEN_SECRET_NAME,
  ExternalVaultConfig.JSON_PROPERTY_CREDENTIALS_USED_FOR_EXTERNAL_SYNCHRONIZATION,
  ExternalVaultConfig.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "sourceAuthMethod", // ignore manually set sourceAuthMethod, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the sourceAuthMethod to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "sourceAuthMethod", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AzureClientSecretConfig.class, name = "AZURE_KEY_VAULT_CLIENT_SECRET"),
  @JsonSubTypes.Type(value = AzureClientSecretConfig.class, name = "AzureClientSecretConfig"),
  @JsonSubTypes.Type(value = HashicorpApproleConfig.class, name = "HASHICORP_VAULT_APPROLE"),
  @JsonSubTypes.Type(value = HashicorpCertificateConfig.class, name = "HASHICORP_VAULT_CERTIFICATE"),
  @JsonSubTypes.Type(value = HashicorpApproleConfig.class, name = "HashicorpApproleConfig"),
  @JsonSubTypes.Type(value = HashicorpCertificateConfig.class, name = "HashicorpCertificateConfig"),
})

public class ExternalVaultConfig {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;HASHICORP_VAULT_APPROLE&#x60; -&gt; HashicorpApproleConfig  * &#x60;HASHICORP_VAULT_CERTIFICATE&#x60; -&gt; HashicorpCertificateConfig  * &#x60;AZURE_KEY_VAULT_CLIENT_SECRET&#x60; -&gt; AzureClientSecretConfig  
   */
  public enum SourceAuthMethodEnum {
    AZURE_KEY_VAULT_CLIENT_SECRET("AZURE_KEY_VAULT_CLIENT_SECRET"),
    
    HASHICORP_VAULT_APPROLE("HASHICORP_VAULT_APPROLE"),
    
    HASHICORP_VAULT_CERTIFICATE("HASHICORP_VAULT_CERTIFICATE");

    private String value;

    SourceAuthMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceAuthMethodEnum fromValue(String value) {
      for (SourceAuthMethodEnum b : SourceAuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE_AUTH_METHOD = "sourceAuthMethod";
  private SourceAuthMethodEnum sourceAuthMethod;

  public static final String JSON_PROPERTY_VAULT_URL = "vaultUrl";
  private String vaultUrl;

  public static final String JSON_PROPERTY_USERNAME_SECRET_NAME = "usernameSecretName";
  private String usernameSecretName;

  public static final String JSON_PROPERTY_PASSWORD_SECRET_NAME = "passwordSecretName";
  private String passwordSecretName;

  public static final String JSON_PROPERTY_TOKEN_SECRET_NAME = "tokenSecretName";
  private String tokenSecretName;

  public static final String JSON_PROPERTY_CREDENTIALS_USED_FOR_EXTERNAL_SYNCHRONIZATION = "credentialsUsedForExternalSynchronization";
  private Set<String> credentialsUsedForExternalSynchronization = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    AZURE_CERTIFICATE_MODEL("AZURE_CERTIFICATE_MODEL"),
    
    AZURE_CLIENT_SECRET_MODEL("AZURE_CLIENT_SECRET_MODEL"),
    
    HASHICORP_APPROLE_MODEL("HASHICORP_APPROLE_MODEL"),
    
    HASHICORP_CERTIFICATE_MODEL("HASHICORP_CERTIFICATE_MODEL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public ExternalVaultConfig() { 
  }

  public ExternalVaultConfig sourceAuthMethod(SourceAuthMethodEnum sourceAuthMethod) {
    this.sourceAuthMethod = sourceAuthMethod;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;HASHICORP_VAULT_APPROLE&#x60; -&gt; HashicorpApproleConfig  * &#x60;HASHICORP_VAULT_CERTIFICATE&#x60; -&gt; HashicorpCertificateConfig  * &#x60;AZURE_KEY_VAULT_CLIENT_SECRET&#x60; -&gt; AzureClientSecretConfig  
   * @return sourceAuthMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `HASHICORP_VAULT_APPROLE` -> HashicorpApproleConfig  * `HASHICORP_VAULT_CERTIFICATE` -> HashicorpCertificateConfig  * `AZURE_KEY_VAULT_CLIENT_SECRET` -> AzureClientSecretConfig  ")
  @JsonProperty(JSON_PROPERTY_SOURCE_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceAuthMethodEnum getSourceAuthMethod() {
    return sourceAuthMethod;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_AUTH_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceAuthMethod(SourceAuthMethodEnum sourceAuthMethod) {
    this.sourceAuthMethod = sourceAuthMethod;
  }


  public ExternalVaultConfig vaultUrl(String vaultUrl) {
    this.vaultUrl = vaultUrl;
    return this;
  }

   /**
   * Get vaultUrl
   * @return vaultUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VAULT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVaultUrl() {
    return vaultUrl;
  }


  @JsonProperty(JSON_PROPERTY_VAULT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVaultUrl(String vaultUrl) {
    this.vaultUrl = vaultUrl;
  }


  public ExternalVaultConfig usernameSecretName(String usernameSecretName) {
    this.usernameSecretName = usernameSecretName;
    return this;
  }

   /**
   * Get usernameSecretName
   * @return usernameSecretName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_USERNAME_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsernameSecretName() {
    return usernameSecretName;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsernameSecretName(String usernameSecretName) {
    this.usernameSecretName = usernameSecretName;
  }


  public ExternalVaultConfig passwordSecretName(String passwordSecretName) {
    this.passwordSecretName = passwordSecretName;
    return this;
  }

   /**
   * Get passwordSecretName
   * @return passwordSecretName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PASSWORD_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPasswordSecretName() {
    return passwordSecretName;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordSecretName(String passwordSecretName) {
    this.passwordSecretName = passwordSecretName;
  }


  public ExternalVaultConfig tokenSecretName(String tokenSecretName) {
    this.tokenSecretName = tokenSecretName;
    return this;
  }

   /**
   * Get tokenSecretName
   * @return tokenSecretName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTokenSecretName() {
    return tokenSecretName;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenSecretName(String tokenSecretName) {
    this.tokenSecretName = tokenSecretName;
  }


  public ExternalVaultConfig credentialsUsedForExternalSynchronization(Set<String> credentialsUsedForExternalSynchronization) {
    this.credentialsUsedForExternalSynchronization = credentialsUsedForExternalSynchronization;
    return this;
  }

  public ExternalVaultConfig addCredentialsUsedForExternalSynchronizationItem(String credentialsUsedForExternalSynchronizationItem) {
    if (this.credentialsUsedForExternalSynchronization == null) {
      this.credentialsUsedForExternalSynchronization = new LinkedHashSet<>();
    }
    this.credentialsUsedForExternalSynchronization.add(credentialsUsedForExternalSynchronizationItem);
    return this;
  }

   /**
   * Get credentialsUsedForExternalSynchronization
   * @return credentialsUsedForExternalSynchronization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CREDENTIALS_USED_FOR_EXTERNAL_SYNCHRONIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getCredentialsUsedForExternalSynchronization() {
    return credentialsUsedForExternalSynchronization;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CREDENTIALS_USED_FOR_EXTERNAL_SYNCHRONIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentialsUsedForExternalSynchronization(Set<String> credentialsUsedForExternalSynchronization) {
    this.credentialsUsedForExternalSynchronization = credentialsUsedForExternalSynchronization;
  }


  public ExternalVaultConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this ExternalVaultConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalVaultConfig externalVaultConfig = (ExternalVaultConfig) o;
    return Objects.equals(this.sourceAuthMethod, externalVaultConfig.sourceAuthMethod) &&
        Objects.equals(this.vaultUrl, externalVaultConfig.vaultUrl) &&
        Objects.equals(this.usernameSecretName, externalVaultConfig.usernameSecretName) &&
        Objects.equals(this.passwordSecretName, externalVaultConfig.passwordSecretName) &&
        Objects.equals(this.tokenSecretName, externalVaultConfig.tokenSecretName) &&
        Objects.equals(this.credentialsUsedForExternalSynchronization, externalVaultConfig.credentialsUsedForExternalSynchronization) &&
        Objects.equals(this.type, externalVaultConfig.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceAuthMethod, vaultUrl, usernameSecretName, passwordSecretName, tokenSecretName, credentialsUsedForExternalSynchronization, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalVaultConfig {\n");
    sb.append("    sourceAuthMethod: ").append(toIndentedString(sourceAuthMethod)).append("\n");
    sb.append("    vaultUrl: ").append(toIndentedString(vaultUrl)).append("\n");
    sb.append("    usernameSecretName: ").append(toIndentedString(usernameSecretName)).append("\n");
    sb.append("    passwordSecretName: ").append(toIndentedString(passwordSecretName)).append("\n");
    sb.append("    tokenSecretName: ").append(toIndentedString(tokenSecretName)).append("\n");
    sb.append("    credentialsUsedForExternalSynchronization: ").append(toIndentedString(credentialsUsedForExternalSynchronization)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AZURE_KEY_VAULT_CLIENT_SECRET", AzureClientSecretConfig.class);
  mappings.put("AzureClientSecretConfig", AzureClientSecretConfig.class);
  mappings.put("HASHICORP_VAULT_APPROLE", HashicorpApproleConfig.class);
  mappings.put("HASHICORP_VAULT_CERTIFICATE", HashicorpCertificateConfig.class);
  mappings.put("HashicorpApproleConfig", HashicorpApproleConfig.class);
  mappings.put("HashicorpCertificateConfig", HashicorpCertificateConfig.class);
  mappings.put("ExternalVaultConfig", ExternalVaultConfig.class);
  JSON.registerDiscriminator(ExternalVaultConfig.class, "sourceAuthMethod", mappings);
}
}

