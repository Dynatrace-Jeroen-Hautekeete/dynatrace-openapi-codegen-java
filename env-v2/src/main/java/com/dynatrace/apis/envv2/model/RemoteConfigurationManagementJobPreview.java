/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A preview of remote configuration management job.
 */
@ApiModel(description = "A preview of remote configuration management job.")
@JsonPropertyOrder({
  RemoteConfigurationManagementJobPreview.JSON_PROPERTY_ALREADY_CONFIGURED_ENTITIES_COUNT,
  RemoteConfigurationManagementJobPreview.JSON_PROPERTY_TARGET_ENTITIES_COUNT,
  RemoteConfigurationManagementJobPreview.JSON_PROPERTY_VALUE,
  RemoteConfigurationManagementJobPreview.JSON_PROPERTY_ATTRIBUTE,
  RemoteConfigurationManagementJobPreview.JSON_PROPERTY_OPERATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class RemoteConfigurationManagementJobPreview {
  public static final String JSON_PROPERTY_ALREADY_CONFIGURED_ENTITIES_COUNT = "alreadyConfiguredEntitiesCount";
  private Integer alreadyConfiguredEntitiesCount;

  public static final String JSON_PROPERTY_TARGET_ENTITIES_COUNT = "targetEntitiesCount";
  private Integer targetEntitiesCount;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  /**
   * The attribute which is affected by the operation.
   */
  public enum AttributeEnum {
    GROUP("group"),
    
    HOSTGROUP("hostGroup"),
    
    NETWORKZONE("networkZone");

    private String value;

    AttributeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributeEnum fromValue(String value) {
      for (AttributeEnum b : AttributeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTE = "attribute";
  private AttributeEnum attribute;

  /**
   * The operation performed on given attribute.
   */
  public enum OperationEnum {
    CLEAR("clear"),
    
    SET("set");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private OperationEnum operation;

  public RemoteConfigurationManagementJobPreview() { 
  }

  public RemoteConfigurationManagementJobPreview alreadyConfiguredEntitiesCount(Integer alreadyConfiguredEntitiesCount) {
    this.alreadyConfiguredEntitiesCount = alreadyConfiguredEntitiesCount;
    return this;
  }

   /**
   * The number of entities that are currently configured as defined by remote configuration management operation.
   * @return alreadyConfiguredEntitiesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The number of entities that are currently configured as defined by remote configuration management operation.")
  @JsonProperty(JSON_PROPERTY_ALREADY_CONFIGURED_ENTITIES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAlreadyConfiguredEntitiesCount() {
    return alreadyConfiguredEntitiesCount;
  }


  @JsonProperty(JSON_PROPERTY_ALREADY_CONFIGURED_ENTITIES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlreadyConfiguredEntitiesCount(Integer alreadyConfiguredEntitiesCount) {
    this.alreadyConfiguredEntitiesCount = alreadyConfiguredEntitiesCount;
  }


  public RemoteConfigurationManagementJobPreview targetEntitiesCount(Integer targetEntitiesCount) {
    this.targetEntitiesCount = targetEntitiesCount;
    return this;
  }

   /**
   * The number of entities that will be configured as defined by remote configuration management after it is completed.
   * @return targetEntitiesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The number of entities that will be configured as defined by remote configuration management after it is completed.")
  @JsonProperty(JSON_PROPERTY_TARGET_ENTITIES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTargetEntitiesCount() {
    return targetEntitiesCount;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_ENTITIES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetEntitiesCount(Integer targetEntitiesCount) {
    this.targetEntitiesCount = targetEntitiesCount;
  }


  public RemoteConfigurationManagementJobPreview value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value which should be assigned to given attribute.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "exampleNetworkZoneName", value = "The value which should be assigned to given attribute.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }


  public RemoteConfigurationManagementJobPreview attribute(AttributeEnum attribute) {
    this.attribute = attribute;
    return this;
  }

   /**
   * The attribute which is affected by the operation.
   * @return attribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "networkZone", value = "The attribute which is affected by the operation.")
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AttributeEnum getAttribute() {
    return attribute;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttribute(AttributeEnum attribute) {
    this.attribute = attribute;
  }


  public RemoteConfigurationManagementJobPreview operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The operation performed on given attribute.
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "set", value = "The operation performed on given attribute.")
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperationEnum getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  /**
   * Return true if this RemoteConfigurationManagementJobPreview object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteConfigurationManagementJobPreview remoteConfigurationManagementJobPreview = (RemoteConfigurationManagementJobPreview) o;
    return Objects.equals(this.alreadyConfiguredEntitiesCount, remoteConfigurationManagementJobPreview.alreadyConfiguredEntitiesCount) &&
        Objects.equals(this.targetEntitiesCount, remoteConfigurationManagementJobPreview.targetEntitiesCount) &&
        Objects.equals(this.value, remoteConfigurationManagementJobPreview.value) &&
        Objects.equals(this.attribute, remoteConfigurationManagementJobPreview.attribute) &&
        Objects.equals(this.operation, remoteConfigurationManagementJobPreview.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alreadyConfiguredEntitiesCount, targetEntitiesCount, value, attribute, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteConfigurationManagementJobPreview {\n");
    sb.append("    alreadyConfiguredEntitiesCount: ").append(toIndentedString(alreadyConfiguredEntitiesCount)).append("\n");
    sb.append("    targetEntitiesCount: ").append(toIndentedString(targetEntitiesCount)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

