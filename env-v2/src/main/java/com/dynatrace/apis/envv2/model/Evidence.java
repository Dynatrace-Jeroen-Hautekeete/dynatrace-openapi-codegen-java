/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.dynatrace.apis.envv2.model.AvailabilityEvidence;
import com.dynatrace.apis.envv2.model.EntityStub;
import com.dynatrace.apis.envv2.model.EventEvidence;
import com.dynatrace.apis.envv2.model.MaintenanceWindowEvidence;
import com.dynatrace.apis.envv2.model.MetricEvidence;
import com.dynatrace.apis.envv2.model.TransactionalEvidence;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.dynatrace.apis.envv2.JSON;
/**
 * An evidence of a root cause.    The actual set of fields depends on the type of the evidence. Find the list of actual objects in the description of the **evidenceType** field or see [Problems API v2 - JSON models](https://dt-url.net/we03sp2).
 */
@ApiModel(description = "An evidence of a root cause.    The actual set of fields depends on the type of the evidence. Find the list of actual objects in the description of the **evidenceType** field or see [Problems API v2 - JSON models](https://dt-url.net/we03sp2).")
@JsonPropertyOrder({
  Evidence.JSON_PROPERTY_EVIDENCE_TYPE,
  Evidence.JSON_PROPERTY_DISPLAY_NAME,
  Evidence.JSON_PROPERTY_ENTITY,
  Evidence.JSON_PROPERTY_GROUPING_ENTITY,
  Evidence.JSON_PROPERTY_ROOT_CAUSE_RELEVANT,
  Evidence.JSON_PROPERTY_START_TIME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
@JsonIgnoreProperties(
  value = "evidenceType", // ignore manually set evidenceType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the evidenceType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "evidenceType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AvailabilityEvidence.class, name = "AVAILABILITY_EVIDENCE"),
  @JsonSubTypes.Type(value = AvailabilityEvidence.class, name = "AvailabilityEvidence"),
  @JsonSubTypes.Type(value = EventEvidence.class, name = "EVENT"),
  @JsonSubTypes.Type(value = EventEvidence.class, name = "EventEvidence"),
  @JsonSubTypes.Type(value = MaintenanceWindowEvidence.class, name = "MAINTENANCE_WINDOW"),
  @JsonSubTypes.Type(value = MetricEvidence.class, name = "METRIC"),
  @JsonSubTypes.Type(value = MaintenanceWindowEvidence.class, name = "MaintenanceWindowEvidence"),
  @JsonSubTypes.Type(value = MetricEvidence.class, name = "MetricEvidence"),
  @JsonSubTypes.Type(value = TransactionalEvidence.class, name = "TRANSACTIONAL"),
  @JsonSubTypes.Type(value = TransactionalEvidence.class, name = "TransactionalEvidence"),
})

public class Evidence {
  /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  
   */
  public enum EvidenceTypeEnum {
    AVAILABILITY_EVIDENCE("AVAILABILITY_EVIDENCE"),
    
    EVENT("EVENT"),
    
    MAINTENANCE_WINDOW("MAINTENANCE_WINDOW"),
    
    METRIC("METRIC"),
    
    TRANSACTIONAL("TRANSACTIONAL");

    private String value;

    EvidenceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EvidenceTypeEnum fromValue(String value) {
      for (EvidenceTypeEnum b : EvidenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVIDENCE_TYPE = "evidenceType";
  private EvidenceTypeEnum evidenceType;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityStub entity;

  public static final String JSON_PROPERTY_GROUPING_ENTITY = "groupingEntity";
  private EntityStub groupingEntity;

  public static final String JSON_PROPERTY_ROOT_CAUSE_RELEVANT = "rootCauseRelevant";
  private Boolean rootCauseRelevant;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private Long startTime;

  public Evidence() { 
  }

  public Evidence evidenceType(EvidenceTypeEnum evidenceType) {
    this.evidenceType = evidenceType;
    return this;
  }

   /**
   * Defines the actual set of fields depending on the value. See one of the following objects:   * &#x60;EVENT&#x60; -&gt; EventEvidence  * &#x60;METRIC&#x60; -&gt; MetricEvidence  * &#x60;TRANSACTIONAL&#x60; -&gt; TransactionalEvidence  * &#x60;MAINTENANCE_WINDOW&#x60; -&gt; MaintenanceWindowEvidence  * &#x60;AVAILABILITY_EVIDENCE&#x60; -&gt; AvailabilityEvidence  
   * @return evidenceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the actual set of fields depending on the value. See one of the following objects:   * `EVENT` -> EventEvidence  * `METRIC` -> MetricEvidence  * `TRANSACTIONAL` -> TransactionalEvidence  * `MAINTENANCE_WINDOW` -> MaintenanceWindowEvidence  * `AVAILABILITY_EVIDENCE` -> AvailabilityEvidence  ")
  @JsonProperty(JSON_PROPERTY_EVIDENCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EvidenceTypeEnum getEvidenceType() {
    return evidenceType;
  }


  @JsonProperty(JSON_PROPERTY_EVIDENCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvidenceType(EvidenceTypeEnum evidenceType) {
    this.evidenceType = evidenceType;
  }


  public Evidence displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the evidence.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The display name of the evidence.")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Evidence entity(EntityStub entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityStub getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntity(EntityStub entity) {
    this.entity = entity;
  }


  public Evidence groupingEntity(EntityStub groupingEntity) {
    this.groupingEntity = groupingEntity;
    return this;
  }

   /**
   * Get groupingEntity
   * @return groupingEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GROUPING_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityStub getGroupingEntity() {
    return groupingEntity;
  }


  @JsonProperty(JSON_PROPERTY_GROUPING_ENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupingEntity(EntityStub groupingEntity) {
    this.groupingEntity = groupingEntity;
  }


  public Evidence rootCauseRelevant(Boolean rootCauseRelevant) {
    this.rootCauseRelevant = rootCauseRelevant;
    return this;
  }

   /**
   * The evidence is (&#x60;true&#x60;) or is not (&#x60;false&#x60;) a part of the root cause.
   * @return rootCauseRelevant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The evidence is (`true`) or is not (`false`) a part of the root cause.")
  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRootCauseRelevant() {
    return rootCauseRelevant;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_CAUSE_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRootCauseRelevant(Boolean rootCauseRelevant) {
    this.rootCauseRelevant = rootCauseRelevant;
  }


  public Evidence startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The start time of the evidence, in UTC milliseconds.
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the evidence, in UTC milliseconds.")
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  /**
   * Return true if this Evidence object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Evidence evidence = (Evidence) o;
    return Objects.equals(this.evidenceType, evidence.evidenceType) &&
        Objects.equals(this.displayName, evidence.displayName) &&
        Objects.equals(this.entity, evidence.entity) &&
        Objects.equals(this.groupingEntity, evidence.groupingEntity) &&
        Objects.equals(this.rootCauseRelevant, evidence.rootCauseRelevant) &&
        Objects.equals(this.startTime, evidence.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceType, displayName, entity, groupingEntity, rootCauseRelevant, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Evidence {\n");
    sb.append("    evidenceType: ").append(toIndentedString(evidenceType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    groupingEntity: ").append(toIndentedString(groupingEntity)).append("\n");
    sb.append("    rootCauseRelevant: ").append(toIndentedString(rootCauseRelevant)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("AVAILABILITY_EVIDENCE", AvailabilityEvidence.class);
  mappings.put("AvailabilityEvidence", AvailabilityEvidence.class);
  mappings.put("EVENT", EventEvidence.class);
  mappings.put("EventEvidence", EventEvidence.class);
  mappings.put("MAINTENANCE_WINDOW", MaintenanceWindowEvidence.class);
  mappings.put("METRIC", MetricEvidence.class);
  mappings.put("MaintenanceWindowEvidence", MaintenanceWindowEvidence.class);
  mappings.put("MetricEvidence", MetricEvidence.class);
  mappings.put("TRANSACTIONAL", TransactionalEvidence.class);
  mappings.put("TransactionalEvidence", TransactionalEvidence.class);
  mappings.put("Evidence", Evidence.class);
  JSON.registerDiscriminator(Evidence.class, "evidenceType", mappings);
}
}

