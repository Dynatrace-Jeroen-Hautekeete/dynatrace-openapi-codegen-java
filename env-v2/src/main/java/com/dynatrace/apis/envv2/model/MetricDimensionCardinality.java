/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The dimension cardinalities of a metric.
 */
@ApiModel(description = "The dimension cardinalities of a metric.")
@JsonPropertyOrder({
  MetricDimensionCardinality.JSON_PROPERTY_RELATIVE,
  MetricDimensionCardinality.JSON_PROPERTY_ESTIMATE,
  MetricDimensionCardinality.JSON_PROPERTY_KEY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class MetricDimensionCardinality {
  public static final String JSON_PROPERTY_RELATIVE = "relative";
  private Double relative;

  public static final String JSON_PROPERTY_ESTIMATE = "estimate";
  private Long estimate;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public MetricDimensionCardinality() { 
  }

  public MetricDimensionCardinality relative(Double relative) {
    this.relative = relative;
    return this;
  }

   /**
   * The relative cardinality of the dimension expressed as percentage
   * @return relative
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The relative cardinality of the dimension expressed as percentage")
  @JsonProperty(JSON_PROPERTY_RELATIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getRelative() {
    return relative;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRelative(Double relative) {
    this.relative = relative;
  }


  public MetricDimensionCardinality estimate(Long estimate) {
    this.estimate = estimate;
    return this;
  }

   /**
   * The cardinality estimate of the dimension.
   * @return estimate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The cardinality estimate of the dimension.")
  @JsonProperty(JSON_PROPERTY_ESTIMATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEstimate() {
    return estimate;
  }


  @JsonProperty(JSON_PROPERTY_ESTIMATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEstimate(Long estimate) {
    this.estimate = estimate;
  }


  public MetricDimensionCardinality key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The key of the dimension.    It must be unique within the metric.
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The key of the dimension.    It must be unique within the metric.")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  /**
   * Return true if this MetricDimensionCardinality object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDimensionCardinality metricDimensionCardinality = (MetricDimensionCardinality) o;
    return Objects.equals(this.relative, metricDimensionCardinality.relative) &&
        Objects.equals(this.estimate, metricDimensionCardinality.estimate) &&
        Objects.equals(this.key, metricDimensionCardinality.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relative, estimate, key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDimensionCardinality {\n");
    sb.append("    relative: ").append(toIndentedString(relative)).append("\n");
    sb.append("    estimate: ").append(toIndentedString(estimate)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

