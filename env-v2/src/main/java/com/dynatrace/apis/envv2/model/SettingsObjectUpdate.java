/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dynatrace.apis.envv2.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An update of a settings object.
 */
@ApiModel(description = "An update of a settings object.")
@JsonPropertyOrder({
  SettingsObjectUpdate.JSON_PROPERTY_INSERT_BEFORE,
  SettingsObjectUpdate.JSON_PROPERTY_SCHEMA_VERSION,
  SettingsObjectUpdate.JSON_PROPERTY_UPDATE_TOKEN,
  SettingsObjectUpdate.JSON_PROPERTY_INSERT_AFTER,
  SettingsObjectUpdate.JSON_PROPERTY_VALUE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class SettingsObjectUpdate {
  public static final String JSON_PROPERTY_INSERT_BEFORE = "insertBefore";
  private String insertBefore;

  public static final String JSON_PROPERTY_SCHEMA_VERSION = "schemaVersion";
  private String schemaVersion;

  public static final String JSON_PROPERTY_UPDATE_TOKEN = "updateToken";
  private String updateToken;

  public static final String JSON_PROPERTY_INSERT_AFTER = "insertAfter";
  private String insertAfter;

  public static final String JSON_PROPERTY_VALUE = "value";
  private Object value;

  public SettingsObjectUpdate() { 
  }

  public SettingsObjectUpdate insertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
    return this;
  }

   /**
   * The position of the updated object. The new object will be moved in front of the specified one.   **insertAfter** and **insertBefore** are evaluated together and only one of both can be set.   If &#x60;null&#x60; and **insertAfter** &#39;null&#39;, the existing object keeps the current position.   If set to empty string, the updated object will be placed in the last position.   Only applicable for objects based on schemas with ordered objects (schema&#39;s **ordered** parameter is set to &#x60;true&#x60;).
   * @return insertBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y2ktaGdyb3VwLTEyMythZjhjOThlOS0wN2I0LTMyMGEtOTQzNi02NTEyMmVlNWY4NGQ=", value = "The position of the updated object. The new object will be moved in front of the specified one.   **insertAfter** and **insertBefore** are evaluated together and only one of both can be set.   If `null` and **insertAfter** 'null', the existing object keeps the current position.   If set to empty string, the updated object will be placed in the last position.   Only applicable for objects based on schemas with ordered objects (schema's **ordered** parameter is set to `true`).")
  @JsonProperty(JSON_PROPERTY_INSERT_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsertBefore() {
    return insertBefore;
  }


  @JsonProperty(JSON_PROPERTY_INSERT_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
  }


  public SettingsObjectUpdate schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * The version of the schema on which the object is based.
   * @return schemaVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.0.0", value = "The version of the schema on which the object is based.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchemaVersion() {
    return schemaVersion;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public SettingsObjectUpdate updateToken(String updateToken) {
    this.updateToken = updateToken;
    return this;
  }

   /**
   * The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn&#39;t any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks.
   * @return updateToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y2ktaGdyb3VwLTEyMythZjhjOThlOS0wN2I0LTMyMGEtOTQzNi02NTEyMmVlNWY4NGQ=", value = "The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn't any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks.")
  @JsonProperty(JSON_PROPERTY_UPDATE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdateToken() {
    return updateToken;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateToken(String updateToken) {
    this.updateToken = updateToken;
  }


  public SettingsObjectUpdate insertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
    return this;
  }

   /**
   * The position of the updated object. The new object will be moved behind the specified one.   **insertAfter** and **insertBefore** are evaluated together and only one of both can be set.   If &#x60;null&#x60; and **insertBefore** &#39;null&#39;, the existing object keeps the current position.   If set to empty string, the updated object will be placed in the first position.   Only applicable for objects based on schemas with ordered objects (schema&#39;s **ordered** parameter is set to &#x60;true&#x60;).
   * @return insertAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y2ktaGdyb3VwLTEyMythZjhjOThlOS0wN2I0LTMyMGEtOTQzNi02NTEyMmVlNWY4NGQ=", value = "The position of the updated object. The new object will be moved behind the specified one.   **insertAfter** and **insertBefore** are evaluated together and only one of both can be set.   If `null` and **insertBefore** 'null', the existing object keeps the current position.   If set to empty string, the updated object will be placed in the first position.   Only applicable for objects based on schemas with ordered objects (schema's **ordered** parameter is set to `true`).")
  @JsonProperty(JSON_PROPERTY_INSERT_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsertAfter() {
    return insertAfter;
  }


  @JsonProperty(JSON_PROPERTY_INSERT_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
  }


  public SettingsObjectUpdate value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the setting.    It defines the actual values of settings&#39; parameters.   The actual content depends on the object&#39;s schema.
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{\"autoMonitoring\":true}", required = true, value = "The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(Object value) {
    this.value = value;
  }


  /**
   * Return true if this SettingsObjectUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsObjectUpdate settingsObjectUpdate = (SettingsObjectUpdate) o;
    return Objects.equals(this.insertBefore, settingsObjectUpdate.insertBefore) &&
        Objects.equals(this.schemaVersion, settingsObjectUpdate.schemaVersion) &&
        Objects.equals(this.updateToken, settingsObjectUpdate.updateToken) &&
        Objects.equals(this.insertAfter, settingsObjectUpdate.insertAfter) &&
        Objects.equals(this.value, settingsObjectUpdate.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insertBefore, schemaVersion, updateToken, insertAfter, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsObjectUpdate {\n");
    sb.append("    insertBefore: ").append(toIndentedString(insertBefore)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    updateToken: ").append(toIndentedString(updateToken)).append("\n");
    sb.append("    insertAfter: ").append(toIndentedString(insertAfter)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

