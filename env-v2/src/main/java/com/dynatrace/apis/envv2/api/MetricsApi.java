/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dynatrace.apis.envv2.api;

import com.dynatrace.apis.envv2.ApiClient;
import com.dynatrace.apis.envv2.ApiException;
import com.dynatrace.apis.envv2.ApiResponse;
import com.dynatrace.apis.envv2.Pair;

import com.dynatrace.apis.envv2.model.MetricData;
import com.dynatrace.apis.envv2.model.MetricDescriptor;
import com.dynatrace.apis.envv2.model.MetricDescriptorCollection;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T15:08:06.080821500+01:00[Europe/Brussels]")
public class MetricsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MetricsApi() {
    this(new ApiClient());
  }

  public MetricsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Lists all available metrics
   * You can narrow down the output by selecting metrics in the **metricSelector** field.   You can additionally limit the output by using pagination:   1. Specify the number of results per page in the **pageSize** query parameter.   2. Then use the cursor from the **nextPageKey** field of the response in the **nextPageKey** query parameter to obtain subsequent pages. All other query parameters must be omitted.
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of metric schemata in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used.   If a value higher than 500 is used, only 500 results per page are returned. (optional)
   * @param metricSelector Selects metrics for the query by their keys.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.   You can select a full set of related metrics by using a trailing asterisk (&#x60;*&#x60;) wildcard. For example, &#x60;builtin:host.*&#x60; selects all host-based metrics and &#x60;builtin:*&#x60; selects all Dynatrace-provided metrics.   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax.   Only &#x60;aggregation&#x60;, &#x60;merge&#x60;, &#x60;parents&#x60;, and &#x60;splitBy&#x60; transformations are supported by this endpoint.   If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;      To find metrics based on a search term, rather than metricId, use the **text** query parameter instead of this one. (optional)
   * @param text Metric registry search term. Only show metrics that contain the term in their key, display name, or description. Use the &#x60;metricSelector&#x60; parameter instead of this one to select a complete metric hierarchy instead of doing a text-based search. (optional)
   * @param fields Defines the list of metric properties included in the response.   &#x60;metricId&#x60; is **always** included in the result. The following additional properties are available:   * &#x60;displayName&#x60;: The name of the metric in the user interface. Enabled by default.  * &#x60;description&#x60;: A short description of the metric. Enabled by default.  * &#x60;unit&#x60;: The unit of the metric. Enabled by default.  * &#x60;tags&#x60;: The tags of the metric.  + &#x60;dduBillable&#x60;:  An indicator whether the usage of metric consumes [Davis data units](https://dt-url.net/ddu).  * &#x60;created&#x60;:  The timestamp (UTC milliseconds) when the metrics has been created.  * &#x60;lastWritten&#x60;:  The timestamp (UTC milliseconds) when metric data points have been written for the last time.  * &#x60;aggregationTypes&#x60;: The list of allowed aggregations for the metric. Note that it may be different after a [transformation](https://dt-url.net/metricSelector) is applied.  * &#x60;defaultAggregation&#x60;: The default aggregation of the metric. It is used when no aggregation is specified or the &#x60;:auto&#x60; transformation is set.  * &#x60;dimensionDefinitions&#x60;: The fine metric division (for example, process group and process ID for some process-related metric).  * &#x60;transformations&#x60;: A list of [transformations](https://dt-url.net/metricSelector) that can be applied to the metric. * &#x60;entityType&#x60;: A list of entity types supported by the metric. * &#x60;minimumValue&#x60;: The minimum allowed value of the metric. * &#x60;maximumValue&#x60;: The maximum allowed value of the metric. * &#x60;rootCauseRelevant&#x60;: Whether (true or false) the metric is related to a root cause of a problem. A root-cause relevant metric represents a strong indicator for a faulty component. * &#x60;impactRelevant&#x60;: Whether (true or false) the metric is relevant to a problem&#39;s impact. An impact-relevant metric is highly dependent on other metrics and changes because an underlying root-cause metric has changed. * &#x60;metricValueType&#x60;: The type of the metric&#39;s value. You have these options:   * &#x60;score&#x60;: A score metric is a metric where high values indicate a good situation, while low values indicate trouble. An example of such a metric is a success rate.   * &#x60;error&#x60;: An error metric is a metric where high values indicate trouble, while low values indicate a good situation. An example of such a metric is an error count. * &#x60;latency&#x60;: The latency of the metric, in minutes. The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace. The allowed value range is from &#x60;1&#x60; to &#x60;60&#x60; minutes. * &#x60;metricSelector&#x60;: The underlying metric selector used by a func: metric. * &#x60;scalar&#x60;: Indicates whether the metric expression resolves to a scalar (&#x60;true&#x60;) or to a series (&#x60;false&#x60;).  A scalar result always contains one data point. The amount of data points in a series result depends on the resolution you&#39;re using.  * &#x60;resolutionInfSupported&#x60;: If &#x60;true&#x60;, resolution&#x3D;Inf can be applied to the metric query.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+aggregationTypes,-description&#x60;).  If you specify just one property, the response contains the metric key and the specified property. To return metric keys only, specify &#x60;metricId&#x60; here. (optional)
   * @param writtenSince Filters the resulted set of metrics to those that have data points within the specified timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years    (optional)
   * @param metadataSelector The metadata scope of the query. Only metrics with specified properties are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;unit(\&quot;unit-1\&quot;,\&quot;unit-2\&quot;)&#x60;  * &#x60;tags(\&quot;tag-1\&quot;,\&quot;tag-2\&quot;)&#x60;  * &#x60;dimensionKey(\&quot;dimkey-1\&quot;,\&quot;dimkey-2\&quot;)&#x60;. The filtering applies only to dimensions that were written within the last 14 days.  To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;tags(\&quot;feature\&quot;,\&quot;cloud\&quot;),unit(\&quot;Percent\&quot;),dimensionKey(\&quot;location\&quot;)&#x60;. Only results matching **all** criteria are included in response.   For example, to list metrics that have the tags **feature** AND **cloud** with a unit of **Percent** OR **MegaByte** AND a dimension with a dimension key **location**, use this **metadataSelector**: &#x60;tags(\&quot;feature\&quot;),unit(\&quot;Percent\&quot;,\&quot;MegaByte\&quot;),tags(\&quot;cloud\&quot;),dimensionKey(\&quot;location\&quot;)&#x60;. (optional)
   * @return MetricDescriptorCollection
   * @throws ApiException if fails to make API call
   */
  public MetricDescriptorCollection allMetrics(String nextPageKey, Long pageSize, String metricSelector, String text, String fields, String writtenSince, String metadataSelector) throws ApiException {
    ApiResponse<MetricDescriptorCollection> localVarResponse = allMetricsWithHttpInfo(nextPageKey, pageSize, metricSelector, text, fields, writtenSince, metadataSelector);
    return localVarResponse.getData();
  }

  /**
   * Lists all available metrics
   * You can narrow down the output by selecting metrics in the **metricSelector** field.   You can additionally limit the output by using pagination:   1. Specify the number of results per page in the **pageSize** query parameter.   2. Then use the cursor from the **nextPageKey** field of the response in the **nextPageKey** query parameter to obtain subsequent pages. All other query parameters must be omitted.
   * @param nextPageKey The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.   The first page is always returned if you don&#39;t specify the **nextPageKey** query parameter.   When the **nextPageKey** is set to obtain subsequent pages, you must omit all other query parameters.  (optional)
   * @param pageSize The amount of metric schemata in a single response payload.   The maximal allowed page size is 500.   If not set, 100 is used.   If a value higher than 500 is used, only 500 results per page are returned. (optional)
   * @param metricSelector Selects metrics for the query by their keys.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.   You can select a full set of related metrics by using a trailing asterisk (&#x60;*&#x60;) wildcard. For example, &#x60;builtin:host.*&#x60; selects all host-based metrics and &#x60;builtin:*&#x60; selects all Dynatrace-provided metrics.   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax.   Only &#x60;aggregation&#x60;, &#x60;merge&#x60;, &#x60;parents&#x60;, and &#x60;splitBy&#x60; transformations are supported by this endpoint.   If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;      To find metrics based on a search term, rather than metricId, use the **text** query parameter instead of this one. (optional)
   * @param text Metric registry search term. Only show metrics that contain the term in their key, display name, or description. Use the &#x60;metricSelector&#x60; parameter instead of this one to select a complete metric hierarchy instead of doing a text-based search. (optional)
   * @param fields Defines the list of metric properties included in the response.   &#x60;metricId&#x60; is **always** included in the result. The following additional properties are available:   * &#x60;displayName&#x60;: The name of the metric in the user interface. Enabled by default.  * &#x60;description&#x60;: A short description of the metric. Enabled by default.  * &#x60;unit&#x60;: The unit of the metric. Enabled by default.  * &#x60;tags&#x60;: The tags of the metric.  + &#x60;dduBillable&#x60;:  An indicator whether the usage of metric consumes [Davis data units](https://dt-url.net/ddu).  * &#x60;created&#x60;:  The timestamp (UTC milliseconds) when the metrics has been created.  * &#x60;lastWritten&#x60;:  The timestamp (UTC milliseconds) when metric data points have been written for the last time.  * &#x60;aggregationTypes&#x60;: The list of allowed aggregations for the metric. Note that it may be different after a [transformation](https://dt-url.net/metricSelector) is applied.  * &#x60;defaultAggregation&#x60;: The default aggregation of the metric. It is used when no aggregation is specified or the &#x60;:auto&#x60; transformation is set.  * &#x60;dimensionDefinitions&#x60;: The fine metric division (for example, process group and process ID for some process-related metric).  * &#x60;transformations&#x60;: A list of [transformations](https://dt-url.net/metricSelector) that can be applied to the metric. * &#x60;entityType&#x60;: A list of entity types supported by the metric. * &#x60;minimumValue&#x60;: The minimum allowed value of the metric. * &#x60;maximumValue&#x60;: The maximum allowed value of the metric. * &#x60;rootCauseRelevant&#x60;: Whether (true or false) the metric is related to a root cause of a problem. A root-cause relevant metric represents a strong indicator for a faulty component. * &#x60;impactRelevant&#x60;: Whether (true or false) the metric is relevant to a problem&#39;s impact. An impact-relevant metric is highly dependent on other metrics and changes because an underlying root-cause metric has changed. * &#x60;metricValueType&#x60;: The type of the metric&#39;s value. You have these options:   * &#x60;score&#x60;: A score metric is a metric where high values indicate a good situation, while low values indicate trouble. An example of such a metric is a success rate.   * &#x60;error&#x60;: An error metric is a metric where high values indicate trouble, while low values indicate a good situation. An example of such a metric is an error count. * &#x60;latency&#x60;: The latency of the metric, in minutes. The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace. The allowed value range is from &#x60;1&#x60; to &#x60;60&#x60; minutes. * &#x60;metricSelector&#x60;: The underlying metric selector used by a func: metric. * &#x60;scalar&#x60;: Indicates whether the metric expression resolves to a scalar (&#x60;true&#x60;) or to a series (&#x60;false&#x60;).  A scalar result always contains one data point. The amount of data points in a series result depends on the resolution you&#39;re using.  * &#x60;resolutionInfSupported&#x60;: If &#x60;true&#x60;, resolution&#x3D;Inf can be applied to the metric query.   To add properties, list them with leading plus &#x60;+&#x60;. To exclude default properties, list them with leading minus &#x60;-&#x60;.  To specify several properties, join them with a comma (for example &#x60;fields&#x3D;+aggregationTypes,-description&#x60;).  If you specify just one property, the response contains the metric key and the specified property. To return metric keys only, specify &#x60;metricId&#x60; here. (optional)
   * @param writtenSince Filters the resulted set of metrics to those that have data points within the specified timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years    (optional)
   * @param metadataSelector The metadata scope of the query. Only metrics with specified properties are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;unit(\&quot;unit-1\&quot;,\&quot;unit-2\&quot;)&#x60;  * &#x60;tags(\&quot;tag-1\&quot;,\&quot;tag-2\&quot;)&#x60;  * &#x60;dimensionKey(\&quot;dimkey-1\&quot;,\&quot;dimkey-2\&quot;)&#x60;. The filtering applies only to dimensions that were written within the last 14 days.  To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;tags(\&quot;feature\&quot;,\&quot;cloud\&quot;),unit(\&quot;Percent\&quot;),dimensionKey(\&quot;location\&quot;)&#x60;. Only results matching **all** criteria are included in response.   For example, to list metrics that have the tags **feature** AND **cloud** with a unit of **Percent** OR **MegaByte** AND a dimension with a dimension key **location**, use this **metadataSelector**: &#x60;tags(\&quot;feature\&quot;),unit(\&quot;Percent\&quot;,\&quot;MegaByte\&quot;),tags(\&quot;cloud\&quot;),dimensionKey(\&quot;location\&quot;)&#x60;. (optional)
   * @return ApiResponse&lt;MetricDescriptorCollection&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MetricDescriptorCollection> allMetricsWithHttpInfo(String nextPageKey, Long pageSize, String metricSelector, String text, String fields, String writtenSince, String metadataSelector) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = allMetricsRequestBuilder(nextPageKey, pageSize, metricSelector, text, fields, writtenSince, metadataSelector);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("allMetrics", localVarResponse);
        }
        return new ApiResponse<MetricDescriptorCollection>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetricDescriptorCollection>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder allMetricsRequestBuilder(String nextPageKey, Long pageSize, String metricSelector, String text, String fields, String writtenSince, String metadataSelector) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/metrics";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextPageKey", nextPageKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("metricSelector", metricSelector));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("text", text));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("writtenSince", writtenSince));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("metadataSelector", metadataSelector));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8, text/csv; header&#x3D;present; charset&#x3D;utf-8, text/csv; header&#x3D;absent; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes the specified metric
   * Deletion cannot be undone! You can&#39;t delete a metric if it has data points ingested within the last two hours.
   * @param metricKey The key of the required metric.    (required)
   * @throws ApiException if fails to make API call
   */
  public void delete(String metricKey) throws ApiException {
    deleteWithHttpInfo(metricKey);
  }

  /**
   * Deletes the specified metric
   * Deletion cannot be undone! You can&#39;t delete a metric if it has data points ingested within the last two hours.
   * @param metricKey The key of the required metric.    (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteWithHttpInfo(String metricKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRequestBuilder(metricKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("delete", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRequestBuilder(String metricKey) throws ApiException {
    // verify the required parameter 'metricKey' is set
    if (metricKey == null) {
      throw new ApiException(400, "Missing the required parameter 'metricKey' when calling delete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/metrics/{metricKey}"
        .replace("{metricKey}", ApiClient.urlEncode(metricKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Pushes metric data points to Dynatrace
   * 
   * @param body Data points, provided in the [line protocol](https://dt-url.net/5d63ic1). Each line represents a single data point. (required)
   * @throws ApiException if fails to make API call
   */
  public void ingest(String body) throws ApiException {
    ingestWithHttpInfo(body);
  }

  /**
   * Pushes metric data points to Dynatrace
   * 
   * @param body Data points, provided in the [line protocol](https://dt-url.net/5d63ic1). Each line represents a single data point. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> ingestWithHttpInfo(String body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ingestRequestBuilder(body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ingest", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ingestRequestBuilder(String body) throws ApiException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling ingest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/metrics/ingest";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "text/plain; charset&#x3D;utf-8");
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(body));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets the descriptor of the specified metric
   * 
   * @param metricKey The key of the required metric.   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax. (required)
   * @return MetricDescriptor
   * @throws ApiException if fails to make API call
   */
  public MetricDescriptor metric(String metricKey) throws ApiException {
    ApiResponse<MetricDescriptor> localVarResponse = metricWithHttpInfo(metricKey);
    return localVarResponse.getData();
  }

  /**
   * Gets the descriptor of the specified metric
   * 
   * @param metricKey The key of the required metric.   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax. (required)
   * @return ApiResponse&lt;MetricDescriptor&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MetricDescriptor> metricWithHttpInfo(String metricKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = metricRequestBuilder(metricKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("metric", localVarResponse);
        }
        return new ApiResponse<MetricDescriptor>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetricDescriptor>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder metricRequestBuilder(String metricKey) throws ApiException {
    // verify the required parameter 'metricKey' is set
    if (metricKey == null) {
      throw new ApiException(400, "Missing the required parameter 'metricKey' when calling metric");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/metrics/{metricKey}"
        .replace("{metricKey}", ApiClient.urlEncode(metricKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8, text/csv; header&#x3D;present; charset&#x3D;utf-8, text/csv; header&#x3D;absent; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Gets data points of the specified metrics
   * The following limits apply:  * The amount of aggregated data points in the response is limited to 1,000  * The amount of series in the response is limited to 1,000     * The amount of data points per series is limited to 10,080 (minutes of one week)     * The overall amount of data points is limited to 100,000   The **dataPointCountRatio** specifies the ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query. The **dimensionCountRatio** specifies the ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.
   * @param metricSelector Selects metrics for the query by their keys. You can select up to 10 metrics for one query.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.      If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax. (optional)
   * @param resolution The desired resolution of data points.   You can use one of the following options:  * The desired amount of data points. This is the default option. This is a reference number of points, which is not necessarily equal to the number of the returned data points.  * The desired timespan between data points. This is a reference timespan, which is not necessarily equal to the returned timespan. To use this option, specify the unit of the timespan.   Valid units for the timespan are:  * &#x60;m&#x60;: minutes  * &#x60;h&#x60;: hours  * &#x60;d&#x60;: days  * &#x60;w&#x60;: weeks  * &#x60;M&#x60;: months  * &#x60;y&#x60;: years   If not set, the default is **120 data points**.  For example:   * Get data points which are 10 minutes apart: &#x60;resolution&#x3D;10m&#x60;  * Get data points which are 3 weeks apart: &#x60;resolution&#x3D;3w&#x60; (optional)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param entitySelector Specifies the entity scope of the query. Only data points delivered by matched entities are included in response.   You must set one of these criteria:   * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60;  * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). All requested entities must be of the same type.   You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified.   * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive.  * Management zone ID: &#x60;mzId(123)&#x60;  * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60; * Entity name:   * &#x60;entityName.equals&#x60;: performs a non-casesensitive &#x60;EQUALS&#x60; query.   * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.   * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.   * &#x60;caseSensitive(entityName.equals(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive. * Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60; * First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.   The following operators are available:  * &#x60;lte&#x60;: earlier than or at the specified time  * &#x60;lt&#x60;: earlier than the specified time  * &#x60;gte&#x60;: later than or at the specified time  * &#x60;gt&#x60;: later than the specified time * Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **properties** field of the response.  * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **fromRelationships** and **toRelationships** fields. * Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**.   For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation.   To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response.   Supported string length is 2,000 characters.   Use the [&#x60;GET /metrics/{metricId}&#x60;](https://dt-url.net/6z23ifk) call to fetch the list of possible entity types for your metric.   To set a universal scope matching all entities, omit this parameter. (optional)
   * @param mzSelector The management zone scope of the query. Only metrics data relating to the specified management zones are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;mzId(123,456)&#x60;  * &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;)&#x60;  To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;),mzId(1234)&#x60;. Only results matching **all** of the criteria are included in the response.For example, to list metrics that have the id **123** OR **234** AND the name **name-1** OR **name-2**, use this **mzSelector**: &#x60;mzId(123,234),mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;). (optional)
   * @return MetricData
   * @throws ApiException if fails to make API call
   */
  public MetricData query(String metricSelector, String resolution, String from, String to, String entitySelector, String mzSelector) throws ApiException {
    ApiResponse<MetricData> localVarResponse = queryWithHttpInfo(metricSelector, resolution, from, to, entitySelector, mzSelector);
    return localVarResponse.getData();
  }

  /**
   * Gets data points of the specified metrics
   * The following limits apply:  * The amount of aggregated data points in the response is limited to 1,000  * The amount of series in the response is limited to 1,000     * The amount of data points per series is limited to 10,080 (minutes of one week)     * The overall amount of data points is limited to 100,000   The **dataPointCountRatio** specifies the ratio of queried data points divided by the maximum number of data points per metric that are allowed in a single query. The **dimensionCountRatio** specifies the ratio of queried dimension tuples divided by the maximum number of dimension tuples allowed in a single query.
   * @param metricSelector Selects metrics for the query by their keys. You can select up to 10 metrics for one query.   You can specify multiple metric keys separated by commas (for example, &#x60;metrickey1,metrickey2&#x60;). To select multiple metrics belonging to the same parent, list the last part of the required metric keys in parentheses, separated by commas, while keeping the common part untouched. For example, to list the &#x60;builtin:host.cpu.idle&#x60; and &#x60;builtin:host.cpu.user&#x60; metric, write: &#x60;builtin:host.cpu.(idle,user)&#x60;.      If the metric key contains any symbols you must quote (&#x60;\&quot;&#x60;) the key. The following characters inside of a quoted metric key must be escaped with a tilde (&#x60;~&#x60;):  * Quotes (&#x60;\&quot;&#x60;) * Tildes (&#x60;~&#x60;)   For example, to query the metric with the key of **ext:selfmonitoring.jmx.Agents: Type \&quot;APACHE\&quot;** you must specify this selector:    &#x60;\&quot;ext:selfmonitoring.jmx.Agents: Type ~\&quot;APACHE~\&quot;\&quot;&#x60;   You can set additional transformation operators, separated by a colon (&#x60;:&#x60;). See [Metrics selector transformations](https://dt-url.net/metricSelector) in Dynatrace Documentation for additional information on available result transformations and syntax. (optional)
   * @param resolution The desired resolution of data points.   You can use one of the following options:  * The desired amount of data points. This is the default option. This is a reference number of points, which is not necessarily equal to the number of the returned data points.  * The desired timespan between data points. This is a reference timespan, which is not necessarily equal to the returned timespan. To use this option, specify the unit of the timespan.   Valid units for the timespan are:  * &#x60;m&#x60;: minutes  * &#x60;h&#x60;: hours  * &#x60;d&#x60;: days  * &#x60;w&#x60;: weeks  * &#x60;M&#x60;: months  * &#x60;y&#x60;: years   If not set, the default is **120 data points**.  For example:   * Get data points which are 10 minutes apart: &#x60;resolution&#x3D;10m&#x60;  * Get data points which are 3 weeks apart: &#x60;resolution&#x3D;3w&#x60; (optional)
   * @param from The start of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the relative timeframe of two hours is used (&#x60;now-2h&#x60;). (optional)
   * @param to The end of the requested timeframe.   You can use one of the following formats:  * Timestamp in UTC milliseconds.  * Human-readable format of &#x60;2021-01-25T05:57:01.123+01:00&#x60;. If no time zone is specified, UTC is used. You can use a space character instead of the &#x60;T&#x60;. Seconds and fractions of a second are optional.  * Relative timeframe, back from now. The format is &#x60;now-NU/A&#x60;, where &#x60;N&#x60; is the amount of time, &#x60;U&#x60; is the unit of time, and &#x60;A&#x60; is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, &#x60;now-1y/w&#x60; is one year back, aligned by a week.  You can also specify relative timeframe without an alignment: &#x60;now-NU&#x60;.  Supported time units for the relative timeframe are:     * &#x60;m&#x60;: minutes     * &#x60;h&#x60;: hours     * &#x60;d&#x60;: days     * &#x60;w&#x60;: weeks     * &#x60;M&#x60;: months     * &#x60;y&#x60;: years   If not set, the current timestamp is used. (optional)
   * @param entitySelector Specifies the entity scope of the query. Only data points delivered by matched entities are included in response.   You must set one of these criteria:   * Entity type: &#x60;type(\&quot;TYPE\&quot;)&#x60;  * Dynatrace entity ID: &#x60;entityId(\&quot;id\&quot;)&#x60;. You can specify several IDs, separated by a comma (&#x60;entityId(\&quot;id-1\&quot;,\&quot;id-2\&quot;)&#x60;). All requested entities must be of the same type.   You can add one or several of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used unless otherwise specified.   * Tag: &#x60;tag(\&quot;value\&quot;)&#x60;. Tags in &#x60;[context]key:value&#x60;, &#x60;key:value&#x60;, and &#x60;value&#x60; formats are detected and parsed automatically. Any colons (&#x60;:&#x60;) that are part of the key or value must be escaped with a backslash(&#x60;\\&#x60;), otherwise, it will be interpreted as the separator between the key and the value. All tag values are case-sensitive.  * Management zone ID: &#x60;mzId(123)&#x60;  * Management zone name: &#x60;mzName(\&quot;value\&quot;)&#x60; * Entity name:   * &#x60;entityName.equals&#x60;: performs a non-casesensitive &#x60;EQUALS&#x60; query.   * &#x60;entityName.startsWith&#x60;: changes the operator to &#x60;BEGINS WITH&#x60;.   * &#x60;entityName.in&#x60;: enables you to provide multiple values. The &#x60;EQUALS&#x60; operator applies.   * &#x60;caseSensitive(entityName.equals(\&quot;value\&quot;))&#x60;: takes any entity name criterion as an arguments and makes the value case-sensitive. * Health state (HEALTHY,UNHEALTHY): &#x60;healthState(\&quot;HEALTHY\&quot;)&#x60; * First seen timestamp: &#x60;firstSeenTms.&lt;operator&gt;(now-3h)&#x60;. Use any timestamp format from the **from**_/_**to** parameters.   The following operators are available:  * &#x60;lte&#x60;: earlier than or at the specified time  * &#x60;lt&#x60;: earlier than the specified time  * &#x60;gte&#x60;: later than or at the specified time  * &#x60;gt&#x60;: later than the specified time * Entity attribute: &#x60;&lt;attribute&gt;(\&quot;value1\&quot;,\&quot;value2\&quot;)&#x60; and &#x60;&lt;attribute&gt;.exists()&#x60;. To fetch the list of available attributes, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **properties** field of the response.  * Relationships: &#x60;fromRelationships.&lt;relationshipName&gt;()&#x60; and &#x60;toRelationships.&lt;relationshipName&gt;()&#x60;. The criterion takes an entity selector as an attribute. To fetch the list of available relationships, execute the [GET entity type](https://dt-url.net/2ka3ivt) request and check the **fromRelationships** and **toRelationships** fields. * Negation: &#x60;not(&lt;criterion&gt;)&#x60;. Inverts any criterion except for **type**.   For more information, see [Entity selector](https://dt-url.net/apientityselector) in Dynatrace Documentation.   To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;type(\&quot;HOST\&quot;),healthState(\&quot;HEALTHY\&quot;)&#x60;. Only results matching **all** criteria are included in response.   Supported string length is 2,000 characters.   Use the [&#x60;GET /metrics/{metricId}&#x60;](https://dt-url.net/6z23ifk) call to fetch the list of possible entity types for your metric.   To set a universal scope matching all entities, omit this parameter. (optional)
   * @param mzSelector The management zone scope of the query. Only metrics data relating to the specified management zones are included to the response.   You can set one or more of the following criteria. Values are case-sensitive and the &#x60;EQUALS&#x60; operator is used. If several values are specified, the **OR** logic applies.   * &#x60;mzId(123,456)&#x60;  * &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;)&#x60;  To set several criteria, separate them with a comma (&#x60;,&#x60;). For example, &#x60;mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;),mzId(1234)&#x60;. Only results matching **all** of the criteria are included in the response.For example, to list metrics that have the id **123** OR **234** AND the name **name-1** OR **name-2**, use this **mzSelector**: &#x60;mzId(123,234),mzName(\&quot;name-1\&quot;,\&quot;name-2\&quot;). (optional)
   * @return ApiResponse&lt;MetricData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MetricData> queryWithHttpInfo(String metricSelector, String resolution, String from, String to, String entitySelector, String mzSelector) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryRequestBuilder(metricSelector, resolution, from, to, entitySelector, mzSelector);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("query", localVarResponse);
        }
        return new ApiResponse<MetricData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetricData>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryRequestBuilder(String metricSelector, String resolution, String from, String to, String entitySelector, String mzSelector) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/metrics/query";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("metricSelector", metricSelector));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resolution", resolution));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("from", from));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("to", to));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("entitySelector", entitySelector));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mzSelector", mzSelector));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset&#x3D;utf-8, text/csv; header&#x3D;present; charset&#x3D;utf-8, text/csv; header&#x3D;absent; charset&#x3D;utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
